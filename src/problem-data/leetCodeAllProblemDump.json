[
  {
    "title": "Two Sum",
    "problem_id": "1",
    "frontend_id": "1",
    "difficulty": "Easy",
    "problem_slug": "two-sum",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Add Two Numbers",
    "problem_id": "2",
    "frontend_id": "2",
    "difficulty": "Medium",
    "problem_slug": "add-two-numbers",
    "topics": [
      "Linked List",
      "Math",
      "Recursion"
    ],
    "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest Substring Without Repeating Characters",
    "problem_id": "3",
    "frontend_id": "3",
    "difficulty": "Medium",
    "problem_slug": "longest-substring-without-repeating-characters",
    "topics": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "Given a string s, find the length of the longest substring without duplicate characters.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Median of Two Sorted Arrays",
    "problem_id": "4",
    "frontend_id": "4",
    "difficulty": "Hard",
    "problem_slug": "median-of-two-sorted-arrays",
    "topics": [
      "Array",
      "Binary Search",
      "Divide and Conquer"
    ],
    "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\nThe overall run time complexity should be O(log (m+n)).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Palindromic Substring",
    "problem_id": "5",
    "frontend_id": "5",
    "difficulty": "Medium",
    "problem_slug": "longest-palindromic-substring",
    "topics": [
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "description": "Given a string s, return the longest palindromic substring in s.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Zigzag Conversion",
    "problem_id": "6",
    "frontend_id": "6",
    "difficulty": "Medium",
    "problem_slug": "zigzag-conversion",
    "topics": [
      "String"
    ],
    "description": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\nWrite the code that will take a string and make this conversion given a number of rows:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Reverse Integer",
    "problem_id": "7",
    "frontend_id": "7",
    "difficulty": "Medium",
    "problem_slug": "reverse-integer",
    "topics": [
      "Math"
    ],
    "description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "String to Integer (atoi)",
    "problem_id": "8",
    "frontend_id": "8",
    "difficulty": "Medium",
    "problem_slug": "string-to-integer-atoi",
    "topics": [
      "String"
    ],
    "description": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.\nThe algorithm for myAtoi(string s) is as follows:\nReturn the integer as the final result.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nExample 5:\nConstraints:"
  },
  {
    "title": "Palindrome Number",
    "problem_id": "9",
    "frontend_id": "9",
    "difficulty": "Easy",
    "problem_slug": "palindrome-number",
    "topics": [
      "Math"
    ],
    "description": "Given an integer x, return true if x is a palindrome, and false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Regular Expression Matching",
    "problem_id": "10",
    "frontend_id": "10",
    "difficulty": "Hard",
    "problem_slug": "regular-expression-matching",
    "topics": [
      "String",
      "Dynamic Programming",
      "Recursion"
    ],
    "description": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\nThe matching should cover the entire input string (not partial).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Container With Most Water",
    "problem_id": "11",
    "frontend_id": "11",
    "difficulty": "Medium",
    "problem_slug": "container-with-most-water",
    "topics": [
      "Array",
      "Two Pointers",
      "Greedy"
    ],
    "description": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\nReturn the maximum amount of water a container can store.\nNotice that you may not slant the container.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Integer to Roman",
    "problem_id": "12",
    "frontend_id": "12",
    "difficulty": "Medium",
    "problem_slug": "integer-to-roman",
    "topics": [
      "Hash Table",
      "Math",
      "String"
    ],
    "description": "Seven different symbols represent Roman numerals with the following values:\nRoman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:\nGiven an integer, convert it to a Roman numeral.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Roman to Integer",
    "problem_id": "13",
    "frontend_id": "13",
    "difficulty": "Easy",
    "problem_slug": "roman-to-integer",
    "topics": [
      "Hash Table",
      "Math",
      "String"
    ],
    "description": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nFor example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nGiven a roman numeral, convert it to an integer.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest Common Prefix",
    "problem_id": "14",
    "frontend_id": "14",
    "difficulty": "Easy",
    "problem_slug": "longest-common-prefix",
    "topics": [
      "Array",
      "String",
      "Trie"
    ],
    "description": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \"\".\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "3Sum",
    "problem_id": "15",
    "frontend_id": "15",
    "difficulty": "Medium",
    "problem_slug": "3sum",
    "topics": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\nNotice that the solution set must not contain duplicate triplets.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "3Sum Closest",
    "problem_id": "16",
    "frontend_id": "16",
    "difficulty": "Medium",
    "problem_slug": "3sum-closest",
    "topics": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "description": "Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\nReturn the sum of the three integers.\nYou may assume that each input would have exactly one solution.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Letter Combinations of a Phone Number",
    "problem_id": "17",
    "frontend_id": "17",
    "difficulty": "Medium",
    "problem_slug": "letter-combinations-of-a-phone-number",
    "topics": [
      "Hash Table",
      "String",
      "Backtracking"
    ],
    "description": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "4Sum",
    "problem_id": "18",
    "frontend_id": "18",
    "difficulty": "Medium",
    "problem_slug": "4sum",
    "topics": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "description": "Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\nYou may return the answer in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Remove Nth Node From End of List",
    "problem_id": "19",
    "frontend_id": "19",
    "difficulty": "Medium",
    "problem_slug": "remove-nth-node-from-end-of-list",
    "topics": [
      "Linked List",
      "Two Pointers"
    ],
    "description": "Given the head of a linked list, remove the nth node from the end of the list and return its head.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Could you do this in one pass?"
  },
  {
    "title": "Valid Parentheses",
    "problem_id": "20",
    "frontend_id": "20",
    "difficulty": "Easy",
    "problem_slug": "valid-parentheses",
    "topics": [
      "String",
      "Stack"
    ],
    "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nAn input string is valid if:\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nExample 5:\nConstraints:"
  },
  {
    "title": "Merge Two Sorted Lists",
    "problem_id": "21",
    "frontend_id": "21",
    "difficulty": "Easy",
    "problem_slug": "merge-two-sorted-lists",
    "topics": [
      "Linked List",
      "Recursion"
    ],
    "description": "You are given the heads of two sorted linked lists list1 and list2.\nMerge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.\nReturn the head of the merged linked list.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Generate Parentheses",
    "problem_id": "22",
    "frontend_id": "22",
    "difficulty": "Medium",
    "problem_slug": "generate-parentheses",
    "topics": [
      "String",
      "Dynamic Programming",
      "Backtracking"
    ],
    "description": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Merge k Sorted Lists",
    "problem_id": "23",
    "frontend_id": "23",
    "difficulty": "Hard",
    "problem_slug": "merge-k-sorted-lists",
    "topics": [
      "Linked List",
      "Divide and Conquer",
      "Heap (Priority Queue)",
      "Merge Sort"
    ],
    "description": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\nMerge all the linked-lists into one sorted linked-list and return it.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Swap Nodes in Pairs",
    "problem_id": "24",
    "frontend_id": "24",
    "difficulty": "Medium",
    "problem_slug": "swap-nodes-in-pairs",
    "topics": [
      "Linked List",
      "Recursion"
    ],
    "description": "Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Reverse Nodes in k-Group",
    "problem_id": "25",
    "frontend_id": "25",
    "difficulty": "Hard",
    "problem_slug": "reverse-nodes-in-k-group",
    "topics": [
      "Linked List",
      "Recursion"
    ],
    "description": "Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.\nExample 1:\nExample 2:\nConstraints:\nFollow-up: Can you solve the problem in O(1) extra memory space?"
  },
  {
    "title": "Remove Duplicates from Sorted Array",
    "problem_id": "26",
    "frontend_id": "26",
    "difficulty": "Easy",
    "problem_slug": "remove-duplicates-from-sorted-array",
    "topics": [
      "Array",
      "Two Pointers"
    ],
    "description": "Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.\nConsider the number of unique elements of nums to be k, to get accepted, you need to do the following things:\nCustom Judge:\nThe judge will test your solution with the following code:\nIf all assertions pass, then your solution will be accepted.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Remove Element",
    "problem_id": "27",
    "frontend_id": "27",
    "difficulty": "Easy",
    "problem_slug": "remove-element",
    "topics": [
      "Array",
      "Two Pointers"
    ],
    "description": "Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.\nConsider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:\nCustom Judge:\nThe judge will test your solution with the following code:\nIf all assertions pass, then your solution will be accepted.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Index of the First Occurrence in a String",
    "problem_id": "28",
    "frontend_id": "28",
    "difficulty": "Easy",
    "problem_slug": "find-the-index-of-the-first-occurrence-in-a-string",
    "topics": [
      "Two Pointers",
      "String",
      "String Matching"
    ],
    "description": "Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Divide Two Integers",
    "problem_id": "29",
    "frontend_id": "29",
    "difficulty": "Medium",
    "problem_slug": "divide-two-integers",
    "topics": [
      "Math",
      "Bit Manipulation"
    ],
    "description": "Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\nThe integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\nReturn the quotient after dividing dividend by divisor.\nNote: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Substring with Concatenation of All Words",
    "problem_id": "30",
    "frontend_id": "30",
    "difficulty": "Hard",
    "problem_slug": "substring-with-concatenation-of-all-words",
    "topics": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "You are given a string s and an array of strings words. All the strings of words are of the same length.\nA concatenated string is a string that exactly contains all the strings of any permutation of words concatenated.\nReturn an array of the starting indices of all the concatenated substrings in s. You can return the answer in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Next Permutation",
    "problem_id": "31",
    "frontend_id": "31",
    "difficulty": "Medium",
    "problem_slug": "next-permutation",
    "topics": [
      "Array",
      "Two Pointers"
    ],
    "description": "A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\nThe next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\nGiven an array of integers nums, find the next permutation of nums.\nThe replacement must be in place and use only constant extra memory.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest Valid Parentheses",
    "problem_id": "32",
    "frontend_id": "32",
    "difficulty": "Hard",
    "problem_slug": "longest-valid-parentheses",
    "topics": [
      "String",
      "Dynamic Programming",
      "Stack"
    ],
    "description": "Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Search in Rotated Sorted Array",
    "problem_id": "33",
    "frontend_id": "33",
    "difficulty": "Medium",
    "problem_slug": "search-in-rotated-sorted-array",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "There is an integer array nums sorted in ascending order (with distinct values).\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\nYou must write an algorithm with O(log n) runtime complexity.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find First and Last Position of Element in Sorted Array",
    "problem_id": "34",
    "frontend_id": "34",
    "difficulty": "Medium",
    "problem_slug": "find-first-and-last-position-of-element-in-sorted-array",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\nIf target is not found in the array, return [-1, -1].\nYou must write an algorithm with O(log n) runtime complexity.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Search Insert Position",
    "problem_id": "35",
    "frontend_id": "35",
    "difficulty": "Easy",
    "problem_slug": "search-insert-position",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\nYou must write an algorithm with O(log n) runtime complexity.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Valid Sudoku",
    "problem_id": "36",
    "frontend_id": "36",
    "difficulty": "Medium",
    "problem_slug": "valid-sudoku",
    "topics": [
      "Array",
      "Hash Table",
      "Matrix"
    ],
    "description": "Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\nNote:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sudoku Solver",
    "problem_id": "37",
    "frontend_id": "37",
    "difficulty": "Hard",
    "problem_slug": "sudoku-solver",
    "topics": [
      "Array",
      "Hash Table",
      "Backtracking",
      "Matrix"
    ],
    "description": "Write a program to solve a Sudoku puzzle by filling the empty cells.\nA sudoku solution must satisfy all of the following rules:\nThe '.' character indicates empty cells.\nExample 1:\nConstraints:"
  },
  {
    "title": "Count and Say",
    "problem_id": "38",
    "frontend_id": "38",
    "difficulty": "Medium",
    "problem_slug": "count-and-say",
    "topics": [
      "String"
    ],
    "description": "The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\nRun-length encoding (RLE) is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string \"3322251\" we replace \"33\" with \"23\", replace \"222\" with \"32\", replace \"5\" with \"15\" and replace \"1\" with \"11\". Thus the compressed string becomes \"23321511\".\nGiven a positive integer n, return the nth element of the count-and-say sequence.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Combination Sum",
    "problem_id": "39",
    "frontend_id": "39",
    "difficulty": "Medium",
    "problem_slug": "combination-sum",
    "topics": [
      "Array",
      "Backtracking"
    ],
    "description": "Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\nThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\nThe test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Combination Sum II",
    "problem_id": "40",
    "frontend_id": "40",
    "difficulty": "Medium",
    "problem_slug": "combination-sum-ii",
    "topics": [
      "Array",
      "Backtracking"
    ],
    "description": "Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\nEach number in candidates may only be used once in the combination.\nNote: The solution set must not contain duplicate combinations.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "First Missing Positive",
    "problem_id": "41",
    "frontend_id": "41",
    "difficulty": "Hard",
    "problem_slug": "first-missing-positive",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums.\nYou must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Trapping Rain Water",
    "problem_id": "42",
    "frontend_id": "42",
    "difficulty": "Hard",
    "problem_slug": "trapping-rain-water",
    "topics": [
      "Array",
      "Two Pointers",
      "Dynamic Programming",
      "Stack",
      "Monotonic Stack"
    ],
    "description": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Multiply Strings",
    "problem_id": "43",
    "frontend_id": "43",
    "difficulty": "Medium",
    "problem_slug": "multiply-strings",
    "topics": [
      "Math",
      "String",
      "Simulation"
    ],
    "description": "Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\nNote: You must not use any built-in BigInteger library or convert the inputs to integer directly.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Wildcard Matching",
    "problem_id": "44",
    "frontend_id": "44",
    "difficulty": "Hard",
    "problem_slug": "wildcard-matching",
    "topics": [
      "String",
      "Dynamic Programming",
      "Greedy",
      "Recursion"
    ],
    "description": "Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\nThe matching should cover the entire input string (not partial).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Jump Game II",
    "problem_id": "45",
    "frontend_id": "45",
    "difficulty": "Medium",
    "problem_slug": "jump-game-ii",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\nEach element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:\nReturn the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Permutations",
    "problem_id": "46",
    "frontend_id": "46",
    "difficulty": "Medium",
    "problem_slug": "permutations",
    "topics": [
      "Array",
      "Backtracking"
    ],
    "description": "Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Permutations II",
    "problem_id": "47",
    "frontend_id": "47",
    "difficulty": "Medium",
    "problem_slug": "permutations-ii",
    "topics": [
      "Array",
      "Backtracking",
      "Sorting"
    ],
    "description": "Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Rotate Image",
    "problem_id": "48",
    "frontend_id": "48",
    "difficulty": "Medium",
    "problem_slug": "rotate-image",
    "topics": [
      "Array",
      "Math",
      "Matrix"
    ],
    "description": "You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Group Anagrams",
    "problem_id": "49",
    "frontend_id": "49",
    "difficulty": "Medium",
    "problem_slug": "group-anagrams",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Sorting"
    ],
    "description": "Given an array of strings strs, group the anagrams together. You can return the answer in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Pow(x, n)",
    "problem_id": "50",
    "frontend_id": "50",
    "difficulty": "Medium",
    "problem_slug": "powx-n",
    "topics": [
      "Math",
      "Recursion"
    ],
    "description": "Implement pow(x, n), which calculates x raised to the power n (i.e., xn).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "N-Queens",
    "problem_id": "51",
    "frontend_id": "51",
    "difficulty": "Hard",
    "problem_slug": "n-queens",
    "topics": [
      "Array",
      "Backtracking"
    ],
    "description": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "N-Queens II",
    "problem_id": "52",
    "frontend_id": "52",
    "difficulty": "Hard",
    "problem_slug": "n-queens-ii",
    "topics": [
      "Backtracking"
    ],
    "description": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return the number of distinct solutions to the n-queens puzzle.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Subarray",
    "problem_id": "53",
    "frontend_id": "53",
    "difficulty": "Medium",
    "problem_slug": "maximum-subarray",
    "topics": [
      "Array",
      "Divide and Conquer",
      "Dynamic Programming"
    ],
    "description": "Given an integer array nums, find the subarray with the largest sum, and return its sum.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle."
  },
  {
    "title": "Spiral Matrix",
    "problem_id": "54",
    "frontend_id": "54",
    "difficulty": "Medium",
    "problem_slug": "spiral-matrix",
    "topics": [
      "Array",
      "Matrix",
      "Simulation"
    ],
    "description": "Given an m x n matrix, return all elements of the matrix in spiral order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Jump Game",
    "problem_id": "55",
    "frontend_id": "55",
    "difficulty": "Medium",
    "problem_slug": "jump-game",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\nReturn true if you can reach the last index, or false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Merge Intervals",
    "problem_id": "56",
    "frontend_id": "56",
    "difficulty": "Medium",
    "problem_slug": "merge-intervals",
    "topics": [
      "Array",
      "Sorting"
    ],
    "description": "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Insert Interval",
    "problem_id": "57",
    "frontend_id": "57",
    "difficulty": "Medium",
    "problem_slug": "insert-interval",
    "topics": [
      "Array"
    ],
    "description": "You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\nInsert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\nReturn intervals after the insertion.\nNote that you don't need to modify intervals in-place. You can make a new array and return it.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Length of Last Word",
    "problem_id": "58",
    "frontend_id": "58",
    "difficulty": "Easy",
    "problem_slug": "length-of-last-word",
    "topics": [
      "String"
    ],
    "description": "Given a string s consisting of words and spaces, return the length of the last word in the string.\nA word is a maximal substring consisting of non-space characters only.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Spiral Matrix II",
    "problem_id": "59",
    "frontend_id": "59",
    "difficulty": "Medium",
    "problem_slug": "spiral-matrix-ii",
    "topics": [
      "Array",
      "Matrix",
      "Simulation"
    ],
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Permutation Sequence",
    "problem_id": "60",
    "frontend_id": "60",
    "difficulty": "Hard",
    "problem_slug": "permutation-sequence",
    "topics": [
      "Math",
      "Recursion"
    ],
    "description": "The set [1, 2, 3, ..., n] contains a total of n! unique permutations.\nBy listing and labeling all of the permutations in order, we get the following sequence for n = 3:\nGiven n and k, return the kth permutation sequence.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Rotate List",
    "problem_id": "61",
    "frontend_id": "61",
    "difficulty": "Medium",
    "problem_slug": "rotate-list",
    "topics": [
      "Linked List",
      "Two Pointers"
    ],
    "description": "Given the head of a linked list, rotate the list to the right by k places.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Unique Paths",
    "problem_id": "62",
    "frontend_id": "62",
    "difficulty": "Medium",
    "problem_slug": "unique-paths",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "description": "There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\nGiven the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\nThe test cases are generated so that the answer will be less than or equal to 2 * 109.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Unique Paths II",
    "problem_id": "63",
    "frontend_id": "63",
    "difficulty": "Medium",
    "problem_slug": "unique-paths-ii",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\nAn obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.\nReturn the number of possible unique paths that the robot can take to reach the bottom-right corner.\nThe testcases are generated so that the answer will be less than or equal to 2 * 109.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Path Sum",
    "problem_id": "64",
    "frontend_id": "64",
    "difficulty": "Medium",
    "problem_slug": "minimum-path-sum",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\nNote: You can only move either down or right at any point in time.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Valid Number",
    "problem_id": "65",
    "frontend_id": "65",
    "difficulty": "Hard",
    "problem_slug": "valid-number",
    "topics": [
      "String"
    ],
    "description": "Given a string s, return whether s is a valid number.\n\nFor example, all the following are valid numbers: \"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\", while the following are not valid numbers: \"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\".\nFormally, a valid number is defined using one of the following definitions:\nAn integer number is defined with an optional sign '-' or '+' followed by digits.\nA decimal number is defined with an optional sign '-' or '+' followed by one of the following definitions:\nAn exponent is defined with an exponent notation 'e' or 'E' followed by an integer number.\nThe digits are defined as one or more digits.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Plus One",
    "problem_id": "66",
    "frontend_id": "66",
    "difficulty": "Easy",
    "problem_slug": "plus-one",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\nIncrement the large integer by one and return the resulting array of digits.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Add Binary",
    "problem_id": "67",
    "frontend_id": "67",
    "difficulty": "Easy",
    "problem_slug": "add-binary",
    "topics": [
      "Math",
      "String",
      "Bit Manipulation",
      "Simulation"
    ],
    "description": "Given two binary strings a and b, return their sum as a binary string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Text Justification",
    "problem_id": "68",
    "frontend_id": "68",
    "difficulty": "Hard",
    "problem_slug": "text-justification",
    "topics": [
      "Array",
      "String",
      "Simulation"
    ],
    "description": "Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters.\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\nFor the last line of text, it should be left-justified, and no extra space is inserted between words.\nNote:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sqrt(x)",
    "problem_id": "69",
    "frontend_id": "69",
    "difficulty": "Easy",
    "problem_slug": "sqrtx",
    "topics": [
      "Math",
      "Binary Search"
    ],
    "description": "Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.\nYou must not use any built-in exponent function or operator.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Climbing Stairs",
    "problem_id": "70",
    "frontend_id": "70",
    "difficulty": "Easy",
    "problem_slug": "climbing-stairs",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Memoization"
    ],
    "description": "You are climbing a staircase. It takes n steps to reach the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Simplify Path",
    "problem_id": "71",
    "frontend_id": "71",
    "difficulty": "Medium",
    "problem_slug": "simplify-path",
    "topics": [
      "String",
      "Stack"
    ],
    "description": "You are given an absolute path for a Unix-style file system, which always begins with a slash '/'. Your task is to transform this absolute path into its simplified canonical path.\nThe rules of a Unix-style file system are as follows:\nThe simplified canonical path should follow these rules:\nReturn the simplified canonical path.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nExample 5:\nConstraints:"
  },
  {
    "title": "Edit Distance",
    "problem_id": "72",
    "frontend_id": "72",
    "difficulty": "Medium",
    "problem_slug": "edit-distance",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\nYou have the following three operations permitted on a word:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Set Matrix Zeroes",
    "problem_id": "73",
    "frontend_id": "73",
    "difficulty": "Medium",
    "problem_slug": "set-matrix-zeroes",
    "topics": [
      "Array",
      "Hash Table",
      "Matrix"
    ],
    "description": "Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.\nYou must do it in place.\nExample 1:\nExample 2:\nConstraints:\nFollow up:"
  },
  {
    "title": "Search a 2D Matrix",
    "problem_id": "74",
    "frontend_id": "74",
    "difficulty": "Medium",
    "problem_slug": "search-a-2d-matrix",
    "topics": [
      "Array",
      "Binary Search",
      "Matrix"
    ],
    "description": "You are given an m x n integer matrix matrix with the following two properties:\nGiven an integer target, return true if target is in matrix or false otherwise.\nYou must write a solution in O(log(m * n)) time complexity.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sort Colors",
    "problem_id": "75",
    "frontend_id": "75",
    "difficulty": "Medium",
    "problem_slug": "sort-colors",
    "topics": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "description": "Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\nWe will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\nYou must solve this problem without using the library's sort function.\nExample 1:\nExample 2:\nConstraints:\nFollow up: Could you come up with a one-pass algorithm using only constant extra space?"
  },
  {
    "title": "Minimum Window Substring",
    "problem_id": "76",
    "frontend_id": "76",
    "difficulty": "Hard",
    "problem_slug": "minimum-window-substring",
    "topics": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\nThe testcases will be generated such that the answer is unique.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Could you find an algorithm that runs in O(m + n) time?"
  },
  {
    "title": "Combinations",
    "problem_id": "77",
    "frontend_id": "77",
    "difficulty": "Medium",
    "problem_slug": "combinations",
    "topics": [
      "Backtracking"
    ],
    "description": "Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].\nYou may return the answer in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Subsets",
    "problem_id": "78",
    "frontend_id": "78",
    "difficulty": "Medium",
    "problem_slug": "subsets",
    "topics": [
      "Array",
      "Backtracking",
      "Bit Manipulation"
    ],
    "description": "Given an integer array nums of unique elements, return all possible subsets (the power set).\nThe solution set must not contain duplicate subsets. Return the solution in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Word Search",
    "problem_id": "79",
    "frontend_id": "79",
    "difficulty": "Medium",
    "problem_slug": "word-search",
    "topics": [
      "Array",
      "String",
      "Backtracking",
      "Depth-First Search",
      "Matrix"
    ],
    "description": "Given an m x n grid of characters board and a string word, return true if word exists in the grid.\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Could you use search pruning to make your solution faster with a larger board?"
  },
  {
    "title": "Remove Duplicates from Sorted Array II",
    "problem_id": "80",
    "frontend_id": "80",
    "difficulty": "Medium",
    "problem_slug": "remove-duplicates-from-sorted-array-ii",
    "topics": [
      "Array",
      "Two Pointers"
    ],
    "description": "Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\nReturn k after placing the final result in the first k slots of nums.\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\nCustom Judge:\nThe judge will test your solution with the following code:\nIf all assertions pass, then your solution will be accepted.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Search in Rotated Sorted Array II",
    "problem_id": "81",
    "frontend_id": "81",
    "difficulty": "Medium",
    "problem_slug": "search-in-rotated-sorted-array-ii",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).\nBefore being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].\nGiven the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.\nYou must decrease the overall operation steps as much as possible.\nExample 1:\nExample 2:\nConstraints:\nFollow up: This problem is similar to Search in Rotated Sorted Array, but nums may contain duplicates. Would this affect the runtime complexity? How and why?"
  },
  {
    "title": "Remove Duplicates from Sorted List II",
    "problem_id": "82",
    "frontend_id": "82",
    "difficulty": "Medium",
    "problem_slug": "remove-duplicates-from-sorted-list-ii",
    "topics": [
      "Linked List",
      "Two Pointers"
    ],
    "description": "Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Remove Duplicates from Sorted List",
    "problem_id": "83",
    "frontend_id": "83",
    "difficulty": "Easy",
    "problem_slug": "remove-duplicates-from-sorted-list",
    "topics": [
      "Linked List"
    ],
    "description": "Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Largest Rectangle in Histogram",
    "problem_id": "84",
    "frontend_id": "84",
    "difficulty": "Hard",
    "problem_slug": "largest-rectangle-in-histogram",
    "topics": [
      "Array",
      "Stack",
      "Monotonic Stack"
    ],
    "description": "Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximal Rectangle",
    "problem_id": "85",
    "frontend_id": "85",
    "difficulty": "Hard",
    "problem_slug": "maximal-rectangle",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Matrix",
      "Monotonic Stack"
    ],
    "description": "Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Partition List",
    "problem_id": "86",
    "frontend_id": "86",
    "difficulty": "Medium",
    "problem_slug": "partition-list",
    "topics": [
      "Linked List",
      "Two Pointers"
    ],
    "description": "Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\nYou should preserve the original relative order of the nodes in each of the two partitions.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Scramble String",
    "problem_id": "87",
    "frontend_id": "87",
    "difficulty": "Hard",
    "problem_slug": "scramble-string",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "We can scramble a string s to get a string t using the following algorithm:\nGiven two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Merge Sorted Array",
    "problem_id": "88",
    "frontend_id": "88",
    "difficulty": "Easy",
    "problem_slug": "merge-sorted-array",
    "topics": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "description": "You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\nMerge nums1 and nums2 into a single array sorted in non-decreasing order.\nThe final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Can you come up with an algorithm that runs in O(m + n) time?"
  },
  {
    "title": "Gray Code",
    "problem_id": "89",
    "frontend_id": "89",
    "difficulty": "Medium",
    "problem_slug": "gray-code",
    "topics": [
      "Math",
      "Backtracking",
      "Bit Manipulation"
    ],
    "description": "An n-bit gray code sequence is a sequence of 2n integers where:\nGiven an integer n, return any valid n-bit gray code sequence.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Subsets II",
    "problem_id": "90",
    "frontend_id": "90",
    "difficulty": "Medium",
    "problem_slug": "subsets-ii",
    "topics": [
      "Array",
      "Backtracking",
      "Bit Manipulation"
    ],
    "description": "Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\nThe solution set must not contain duplicate subsets. Return the solution in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Decode Ways",
    "problem_id": "91",
    "frontend_id": "91",
    "difficulty": "Medium",
    "problem_slug": "decode-ways",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "You have intercepted a secret message encoded as a string of numbers. The message is decoded via the following mapping:\n\"1\" -> 'A'\n\"2\" -> 'B'\n...\n\"25\" -> 'Y'\n\"26\" -> 'Z'\nHowever, while decoding the message, you realize that there are many different ways you can decode the message because some codes are contained in other codes (\"2\" and \"5\" vs \"25\").\nFor example, \"11106\" can be decoded into:\nNote: there may be strings that are impossible to decode.\n\nGiven a string s containing only digits, return the number of ways to decode it. If the entire string cannot be decoded in any valid way, return 0.\nThe test cases are generated so that the answer fits in a 32-bit integer.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Reverse Linked List II",
    "problem_id": "92",
    "frontend_id": "92",
    "difficulty": "Medium",
    "problem_slug": "reverse-linked-list-ii",
    "topics": [
      "Linked List"
    ],
    "description": "Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Restore IP Addresses",
    "problem_id": "93",
    "frontend_id": "93",
    "difficulty": "Medium",
    "problem_slug": "restore-ip-addresses",
    "topics": [
      "String",
      "Backtracking"
    ],
    "description": "A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.\nGiven a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Binary Tree Inorder Traversal",
    "problem_id": "94",
    "frontend_id": "94",
    "difficulty": "Easy",
    "problem_slug": "binary-tree-inorder-traversal",
    "topics": [
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the inorder traversal of its nodes' values.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Unique Binary Search Trees II",
    "problem_id": "95",
    "frontend_id": "95",
    "difficulty": "Medium",
    "problem_slug": "unique-binary-search-trees-ii",
    "topics": [
      "Dynamic Programming",
      "Backtracking",
      "Tree",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Unique Binary Search Trees",
    "problem_id": "96",
    "frontend_id": "96",
    "difficulty": "Medium",
    "problem_slug": "unique-binary-search-trees",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Tree",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Interleaving String",
    "problem_id": "97",
    "frontend_id": "97",
    "difficulty": "Medium",
    "problem_slug": "interleaving-string",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\nAn interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:\nNote: a + b is the concatenation of strings a and b.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Could you solve it using only O(s2.length) additional memory space?"
  },
  {
    "title": "Validate Binary Search Tree",
    "problem_id": "98",
    "frontend_id": "98",
    "difficulty": "Medium",
    "problem_slug": "validate-binary-search-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, determine if it is a valid binary search tree (BST).\nA valid BST is defined as follows:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Recover Binary Search Tree",
    "problem_id": "99",
    "frontend_id": "99",
    "difficulty": "Medium",
    "problem_slug": "recover-binary-search-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Same Tree",
    "problem_id": "100",
    "frontend_id": "100",
    "difficulty": "Easy",
    "problem_slug": "same-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the roots of two binary trees p and q, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Symmetric Tree",
    "problem_id": "101",
    "frontend_id": "101",
    "difficulty": "Easy",
    "problem_slug": "symmetric-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Binary Tree Level Order Traversal",
    "problem_id": "102",
    "frontend_id": "102",
    "difficulty": "Medium",
    "problem_slug": "binary-tree-level-order-traversal",
    "topics": [
      "Tree",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Binary Tree Zigzag Level Order Traversal",
    "problem_id": "103",
    "frontend_id": "103",
    "difficulty": "Medium",
    "problem_slug": "binary-tree-zigzag-level-order-traversal",
    "topics": [
      "Tree",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Depth of Binary Tree",
    "problem_id": "104",
    "frontend_id": "104",
    "difficulty": "Easy",
    "problem_slug": "maximum-depth-of-binary-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return its maximum depth.\nA binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Construct Binary Tree from Preorder and Inorder Traversal",
    "problem_id": "105",
    "frontend_id": "105",
    "difficulty": "Medium",
    "problem_slug": "construct-binary-tree-from-preorder-and-inorder-traversal",
    "topics": [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Tree",
      "Binary Tree"
    ],
    "description": "Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Construct Binary Tree from Inorder and Postorder Traversal",
    "problem_id": "106",
    "frontend_id": "106",
    "difficulty": "Medium",
    "problem_slug": "construct-binary-tree-from-inorder-and-postorder-traversal",
    "topics": [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Tree",
      "Binary Tree"
    ],
    "description": "Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Binary Tree Level Order Traversal II",
    "problem_id": "107",
    "frontend_id": "107",
    "difficulty": "Medium",
    "problem_slug": "binary-tree-level-order-traversal-ii",
    "topics": [
      "Tree",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Convert Sorted Array to Binary Search Tree",
    "problem_id": "108",
    "frontend_id": "108",
    "difficulty": "Easy",
    "problem_slug": "convert-sorted-array-to-binary-search-tree",
    "topics": [
      "Array",
      "Divide and Conquer",
      "Tree",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Convert Sorted List to Binary Search Tree",
    "problem_id": "109",
    "frontend_id": "109",
    "difficulty": "Medium",
    "problem_slug": "convert-sorted-list-to-binary-search-tree",
    "topics": [
      "Linked List",
      "Divide and Conquer",
      "Tree",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Balanced Binary Tree",
    "problem_id": "110",
    "frontend_id": "110",
    "difficulty": "Easy",
    "problem_slug": "balanced-binary-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given a binary tree, determine if it is height-balanced.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Depth of Binary Tree",
    "problem_id": "111",
    "frontend_id": "111",
    "difficulty": "Easy",
    "problem_slug": "minimum-depth-of-binary-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given a binary tree, find its minimum depth.\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\nNote: A leaf is a node with no children.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Path Sum",
    "problem_id": "112",
    "frontend_id": "112",
    "difficulty": "Easy",
    "problem_slug": "path-sum",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\nA leaf is a node with no children.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Path Sum II",
    "problem_id": "113",
    "frontend_id": "113",
    "difficulty": "Medium",
    "problem_slug": "path-sum-ii",
    "topics": [
      "Backtracking",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.\nA root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Flatten Binary Tree to Linked List",
    "problem_id": "114",
    "frontend_id": "114",
    "difficulty": "Medium",
    "problem_slug": "flatten-binary-tree-to-linked-list",
    "topics": [
      "Linked List",
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, flatten the tree into a \"linked list\":\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Distinct Subsequences",
    "problem_id": "115",
    "frontend_id": "115",
    "difficulty": "Hard",
    "problem_slug": "distinct-subsequences",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "Given two strings s and t, return the number of distinct subsequences of s which equals t.\nThe test cases are generated so that the answer fits on a 32-bit signed integer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Populating Next Right Pointers in Each Node",
    "problem_id": "116",
    "frontend_id": "116",
    "difficulty": "Medium",
    "problem_slug": "populating-next-right-pointers-in-each-node",
    "topics": [
      "Linked List",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\nInitially, all next pointers are set to NULL.\nExample 1:\nExample 2:\nConstraints:\nFollow-up:"
  },
  {
    "title": "Populating Next Right Pointers in Each Node II",
    "problem_id": "117",
    "frontend_id": "117",
    "difficulty": "Medium",
    "problem_slug": "populating-next-right-pointers-in-each-node-ii",
    "topics": [
      "Linked List",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given a binary tree\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\nInitially, all next pointers are set to NULL.\nExample 1:\nExample 2:\nConstraints:\nFollow-up:"
  },
  {
    "title": "Pascal's Triangle",
    "problem_id": "118",
    "frontend_id": "118",
    "difficulty": "Easy",
    "problem_slug": "pascals-triangle",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "Given an integer numRows, return the first numRows of Pascal's triangle.\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Pascal's Triangle II",
    "problem_id": "119",
    "frontend_id": "119",
    "difficulty": "Easy",
    "problem_slug": "pascals-triangle-ii",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Could you optimize your algorithm to use only O(rowIndex) extra space?"
  },
  {
    "title": "Triangle",
    "problem_id": "120",
    "frontend_id": "120",
    "difficulty": "Medium",
    "problem_slug": "triangle",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "Given a triangle array, return the minimum path sum from top to bottom.\nFor each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Best Time to Buy and Sell Stock",
    "problem_id": "121",
    "frontend_id": "121",
    "difficulty": "Easy",
    "problem_slug": "best-time-to-buy-and-sell-stock",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Best Time to Buy and Sell Stock II",
    "problem_id": "122",
    "frontend_id": "122",
    "difficulty": "Medium",
    "problem_slug": "best-time-to-buy-and-sell-stock-ii",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "You are given an integer array prices where prices[i] is the price of a given stock on the ith day.\nOn each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\nFind and return the maximum profit you can achieve.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Best Time to Buy and Sell Stock III",
    "problem_id": "123",
    "frontend_id": "123",
    "difficulty": "Hard",
    "problem_slug": "best-time-to-buy-and-sell-stock-iii",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\nFind the maximum profit you can achieve. You may complete at most two transactions.\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Binary Tree Maximum Path Sum",
    "problem_id": "124",
    "frontend_id": "124",
    "difficulty": "Hard",
    "problem_slug": "binary-tree-maximum-path-sum",
    "topics": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\nThe path sum of a path is the sum of the node's values in the path.\nGiven the root of a binary tree, return the maximum path sum of any non-empty path.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Valid Palindrome",
    "problem_id": "125",
    "frontend_id": "125",
    "difficulty": "Easy",
    "problem_slug": "valid-palindrome",
    "topics": [
      "Two Pointers",
      "String"
    ],
    "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\nGiven a string s, return true if it is a palindrome, or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Word Ladder II",
    "problem_id": "126",
    "frontend_id": "126",
    "difficulty": "Hard",
    "problem_slug": "word-ladder-ii",
    "topics": [
      "Hash Table",
      "String",
      "Backtracking",
      "Breadth-First Search"
    ],
    "description": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\nGiven two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Word Ladder",
    "problem_id": "127",
    "frontend_id": "127",
    "difficulty": "Hard",
    "problem_slug": "word-ladder",
    "topics": [
      "Hash Table",
      "String",
      "Breadth-First Search"
    ],
    "description": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\nGiven two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Consecutive Sequence",
    "problem_id": "128",
    "frontend_id": "128",
    "difficulty": "Medium",
    "problem_slug": "longest-consecutive-sequence",
    "topics": [
      "Array",
      "Hash Table",
      "Union Find"
    ],
    "description": "Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\nYou must write an algorithm that runs in O(n) time.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sum Root to Leaf Numbers",
    "problem_id": "129",
    "frontend_id": "129",
    "difficulty": "Medium",
    "problem_slug": "sum-root-to-leaf-numbers",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "You are given the root of a binary tree containing digits from 0 to 9 only.\nEach root-to-leaf path in the tree represents a number.\nReturn the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.\nA leaf node is a node with no children.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Surrounded Regions",
    "problem_id": "130",
    "frontend_id": "130",
    "difficulty": "Medium",
    "problem_slug": "surrounded-regions",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix"
    ],
    "description": "You are given an m x n matrix board containing letters 'X' and 'O', capture regions that are surrounded:\nTo capture a surrounded region, replace all 'O's with 'X's in-place within the original board. You do not need to return anything.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Palindrome Partitioning",
    "problem_id": "131",
    "frontend_id": "131",
    "difficulty": "Medium",
    "problem_slug": "palindrome-partitioning",
    "topics": [
      "String",
      "Dynamic Programming",
      "Backtracking"
    ],
    "description": "Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Palindrome Partitioning II",
    "problem_id": "132",
    "frontend_id": "132",
    "difficulty": "Hard",
    "problem_slug": "palindrome-partitioning-ii",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "Given a string s, partition s such that every substring of the partition is a palindrome.\nReturn the minimum cuts needed for a palindrome partitioning of s.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Clone Graph",
    "problem_id": "133",
    "frontend_id": "133",
    "difficulty": "Medium",
    "problem_slug": "clone-graph",
    "topics": [
      "Hash Table",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph"
    ],
    "description": "Given a reference of a node in a connected undirected graph.\nReturn a deep copy (clone) of the graph.\nEach node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\nTest case format:\nFor simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.\nAn adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\nThe given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Gas Station",
    "problem_id": "134",
    "frontend_id": "134",
    "difficulty": "Medium",
    "problem_slug": "gas-station",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].\nYou have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.\nGiven two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Candy",
    "problem_id": "135",
    "frontend_id": "135",
    "difficulty": "Hard",
    "problem_slug": "candy",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\nYou are giving candies to these children subjected to the following requirements:\nReturn the minimum number of candies you need to have to distribute the candies to the children.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Single Number",
    "problem_id": "136",
    "frontend_id": "136",
    "difficulty": "Easy",
    "problem_slug": "single-number",
    "topics": [
      "Array",
      "Bit Manipulation"
    ],
    "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.\nYou must implement a solution with a linear runtime complexity and use only constant extra space.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Single Number II",
    "problem_id": "137",
    "frontend_id": "137",
    "difficulty": "Medium",
    "problem_slug": "single-number-ii",
    "topics": [
      "Array",
      "Bit Manipulation"
    ],
    "description": "Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.\nYou must implement a solution with a linear runtime complexity and use only constant extra space.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Copy List with Random Pointer",
    "problem_id": "138",
    "frontend_id": "138",
    "difficulty": "Medium",
    "problem_slug": "copy-list-with-random-pointer",
    "topics": [
      "Hash Table",
      "Linked List"
    ],
    "description": "A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\nConstruct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\nFor example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.\nReturn the head of the copied linked list.\nThe linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:\nYour code will only be given the head of the original linked list.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Word Break",
    "problem_id": "139",
    "frontend_id": "139",
    "difficulty": "Medium",
    "problem_slug": "word-break",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Trie",
      "Memoization"
    ],
    "description": "Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Word Break II",
    "problem_id": "140",
    "frontend_id": "140",
    "difficulty": "Hard",
    "problem_slug": "word-break-ii",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Backtracking",
      "Trie",
      "Memoization"
    ],
    "description": "Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Linked List Cycle",
    "problem_id": "141",
    "frontend_id": "141",
    "difficulty": "Easy",
    "problem_slug": "linked-list-cycle",
    "topics": [
      "Hash Table",
      "Linked List",
      "Two Pointers"
    ],
    "description": "Given head, the head of a linked list, determine if the linked list has a cycle in it.\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\nReturn true if there is a cycle in the linked list. Otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Can you solve it using O(1) (i.e. constant) memory?"
  },
  {
    "title": "Linked List Cycle II",
    "problem_id": "142",
    "frontend_id": "142",
    "difficulty": "Medium",
    "problem_slug": "linked-list-cycle-ii",
    "topics": [
      "Hash Table",
      "Linked List",
      "Two Pointers"
    ],
    "description": "Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.\nDo not modify the linked list.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Can you solve it using O(1) (i.e. constant) memory?"
  },
  {
    "title": "Reorder List",
    "problem_id": "143",
    "frontend_id": "143",
    "difficulty": "Medium",
    "problem_slug": "reorder-list",
    "topics": [
      "Linked List",
      "Two Pointers",
      "Stack",
      "Recursion"
    ],
    "description": "You are given the head of a singly linked-list. The list can be represented as:\nReorder the list to be on the following form:\nYou may not modify the values in the list's nodes. Only nodes themselves may be changed.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Binary Tree Preorder Traversal",
    "problem_id": "144",
    "frontend_id": "144",
    "difficulty": "Easy",
    "problem_slug": "binary-tree-preorder-traversal",
    "topics": [
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the preorder traversal of its nodes' values.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:\nFollow up: Recursive solution is trivial, could you do it iteratively?"
  },
  {
    "title": "Binary Tree Postorder Traversal",
    "problem_id": "145",
    "frontend_id": "145",
    "difficulty": "Easy",
    "problem_slug": "binary-tree-postorder-traversal",
    "topics": [
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the postorder traversal of its nodes' values.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "LRU Cache",
    "problem_id": "146",
    "frontend_id": "146",
    "difficulty": "Medium",
    "problem_slug": "lru-cache",
    "topics": [
      "Hash Table",
      "Linked List",
      "Design",
      "Doubly-Linked List"
    ],
    "description": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\nImplement the LRUCache class:\nThe functions get and put must each run in O(1) average time complexity.\nExample 1:\nConstraints:"
  },
  {
    "title": "Insertion Sort List",
    "problem_id": "147",
    "frontend_id": "147",
    "difficulty": "Medium",
    "problem_slug": "insertion-sort-list",
    "topics": [
      "Linked List",
      "Sorting"
    ],
    "description": "Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.\nThe steps of the insertion sort algorithm:\nThe following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sort List",
    "problem_id": "148",
    "frontend_id": "148",
    "difficulty": "Medium",
    "problem_slug": "sort-list",
    "topics": [
      "Linked List",
      "Two Pointers",
      "Divide and Conquer",
      "Sorting",
      "Merge Sort"
    ],
    "description": "Given the head of a linked list, return the list after sorting it in ascending order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?"
  },
  {
    "title": "Max Points on a Line",
    "problem_id": "149",
    "frontend_id": "149",
    "difficulty": "Hard",
    "problem_slug": "max-points-on-a-line",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Geometry"
    ],
    "description": "Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Evaluate Reverse Polish Notation",
    "problem_id": "150",
    "frontend_id": "150",
    "difficulty": "Medium",
    "problem_slug": "evaluate-reverse-polish-notation",
    "topics": [
      "Array",
      "Math",
      "Stack"
    ],
    "description": "You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.\nEvaluate the expression. Return an integer that represents the value of the expression.\nNote that:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Reverse Words in a String",
    "problem_id": "151",
    "frontend_id": "151",
    "difficulty": "Medium",
    "problem_slug": "reverse-words-in-a-string",
    "topics": [
      "Two Pointers",
      "String"
    ],
    "description": "Given an input string s, reverse the order of the words.\nA word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\nReturn a string of the words in reverse order concatenated by a single space.\nNote that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow-up: If the string data type is mutable in your language, can you solve it in-place with O(1) extra space?"
  },
  {
    "title": "Maximum Product Subarray",
    "problem_id": "152",
    "frontend_id": "152",
    "difficulty": "Medium",
    "problem_slug": "maximum-product-subarray",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "Given an integer array nums, find a subarray that has the largest product, and return the product.\nThe test cases are generated so that the answer will fit in a 32-bit integer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Minimum in Rotated Sorted Array",
    "problem_id": "153",
    "frontend_id": "153",
    "difficulty": "Medium",
    "problem_slug": "find-minimum-in-rotated-sorted-array",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\nGiven the sorted rotated array nums of unique elements, return the minimum element of this array.\nYou must write an algorithm that runs in O(log n) time.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Minimum in Rotated Sorted Array II",
    "problem_id": "154",
    "frontend_id": "154",
    "difficulty": "Hard",
    "problem_slug": "find-minimum-in-rotated-sorted-array-ii",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\nGiven the sorted rotated array nums that may contain duplicates, return the minimum element of this array.\nYou must decrease the overall operation steps as much as possible.\nExample 1:\nExample 2:\nConstraints:\nFollow up: This problem is similar to Find Minimum in Rotated Sorted Array, but nums may contain duplicates. Would this affect the runtime complexity? How and why?"
  },
  {
    "title": "Min Stack",
    "problem_id": "155",
    "frontend_id": "155",
    "difficulty": "Medium",
    "problem_slug": "min-stack",
    "topics": [
      "Stack",
      "Design"
    ],
    "description": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\nImplement the MinStack class:\nYou must implement a solution with O(1) time complexity for each function.\nExample 1:\nConstraints:"
  },
  {
    "title": "Intersection of Two Linked Lists",
    "problem_id": "160",
    "frontend_id": "160",
    "difficulty": "Easy",
    "problem_slug": "intersection-of-two-linked-lists",
    "topics": [
      "Hash Table",
      "Linked List",
      "Two Pointers"
    ],
    "description": "Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.\nFor example, the following two linked lists begin to intersect at node c1:\nThe test cases are generated such that there are no cycles anywhere in the entire linked structure.\nNote that the linked lists must retain their original structure after the function returns.\nCustom Judge:\nThe inputs to the judge are given as follows (your program is not given these inputs):\nThe judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Peak Element",
    "problem_id": "162",
    "frontend_id": "162",
    "difficulty": "Medium",
    "problem_slug": "find-peak-element",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "A peak element is an element that is strictly greater than its neighbors.\nGiven a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.\nYou may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.\nYou must write an algorithm that runs in O(log n) time.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Gap",
    "problem_id": "164",
    "frontend_id": "164",
    "difficulty": "Medium",
    "problem_slug": "maximum-gap",
    "topics": [
      "Array",
      "Sorting",
      "Bucket Sort",
      "Radix Sort"
    ],
    "description": "Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.\nYou must write an algorithm that runs in linear time and uses linear extra space.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Compare Version Numbers",
    "problem_id": "165",
    "frontend_id": "165",
    "difficulty": "Medium",
    "problem_slug": "compare-version-numbers",
    "topics": [
      "Two Pointers",
      "String"
    ],
    "description": "Given two version strings, version1 and version2, compare them. A version string consists of revisions separated by dots '.'. The value of the revision is its integer conversion ignoring leading zeros.\nTo compare version strings, compare their revision values in left-to-right order. If one of the version strings has fewer revisions, treat the missing revision values as 0.\nReturn the following:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Fraction to Recurring Decimal",
    "problem_id": "166",
    "frontend_id": "166",
    "difficulty": "Medium",
    "problem_slug": "fraction-to-recurring-decimal",
    "topics": [
      "Hash Table",
      "Math",
      "String"
    ],
    "description": "Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.\nIf the fractional part is repeating, enclose the repeating part in parentheses.\nIf multiple answers are possible, return any of them.\nIt is guaranteed that the length of the answer string is less than 104 for all the given inputs.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Two Sum II - Input Array Is Sorted",
    "problem_id": "167",
    "frontend_id": "167",
    "difficulty": "Medium",
    "problem_slug": "two-sum-ii-input-array-is-sorted",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search"
    ],
    "description": "Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.\nReturn the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.\nThe tests are generated such that there is exactly one solution. You may not use the same element twice.\nYour solution must use only constant extra space.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Excel Sheet Column Title",
    "problem_id": "168",
    "frontend_id": "168",
    "difficulty": "Easy",
    "problem_slug": "excel-sheet-column-title",
    "topics": [
      "Math",
      "String"
    ],
    "description": "Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.\nFor example:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Majority Element",
    "problem_id": "169",
    "frontend_id": "169",
    "difficulty": "Easy",
    "problem_slug": "majority-element",
    "topics": [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Sorting",
      "Counting"
    ],
    "description": "Given an array nums of size n, return the majority element.\nThe majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Excel Sheet Column Number",
    "problem_id": "171",
    "frontend_id": "171",
    "difficulty": "Easy",
    "problem_slug": "excel-sheet-column-number",
    "topics": [
      "Math",
      "String"
    ],
    "description": "Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\nFor example:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Factorial Trailing Zeroes",
    "problem_id": "172",
    "frontend_id": "172",
    "difficulty": "Medium",
    "problem_slug": "factorial-trailing-zeroes",
    "topics": [
      "Math"
    ],
    "description": "Given an integer n, return the number of trailing zeroes in n!.\nNote that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Could you write a solution that works in logarithmic time complexity?"
  },
  {
    "title": "Binary Search Tree Iterator",
    "problem_id": "173",
    "frontend_id": "173",
    "difficulty": "Medium",
    "problem_slug": "binary-search-tree-iterator",
    "topics": [
      "Stack",
      "Tree",
      "Design",
      "Binary Search Tree",
      "Binary Tree",
      "Iterator"
    ],
    "description": "Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\nNotice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\nYou may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.\nExample 1:\nConstraints:\nFollow up:"
  },
  {
    "title": "Dungeon Game",
    "problem_id": "174",
    "frontend_id": "174",
    "difficulty": "Hard",
    "problem_slug": "dungeon-game",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\nThe knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.\nSome of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\nTo reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\nReturn the knight's minimum initial health so that he can rescue the princess.\nNote that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Combine Two Tables",
    "problem_id": "175",
    "frontend_id": "175",
    "difficulty": "Easy",
    "problem_slug": "combine-two-tables",
    "topics": [
      "Database"
    ],
    "description": "Table: Person\nTable: Address\nWrite a solution to report the first name, last name, city, and state of each person in the Person table. If the address of a personId is not present in the Address table, report null instead.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Second Highest Salary",
    "problem_id": "176",
    "frontend_id": "176",
    "difficulty": "Medium",
    "problem_slug": "second-highest-salary",
    "topics": [
      "Database"
    ],
    "description": "Table: Employee\nWrite a solution to find the second highest distinct salary from the Employee table. If there is no second highest salary, return null (return None in Pandas).\nThe result format is in the following example.\nExample 1:\nExample 2:"
  },
  {
    "title": "Nth Highest Salary",
    "problem_id": "177",
    "frontend_id": "177",
    "difficulty": "Medium",
    "problem_slug": "nth-highest-salary",
    "topics": [
      "Database"
    ],
    "description": "Table: Employee\nWrite a solution to find the nth highest distinct salary from the Employee table. If there are less than n distinct salaries, return null.\nThe result format is in the following example.\nExample 1:\nExample 2:"
  },
  {
    "title": "Rank Scores",
    "problem_id": "178",
    "frontend_id": "178",
    "difficulty": "Medium",
    "problem_slug": "rank-scores",
    "topics": [
      "Database"
    ],
    "description": "Table: Scores\nWrite a solution to find the rank of the scores. The ranking should be calculated according to the following rules:\nReturn the result table ordered by score in descending order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Largest Number",
    "problem_id": "179",
    "frontend_id": "179",
    "difficulty": "Medium",
    "problem_slug": "largest-number",
    "topics": [
      "Array",
      "String",
      "Greedy",
      "Sorting"
    ],
    "description": "Given a list of non-negative integers nums, arrange them such that they form the largest number and return it.\nSince the result may be very large, so you need to return a string instead of an integer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Consecutive Numbers",
    "problem_id": "180",
    "frontend_id": "180",
    "difficulty": "Medium",
    "problem_slug": "consecutive-numbers",
    "topics": [
      "Database"
    ],
    "description": "Table: Logs\nFind all numbers that appear at least three times consecutively.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Employees Earning More Than Their Managers",
    "problem_id": "181",
    "frontend_id": "181",
    "difficulty": "Easy",
    "problem_slug": "employees-earning-more-than-their-managers",
    "topics": [
      "Database"
    ],
    "description": "Table: Employee\nWrite a solution to find the employees who earn more than their managers.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Duplicate Emails",
    "problem_id": "182",
    "frontend_id": "182",
    "difficulty": "Easy",
    "problem_slug": "duplicate-emails",
    "topics": [
      "Database"
    ],
    "description": "Table: Person\nWrite a solution to report all the duplicate emails. Note that it's guaranteed that the email field is not NULL.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Customers Who Never Order",
    "problem_id": "183",
    "frontend_id": "183",
    "difficulty": "Easy",
    "problem_slug": "customers-who-never-order",
    "topics": [
      "Database"
    ],
    "description": "Table: Customers\nTable: Orders\nWrite a solution to find all customers who never order anything.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Department Highest Salary",
    "problem_id": "184",
    "frontend_id": "184",
    "difficulty": "Medium",
    "problem_slug": "department-highest-salary",
    "topics": [
      "Database"
    ],
    "description": "Table: Employee\nTable: Department\nWrite a solution to find employees who have the highest salary in each of the departments.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Department Top Three Salaries",
    "problem_id": "185",
    "frontend_id": "185",
    "difficulty": "Hard",
    "problem_slug": "department-top-three-salaries",
    "topics": [
      "Database"
    ],
    "description": "Table: Employee\nTable: Department\nA company's executives are interested in seeing who earns the most money in each of the company's departments. A high earner in a department is an employee who has a salary in the top three unique salaries for that department.\nWrite a solution to find the employees who are high earners in each of the departments.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:\nConstraints:"
  },
  {
    "title": "Repeated DNA Sequences",
    "problem_id": "187",
    "frontend_id": "187",
    "difficulty": "Medium",
    "problem_slug": "repeated-dna-sequences",
    "topics": [
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Sliding Window",
      "Rolling Hash",
      "Hash Function"
    ],
    "description": "The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.\nWhen studying DNA, it is useful to identify repeated sequences within the DNA.\nGiven a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Best Time to Buy and Sell Stock IV",
    "problem_id": "188",
    "frontend_id": "188",
    "difficulty": "Hard",
    "problem_slug": "best-time-to-buy-and-sell-stock-iv",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.\nFind the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Rotate Array",
    "problem_id": "189",
    "frontend_id": "189",
    "difficulty": "Medium",
    "problem_slug": "rotate-array",
    "topics": [
      "Array",
      "Math",
      "Two Pointers"
    ],
    "description": "Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.\nExample 1:\nExample 2:\nConstraints:\nFollow up:"
  },
  {
    "title": "Reverse Bits",
    "problem_id": "190",
    "frontend_id": "190",
    "difficulty": "Easy",
    "problem_slug": "reverse-bits",
    "topics": [
      "Divide and Conquer",
      "Bit Manipulation"
    ],
    "description": "Reverse bits of a given 32 bits unsigned integer.\nNote:\nExample 1:\nExample 2:\nConstraints:\nFollow up: If this function is called many times, how would you optimize it?"
  },
  {
    "title": "Number of 1 Bits",
    "problem_id": "191",
    "frontend_id": "191",
    "difficulty": "Easy",
    "problem_slug": "number-of-1-bits",
    "topics": [
      "Divide and Conquer",
      "Bit Manipulation"
    ],
    "description": "Given a positive integer n, write a function that returns the number of set bits in its binary representation (also known as the Hamming weight).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Word Frequency",
    "problem_id": "192",
    "frontend_id": "192",
    "difficulty": "Medium",
    "problem_slug": "word-frequency",
    "topics": [
      "Shell"
    ],
    "description": "Write a bash script to calculate the frequency of each word in a text file words.txt.\nFor simplicity sake, you may assume:\nExample:\nAssume that words.txt has the following content:\nYour script should output the following, sorted by descending frequency:\nNote:"
  },
  {
    "title": "Valid Phone Numbers",
    "problem_id": "193",
    "frontend_id": "193",
    "difficulty": "Easy",
    "problem_slug": "valid-phone-numbers",
    "topics": [
      "Shell"
    ],
    "description": "Given a text file file.txt that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers.\nYou may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)\nYou may also assume each line in the text file must not contain leading or trailing white spaces.\nExample:\nAssume that file.txt has the following content:\nYour script should output the following valid phone numbers:"
  },
  {
    "title": "Transpose File",
    "problem_id": "194",
    "frontend_id": "194",
    "difficulty": "Medium",
    "problem_slug": "transpose-file",
    "topics": [
      "Shell"
    ],
    "description": "Given a text file file.txt, transpose its content.\nYou may assume that each row has the same number of columns, and each field is separated by the ' ' character.\nExample:\nIf file.txt has the following content:\nOutput the following:"
  },
  {
    "title": "Tenth Line",
    "problem_id": "195",
    "frontend_id": "195",
    "difficulty": "Easy",
    "problem_slug": "tenth-line",
    "topics": [
      "Shell"
    ],
    "description": "Given a text file file.txt, print just the 10th line of the file.\nExample:\nAssume that file.txt has the following content:\nYour script should output the tenth line, which is:"
  },
  {
    "title": "Delete Duplicate Emails",
    "problem_id": "196",
    "frontend_id": "196",
    "difficulty": "Easy",
    "problem_slug": "delete-duplicate-emails",
    "topics": [
      "Database"
    ],
    "description": "Table: Person\nWrite a solution to delete all duplicate emails, keeping only one unique email with the smallest id.\nFor SQL users, please note that you are supposed to write a DELETE statement and not a SELECT one.\nFor Pandas users, please note that you are supposed to modify Person in place.\nAfter running your script, the answer shown is the Person table. The driver will first compile and run your piece of code and then show the Person table. The final order of the Person table does not matter.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Rising Temperature",
    "problem_id": "197",
    "frontend_id": "197",
    "difficulty": "Easy",
    "problem_slug": "rising-temperature",
    "topics": [
      "Database"
    ],
    "description": "Table: Weather\nWrite a solution to find all dates' id with higher temperatures compared to its previous dates (yesterday).\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "House Robber",
    "problem_id": "198",
    "frontend_id": "198",
    "difficulty": "Medium",
    "problem_slug": "house-robber",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Binary Tree Right Side View",
    "problem_id": "199",
    "frontend_id": "199",
    "difficulty": "Medium",
    "problem_slug": "binary-tree-right-side-view",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Number of Islands",
    "problem_id": "200",
    "frontend_id": "200",
    "difficulty": "Medium",
    "problem_slug": "number-of-islands",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix"
    ],
    "description": "Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Bitwise AND of Numbers Range",
    "problem_id": "201",
    "frontend_id": "201",
    "difficulty": "Medium",
    "problem_slug": "bitwise-and-of-numbers-range",
    "topics": [
      "Bit Manipulation"
    ],
    "description": "Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Happy Number",
    "problem_id": "202",
    "frontend_id": "202",
    "difficulty": "Easy",
    "problem_slug": "happy-number",
    "topics": [
      "Hash Table",
      "Math",
      "Two Pointers"
    ],
    "description": "Write an algorithm to determine if a number n is happy.\nA happy number is a number defined by the following process:\nReturn true if n is a happy number, and false if not.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Remove Linked List Elements",
    "problem_id": "203",
    "frontend_id": "203",
    "difficulty": "Easy",
    "problem_slug": "remove-linked-list-elements",
    "topics": [
      "Linked List",
      "Recursion"
    ],
    "description": "Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Primes",
    "problem_id": "204",
    "frontend_id": "204",
    "difficulty": "Medium",
    "problem_slug": "count-primes",
    "topics": [
      "Array",
      "Math",
      "Enumeration",
      "Number Theory"
    ],
    "description": "Given an integer n, return the number of prime numbers that are strictly less than n.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Isomorphic Strings",
    "problem_id": "205",
    "frontend_id": "205",
    "difficulty": "Easy",
    "problem_slug": "isomorphic-strings",
    "topics": [
      "Hash Table",
      "String"
    ],
    "description": "Given two strings s and t, determine if they are isomorphic.\nTwo strings s and t are isomorphic if the characters in s can be replaced to get t.\nAll occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Reverse Linked List",
    "problem_id": "206",
    "frontend_id": "206",
    "difficulty": "Easy",
    "problem_slug": "reverse-linked-list",
    "topics": [
      "Linked List",
      "Recursion"
    ],
    "description": "Given the head of a singly linked list, reverse the list, and return the reversed list.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: A linked list can be reversed either iteratively or recursively. Could you implement both?"
  },
  {
    "title": "Course Schedule",
    "problem_id": "207",
    "frontend_id": "207",
    "difficulty": "Medium",
    "problem_slug": "course-schedule",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort"
    ],
    "description": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\nReturn true if you can finish all courses. Otherwise, return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Implement Trie (Prefix Tree)",
    "problem_id": "208",
    "frontend_id": "208",
    "difficulty": "Medium",
    "problem_slug": "implement-trie-prefix-tree",
    "topics": [
      "Hash Table",
      "String",
      "Design",
      "Trie"
    ],
    "description": "A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\nImplement the Trie class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Minimum Size Subarray Sum",
    "problem_id": "209",
    "frontend_id": "209",
    "difficulty": "Medium",
    "problem_slug": "minimum-size-subarray-sum",
    "topics": [
      "Array",
      "Binary Search",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Course Schedule II",
    "problem_id": "210",
    "frontend_id": "210",
    "difficulty": "Medium",
    "problem_slug": "course-schedule-ii",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort"
    ],
    "description": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\nReturn the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Design Add and Search Words Data Structure",
    "problem_id": "211",
    "frontend_id": "211",
    "difficulty": "Medium",
    "problem_slug": "design-add-and-search-words-data-structure",
    "topics": [
      "String",
      "Depth-First Search",
      "Design",
      "Trie"
    ],
    "description": "Design a data structure that supports adding new words and finding if a string matches any previously added string.\nImplement the WordDictionary class:\nExample:\nConstraints:"
  },
  {
    "title": "Word Search II",
    "problem_id": "212",
    "frontend_id": "212",
    "difficulty": "Hard",
    "problem_slug": "word-search-ii",
    "topics": [
      "Array",
      "String",
      "Backtracking",
      "Trie",
      "Matrix"
    ],
    "description": "Given an m x n board of characters and a list of strings words, return all words on the board.\nEach word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "House Robber II",
    "problem_id": "213",
    "frontend_id": "213",
    "difficulty": "Medium",
    "problem_slug": "house-robber-ii",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Shortest Palindrome",
    "problem_id": "214",
    "frontend_id": "214",
    "difficulty": "Hard",
    "problem_slug": "shortest-palindrome",
    "topics": [
      "String",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "description": "You are given a string s. You can convert s to a palindrome by adding characters in front of it.\nReturn the shortest palindrome you can find by performing this transformation.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Kth Largest Element in an Array",
    "problem_id": "215",
    "frontend_id": "215",
    "difficulty": "Medium",
    "problem_slug": "kth-largest-element-in-an-array",
    "topics": [
      "Array",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Quickselect"
    ],
    "description": "Given an integer array nums and an integer k, return the kth largest element in the array.\nNote that it is the kth largest element in the sorted order, not the kth distinct element.\nCan you solve it without sorting?\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Combination Sum III",
    "problem_id": "216",
    "frontend_id": "216",
    "difficulty": "Medium",
    "problem_slug": "combination-sum-iii",
    "topics": [
      "Array",
      "Backtracking"
    ],
    "description": "Find all valid combinations of k numbers that sum up to n such that the following conditions are true:\nReturn a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Contains Duplicate",
    "problem_id": "217",
    "frontend_id": "217",
    "difficulty": "Easy",
    "problem_slug": "contains-duplicate",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting"
    ],
    "description": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "The Skyline Problem",
    "problem_id": "218",
    "frontend_id": "218",
    "difficulty": "Hard",
    "problem_slug": "the-skyline-problem",
    "topics": [
      "Array",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Line Sweep",
      "Heap (Priority Queue)",
      "Ordered Set"
    ],
    "description": "A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\nThe geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\nThe skyline should be represented as a list of \"key points\" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.\nNote: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Contains Duplicate II",
    "problem_id": "219",
    "frontend_id": "219",
    "difficulty": "Easy",
    "problem_slug": "contains-duplicate-ii",
    "topics": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "description": "Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Contains Duplicate III",
    "problem_id": "220",
    "frontend_id": "220",
    "difficulty": "Hard",
    "problem_slug": "contains-duplicate-iii",
    "topics": [
      "Array",
      "Sliding Window",
      "Sorting",
      "Bucket Sort",
      "Ordered Set"
    ],
    "description": "You are given an integer array nums and two integers indexDiff and valueDiff.\nFind a pair of indices (i, j) such that:\nReturn true if such pair exists or false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximal Square",
    "problem_id": "221",
    "frontend_id": "221",
    "difficulty": "Medium",
    "problem_slug": "maximal-square",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Complete Tree Nodes",
    "problem_id": "222",
    "frontend_id": "222",
    "difficulty": "Easy",
    "problem_slug": "count-complete-tree-nodes",
    "topics": [
      "Binary Search",
      "Bit Manipulation",
      "Tree",
      "Binary Tree"
    ],
    "description": "Given the root of a complete binary tree, return the number of the nodes in the tree.\nAccording to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\nDesign an algorithm that runs in less than O(n) time complexity.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Rectangle Area",
    "problem_id": "223",
    "frontend_id": "223",
    "difficulty": "Medium",
    "problem_slug": "rectangle-area",
    "topics": [
      "Math",
      "Geometry"
    ],
    "description": "Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.\nThe first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2).\nThe second rectangle is defined by its bottom-left corner (bx1, by1) and its top-right corner (bx2, by2).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Basic Calculator",
    "problem_id": "224",
    "frontend_id": "224",
    "difficulty": "Hard",
    "problem_slug": "basic-calculator",
    "topics": [
      "Math",
      "String",
      "Stack",
      "Recursion"
    ],
    "description": "Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Implement Stack using Queues",
    "problem_id": "225",
    "frontend_id": "225",
    "difficulty": "Easy",
    "problem_slug": "implement-stack-using-queues",
    "topics": [
      "Stack",
      "Design",
      "Queue"
    ],
    "description": "Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).\nImplement the MyStack class:\nNotes:\nExample 1:\nConstraints:\nFollow-up: Can you implement the stack using only one queue?"
  },
  {
    "title": "Invert Binary Tree",
    "problem_id": "226",
    "frontend_id": "226",
    "difficulty": "Easy",
    "problem_slug": "invert-binary-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, invert the tree, and return its root.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Basic Calculator II",
    "problem_id": "227",
    "frontend_id": "227",
    "difficulty": "Medium",
    "problem_slug": "basic-calculator-ii",
    "topics": [
      "Math",
      "String",
      "Stack"
    ],
    "description": "Given a string s which represents an expression, evaluate this expression and return its value.\nThe integer division should truncate toward zero.\nYou may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Summary Ranges",
    "problem_id": "228",
    "frontend_id": "228",
    "difficulty": "Easy",
    "problem_slug": "summary-ranges",
    "topics": [
      "Array"
    ],
    "description": "You are given a sorted unique integer array nums.\nA range [a,b] is the set of all integers from a to b (inclusive).\nReturn the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.\nEach range [a,b] in the list should be output as:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Majority Element II",
    "problem_id": "229",
    "frontend_id": "229",
    "difficulty": "Medium",
    "problem_slug": "majority-element-ii",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting",
      "Counting"
    ],
    "description": "Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Could you solve the problem in linear time and in O(1) space?"
  },
  {
    "title": "Kth Smallest Element in a BST",
    "problem_id": "230",
    "frontend_id": "230",
    "difficulty": "Medium",
    "problem_slug": "kth-smallest-element-in-a-bst",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.\nExample 1:\nExample 2:\nConstraints:\nFollow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?"
  },
  {
    "title": "Power of Two",
    "problem_id": "231",
    "frontend_id": "231",
    "difficulty": "Easy",
    "problem_slug": "power-of-two",
    "topics": [
      "Math",
      "Bit Manipulation",
      "Recursion"
    ],
    "description": "Given an integer n, return true if it is a power of two. Otherwise, return false.\nAn integer n is a power of two, if there exists an integer x such that n == 2x.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Implement Queue using Stacks",
    "problem_id": "232",
    "frontend_id": "232",
    "difficulty": "Easy",
    "problem_slug": "implement-queue-using-stacks",
    "topics": [
      "Stack",
      "Design",
      "Queue"
    ],
    "description": "Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).\nImplement the MyQueue class:\nNotes:\nExample 1:\nConstraints:\nFollow-up: Can you implement the queue such that each operation is amortized O(1) time complexity? In other words, performing n operations will take overall O(n) time even if one of those operations may take longer."
  },
  {
    "title": "Number of Digit One",
    "problem_id": "233",
    "frontend_id": "233",
    "difficulty": "Hard",
    "problem_slug": "number-of-digit-one",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Recursion"
    ],
    "description": "Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Palindrome Linked List",
    "problem_id": "234",
    "frontend_id": "234",
    "difficulty": "Easy",
    "problem_slug": "palindrome-linked-list",
    "topics": [
      "Linked List",
      "Two Pointers",
      "Stack",
      "Recursion"
    ],
    "description": "Given the head of a singly linked list, return true if it is a palindrome or false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Lowest Common Ancestor of a Binary Search Tree",
    "problem_id": "235",
    "frontend_id": "235",
    "difficulty": "Medium",
    "problem_slug": "lowest-common-ancestor-of-a-binary-search-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.\nAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Lowest Common Ancestor of a Binary Tree",
    "problem_id": "236",
    "frontend_id": "236",
    "difficulty": "Medium",
    "problem_slug": "lowest-common-ancestor-of-a-binary-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\nAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Delete Node in a Linked List",
    "problem_id": "237",
    "frontend_id": "237",
    "difficulty": "Medium",
    "problem_slug": "delete-node-in-a-linked-list",
    "topics": [
      "Linked List"
    ],
    "description": "There is a singly-linked list head and we want to delete a node node in it.\nYou are given the node to be deleted node. You will not be given access to the first node of head.\nAll the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list.\nDelete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:\nCustom testing:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Product of Array Except Self",
    "problem_id": "238",
    "frontend_id": "238",
    "difficulty": "Medium",
    "problem_slug": "product-of-array-except-self",
    "topics": [
      "Array",
      "Prefix Sum"
    ],
    "description": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\nYou must write an algorithm that runs in O(n) time and without using the division operation.\nExample 1:\nExample 2:\nConstraints:\nFollow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)"
  },
  {
    "title": "Sliding Window Maximum",
    "problem_id": "239",
    "frontend_id": "239",
    "difficulty": "Hard",
    "problem_slug": "sliding-window-maximum",
    "topics": [
      "Array",
      "Queue",
      "Sliding Window",
      "Heap (Priority Queue)",
      "Monotonic Queue"
    ],
    "description": "You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\nReturn the max sliding window.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Search a 2D Matrix II",
    "problem_id": "240",
    "frontend_id": "240",
    "difficulty": "Medium",
    "problem_slug": "search-a-2d-matrix-ii",
    "topics": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Matrix"
    ],
    "description": "Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Different Ways to Add Parentheses",
    "problem_id": "241",
    "frontend_id": "241",
    "difficulty": "Medium",
    "problem_slug": "different-ways-to-add-parentheses",
    "topics": [
      "Math",
      "String",
      "Dynamic Programming",
      "Recursion",
      "Memoization"
    ],
    "description": "Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.\nThe test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed 104.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Valid Anagram",
    "problem_id": "242",
    "frontend_id": "242",
    "difficulty": "Easy",
    "problem_slug": "valid-anagram",
    "topics": [
      "Hash Table",
      "String",
      "Sorting"
    ],
    "description": "Given two strings s and t, return true if t is an anagram of s, and false otherwise.\nExample 1:\nExample 2:\nConstraints:\nFollow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?"
  },
  {
    "title": "Binary Tree Paths",
    "problem_id": "257",
    "frontend_id": "257",
    "difficulty": "Easy",
    "problem_slug": "binary-tree-paths",
    "topics": [
      "String",
      "Backtracking",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return all root-to-leaf paths in any order.\nA leaf is a node with no children.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Add Digits",
    "problem_id": "258",
    "frontend_id": "258",
    "difficulty": "Easy",
    "problem_slug": "add-digits",
    "topics": [
      "Math",
      "Simulation",
      "Number Theory"
    ],
    "description": "Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.\nExample 1:\nExample 2:\nConstraints:\nFollow up: Could you do it without any loop/recursion in O(1) runtime?"
  },
  {
    "title": "Single Number III",
    "problem_id": "260",
    "frontend_id": "260",
    "difficulty": "Medium",
    "problem_slug": "single-number-iii",
    "topics": [
      "Array",
      "Bit Manipulation"
    ],
    "description": "Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.\nYou must write an algorithm that runs in linear runtime complexity and uses only constant extra space.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Trips and Users",
    "problem_id": "262",
    "frontend_id": "262",
    "difficulty": "Hard",
    "problem_slug": "trips-and-users",
    "topics": [
      "Database"
    ],
    "description": "Table: Trips\nTable: Users\nThe cancellation rate is computed by dividing the number of canceled (by client or driver) requests with unbanned users by the total number of requests with unbanned users on that day.\nWrite a solution to find the cancellation rate of requests with unbanned users (both client and driver must not be banned) each day between \"2013-10-01\" and \"2013-10-03\" with at least one trip. Round Cancellation Rate to two decimal points.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Ugly Number",
    "problem_id": "263",
    "frontend_id": "263",
    "difficulty": "Easy",
    "problem_slug": "ugly-number",
    "topics": [
      "Math"
    ],
    "description": "An ugly number is a positive integer which does not have a prime factor other than 2, 3, and 5.\nGiven an integer n, return true if n is an ugly number.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Ugly Number II",
    "problem_id": "264",
    "frontend_id": "264",
    "difficulty": "Medium",
    "problem_slug": "ugly-number-ii",
    "topics": [
      "Hash Table",
      "Math",
      "Dynamic Programming",
      "Heap (Priority Queue)"
    ],
    "description": "An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\nGiven an integer n, return the nth ugly number.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Missing Number",
    "problem_id": "268",
    "frontend_id": "268",
    "difficulty": "Easy",
    "problem_slug": "missing-number",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Binary Search",
      "Bit Manipulation",
      "Sorting"
    ],
    "description": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?"
  },
  {
    "title": "Integer to English Words",
    "problem_id": "273",
    "frontend_id": "273",
    "difficulty": "Hard",
    "problem_slug": "integer-to-english-words",
    "topics": [
      "Math",
      "String",
      "Recursion"
    ],
    "description": "Convert a non-negative integer num to its English words representation.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "H-Index",
    "problem_id": "274",
    "frontend_id": "274",
    "difficulty": "Medium",
    "problem_slug": "h-index",
    "topics": [
      "Array",
      "Sorting",
      "Counting Sort"
    ],
    "description": "Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return the researcher's h-index.\nAccording to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "H-Index II",
    "problem_id": "275",
    "frontend_id": "275",
    "difficulty": "Medium",
    "problem_slug": "h-index-ii",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper and citations is sorted in non-descending order, return the researcher's h-index.\nAccording to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.\nYou must write an algorithm that runs in logarithmic time.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "First Bad Version",
    "problem_id": "278",
    "frontend_id": "278",
    "difficulty": "Easy",
    "problem_slug": "first-bad-version",
    "topics": [
      "Binary Search",
      "Interactive"
    ],
    "description": "You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.\nSuppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.\nYou are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Perfect Squares",
    "problem_id": "279",
    "frontend_id": "279",
    "difficulty": "Medium",
    "problem_slug": "perfect-squares",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Breadth-First Search"
    ],
    "description": "Given an integer n, return the least number of perfect square numbers that sum to n.\nA perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Expression Add Operators",
    "problem_id": "282",
    "frontend_id": "282",
    "difficulty": "Hard",
    "problem_slug": "expression-add-operators",
    "topics": [
      "Math",
      "String",
      "Backtracking"
    ],
    "description": "Given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators '+', '-', and/or '*' between the digits of num so that the resultant expression evaluates to the target value.\nNote that operands in the returned expressions should not contain leading zeros.\nNote that a number can contain multiple digits.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Move Zeroes",
    "problem_id": "283",
    "frontend_id": "283",
    "difficulty": "Easy",
    "problem_slug": "move-zeroes",
    "topics": [
      "Array",
      "Two Pointers"
    ],
    "description": "Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\nNote that you must do this in-place without making a copy of the array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Peeking Iterator",
    "problem_id": "284",
    "frontend_id": "284",
    "difficulty": "Medium",
    "problem_slug": "peeking-iterator",
    "topics": [
      "Array",
      "Design",
      "Iterator"
    ],
    "description": "Design an iterator that supports the peek operation on an existing iterator in addition to the hasNext and the next operations.\nImplement the PeekingIterator class:\nNote: Each language may have a different implementation of the constructor and Iterator, but they all support the int next() and boolean hasNext() functions.\nExample 1:\nConstraints:"
  },
  {
    "title": "Find the Duplicate Number",
    "problem_id": "287",
    "frontend_id": "287",
    "difficulty": "Medium",
    "problem_slug": "find-the-duplicate-number",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Bit Manipulation"
    ],
    "description": "Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\nThere is only one repeated number in nums, return this repeated number.\nYou must solve the problem without modifying the array nums and using only constant extra space.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up:"
  },
  {
    "title": "Game of Life",
    "problem_id": "289",
    "frontend_id": "289",
    "difficulty": "Medium",
    "problem_slug": "game-of-life",
    "topics": [
      "Array",
      "Matrix",
      "Simulation"
    ],
    "description": "According to Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"\nThe board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):\nThe next state of the board is determined by applying the above rules simultaneously to every cell in the current state of the m x n grid board. In this process, births and deaths occur simultaneously.\nGiven the current state of the board, update the board to reflect its next state.\nNote that you do not need to return anything.\nExample 1:\nExample 2:\nConstraints:\nFollow up:"
  },
  {
    "title": "Word Pattern",
    "problem_id": "290",
    "frontend_id": "290",
    "difficulty": "Easy",
    "problem_slug": "word-pattern",
    "topics": [
      "Hash Table",
      "String"
    ],
    "description": "Given a pattern and a string s, find if s follows the same pattern.\nHere follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s. Specifically:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Nim Game",
    "problem_id": "292",
    "frontend_id": "292",
    "difficulty": "Easy",
    "problem_slug": "nim-game",
    "topics": [
      "Math",
      "Brainteaser",
      "Game Theory"
    ],
    "description": "You are playing the following Nim Game with your friend:\nGiven n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Median from Data Stream",
    "problem_id": "295",
    "frontend_id": "295",
    "difficulty": "Hard",
    "problem_slug": "find-median-from-data-stream",
    "topics": [
      "Two Pointers",
      "Design",
      "Sorting",
      "Heap (Priority Queue)",
      "Data Stream"
    ],
    "description": "The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.\nImplement the MedianFinder class:\nExample 1:\nConstraints:\nFollow up:"
  },
  {
    "title": "Serialize and Deserialize Binary Tree",
    "problem_id": "297",
    "frontend_id": "297",
    "difficulty": "Hard",
    "problem_slug": "serialize-and-deserialize-binary-tree",
    "topics": [
      "String",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Design",
      "Binary Tree"
    ],
    "description": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\nClarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Bulls and Cows",
    "problem_id": "299",
    "frontend_id": "299",
    "difficulty": "Medium",
    "problem_slug": "bulls-and-cows",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "You are playing the Bulls and Cows game with your friend.\nYou write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:\nGiven the secret number secret and your friend's guess guess, return the hint for your friend's guess.\nThe hint should be formatted as \"xAyB\", where x is the number of bulls and y is the number of cows. Note that both secret and guess may contain duplicate digits.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Increasing Subsequence",
    "problem_id": "300",
    "frontend_id": "300",
    "difficulty": "Medium",
    "problem_slug": "longest-increasing-subsequence",
    "topics": [
      "Array",
      "Binary Search",
      "Dynamic Programming"
    ],
    "description": "Given an integer array nums, return the length of the longest strictly increasing subsequence.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Can you come up with an algorithm that runs in O(n log(n)) time complexity?"
  },
  {
    "title": "Remove Invalid Parentheses",
    "problem_id": "301",
    "frontend_id": "301",
    "difficulty": "Hard",
    "problem_slug": "remove-invalid-parentheses",
    "topics": [
      "String",
      "Backtracking",
      "Breadth-First Search"
    ],
    "description": "Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.\nReturn a list of unique strings that are valid with the minimum number of removals. You may return the answer in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Range Sum Query - Immutable",
    "problem_id": "303",
    "frontend_id": "303",
    "difficulty": "Easy",
    "problem_slug": "range-sum-query-immutable",
    "topics": [
      "Array",
      "Design",
      "Prefix Sum"
    ],
    "description": "Given an integer array nums, handle multiple queries of the following type:\nImplement the NumArray class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Range Sum Query 2D - Immutable",
    "problem_id": "304",
    "frontend_id": "304",
    "difficulty": "Medium",
    "problem_slug": "range-sum-query-2d-immutable",
    "topics": [
      "Array",
      "Design",
      "Matrix",
      "Prefix Sum"
    ],
    "description": "Given a 2D matrix matrix, handle multiple queries of the following type:\nImplement the NumMatrix class:\nYou must design an algorithm where sumRegion works on O(1) time complexity.\nExample 1:\nConstraints:"
  },
  {
    "title": "Additive Number",
    "problem_id": "306",
    "frontend_id": "306",
    "difficulty": "Medium",
    "problem_slug": "additive-number",
    "topics": [
      "String",
      "Backtracking"
    ],
    "description": "An additive number is a string whose digits can form an additive sequence.\nA valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.\nGiven a string containing only digits, return true if it is an additive number or false otherwise.\nNote: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.\nExample 1:\nExample 2:\nConstraints:\nFollow up: How would you handle overflow for very large input integers?"
  },
  {
    "title": "Range Sum Query - Mutable",
    "problem_id": "307",
    "frontend_id": "307",
    "difficulty": "Medium",
    "problem_slug": "range-sum-query-mutable",
    "topics": [
      "Array",
      "Design",
      "Binary Indexed Tree",
      "Segment Tree"
    ],
    "description": "Given an integer array nums, handle multiple queries of the following types:\nImplement the NumArray class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Best Time to Buy and Sell Stock with Cooldown",
    "problem_id": "309",
    "frontend_id": "309",
    "difficulty": "Medium",
    "problem_slug": "best-time-to-buy-and-sell-stock-with-cooldown",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\nFind the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Height Trees",
    "problem_id": "310",
    "frontend_id": "310",
    "difficulty": "Medium",
    "problem_slug": "minimum-height-trees",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort"
    ],
    "description": "A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.\nGiven a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, you can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (i.e. min(h))  are called minimum height trees (MHTs).\nReturn a list of all MHTs' root labels. You can return the answer in any order.\nThe height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Burst Balloons",
    "problem_id": "312",
    "frontend_id": "312",
    "difficulty": "Hard",
    "problem_slug": "burst-balloons",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.\nIf you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.\nReturn the maximum coins you can collect by bursting the balloons wisely.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Super Ugly Number",
    "problem_id": "313",
    "frontend_id": "313",
    "difficulty": "Medium",
    "problem_slug": "super-ugly-number",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming"
    ],
    "description": "A super ugly number is a positive integer whose prime factors are in the array primes.\nGiven an integer n and an array of integers primes, return the nth super ugly number.\nThe nth super ugly number is guaranteed to fit in a 32-bit signed integer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count of Smaller Numbers After Self",
    "problem_id": "315",
    "frontend_id": "315",
    "difficulty": "Hard",
    "problem_slug": "count-of-smaller-numbers-after-self",
    "topics": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set"
    ],
    "description": "Given an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the right of nums[i].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Remove Duplicate Letters",
    "problem_id": "316",
    "frontend_id": "316",
    "difficulty": "Medium",
    "problem_slug": "remove-duplicate-letters",
    "topics": [
      "String",
      "Stack",
      "Greedy",
      "Monotonic Stack"
    ],
    "description": "Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\nExample 1:\nExample 2:\nConstraints:\nNote: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/"
  },
  {
    "title": "Maximum Product of Word Lengths",
    "problem_id": "318",
    "frontend_id": "318",
    "difficulty": "Medium",
    "problem_slug": "maximum-product-of-word-lengths",
    "topics": [
      "Array",
      "String",
      "Bit Manipulation"
    ],
    "description": "Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Bulb Switcher",
    "problem_id": "319",
    "frontend_id": "319",
    "difficulty": "Medium",
    "problem_slug": "bulb-switcher",
    "topics": [
      "Math",
      "Brainteaser"
    ],
    "description": "There are n bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.\nOn the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb.\nReturn the number of bulbs that are on after n rounds.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Create Maximum Number",
    "problem_id": "321",
    "frontend_id": "321",
    "difficulty": "Hard",
    "problem_slug": "create-maximum-number",
    "topics": [
      "Array",
      "Two Pointers",
      "Stack",
      "Greedy",
      "Monotonic Stack"
    ],
    "description": "You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k.\nCreate the maximum number of length k <= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved.\nReturn an array of the k digits representing the answer.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Coin Change",
    "problem_id": "322",
    "frontend_id": "322",
    "difficulty": "Medium",
    "problem_slug": "coin-change",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Breadth-First Search"
    ],
    "description": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\nReturn the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\nYou may assume that you have an infinite number of each kind of coin.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Wiggle Sort II",
    "problem_id": "324",
    "frontend_id": "324",
    "difficulty": "Medium",
    "problem_slug": "wiggle-sort-ii",
    "topics": [
      "Array",
      "Divide and Conquer",
      "Greedy",
      "Sorting",
      "Quickselect"
    ],
    "description": "Given an integer array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....\nYou may assume the input array always has a valid answer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Power of Three",
    "problem_id": "326",
    "frontend_id": "326",
    "difficulty": "Easy",
    "problem_slug": "power-of-three",
    "topics": [
      "Math",
      "Recursion"
    ],
    "description": "Given an integer n, return true if it is a power of three. Otherwise, return false.\nAn integer n is a power of three, if there exists an integer x such that n == 3x.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count of Range Sum",
    "problem_id": "327",
    "frontend_id": "327",
    "difficulty": "Hard",
    "problem_slug": "count-of-range-sum",
    "topics": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set"
    ],
    "description": "Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive.\nRange sum S(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i <= j.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Odd Even Linked List",
    "problem_id": "328",
    "frontend_id": "328",
    "difficulty": "Medium",
    "problem_slug": "odd-even-linked-list",
    "topics": [
      "Linked List"
    ],
    "description": "Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.\nThe first node is considered odd, and the second node is even, and so on.\nNote that the relative order inside both the even and odd groups should remain as it was in the input.\nYou must solve the problem in O(1) extra space complexity and O(n) time complexity.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Increasing Path in a Matrix",
    "problem_id": "329",
    "frontend_id": "329",
    "difficulty": "Hard",
    "problem_slug": "longest-increasing-path-in-a-matrix",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort",
      "Memoization",
      "Matrix"
    ],
    "description": "Given an m x n integers matrix, return the length of the longest increasing path in matrix.\nFrom each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Patching Array",
    "problem_id": "330",
    "frontend_id": "330",
    "difficulty": "Hard",
    "problem_slug": "patching-array",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "Given a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array.\nReturn the minimum number of patches required.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Verify Preorder Serialization of a Binary Tree",
    "problem_id": "331",
    "frontend_id": "331",
    "difficulty": "Medium",
    "problem_slug": "verify-preorder-serialization-of-a-binary-tree",
    "topics": [
      "String",
      "Stack",
      "Tree",
      "Binary Tree"
    ],
    "description": "One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as '#'.\nFor example, the above binary tree can be serialized to the string \"9,3,4,#,#,1,#,#,2,#,6,#,#\", where '#' represents a null node.\nGiven a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.\nIt is guaranteed that each comma-separated value in the string must be either an integer or a character '#' representing null pointer.\nYou may assume that the input format is always valid.\nNote: You are not allowed to reconstruct the tree.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Reconstruct Itinerary",
    "problem_id": "332",
    "frontend_id": "332",
    "difficulty": "Hard",
    "problem_slug": "reconstruct-itinerary",
    "topics": [
      "Depth-First Search",
      "Graph",
      "Eulerian Circuit"
    ],
    "description": "You are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.\nAll of the tickets belong to a man who departs from \"JFK\", thus, the itinerary must begin with \"JFK\". If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.\nYou may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Increasing Triplet Subsequence",
    "problem_id": "334",
    "frontend_id": "334",
    "difficulty": "Medium",
    "problem_slug": "increasing-triplet-subsequence",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Self Crossing",
    "problem_id": "335",
    "frontend_id": "335",
    "difficulty": "Hard",
    "problem_slug": "self-crossing",
    "topics": [
      "Array",
      "Math",
      "Geometry"
    ],
    "description": "You are given an array of integers distance.\nYou start at the point (0, 0) on an X-Y plane, and you move distance[0] meters to the north, then distance[1] meters to the west, distance[2] meters to the south, distance[3] meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.\nReturn true if your path crosses itself or false if it does not.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Palindrome Pairs",
    "problem_id": "336",
    "frontend_id": "336",
    "difficulty": "Hard",
    "problem_slug": "palindrome-pairs",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Trie"
    ],
    "description": "You are given a 0-indexed array of unique strings words.\nA palindrome pair is a pair of integers (i, j) such that:\nReturn an array of all the palindrome pairs of words.\nYou must write an algorithm with O(sum of words[i].length) runtime complexity.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "House Robber III",
    "problem_id": "337",
    "frontend_id": "337",
    "difficulty": "Medium",
    "problem_slug": "house-robber-iii",
    "topics": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root.\nBesides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night.\nGiven the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Counting Bits",
    "problem_id": "338",
    "frontend_id": "338",
    "difficulty": "Easy",
    "problem_slug": "counting-bits",
    "topics": [
      "Dynamic Programming",
      "Bit Manipulation"
    ],
    "description": "Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.\nExample 1:\nExample 2:\nConstraints:\nFollow up:"
  },
  {
    "title": "Flatten Nested List Iterator",
    "problem_id": "341",
    "frontend_id": "341",
    "difficulty": "Medium",
    "problem_slug": "flatten-nested-list-iterator",
    "topics": [
      "Stack",
      "Tree",
      "Depth-First Search",
      "Design",
      "Queue",
      "Iterator"
    ],
    "description": "You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.\nImplement the NestedIterator class:\nYour code will be tested with the following pseudocode:\nIf res matches the expected flattened list, then your code will be judged as correct.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Power of Four",
    "problem_id": "342",
    "frontend_id": "342",
    "difficulty": "Easy",
    "problem_slug": "power-of-four",
    "topics": [
      "Math",
      "Bit Manipulation",
      "Recursion"
    ],
    "description": "Given an integer n, return true if it is a power of four. Otherwise, return false.\nAn integer n is a power of four, if there exists an integer x such that n == 4x.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Integer Break",
    "problem_id": "343",
    "frontend_id": "343",
    "difficulty": "Medium",
    "problem_slug": "integer-break",
    "topics": [
      "Math",
      "Dynamic Programming"
    ],
    "description": "Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.\nReturn the maximum product you can get.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Reverse String",
    "problem_id": "344",
    "frontend_id": "344",
    "difficulty": "Easy",
    "problem_slug": "reverse-string",
    "topics": [
      "Two Pointers",
      "String"
    ],
    "description": "Write a function that reverses a string. The input string is given as an array of characters s.\nYou must do this by modifying the input array in-place with O(1) extra memory.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Reverse Vowels of a String",
    "problem_id": "345",
    "frontend_id": "345",
    "difficulty": "Easy",
    "problem_slug": "reverse-vowels-of-a-string",
    "topics": [
      "Two Pointers",
      "String"
    ],
    "description": "Given a string s, reverse only all the vowels in the string and return it.\nThe vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Top K Frequent Elements",
    "problem_id": "347",
    "frontend_id": "347",
    "difficulty": "Medium",
    "problem_slug": "top-k-frequent-elements",
    "topics": [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Bucket Sort",
      "Counting",
      "Quickselect"
    ],
    "description": "Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.\nExample 1:\nExample 2:\nConstraints:\nFollow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size."
  },
  {
    "title": "Intersection of Two Arrays",
    "problem_id": "349",
    "frontend_id": "349",
    "difficulty": "Easy",
    "problem_slug": "intersection-of-two-arrays",
    "topics": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "description": "Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Intersection of Two Arrays II",
    "problem_id": "350",
    "frontend_id": "350",
    "difficulty": "Easy",
    "problem_slug": "intersection-of-two-arrays-ii",
    "topics": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "description": "Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.\nExample 1:\nExample 2:\nConstraints:\nFollow up:"
  },
  {
    "title": "Data Stream as Disjoint Intervals",
    "problem_id": "352",
    "frontend_id": "352",
    "difficulty": "Hard",
    "problem_slug": "data-stream-as-disjoint-intervals",
    "topics": [
      "Binary Search",
      "Design",
      "Ordered Set"
    ],
    "description": "Given a data stream input of non-negative integers a1, a2, ..., an, summarize the numbers seen so far as a list of disjoint intervals.\nImplement the SummaryRanges class:\nExample 1:\nConstraints:\nFollow up: What if there are lots of merges and the number of disjoint intervals is small compared to the size of the data stream?"
  },
  {
    "title": "Russian Doll Envelopes",
    "problem_id": "354",
    "frontend_id": "354",
    "difficulty": "Hard",
    "problem_slug": "russian-doll-envelopes",
    "topics": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "You are given a 2D array of integers envelopes where envelopes[i] = [wi, hi] represents the width and the height of an envelope.\nOne envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.\nReturn the maximum number of envelopes you can Russian doll (i.e., put one inside the other).\nNote: You cannot rotate an envelope.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Design Twitter",
    "problem_id": "355",
    "frontend_id": "355",
    "difficulty": "Medium",
    "problem_slug": "design-twitter",
    "topics": [
      "Hash Table",
      "Linked List",
      "Design",
      "Heap (Priority Queue)"
    ],
    "description": "Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.\nImplement the Twitter class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Count Numbers with Unique Digits",
    "problem_id": "357",
    "frontend_id": "357",
    "difficulty": "Medium",
    "problem_slug": "count-numbers-with-unique-digits",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Backtracking"
    ],
    "description": "Given an integer n, return the count of all numbers with unique digits, x, where 0 <= x < 10n.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Max Sum of Rectangle No Larger Than K",
    "problem_id": "363",
    "frontend_id": "363",
    "difficulty": "Hard",
    "problem_slug": "max-sum-of-rectangle-no-larger-than-k",
    "topics": [
      "Array",
      "Binary Search",
      "Matrix",
      "Prefix Sum",
      "Ordered Set"
    ],
    "description": "Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.\nIt is guaranteed that there will be a rectangle with a sum no larger than k.\nExample 1:\nExample 2:\nConstraints:\nFollow up: What if the number of rows is much larger than the number of columns?"
  },
  {
    "title": "Water and Jug Problem",
    "problem_id": "365",
    "frontend_id": "365",
    "difficulty": "Medium",
    "problem_slug": "water-and-jug-problem",
    "topics": [
      "Math",
      "Depth-First Search",
      "Breadth-First Search"
    ],
    "description": "You are given two jugs with capacities x liters and y liters. You have an infinite water supply. Return whether the total amount of water in both jugs may reach target using the following operations:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Valid Perfect Square",
    "problem_id": "367",
    "frontend_id": "367",
    "difficulty": "Easy",
    "problem_slug": "valid-perfect-square",
    "topics": [
      "Math",
      "Binary Search"
    ],
    "description": "Given a positive integer num, return true if num is a perfect square or false otherwise.\nA perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.\nYou must not use any built-in library function, such as sqrt.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Largest Divisible Subset",
    "problem_id": "368",
    "frontend_id": "368",
    "difficulty": "Medium",
    "problem_slug": "largest-divisible-subset",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:\nIf there are multiple solutions, return any of them.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Two Integers",
    "problem_id": "371",
    "frontend_id": "371",
    "difficulty": "Medium",
    "problem_slug": "sum-of-two-integers",
    "topics": [
      "Math",
      "Bit Manipulation"
    ],
    "description": "Given two integers a and b, return the sum of the two integers without using the operators + and -.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Super Pow",
    "problem_id": "372",
    "frontend_id": "372",
    "difficulty": "Medium",
    "problem_slug": "super-pow",
    "topics": [
      "Math",
      "Divide and Conquer"
    ],
    "description": "Your task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find K Pairs with Smallest Sums",
    "problem_id": "373",
    "frontend_id": "373",
    "difficulty": "Medium",
    "problem_slug": "find-k-pairs-with-smallest-sums",
    "topics": [
      "Array",
      "Heap (Priority Queue)"
    ],
    "description": "You are given two integer arrays nums1 and nums2 sorted in non-decreasing order and an integer k.\nDefine a pair (u, v) which consists of one element from the first array and one element from the second array.\nReturn the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Guess Number Higher or Lower",
    "problem_id": "374",
    "frontend_id": "374",
    "difficulty": "Easy",
    "problem_slug": "guess-number-higher-or-lower",
    "topics": [
      "Binary Search",
      "Interactive"
    ],
    "description": "We are playing the Guess Game. The game is as follows:\nI pick a number from 1 to n. You have to guess which number I picked.\nEvery time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.\nYou call a pre-defined API int guess(int num), which returns three possible results:\nReturn the number that I picked.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Guess Number Higher or Lower II",
    "problem_id": "375",
    "frontend_id": "375",
    "difficulty": "Medium",
    "problem_slug": "guess-number-higher-or-lower-ii",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Game Theory"
    ],
    "description": "We are playing the Guessing Game. The game will work as follows:\nGiven a particular n, return the minimum amount of money you need to guarantee a win regardless of what number I pick.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Wiggle Subsequence",
    "problem_id": "376",
    "frontend_id": "376",
    "difficulty": "Medium",
    "problem_slug": "wiggle-subsequence",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.\nA subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.\nGiven an integer array nums, return the length of the longest wiggle subsequence of nums.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Could you solve this in O(n) time?"
  },
  {
    "title": "Combination Sum IV",
    "problem_id": "377",
    "frontend_id": "377",
    "difficulty": "Medium",
    "problem_slug": "combination-sum-iv",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.\nThe test cases are generated so that the answer can fit in a 32-bit integer.\nExample 1:\nExample 2:\nConstraints:\nFollow up: What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?"
  },
  {
    "title": "Kth Smallest Element in a Sorted Matrix",
    "problem_id": "378",
    "frontend_id": "378",
    "difficulty": "Medium",
    "problem_slug": "kth-smallest-element-in-a-sorted-matrix",
    "topics": [
      "Array",
      "Binary Search",
      "Sorting",
      "Heap (Priority Queue)",
      "Matrix"
    ],
    "description": "Given an n x n matrix where each of the rows and columns is sorted in ascending order, return the kth smallest element in the matrix.\nNote that it is the kth smallest element in the sorted order, not the kth distinct element.\nYou must find a solution with a memory complexity better than O(n2).\nExample 1:\nExample 2:\nConstraints:\nFollow up:"
  },
  {
    "title": "Insert Delete GetRandom O(1)",
    "problem_id": "380",
    "frontend_id": "380",
    "difficulty": "Medium",
    "problem_slug": "insert-delete-getrandom-o1",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Design",
      "Randomized"
    ],
    "description": "Implement the RandomizedSet class:\nYou must implement the functions of the class such that each function works in average O(1) time complexity.\nExample 1:\nConstraints:"
  },
  {
    "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
    "problem_id": "381",
    "frontend_id": "381",
    "difficulty": "Hard",
    "problem_slug": "insert-delete-getrandom-o1-duplicates-allowed",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Design",
      "Randomized"
    ],
    "description": "RandomizedCollection is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.\nImplement the RandomizedCollection class:\nYou must implement the functions of the class such that each function works on average O(1) time complexity.\nNote: The test cases are generated such that getRandom will only be called if there is at least one item in the RandomizedCollection.\nExample 1:\nConstraints:"
  },
  {
    "title": "Linked List Random Node",
    "problem_id": "382",
    "frontend_id": "382",
    "difficulty": "Medium",
    "problem_slug": "linked-list-random-node",
    "topics": [
      "Linked List",
      "Math",
      "Reservoir Sampling",
      "Randomized"
    ],
    "description": "Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.\nImplement the Solution class:\nExample 1:\nConstraints:\nFollow up:"
  },
  {
    "title": "Ransom Note",
    "problem_id": "383",
    "frontend_id": "383",
    "difficulty": "Easy",
    "problem_slug": "ransom-note",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.\nEach letter in magazine can only be used once in ransomNote.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Shuffle an Array",
    "problem_id": "384",
    "frontend_id": "384",
    "difficulty": "Medium",
    "problem_slug": "shuffle-an-array",
    "topics": [
      "Array",
      "Math",
      "Design",
      "Randomized"
    ],
    "description": "Given an integer array nums, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling.\nImplement the Solution class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Mini Parser",
    "problem_id": "385",
    "frontend_id": "385",
    "difficulty": "Medium",
    "problem_slug": "mini-parser",
    "topics": [
      "String",
      "Stack",
      "Depth-First Search"
    ],
    "description": "Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized NestedInteger.\nEach element is either an integer or a list whose elements may also be integers or other lists.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Lexicographical Numbers",
    "problem_id": "386",
    "frontend_id": "386",
    "difficulty": "Medium",
    "problem_slug": "lexicographical-numbers",
    "topics": [
      "Depth-First Search",
      "Trie"
    ],
    "description": "Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.\nYou must write an algorithm that runs in O(n) time and uses O(1) extra space.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "First Unique Character in a String",
    "problem_id": "387",
    "frontend_id": "387",
    "difficulty": "Easy",
    "problem_slug": "first-unique-character-in-a-string",
    "topics": [
      "Hash Table",
      "String",
      "Queue",
      "Counting"
    ],
    "description": "Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest Absolute File Path",
    "problem_id": "388",
    "frontend_id": "388",
    "difficulty": "Medium",
    "problem_slug": "longest-absolute-file-path",
    "topics": [
      "String",
      "Stack",
      "Depth-First Search"
    ],
    "description": "Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:\nHere, we have dir as the only directory in the root. dir contains two subdirectories, subdir1 and subdir2. subdir1 contains a file file1.ext and subdirectory subsubdir1. subdir2 contains a subdirectory subsubdir2, which contains a file file2.ext.\nIn text form, it looks like this (with ⟶ representing the tab character):\nIf we were to write this representation in code, it will look like this: \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\". Note that the '\\n' and '\\t' are the new-line and tab characters.\nEvery file and directory has a unique absolute path in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by '/'s. Using the above example, the absolute path to file2.ext is \"dir/subdir2/subsubdir2/file2.ext\". Each directory name consists of letters, digits, and/or spaces. Each file name is of the form name.extension, where name and extension consist of letters, digits, and/or spaces.\nGiven a string input representing the file system in the explained format, return the length of the longest absolute path to a file in the abstracted file system. If there is no file in the system, return 0.\nNote that the testcases are generated such that the file system is valid and no file or directory name has length 0.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Difference",
    "problem_id": "389",
    "frontend_id": "389",
    "difficulty": "Easy",
    "problem_slug": "find-the-difference",
    "topics": [
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Sorting"
    ],
    "description": "You are given two strings s and t.\nString t is generated by random shuffling string s and then add one more letter at a random position.\nReturn the letter that was added to t.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Elimination Game",
    "problem_id": "390",
    "frontend_id": "390",
    "difficulty": "Medium",
    "problem_slug": "elimination-game",
    "topics": [
      "Math",
      "Recursion"
    ],
    "description": "You have a list arr of all integers in the range [1, n] sorted in a strictly increasing order. Apply the following algorithm on arr:\nGiven the integer n, return the last number that remains in arr.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Perfect Rectangle",
    "problem_id": "391",
    "frontend_id": "391",
    "difficulty": "Hard",
    "problem_slug": "perfect-rectangle",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Geometry",
      "Line Sweep"
    ],
    "description": "Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi).\nReturn true if all the rectangles together form an exact cover of a rectangular region.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Is Subsequence",
    "problem_id": "392",
    "frontend_id": "392",
    "difficulty": "Easy",
    "problem_slug": "is-subsequence",
    "topics": [
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "description": "Given two strings s and t, return true if s is a subsequence of t, or false otherwise.\nA subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "UTF-8 Validation",
    "problem_id": "393",
    "frontend_id": "393",
    "difficulty": "Medium",
    "problem_slug": "utf-8-validation",
    "topics": [
      "Array",
      "Bit Manipulation"
    ],
    "description": "Given an integer array data representing the data, return whether it is a valid UTF-8 encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters).\nA character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:\nThis is how the UTF-8 encoding would work:\nx denotes a bit in the binary form of a byte that may be either 0 or 1.\nNote: The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Decode String",
    "problem_id": "394",
    "frontend_id": "394",
    "difficulty": "Medium",
    "problem_slug": "decode-string",
    "topics": [
      "String",
      "Stack",
      "Recursion"
    ],
    "description": "Given an encoded string, return its decoded string.\nThe encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.\nYou may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].\nThe test cases are generated so that the length of the output will never exceed 105.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest Substring with At Least K Repeating Characters",
    "problem_id": "395",
    "frontend_id": "395",
    "difficulty": "Medium",
    "problem_slug": "longest-substring-with-at-least-k-repeating-characters",
    "topics": [
      "Hash Table",
      "String",
      "Divide and Conquer",
      "Sliding Window"
    ],
    "description": "Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.\nif no such substring exists, return 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Rotate Function",
    "problem_id": "396",
    "frontend_id": "396",
    "difficulty": "Medium",
    "problem_slug": "rotate-function",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array nums of length n.\nAssume arrk to be an array obtained by rotating nums by k positions clock-wise. We define the rotation function F on nums as follow:\nReturn the maximum value of F(0), F(1), ..., F(n-1).\nThe test cases are generated so that the answer fits in a 32-bit integer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Integer Replacement",
    "problem_id": "397",
    "frontend_id": "397",
    "difficulty": "Medium",
    "problem_slug": "integer-replacement",
    "topics": [
      "Dynamic Programming",
      "Greedy",
      "Bit Manipulation",
      "Memoization"
    ],
    "description": "Given a positive integer n, you can apply one of the following operations:\nReturn the minimum number of operations needed for n to become 1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Random Pick Index",
    "problem_id": "398",
    "frontend_id": "398",
    "difficulty": "Medium",
    "problem_slug": "random-pick-index",
    "topics": [
      "Hash Table",
      "Math",
      "Reservoir Sampling",
      "Randomized"
    ],
    "description": "Given an integer array nums with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.\nImplement the Solution class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Evaluate Division",
    "problem_id": "399",
    "frontend_id": "399",
    "difficulty": "Medium",
    "problem_slug": "evaluate-division",
    "topics": [
      "Array",
      "String",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph",
      "Shortest Path"
    ],
    "description": "You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.\nYou are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.\nReturn the answers to all queries. If a single answer cannot be determined, return -1.0.\nNote: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.\nNote: The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Nth Digit",
    "problem_id": "400",
    "frontend_id": "400",
    "difficulty": "Medium",
    "problem_slug": "nth-digit",
    "topics": [
      "Math",
      "Binary Search"
    ],
    "description": "Given an integer n, return the nth digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Binary Watch",
    "problem_id": "401",
    "frontend_id": "401",
    "difficulty": "Easy",
    "problem_slug": "binary-watch",
    "topics": [
      "Backtracking",
      "Bit Manipulation"
    ],
    "description": "A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.\nGiven an integer turnedOn which represents the number of LEDs that are currently on (ignoring the PM), return all possible times the watch could represent. You may return the answer in any order.\nThe hour must not contain a leading zero.\nThe minute must consist of two digits and may contain a leading zero.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Remove K Digits",
    "problem_id": "402",
    "frontend_id": "402",
    "difficulty": "Medium",
    "problem_slug": "remove-k-digits",
    "topics": [
      "String",
      "Stack",
      "Greedy",
      "Monotonic Stack"
    ],
    "description": "Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Frog Jump",
    "problem_id": "403",
    "frontend_id": "403",
    "difficulty": "Hard",
    "problem_slug": "frog-jump",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.\nGiven a list of stones positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be 1 unit.\nIf the frog's last jump was k units, its next jump must be either k - 1, k, or k + 1 units. The frog can only jump in the forward direction.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Left Leaves",
    "problem_id": "404",
    "frontend_id": "404",
    "difficulty": "Easy",
    "problem_slug": "sum-of-left-leaves",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the sum of all left leaves.\nA leaf is a node with no children. A left leaf is a leaf that is the left child of another node.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Convert a Number to Hexadecimal",
    "problem_id": "405",
    "frontend_id": "405",
    "difficulty": "Easy",
    "problem_slug": "convert-a-number-to-hexadecimal",
    "topics": [
      "Math",
      "String",
      "Bit Manipulation"
    ],
    "description": "Given a 32-bit integer num, return a string representing its hexadecimal representation. For negative integers, two’s complement method is used.\nAll the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.\nNote: You are not allowed to use any built-in library method to directly solve this problem.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Queue Reconstruction by Height",
    "problem_id": "406",
    "frontend_id": "406",
    "difficulty": "Medium",
    "problem_slug": "queue-reconstruction-by-height",
    "topics": [
      "Array",
      "Binary Indexed Tree",
      "Segment Tree",
      "Sorting"
    ],
    "description": "You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.\nReconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Trapping Rain Water II",
    "problem_id": "407",
    "frontend_id": "407",
    "difficulty": "Hard",
    "problem_slug": "trapping-rain-water-ii",
    "topics": [
      "Array",
      "Breadth-First Search",
      "Heap (Priority Queue)",
      "Matrix"
    ],
    "description": "Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Palindrome",
    "problem_id": "409",
    "frontend_id": "409",
    "difficulty": "Easy",
    "problem_slug": "longest-palindrome",
    "topics": [
      "Hash Table",
      "String",
      "Greedy"
    ],
    "description": "Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.\nLetters are case sensitive, for example, \"Aa\" is not considered a palindrome.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Split Array Largest Sum",
    "problem_id": "410",
    "frontend_id": "410",
    "difficulty": "Hard",
    "problem_slug": "split-array-largest-sum",
    "topics": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Greedy",
      "Prefix Sum"
    ],
    "description": "Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.\nReturn the minimized largest sum of the split.\nA subarray is a contiguous part of the array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Fizz Buzz",
    "problem_id": "412",
    "frontend_id": "412",
    "difficulty": "Easy",
    "problem_slug": "fizz-buzz",
    "topics": [
      "Math",
      "String",
      "Simulation"
    ],
    "description": "Given an integer n, return a string array answer (1-indexed) where:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Arithmetic Slices",
    "problem_id": "413",
    "frontend_id": "413",
    "difficulty": "Medium",
    "problem_slug": "arithmetic-slices",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "description": "An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\nGiven an integer array nums, return the number of arithmetic subarrays of nums.\nA subarray is a contiguous subsequence of the array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Third Maximum Number",
    "problem_id": "414",
    "frontend_id": "414",
    "difficulty": "Easy",
    "problem_slug": "third-maximum-number",
    "topics": [
      "Array",
      "Sorting"
    ],
    "description": "Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Add Strings",
    "problem_id": "415",
    "frontend_id": "415",
    "difficulty": "Easy",
    "problem_slug": "add-strings",
    "topics": [
      "Math",
      "String",
      "Simulation"
    ],
    "description": "Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.\nYou must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Partition Equal Subset Sum",
    "problem_id": "416",
    "frontend_id": "416",
    "difficulty": "Medium",
    "problem_slug": "partition-equal-subset-sum",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Pacific Atlantic Water Flow",
    "problem_id": "417",
    "frontend_id": "417",
    "difficulty": "Medium",
    "problem_slug": "pacific-atlantic-water-flow",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.\nThe island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).\nThe island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\nReturn a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Battleships in a Board",
    "problem_id": "419",
    "frontend_id": "419",
    "difficulty": "Medium",
    "problem_slug": "battleships-in-a-board",
    "topics": [
      "Array",
      "Depth-First Search",
      "Matrix"
    ],
    "description": "Given an m x n matrix board where each cell is a battleship 'X' or empty '.', return the number of the battleships on board.\nBattleships can only be placed horizontally or vertically on board. In other words, they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), where k can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).\nExample 1:\nExample 2:\nConstraints:\nFollow up: Could you do it in one-pass, using only O(1) extra memory and without modifying the values board?"
  },
  {
    "title": "Strong Password Checker",
    "problem_id": "420",
    "frontend_id": "420",
    "difficulty": "Hard",
    "problem_slug": "strong-password-checker",
    "topics": [
      "String",
      "Greedy",
      "Heap (Priority Queue)"
    ],
    "description": "A password is considered strong if the below conditions are all met:\nGiven a string password, return the minimum number of steps required to make password strong. if password is already strong, return 0.\nIn one step, you can:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum XOR of Two Numbers in an Array",
    "problem_id": "421",
    "frontend_id": "421",
    "difficulty": "Medium",
    "problem_slug": "maximum-xor-of-two-numbers-in-an-array",
    "topics": [
      "Array",
      "Hash Table",
      "Bit Manipulation",
      "Trie"
    ],
    "description": "Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 <= i <= j < n.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Reconstruct Original Digits from English",
    "problem_id": "423",
    "frontend_id": "423",
    "difficulty": "Medium",
    "problem_slug": "reconstruct-original-digits-from-english",
    "topics": [
      "Hash Table",
      "Math",
      "String"
    ],
    "description": "Given a string s containing an out-of-order English representation of digits 0-9, return the digits in ascending order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Repeating Character Replacement",
    "problem_id": "424",
    "frontend_id": "424",
    "difficulty": "Medium",
    "problem_slug": "longest-repeating-character-replacement",
    "topics": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.\nReturn the length of the longest substring containing the same letter you can get after performing the above operations.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Construct Quad Tree",
    "problem_id": "772",
    "frontend_id": "427",
    "difficulty": "Medium",
    "problem_slug": "construct-quad-tree",
    "topics": [
      "Array",
      "Divide and Conquer",
      "Tree",
      "Matrix"
    ],
    "description": "Given a n * n matrix grid of 0's and 1's only. We want to represent grid with a Quad-Tree.\nReturn the root of the Quad-Tree representing grid.\nA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\nIf you want to know more about the Quad-Tree, you can refer to the wiki.\nQuad-Tree format:\nYou don't need to read this section for solving the problem. This is only if you want to understand the output format here. The output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.\nIt is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val].\nIf the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "N-ary Tree Level Order Traversal",
    "problem_id": "764",
    "frontend_id": "429",
    "difficulty": "Medium",
    "problem_slug": "n-ary-tree-level-order-traversal",
    "topics": [
      "Tree",
      "Breadth-First Search"
    ],
    "description": "Given an n-ary tree, return the level order traversal of its nodes' values.\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Flatten a Multilevel Doubly Linked List",
    "problem_id": "766",
    "frontend_id": "430",
    "difficulty": "Medium",
    "problem_slug": "flatten-a-multilevel-doubly-linked-list",
    "topics": [
      "Linked List",
      "Depth-First Search",
      "Doubly-Linked List"
    ],
    "description": "You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional child pointer. This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure as shown in the example below.\nGiven the head of the first level of the list, flatten the list so that all the nodes appear in a single-level, doubly linked list. Let curr be a node with a child list. The nodes in the child list should appear after curr and before curr.next in the flattened list.\nReturn the head of the flattened list. The nodes in the list must have all of their child pointers set to null.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nHow the multilevel linked list is represented in test cases:\nWe use the multilevel linked list from Example 1 above:\nThe serialization of each level is as follows:\nTo serialize all levels together, we will add nulls in each level to signify no node connects to the upper node of the previous level. The serialization becomes:\nMerging the serialization of each level and removing trailing nulls we obtain:"
  },
  {
    "title": "All O`one Data Structure",
    "problem_id": "432",
    "frontend_id": "432",
    "difficulty": "Hard",
    "problem_slug": "all-oone-data-structure",
    "topics": [
      "Hash Table",
      "Linked List",
      "Design",
      "Doubly-Linked List"
    ],
    "description": "Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.\nImplement the AllOne class:\nNote that each function must run in O(1) average time complexity.\nExample 1:\nConstraints:"
  },
  {
    "title": "Minimum Genetic Mutation",
    "problem_id": "433",
    "frontend_id": "433",
    "difficulty": "Medium",
    "problem_slug": "minimum-genetic-mutation",
    "topics": [
      "Hash Table",
      "String",
      "Breadth-First Search"
    ],
    "description": "A gene string can be represented by an 8-character long string, with choices from 'A', 'C', 'G', and 'T'.\nSuppose we need to investigate a mutation from a gene string startGene to a gene string endGene where one mutation is defined as one single character changed in the gene string.\nThere is also a gene bank bank that records all the valid gene mutations. A gene must be in bank to make it a valid gene string.\nGiven the two gene strings startGene and endGene and the gene bank bank, return the minimum number of mutations needed to mutate from startGene to endGene. If there is no such a mutation, return -1.\nNote that the starting point is assumed to be valid, so it might not be included in the bank.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Segments in a String",
    "problem_id": "434",
    "frontend_id": "434",
    "difficulty": "Easy",
    "problem_slug": "number-of-segments-in-a-string",
    "topics": [
      "String"
    ],
    "description": "Given a string s, return the number of segments in the string.\nA segment is defined to be a contiguous sequence of non-space characters.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Non-overlapping Intervals",
    "problem_id": "435",
    "frontend_id": "435",
    "difficulty": "Medium",
    "problem_slug": "non-overlapping-intervals",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Greedy",
      "Sorting"
    ],
    "description": "Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\nNote that intervals which only touch at a point are non-overlapping. For example, [1, 2] and [2, 3] are non-overlapping.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Path Sum III",
    "problem_id": "437",
    "frontend_id": "437",
    "difficulty": "Medium",
    "problem_slug": "path-sum-iii",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.\nThe path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find All Anagrams in a String",
    "problem_id": "438",
    "frontend_id": "438",
    "difficulty": "Medium",
    "problem_slug": "find-all-anagrams-in-a-string",
    "topics": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "K-th Smallest in Lexicographical Order",
    "problem_id": "440",
    "frontend_id": "440",
    "difficulty": "Hard",
    "problem_slug": "k-th-smallest-in-lexicographical-order",
    "topics": [
      "Trie"
    ],
    "description": "Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Arranging Coins",
    "problem_id": "441",
    "frontend_id": "441",
    "difficulty": "Easy",
    "problem_slug": "arranging-coins",
    "topics": [
      "Math",
      "Binary Search"
    ],
    "description": "You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\nGiven the integer n, return the number of complete rows of the staircase you will build.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find All Duplicates in an Array",
    "problem_id": "442",
    "frontend_id": "442",
    "difficulty": "Medium",
    "problem_slug": "find-all-duplicates-in-an-array",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears at most twice, return an array of all the integers that appears twice.\nYou must write an algorithm that runs in O(n) time and uses only constant auxiliary space, excluding the space needed to store the output\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "String Compression",
    "problem_id": "443",
    "frontend_id": "443",
    "difficulty": "Medium",
    "problem_slug": "string-compression",
    "topics": [
      "Two Pointers",
      "String"
    ],
    "description": "Given an array of characters chars, compress it using the following algorithm:\nBegin with an empty string s. For each group of consecutive repeating characters in chars:\nThe compressed string s should not be returned separately, but instead, be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.\nAfter you are done modifying the input array, return the new length of the array.\nYou must write an algorithm that uses only constant extra space.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Add Two Numbers II",
    "problem_id": "445",
    "frontend_id": "445",
    "difficulty": "Medium",
    "problem_slug": "add-two-numbers-ii",
    "topics": [
      "Linked List",
      "Math",
      "Stack"
    ],
    "description": "You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Could you solve it without reversing the input lists?"
  },
  {
    "title": "Arithmetic Slices II - Subsequence",
    "problem_id": "446",
    "frontend_id": "446",
    "difficulty": "Hard",
    "problem_slug": "arithmetic-slices-ii-subsequence",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "Given an integer array nums, return the number of all the arithmetic subsequences of nums.\nA sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\nA subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\nThe test cases are generated so that the answer fits in 32-bit integer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Boomerangs",
    "problem_id": "447",
    "frontend_id": "447",
    "difficulty": "Medium",
    "problem_slug": "number-of-boomerangs",
    "topics": [
      "Array",
      "Hash Table",
      "Math"
    ],
    "description": "You are given n points in the plane that are all distinct, where points[i] = [xi, yi]. A boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).\nReturn the number of boomerangs.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find All Numbers Disappeared in an Array",
    "problem_id": "448",
    "frontend_id": "448",
    "difficulty": "Easy",
    "problem_slug": "find-all-numbers-disappeared-in-an-array",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.\nExample 1:\nExample 2:\nConstraints:\nFollow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space."
  },
  {
    "title": "Serialize and Deserialize BST",
    "problem_id": "449",
    "frontend_id": "449",
    "difficulty": "Medium",
    "problem_slug": "serialize-and-deserialize-bst",
    "topics": [
      "String",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Design",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\nDesign an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.\nThe encoded string should be as compact as possible.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Delete Node in a BST",
    "problem_id": "450",
    "frontend_id": "450",
    "difficulty": "Medium",
    "problem_slug": "delete-node-in-a-bst",
    "topics": [
      "Tree",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.\nBasically, the deletion can be divided into two stages:\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Could you solve it with time complexity O(height of tree)?"
  },
  {
    "title": "Sort Characters By Frequency",
    "problem_id": "451",
    "frontend_id": "451",
    "difficulty": "Medium",
    "problem_slug": "sort-characters-by-frequency",
    "topics": [
      "Hash Table",
      "String",
      "Sorting",
      "Heap (Priority Queue)",
      "Bucket Sort",
      "Counting"
    ],
    "description": "Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.\nReturn the sorted string. If there are multiple answers, return any of them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Arrows to Burst Balloons",
    "problem_id": "452",
    "frontend_id": "452",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-arrows-to-burst-balloons",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons.\nArrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.\nGiven the array points, return the minimum number of arrows that must be shot to burst all balloons.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Moves to Equal Array Elements",
    "problem_id": "453",
    "frontend_id": "453",
    "difficulty": "Medium",
    "problem_slug": "minimum-moves-to-equal-array-elements",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\nIn one move, you can increment n - 1 elements of the array by 1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "4Sum II",
    "problem_id": "454",
    "frontend_id": "454",
    "difficulty": "Medium",
    "problem_slug": "4sum-ii",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Assign Cookies",
    "problem_id": "455",
    "frontend_id": "455",
    "difficulty": "Easy",
    "problem_slug": "assign-cookies",
    "topics": [
      "Array",
      "Two Pointers",
      "Greedy",
      "Sorting"
    ],
    "description": "Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.\nEach child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\nExample 1:\nExample 2:\nConstraints:\nNote: This question is the same as  2410: Maximum Matching of Players With Trainers."
  },
  {
    "title": "132 Pattern",
    "problem_id": "456",
    "frontend_id": "456",
    "difficulty": "Medium",
    "problem_slug": "132-pattern",
    "topics": [
      "Array",
      "Binary Search",
      "Stack",
      "Monotonic Stack",
      "Ordered Set"
    ],
    "description": "Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].\nReturn true if there is a 132 pattern in nums, otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Circular Array Loop",
    "problem_id": "457",
    "frontend_id": "457",
    "difficulty": "Medium",
    "problem_slug": "circular-array-loop",
    "topics": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "description": "You are playing a game involving a circular array of non-zero integers nums. Each nums[i] denotes the number of indices forward/backward you must move if you are located at index i:\nSince the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.\nA cycle in the array consists of a sequence of indices seq of length k where:\nReturn true if there is a cycle in nums, or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Could you solve it in O(n) time complexity and O(1) extra space complexity?"
  },
  {
    "title": "Poor Pigs",
    "problem_id": "458",
    "frontend_id": "458",
    "difficulty": "Hard",
    "problem_slug": "poor-pigs",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "description": "There are buckets buckets of liquid, where exactly one of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have minutesToTest minutes to determine which bucket is poisonous.\nYou can feed the pigs according to these steps:\nGiven buckets, minutesToDie, and minutesToTest, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Repeated Substring Pattern",
    "problem_id": "459",
    "frontend_id": "459",
    "difficulty": "Easy",
    "problem_slug": "repeated-substring-pattern",
    "topics": [
      "String",
      "String Matching"
    ],
    "description": "Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "LFU Cache",
    "problem_id": "460",
    "frontend_id": "460",
    "difficulty": "Hard",
    "problem_slug": "lfu-cache",
    "topics": [
      "Hash Table",
      "Linked List",
      "Design",
      "Doubly-Linked List"
    ],
    "description": "Design and implement a data structure for a Least Frequently Used (LFU) cache.\nImplement the LFUCache class:\nTo determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.\nWhen a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented either a get or put operation is called on it.\nThe functions get and put must each run in O(1) average time complexity.\nExample 1:\nConstraints:"
  },
  {
    "title": "Hamming Distance",
    "problem_id": "461",
    "frontend_id": "461",
    "difficulty": "Easy",
    "problem_slug": "hamming-distance",
    "topics": [
      "Bit Manipulation"
    ],
    "description": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\nGiven two integers x and y, return the Hamming distance between them.\nExample 1:\nExample 2:\nConstraints:\nNote: This question is the same as  2220: Minimum Bit Flips to Convert Number."
  },
  {
    "title": "Minimum Moves to Equal Array Elements II",
    "problem_id": "462",
    "frontend_id": "462",
    "difficulty": "Medium",
    "problem_slug": "minimum-moves-to-equal-array-elements-ii",
    "topics": [
      "Array",
      "Math",
      "Sorting"
    ],
    "description": "Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\nIn one move, you can increment or decrement an element of the array by 1.\nTest cases are designed so that the answer will fit in a 32-bit integer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Island Perimeter",
    "problem_id": "463",
    "frontend_id": "463",
    "difficulty": "Easy",
    "problem_slug": "island-perimeter",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "You are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water.\nGrid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).\nThe island doesn't have \"lakes\", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Can I Win",
    "problem_id": "464",
    "frontend_id": "464",
    "difficulty": "Medium",
    "problem_slug": "can-i-win",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Bit Manipulation",
      "Memoization",
      "Game Theory",
      "Bitmask"
    ],
    "description": "In the \"100 game\" two players take turns adding, to a running total, any integer from 1 to 10. The player who first causes the running total to reach or exceed 100 wins.\nWhat if we change the game so that players cannot re-use integers?\nFor example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.\nGiven two integers maxChoosableInteger and desiredTotal, return true if the first player to move can force a win, otherwise, return false. Assume both players play optimally.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count The Repetitions",
    "problem_id": "466",
    "frontend_id": "466",
    "difficulty": "Hard",
    "problem_slug": "count-the-repetitions",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "We define str = [s, n] as the string str which consists of the string s concatenated n times.\nWe define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1.\nYou are given two strings s1 and s2 and two integers n1 and n2. You have the two strings str1 = [s1, n1] and str2 = [s2, n2].\nReturn the maximum integer m such that str = [str2, m] can be obtained from str1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Unique Substrings in Wraparound String",
    "problem_id": "467",
    "frontend_id": "467",
    "difficulty": "Medium",
    "problem_slug": "unique-substrings-in-wraparound-string",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "We define the string base to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so base will look like this:\nGiven a string s, return the number of unique non-empty substrings of s are present in base.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Validate IP Address",
    "problem_id": "468",
    "frontend_id": "468",
    "difficulty": "Medium",
    "problem_slug": "validate-ip-address",
    "topics": [
      "String"
    ],
    "description": "Given a string queryIP, return \"IPv4\" if IP is a valid IPv4 address, \"IPv6\" if IP is a valid IPv6 address or \"Neither\" if IP is not a correct IP of any type.\nA valid IPv4 address is an IP in the form \"x1.x2.x3.x4\" where 0 <= xi <= 255 and xi cannot contain leading zeros. For example, \"192.168.1.1\" and \"192.168.1.0\" are valid IPv4 addresses while \"192.168.01.1\", \"192.168.1.00\", and \"192.168@1.1\" are invalid IPv4 addresses.\nA valid IPv6 address is an IP in the form \"x1:x2:x3:x4:x5:x6:x7:x8\" where:\nFor example, \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\" and \"2001:db8:85a3:0:0:8A2E:0370:7334\" are valid IPv6 addresses, while \"2001:0db8:85a3::8A2E:037j:7334\" and \"02001:0db8:85a3:0000:0000:8a2e:0370:7334\" are invalid IPv6 addresses.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Implement Rand10() Using Rand7()",
    "problem_id": "903",
    "frontend_id": "470",
    "difficulty": "Medium",
    "problem_slug": "implement-rand10-using-rand7",
    "topics": [
      "Math",
      "Rejection Sampling",
      "Randomized",
      "Probability and Statistics"
    ],
    "description": "Given the API rand7() that generates a uniform random integer in the range [1, 7], write a function rand10() that generates a uniform random integer in the range [1, 10]. You can only call the API rand7(), and you shouldn't call any other API. Please do not use a language's built-in random API.\nEach test case will have one internal argument n, the number of times that your implemented function rand10() will be called while testing. Note that this is not an argument passed to rand10().\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up:"
  },
  {
    "title": "Concatenated Words",
    "problem_id": "472",
    "frontend_id": "472",
    "difficulty": "Hard",
    "problem_slug": "concatenated-words",
    "topics": [
      "Array",
      "String",
      "Dynamic Programming",
      "Depth-First Search",
      "Trie",
      "Sorting"
    ],
    "description": "Given an array of strings words (without duplicates), return all the concatenated words in the given list of words.\nA concatenated word is defined as a string that is comprised entirely of at least two shorter words (not necessarily distinct) in the given array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Matchsticks to Square",
    "problem_id": "473",
    "frontend_id": "473",
    "difficulty": "Medium",
    "problem_slug": "matchsticks-to-square",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "You are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\nReturn true if you can make this square and false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Ones and Zeroes",
    "problem_id": "474",
    "frontend_id": "474",
    "difficulty": "Medium",
    "problem_slug": "ones-and-zeroes",
    "topics": [
      "Array",
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given an array of binary strings strs and two integers m and n.\nReturn the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.\nA set x is a subset of a set y if all elements of x are also elements of y.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Heaters",
    "problem_id": "475",
    "frontend_id": "475",
    "difficulty": "Medium",
    "problem_slug": "heaters",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "description": "Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.\nEvery house can be warmed, as long as the house is within the heater's warm radius range.\nGiven the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses.\nNotice that all the heaters follow your radius standard, and the warm radius will the same.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number Complement",
    "problem_id": "476",
    "frontend_id": "476",
    "difficulty": "Easy",
    "problem_slug": "number-complement",
    "topics": [
      "Bit Manipulation"
    ],
    "description": "The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.\nGiven an integer num, return its complement.\nExample 1:\nExample 2:\nConstraints:\nNote: This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/"
  },
  {
    "title": "Total Hamming Distance",
    "problem_id": "477",
    "frontend_id": "477",
    "difficulty": "Medium",
    "problem_slug": "total-hamming-distance",
    "topics": [
      "Array",
      "Math",
      "Bit Manipulation"
    ],
    "description": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\nGiven an integer array nums, return the sum of Hamming distances between all the pairs of the integers in nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Generate Random Point in a Circle",
    "problem_id": "915",
    "frontend_id": "478",
    "difficulty": "Medium",
    "problem_slug": "generate-random-point-in-a-circle",
    "topics": [
      "Math",
      "Geometry",
      "Rejection Sampling",
      "Randomized"
    ],
    "description": "Given the radius and the position of the center of a circle, implement the function randPoint which generates a uniform random point inside the circle.\nImplement the Solution class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Largest Palindrome Product",
    "problem_id": "479",
    "frontend_id": "479",
    "difficulty": "Hard",
    "problem_slug": "largest-palindrome-product",
    "topics": [
      "Math",
      "Enumeration"
    ],
    "description": "Given an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers. Since the answer can be very large, return it modulo 1337.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sliding Window Median",
    "problem_id": "480",
    "frontend_id": "480",
    "difficulty": "Hard",
    "problem_slug": "sliding-window-median",
    "topics": [
      "Array",
      "Hash Table",
      "Sliding Window",
      "Heap (Priority Queue)"
    ],
    "description": "The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.\nYou are given an integer array nums and an integer k. There is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\nReturn the median array for each window in the original array. Answers within 10-5 of the actual value will be accepted.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Magical String",
    "problem_id": "481",
    "frontend_id": "481",
    "difficulty": "Medium",
    "problem_slug": "magical-string",
    "topics": [
      "Two Pointers",
      "String"
    ],
    "description": "A magical string s consists of only '1' and '2' and obeys the following rules:\nThe first few elements of s is s = \"1221121221221121122……\". If we group the consecutive 1's and 2's in s, it will be \"1 22 11 2 1 22 1 22 11 2 11 22 ......\" and the occurrences of 1's or 2's in each group are \"1 2 2 1 1 2 1 2 2 1 2 2 ......\". You can see that the occurrence sequence is s itself.\nGiven an integer n, return the number of 1's in the first n number in the magical string s.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "License Key Formatting",
    "problem_id": "482",
    "frontend_id": "482",
    "difficulty": "Easy",
    "problem_slug": "license-key-formatting",
    "topics": [
      "String"
    ],
    "description": "You are given a license key represented as a string s that consists of only alphanumeric characters and dashes. The string is separated into n + 1 groups by n dashes. You are also given an integer k.\nWe want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.\nReturn the reformatted license key.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Smallest Good Base",
    "problem_id": "483",
    "frontend_id": "483",
    "difficulty": "Hard",
    "problem_slug": "smallest-good-base",
    "topics": [
      "Math",
      "Binary Search"
    ],
    "description": "Given an integer n represented as a string, return the smallest good base of n.\nWe call k >= 2 a good base of n, if all digits of n base k are 1's.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Max Consecutive Ones",
    "problem_id": "485",
    "frontend_id": "485",
    "difficulty": "Easy",
    "problem_slug": "max-consecutive-ones",
    "topics": [
      "Array"
    ],
    "description": "Given a binary array nums, return the maximum number of consecutive 1's in the array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Predict the Winner",
    "problem_id": "486",
    "frontend_id": "486",
    "difficulty": "Medium",
    "problem_slug": "predict-the-winner",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Recursion",
      "Game Theory"
    ],
    "description": "You are given an integer array nums. Two players are playing a game with this array: player 1 and player 2.\nPlayer 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of 0. At each turn, the player takes one of the numbers from either end of the array (i.e., nums[0] or nums[nums.length - 1]) which reduces the size of the array by 1. The player adds the chosen number to their score. The game ends when there are no more elements in the array.\nReturn true if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return true. You may assume that both players are playing optimally.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Zuma Game",
    "problem_id": "488",
    "frontend_id": "488",
    "difficulty": "Hard",
    "problem_slug": "zuma-game",
    "topics": [
      "String",
      "Dynamic Programming",
      "Stack",
      "Breadth-First Search",
      "Memoization"
    ],
    "description": "You are playing a variation of the game Zuma.\nIn this variation of Zuma, there is a single row of colored balls on a board, where each ball can be colored red 'R', yellow 'Y', blue 'B', green 'G', or white 'W'. You also have several colored balls in your hand.\nYour goal is to clear all of the balls from the board. On each turn:\nGiven a string board, representing the row of balls on the board, and a string hand, representing the balls in your hand, return the minimum number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Non-decreasing Subsequences",
    "problem_id": "491",
    "frontend_id": "491",
    "difficulty": "Medium",
    "problem_slug": "non-decreasing-subsequences",
    "topics": [
      "Array",
      "Hash Table",
      "Backtracking",
      "Bit Manipulation"
    ],
    "description": "Given an integer array nums, return all the different possible non-decreasing subsequences of the given array with at least two elements. You may return the answer in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Construct the Rectangle",
    "problem_id": "492",
    "frontend_id": "492",
    "difficulty": "Easy",
    "problem_slug": "construct-the-rectangle",
    "topics": [
      "Math"
    ],
    "description": "A web developer needs to know how to design a web page's size. So, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:\nReturn an array [L, W] where L and W are the length and width of the web page you designed in sequence.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Reverse Pairs",
    "problem_id": "493",
    "frontend_id": "493",
    "difficulty": "Hard",
    "problem_slug": "reverse-pairs",
    "topics": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set"
    ],
    "description": "Given an integer array nums, return the number of reverse pairs in the array.\nA reverse pair is a pair (i, j) where:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Target Sum",
    "problem_id": "494",
    "frontend_id": "494",
    "difficulty": "Medium",
    "problem_slug": "target-sum",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Backtracking"
    ],
    "description": "You are given an integer array nums and an integer target.\nYou want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.\nReturn the number of different expressions that you can build, which evaluates to target.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Teemo Attacking",
    "problem_id": "495",
    "frontend_id": "495",
    "difficulty": "Easy",
    "problem_slug": "teemo-attacking",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly duration seconds. More formally, an attack at second t will mean Ashe is poisoned during the inclusive time interval [t, t + duration - 1]. If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack.\nYou are given a non-decreasing integer array timeSeries, where timeSeries[i] denotes that Teemo attacks Ashe at second timeSeries[i], and an integer duration.\nReturn the total number of seconds that Ashe is poisoned.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Next Greater Element I",
    "problem_id": "496",
    "frontend_id": "496",
    "difficulty": "Easy",
    "problem_slug": "next-greater-element-i",
    "topics": [
      "Array",
      "Hash Table",
      "Stack",
      "Monotonic Stack"
    ],
    "description": "The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.\nYou are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.\nFor each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.\nReturn an array ans of length nums1.length such that ans[i] is the next greater element as described above.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Random Point in Non-overlapping Rectangles",
    "problem_id": "914",
    "frontend_id": "497",
    "difficulty": "Medium",
    "problem_slug": "random-point-in-non-overlapping-rectangles",
    "topics": [
      "Array",
      "Math",
      "Binary Search",
      "Reservoir Sampling",
      "Prefix Sum",
      "Ordered Set",
      "Randomized"
    ],
    "description": "You are given an array of non-overlapping axis-aligned rectangles rects where rects[i] = [ai, bi, xi, yi] indicates that (ai, bi) is the bottom-left corner point of the ith rectangle and (xi, yi) is the top-right corner point of the ith rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.\nAny integer point inside the space covered by one of the given rectangles should be equally likely to be returned.\nNote that an integer point is a point that has integer coordinates.\nImplement the Solution class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Diagonal Traverse",
    "problem_id": "498",
    "frontend_id": "498",
    "difficulty": "Medium",
    "problem_slug": "diagonal-traverse",
    "topics": [
      "Array",
      "Matrix",
      "Simulation"
    ],
    "description": "Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Keyboard Row",
    "problem_id": "500",
    "frontend_id": "500",
    "difficulty": "Easy",
    "problem_slug": "keyboard-row",
    "topics": [
      "Array",
      "Hash Table",
      "String"
    ],
    "description": "Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.\nNote that the strings are case-insensitive, both lowercased and uppercased of the same letter are treated as if they are at the same row.\nIn the American keyboard:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Mode in Binary Search Tree",
    "problem_id": "501",
    "frontend_id": "501",
    "difficulty": "Easy",
    "problem_slug": "find-mode-in-binary-search-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.\nIf the tree has more than one mode, return them in any order.\nAssume a BST is defined as follows:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "IPO",
    "problem_id": "502",
    "frontend_id": "502",
    "difficulty": "Hard",
    "problem_slug": "ipo",
    "topics": [
      "Array",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most k distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most k distinct projects.\nYou are given n projects where the ith project has a pure profit profits[i] and a minimum capital of capital[i] is needed to start it.\nInitially, you have w capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.\nPick a list of at most k distinct projects from given projects to maximize your final capital, and return the final maximized capital.\nThe answer is guaranteed to fit in a 32-bit signed integer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Next Greater Element II",
    "problem_id": "503",
    "frontend_id": "503",
    "difficulty": "Medium",
    "problem_slug": "next-greater-element-ii",
    "topics": [
      "Array",
      "Stack",
      "Monotonic Stack"
    ],
    "description": "Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.\nThe next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Base 7",
    "problem_id": "504",
    "frontend_id": "504",
    "difficulty": "Easy",
    "problem_slug": "base-7",
    "topics": [
      "Math",
      "String"
    ],
    "description": "Given an integer num, return a string of its base 7 representation.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Relative Ranks",
    "problem_id": "506",
    "frontend_id": "506",
    "difficulty": "Easy",
    "problem_slug": "relative-ranks",
    "topics": [
      "Array",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. All the scores are guaranteed to be unique.\nThe athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. The placement of each athlete determines their rank:\nReturn an array answer of size n where answer[i] is the rank of the ith athlete.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Perfect Number",
    "problem_id": "507",
    "frontend_id": "507",
    "difficulty": "Easy",
    "problem_slug": "perfect-number",
    "topics": [
      "Math"
    ],
    "description": "A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer x is an integer that can divide x evenly.\nGiven an integer n, return true if n is a perfect number, otherwise return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Most Frequent Subtree Sum",
    "problem_id": "508",
    "frontend_id": "508",
    "difficulty": "Medium",
    "problem_slug": "most-frequent-subtree-sum",
    "topics": [
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the most frequent subtree sum. If there is a tie, return all the values with the highest frequency in any order.\nThe subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Fibonacci Number",
    "problem_id": "1013",
    "frontend_id": "509",
    "difficulty": "Easy",
    "problem_slug": "fibonacci-number",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Recursion",
      "Memoization"
    ],
    "description": "The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,\nGiven n, calculate F(n).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Game Play Analysis I",
    "problem_id": "1179",
    "frontend_id": "511",
    "difficulty": "Easy",
    "problem_slug": "game-play-analysis-i",
    "topics": [
      "Database"
    ],
    "description": "Table: Activity\nWrite a solution to find the first login date for each player.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Find Bottom Left Tree Value",
    "problem_id": "513",
    "frontend_id": "513",
    "difficulty": "Medium",
    "problem_slug": "find-bottom-left-tree-value",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the leftmost value in the last row of the tree.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Freedom Trail",
    "problem_id": "514",
    "frontend_id": "514",
    "difficulty": "Hard",
    "problem_slug": "freedom-trail",
    "topics": [
      "String",
      "Dynamic Programming",
      "Depth-First Search",
      "Breadth-First Search"
    ],
    "description": "In the video game Fallout 4, the quest \"Road to Freedom\" requires players to reach a metal dial called the \"Freedom Trail Ring\" and use the dial to spell a specific keyword to open the door.\nGiven a string ring that represents the code engraved on the outer ring and another string key that represents the keyword that needs to be spelled, return the minimum number of steps to spell all the characters in the keyword.\nInitially, the first character of the ring is aligned at the \"12:00\" direction. You should spell all the characters in key one by one by rotating ring clockwise or anticlockwise to make each character of the string key aligned at the \"12:00\" direction and then by pressing the center button.\nAt the stage of rotating the ring to spell the key character key[i]:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Largest Value in Each Tree Row",
    "problem_id": "515",
    "frontend_id": "515",
    "difficulty": "Medium",
    "problem_slug": "find-largest-value-in-each-tree-row",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Palindromic Subsequence",
    "problem_id": "516",
    "frontend_id": "516",
    "difficulty": "Medium",
    "problem_slug": "longest-palindromic-subsequence",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "Given a string s, find the longest palindromic subsequence's length in s.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Super Washing Machines",
    "problem_id": "517",
    "frontend_id": "517",
    "difficulty": "Hard",
    "problem_slug": "super-washing-machines",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "You have n super washing machines on a line. Initially, each washing machine has some dresses or is empty.\nFor each move, you could choose any m (1 <= m <= n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.\nGiven an integer array machines representing the number of dresses in each washing machine from left to right on the line, return the minimum number of moves to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Coin Change II",
    "problem_id": "518",
    "frontend_id": "518",
    "difficulty": "Medium",
    "problem_slug": "coin-change-ii",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\nReturn the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.\nYou may assume that you have an infinite number of each kind of coin.\nThe answer is guaranteed to fit into a signed 32-bit integer.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Random Flip Matrix",
    "problem_id": "913",
    "frontend_id": "519",
    "difficulty": "Medium",
    "problem_slug": "random-flip-matrix",
    "topics": [
      "Hash Table",
      "Math",
      "Reservoir Sampling",
      "Randomized"
    ],
    "description": "There is an m x n binary grid matrix with all the values set 0 initially. Design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and flips it to 1. All the indices (i, j) where matrix[i][j] == 0 should be equally likely to be returned.\nOptimize your algorithm to minimize the number of calls made to the built-in random function of your language and optimize the time and space complexity.\nImplement the Solution class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Detect Capital",
    "problem_id": "520",
    "frontend_id": "520",
    "difficulty": "Easy",
    "problem_slug": "detect-capital",
    "topics": [
      "String"
    ],
    "description": "We define the usage of capitals in a word to be right when one of the following cases holds:\nGiven a string word, return true if the usage of capitals in it is right.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Uncommon Subsequence I",
    "problem_id": "521",
    "frontend_id": "521",
    "difficulty": "Easy",
    "problem_slug": "longest-uncommon-subsequence-i",
    "topics": [
      "String"
    ],
    "description": "Given two strings a and b, return the length of the longest uncommon subsequence between a and b. If no such uncommon subsequence exists, return -1.\nAn uncommon subsequence between two strings is a string that is a subsequence of exactly one of them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest Uncommon Subsequence II",
    "problem_id": "522",
    "frontend_id": "522",
    "difficulty": "Medium",
    "problem_slug": "longest-uncommon-subsequence-ii",
    "topics": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "String",
      "Sorting"
    ],
    "description": "Given an array of strings strs, return the length of the longest uncommon subsequence between them. If the longest uncommon subsequence does not exist, return -1.\nAn uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others.\nA subsequence of a string s is a string that can be obtained after deleting any number of characters from s.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Continuous Subarray Sum",
    "problem_id": "523",
    "frontend_id": "523",
    "difficulty": "Medium",
    "problem_slug": "continuous-subarray-sum",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Prefix Sum"
    ],
    "description": "Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.\nA good subarray is a subarray where:\nNote that:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest Word in Dictionary through Deleting",
    "problem_id": "524",
    "frontend_id": "524",
    "difficulty": "Medium",
    "problem_slug": "longest-word-in-dictionary-through-deleting",
    "topics": [
      "Array",
      "Two Pointers",
      "String",
      "Sorting"
    ],
    "description": "Given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Contiguous Array",
    "problem_id": "525",
    "frontend_id": "525",
    "difficulty": "Medium",
    "problem_slug": "contiguous-array",
    "topics": [
      "Array",
      "Hash Table",
      "Prefix Sum"
    ],
    "description": "Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Beautiful Arrangement",
    "problem_id": "526",
    "frontend_id": "526",
    "difficulty": "Medium",
    "problem_slug": "beautiful-arrangement",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "Suppose you have n integers labeled 1 through n. A permutation of those n integers perm (1-indexed) is considered a beautiful arrangement if for every i (1 <= i <= n), either of the following is true:\nGiven an integer n, return the number of the beautiful arrangements that you can construct.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Random Pick with Weight",
    "problem_id": "912",
    "frontend_id": "528",
    "difficulty": "Medium",
    "problem_slug": "random-pick-with-weight",
    "topics": [
      "Array",
      "Math",
      "Binary Search",
      "Prefix Sum",
      "Randomized"
    ],
    "description": "You are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index.\nYou need to implement the function pickIndex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. The probability of picking an index i is w[i] / sum(w).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minesweeper",
    "problem_id": "529",
    "frontend_id": "529",
    "difficulty": "Medium",
    "problem_slug": "minesweeper",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "Let's play the minesweeper game (Wikipedia, online game)!\nYou are given an m x n char matrix board representing the game board where:\nYou are also given an integer array click where click = [clickr, clickc] represents the next click position among all the unrevealed squares ('M' or 'E').\nReturn the board after revealing this position according to the following rules:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Absolute Difference in BST",
    "problem_id": "530",
    "frontend_id": "530",
    "difficulty": "Easy",
    "problem_slug": "minimum-absolute-difference-in-bst",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.\nExample 1:\nExample 2:\nConstraints:\nNote: This question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/"
  },
  {
    "title": "K-diff Pairs in an Array",
    "problem_id": "532",
    "frontend_id": "532",
    "difficulty": "Medium",
    "problem_slug": "k-diff-pairs-in-an-array",
    "topics": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "description": "Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.\nA k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:\nNotice that |val| denotes the absolute value of val.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Encode and Decode TinyURL",
    "problem_id": "535",
    "frontend_id": "535",
    "difficulty": "Medium",
    "problem_slug": "encode-and-decode-tinyurl",
    "topics": [
      "Hash Table",
      "String",
      "Design",
      "Hash Function"
    ],
    "description": "TinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk. Design a class to encode a URL and decode a tiny URL.\nThere is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.\nImplement the Solution class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Complex Number Multiplication",
    "problem_id": "537",
    "frontend_id": "537",
    "difficulty": "Medium",
    "problem_slug": "complex-number-multiplication",
    "topics": [
      "Math",
      "String",
      "Simulation"
    ],
    "description": "A complex number can be represented as a string on the form \"real+imaginaryi\" where:\nGiven two complex numbers num1 and num2 as strings, return a string of the complex number that represents their multiplications.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Convert BST to Greater Tree",
    "problem_id": "538",
    "frontend_id": "538",
    "difficulty": "Medium",
    "problem_slug": "convert-bst-to-greater-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.\nAs a reminder, a binary search tree is a tree that satisfies these constraints:\nExample 1:\nExample 2:\nConstraints:\nNote: This question is the same as 1038: https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/"
  },
  {
    "title": "Minimum Time Difference",
    "problem_id": "539",
    "frontend_id": "539",
    "difficulty": "Medium",
    "problem_slug": "minimum-time-difference",
    "topics": [
      "Array",
      "Math",
      "String",
      "Sorting"
    ],
    "description": "Example 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Single Element in a Sorted Array",
    "problem_id": "540",
    "frontend_id": "540",
    "difficulty": "Medium",
    "problem_slug": "single-element-in-a-sorted-array",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.\nReturn the single element that appears only once.\nYour solution must run in O(log n) time and O(1) space.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Reverse String II",
    "problem_id": "541",
    "frontend_id": "541",
    "difficulty": "Easy",
    "problem_slug": "reverse-string-ii",
    "topics": [
      "Two Pointers",
      "String"
    ],
    "description": "Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.\nIf there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "01 Matrix",
    "problem_id": "542",
    "frontend_id": "542",
    "difficulty": "Medium",
    "problem_slug": "01-matrix",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.\nThe distance between two cells sharing a common edge is 1.\nExample 1:\nExample 2:\nConstraints:\nNote: This question is the same as 1765: https://leetcode.com/problems/map-of-highest-peak/"
  },
  {
    "title": "Diameter of Binary Tree",
    "problem_id": "543",
    "frontend_id": "543",
    "difficulty": "Easy",
    "problem_slug": "diameter-of-binary-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the length of the diameter of the tree.\nThe diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\nThe length of a path between two nodes is represented by the number of edges between them.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Remove Boxes",
    "problem_id": "546",
    "frontend_id": "546",
    "difficulty": "Hard",
    "problem_slug": "remove-boxes",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Memoization"
    ],
    "description": "You are given several boxes with different colors represented by different positive numbers.\nYou may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of k boxes, k >= 1), remove them and get k * k points.\nReturn the maximum points you can get.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Provinces",
    "problem_id": "547",
    "frontend_id": "547",
    "difficulty": "Medium",
    "problem_slug": "number-of-provinces",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "description": "There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.\nA province is a group of directly or indirectly connected cities and no other cities outside of the group.\nYou are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.\nReturn the total number of provinces.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Game Play Analysis IV",
    "problem_id": "1182",
    "frontend_id": "550",
    "difficulty": "Medium",
    "problem_slug": "game-play-analysis-iv",
    "topics": [
      "Database"
    ],
    "description": "Table: Activity\nWrite a solution to report the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places. In other words, you need to determine the number of players who logged in on the day immediately following their initial login, and divide it by the number of total players.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Student Attendance Record I",
    "problem_id": "551",
    "frontend_id": "551",
    "difficulty": "Easy",
    "problem_slug": "student-attendance-record-i",
    "topics": [
      "String"
    ],
    "description": "You are given a string s representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\nThe student is eligible for an attendance award if they meet both of the following criteria:\nReturn true if the student is eligible for an attendance award, or false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Student Attendance Record II",
    "problem_id": "552",
    "frontend_id": "552",
    "difficulty": "Hard",
    "problem_slug": "student-attendance-record-ii",
    "topics": [
      "Dynamic Programming"
    ],
    "description": "An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\nAny student is eligible for an attendance award if they meet both of the following criteria:\nGiven an integer n, return the number of possible attendance records of length n that make a student eligible for an attendance award. The answer may be very large, so return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Optimal Division",
    "problem_id": "553",
    "frontend_id": "553",
    "difficulty": "Medium",
    "problem_slug": "optimal-division",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array nums. The adjacent integers in nums will perform the float division.\nHowever, you can add any number of parenthesis at any position to change the priority of operations. You want to add these parentheses such the value of the expression after the evaluation is maximum.\nReturn the corresponding expression that has the maximum value in string format.\nNote: your expression should not contain redundant parenthesis.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Brick Wall",
    "problem_id": "554",
    "frontend_id": "554",
    "difficulty": "Medium",
    "problem_slug": "brick-wall",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "There is a rectangular brick wall in front of you with n rows of bricks. The ith row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same.\nDraw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.\nGiven the 2D array wall that contains the information about the wall, return the minimum number of crossed bricks after drawing such a vertical line.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Next Greater Element III",
    "problem_id": "556",
    "frontend_id": "556",
    "difficulty": "Medium",
    "problem_slug": "next-greater-element-iii",
    "topics": [
      "Math",
      "Two Pointers",
      "String"
    ],
    "description": "Given a positive integer n, find the smallest integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive integer exists, return -1.\nNote that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Reverse Words in a String III",
    "problem_id": "557",
    "frontend_id": "557",
    "difficulty": "Easy",
    "problem_slug": "reverse-words-in-a-string-iii",
    "topics": [
      "Two Pointers",
      "String"
    ],
    "description": "Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Logical OR of Two Binary Grids Represented as Quad-Trees",
    "problem_id": "773",
    "frontend_id": "558",
    "difficulty": "Medium",
    "problem_slug": "logical-or-of-two-binary-grids-represented-as-quad-trees",
    "topics": [
      "Divide and Conquer",
      "Tree"
    ],
    "description": "A Binary Matrix is a matrix in which all the elements are either 0 or 1.\nGiven quadTree1 and quadTree2. quadTree1 represents a n * n binary matrix and quadTree2 represents another n * n binary matrix.\nReturn a Quad-Tree representing the n * n binary matrix which is the result of logical bitwise OR of the two binary matrixes represented by quadTree1 and quadTree2.\nNotice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.\nA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\nIf you want to know more about the Quad-Tree, you can refer to the wiki.\nQuad-Tree format:\nThe input/output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.\nIt is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val].\nIf the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Depth of N-ary Tree",
    "problem_id": "774",
    "frontend_id": "559",
    "difficulty": "Easy",
    "problem_slug": "maximum-depth-of-n-ary-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search"
    ],
    "description": "Given a n-ary tree, find its maximum depth.\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Subarray Sum Equals K",
    "problem_id": "560",
    "frontend_id": "560",
    "difficulty": "Medium",
    "problem_slug": "subarray-sum-equals-k",
    "topics": [
      "Array",
      "Hash Table",
      "Prefix Sum"
    ],
    "description": "Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Array Partition",
    "problem_id": "561",
    "frontend_id": "561",
    "difficulty": "Easy",
    "problem_slug": "array-partition",
    "topics": [
      "Array",
      "Greedy",
      "Sorting",
      "Counting Sort"
    ],
    "description": "Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Binary Tree Tilt",
    "problem_id": "563",
    "frontend_id": "563",
    "difficulty": "Easy",
    "problem_slug": "binary-tree-tilt",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the sum of every tree node's tilt.\nThe tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as 0. The rule is similar if the node does not have a right child.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Closest Palindrome",
    "problem_id": "564",
    "frontend_id": "564",
    "difficulty": "Hard",
    "problem_slug": "find-the-closest-palindrome",
    "topics": [
      "Math",
      "String"
    ],
    "description": "Given a string n representing an integer, return the closest integer (not including itself), which is a palindrome. If there is a tie, return the smaller one.\nThe closest is defined as the absolute difference minimized between two integers.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Array Nesting",
    "problem_id": "565",
    "frontend_id": "565",
    "difficulty": "Medium",
    "problem_slug": "array-nesting",
    "topics": [
      "Array",
      "Depth-First Search"
    ],
    "description": "You are given an integer array nums of length n where nums is a permutation of the numbers in the range [0, n - 1].\nYou should build a set s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... } subjected to the following rule:\nReturn the longest length of a set s[k].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Reshape the Matrix",
    "problem_id": "566",
    "frontend_id": "566",
    "difficulty": "Easy",
    "problem_slug": "reshape-the-matrix",
    "topics": [
      "Array",
      "Matrix",
      "Simulation"
    ],
    "description": "In MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data.\nYou are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix.\nThe reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.\nIf the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Permutation in String",
    "problem_id": "567",
    "frontend_id": "567",
    "difficulty": "Medium",
    "problem_slug": "permutation-in-string",
    "topics": [
      "Hash Table",
      "Two Pointers",
      "String",
      "Sliding Window"
    ],
    "description": "Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.\nIn other words, return true if one of s1's permutations is the substring of s2.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Managers with at Least 5 Direct Reports",
    "problem_id": "570",
    "frontend_id": "570",
    "difficulty": "Medium",
    "problem_slug": "managers-with-at-least-5-direct-reports",
    "topics": [
      "Database"
    ],
    "description": "Table: Employee\nWrite a solution to find managers with at least five direct reports.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Subtree of Another Tree",
    "problem_id": "572",
    "frontend_id": "572",
    "difficulty": "Easy",
    "problem_slug": "subtree-of-another-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "String Matching",
      "Binary Tree",
      "Hash Function"
    ],
    "description": "Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.\nA subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Distribute Candies",
    "problem_id": "575",
    "frontend_id": "575",
    "difficulty": "Easy",
    "problem_slug": "distribute-candies",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor.\nThe doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.\nGiven the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Out of Boundary Paths",
    "problem_id": "576",
    "frontend_id": "576",
    "difficulty": "Medium",
    "problem_slug": "out-of-boundary-paths",
    "topics": [
      "Dynamic Programming"
    ],
    "description": "There is an m x n grid with a ball. The ball is initially at the position [startRow, startColumn]. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply at most maxMove moves to the ball.\nGiven the five integers m, n, maxMove, startRow, startColumn, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Employee Bonus",
    "problem_id": "577",
    "frontend_id": "577",
    "difficulty": "Easy",
    "problem_slug": "employee-bonus",
    "topics": [
      "Database"
    ],
    "description": "Table: Employee\nTable: Bonus\nWrite a solution to report the name and bonus amount of each employee with a bonus less than 1000.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Shortest Unsorted Continuous Subarray",
    "problem_id": "581",
    "frontend_id": "581",
    "difficulty": "Medium",
    "problem_slug": "shortest-unsorted-continuous-subarray",
    "topics": [
      "Array",
      "Two Pointers",
      "Stack",
      "Greedy",
      "Sorting",
      "Monotonic Stack"
    ],
    "description": "Given an integer array nums, you need to find one continuous subarray such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order.\nReturn the shortest such subarray and output its length.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Delete Operation for Two Strings",
    "problem_id": "583",
    "frontend_id": "583",
    "difficulty": "Medium",
    "problem_slug": "delete-operation-for-two-strings",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.\nIn one step, you can delete exactly one character in either string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Customer Referee",
    "problem_id": "584",
    "frontend_id": "584",
    "difficulty": "Easy",
    "problem_slug": "find-customer-referee",
    "topics": [
      "Database"
    ],
    "description": "Table: Customer\nFind the names of the customer that are either:\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Investments in 2016",
    "problem_id": "585",
    "frontend_id": "585",
    "difficulty": "Medium",
    "problem_slug": "investments-in-2016",
    "topics": [
      "Database"
    ],
    "description": "Table: Insurance\nWrite a solution to report the sum of all total investment values in 2016 tiv_2016, for all policyholders who:\nRound tiv_2016 to two decimal places.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Customer Placing the Largest Number of Orders",
    "problem_id": "586",
    "frontend_id": "586",
    "difficulty": "Easy",
    "problem_slug": "customer-placing-the-largest-number-of-orders",
    "topics": [
      "Database"
    ],
    "description": "Table: Orders\nWrite a solution to find the customer_number for the customer who has placed the largest number of orders.\nThe test cases are generated so that exactly one customer will have placed more orders than any other customer.\nThe result format is in the following example.\nExample 1:\nFollow up: What if more than one customer has the largest number of orders, can you find all the customer_number in this case?"
  },
  {
    "title": "Erect the Fence",
    "problem_id": "587",
    "frontend_id": "587",
    "difficulty": "Hard",
    "problem_slug": "erect-the-fence",
    "topics": [
      "Array",
      "Math",
      "Geometry"
    ],
    "description": "You are given an array trees where trees[i] = [xi, yi] represents the location of a tree in the garden.\nFence the entire garden using the minimum length of rope, as it is expensive. The garden is well-fenced only if all the trees are enclosed.\nReturn the coordinates of trees that are exactly located on the fence perimeter. You may return the answer in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "N-ary Tree Preorder Traversal",
    "problem_id": "775",
    "frontend_id": "589",
    "difficulty": "Easy",
    "problem_slug": "n-ary-tree-preorder-traversal",
    "topics": [
      "Stack",
      "Tree",
      "Depth-First Search"
    ],
    "description": "Given the root of an n-ary tree, return the preorder traversal of its nodes' values.\nNary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)\nExample 1:\nExample 2:\nConstraints:\nFollow up: Recursive solution is trivial, could you do it iteratively?"
  },
  {
    "title": "N-ary Tree Postorder Traversal",
    "problem_id": "776",
    "frontend_id": "590",
    "difficulty": "Easy",
    "problem_slug": "n-ary-tree-postorder-traversal",
    "topics": [
      "Stack",
      "Tree",
      "Depth-First Search"
    ],
    "description": "Given the root of an n-ary tree, return the postorder traversal of its nodes' values.\nNary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)\nExample 1:\nExample 2:\nConstraints:\nFollow up: Recursive solution is trivial, could you do it iteratively?"
  },
  {
    "title": "Tag Validator",
    "problem_id": "591",
    "frontend_id": "591",
    "difficulty": "Hard",
    "problem_slug": "tag-validator",
    "topics": [
      "String",
      "Stack"
    ],
    "description": "Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.\nA code snippet is valid if all the following rules hold:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Fraction Addition and Subtraction",
    "problem_id": "592",
    "frontend_id": "592",
    "difficulty": "Medium",
    "problem_slug": "fraction-addition-and-subtraction",
    "topics": [
      "Math",
      "String",
      "Simulation"
    ],
    "description": "Given a string expression representing an expression of fraction addition and subtraction, return the calculation result in string format.\nThe final result should be an irreducible fraction. If your final result is an integer, change it to the format of a fraction that has a denominator 1. So in this case, 2 should be converted to 2/1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Valid Square",
    "problem_id": "593",
    "frontend_id": "593",
    "difficulty": "Medium",
    "problem_slug": "valid-square",
    "topics": [
      "Math",
      "Geometry"
    ],
    "description": "Given the coordinates of four points in 2D space p1, p2, p3 and p4, return true if the four points construct a square.\nThe coordinate of a point pi is represented as [xi, yi]. The input is not given in any order.\nA valid square has four equal sides with positive length and four equal angles (90-degree angles).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest Harmonious Subsequence",
    "problem_id": "594",
    "frontend_id": "594",
    "difficulty": "Easy",
    "problem_slug": "longest-harmonious-subsequence",
    "topics": [
      "Array",
      "Hash Table",
      "Sliding Window",
      "Sorting",
      "Counting"
    ],
    "description": "We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.\nGiven an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Big Countries",
    "problem_id": "595",
    "frontend_id": "595",
    "difficulty": "Easy",
    "problem_slug": "big-countries",
    "topics": [
      "Database"
    ],
    "description": "Table: World\nA country is big if:\nWrite a solution to find the name, population, and area of the big countries.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Classes With at Least 5 Students",
    "problem_id": "596",
    "frontend_id": "596",
    "difficulty": "Easy",
    "problem_slug": "classes-with-at-least-5-students",
    "topics": [
      "Database"
    ],
    "description": "Table: Courses\nWrite a solution to find all the classes that have at least five students.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Range Addition II",
    "problem_id": "598",
    "frontend_id": "598",
    "difficulty": "Easy",
    "problem_slug": "range-addition-ii",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.\nCount and return the number of maximum integers in the matrix after performing all the operations.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Index Sum of Two Lists",
    "problem_id": "599",
    "frontend_id": "599",
    "difficulty": "Easy",
    "problem_slug": "minimum-index-sum-of-two-lists",
    "topics": [
      "Array",
      "Hash Table",
      "String"
    ],
    "description": "Given two arrays of strings list1 and list2, find the common strings with the least index sum.\nA common string is a string that appeared in both list1 and list2.\nA common string with the least index sum is a common string such that if it appeared at list1[i] and list2[j] then i + j should be the minimum value among all the other common strings.\nReturn all the common strings with the least index sum. Return the answer in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Non-negative Integers without Consecutive Ones",
    "problem_id": "600",
    "frontend_id": "600",
    "difficulty": "Hard",
    "problem_slug": "non-negative-integers-without-consecutive-ones",
    "topics": [
      "Dynamic Programming"
    ],
    "description": "Given a positive integer n, return the number of the integers in the range [0, n] whose binary representations do not contain consecutive ones.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Human Traffic of Stadium",
    "problem_id": "601",
    "frontend_id": "601",
    "difficulty": "Hard",
    "problem_slug": "human-traffic-of-stadium",
    "topics": [
      "Database"
    ],
    "description": "Table: Stadium\nWrite a solution to display the records with three or more rows with consecutive id's, and the number of people is greater than or equal to 100 for each.\nReturn the result table ordered by visit_date in ascending order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Friend Requests II: Who Has the Most Friends",
    "problem_id": "602",
    "frontend_id": "602",
    "difficulty": "Medium",
    "problem_slug": "friend-requests-ii-who-has-the-most-friends",
    "topics": [
      "Database"
    ],
    "description": "Table: RequestAccepted\nWrite a solution to find the people who have the most friends and the most friends number.\nThe test cases are generated so that only one person has the most friends.\nThe result format is in the following example.\nExample 1:\nFollow up: In the real world, multiple people could have the same most number of friends. Could you find all these people in this case?"
  },
  {
    "title": "Can Place Flowers",
    "problem_id": "605",
    "frontend_id": "605",
    "difficulty": "Easy",
    "problem_slug": "can-place-flowers",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.\nGiven an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Construct String from Binary Tree",
    "problem_id": "606",
    "frontend_id": "606",
    "difficulty": "Medium",
    "problem_slug": "construct-string-from-binary-tree",
    "topics": [
      "String",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root node of a binary tree, your task is to create a string representation of the tree following a specific set of formatting rules. The representation should be based on a preorder traversal of the binary tree and must adhere to the following guidelines:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sales Person",
    "problem_id": "607",
    "frontend_id": "607",
    "difficulty": "Easy",
    "problem_slug": "sales-person",
    "topics": [
      "Database"
    ],
    "description": "Table: SalesPerson\nTable: Company\nTable: Orders\nWrite a solution to find the names of all the salespersons who did not have any orders related to the company with the name \"RED\".\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Tree Node",
    "problem_id": "608",
    "frontend_id": "608",
    "difficulty": "Medium",
    "problem_slug": "tree-node",
    "topics": [
      "Database"
    ],
    "description": "Table: Tree\nEach node in the tree can be one of three types:\nWrite a solution to report the type of each node in the tree.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:\nExample 2:\nNote: This question is the same as  3054: Binary Tree Nodes."
  },
  {
    "title": "Find Duplicate File in System",
    "problem_id": "609",
    "frontend_id": "609",
    "difficulty": "Medium",
    "problem_slug": "find-duplicate-file-in-system",
    "topics": [
      "Array",
      "Hash Table",
      "String"
    ],
    "description": "Given a list paths of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths. You may return the answer in any order.\nA group of duplicate files consists of at least two files that have the same content.\nA single directory info string in the input list has the following format:\nIt means there are n files (f1.txt, f2.txt ... fn.txt) with content (f1_content, f2_content ... fn_content) respectively in the directory \"root/d1/d2/.../dm\". Note that n >= 1 and m >= 0. If m = 0, it means the directory is just the root directory.\nThe output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:\nExample 1:\nExample 2:\nConstraints:\nFollow up:"
  },
  {
    "title": "Triangle Judgement",
    "problem_id": "610",
    "frontend_id": "610",
    "difficulty": "Easy",
    "problem_slug": "triangle-judgement",
    "topics": [
      "Database"
    ],
    "description": "Table: Triangle\nReport for every three line segments whether they can form a triangle.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Valid Triangle Number",
    "problem_id": "611",
    "frontend_id": "611",
    "difficulty": "Medium",
    "problem_slug": "valid-triangle-number",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Greedy",
      "Sorting"
    ],
    "description": "Given an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Merge Two Binary Trees",
    "problem_id": "617",
    "frontend_id": "617",
    "difficulty": "Easy",
    "problem_slug": "merge-two-binary-trees",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "You are given two binary trees root1 and root2.\nImagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.\nReturn the merged tree.\nNote: The merging process must start from the root nodes of both trees.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Biggest Single Number",
    "problem_id": "619",
    "frontend_id": "619",
    "difficulty": "Easy",
    "problem_slug": "biggest-single-number",
    "topics": [
      "Database"
    ],
    "description": "Table: MyNumbers\nA single number is a number that appeared only once in the MyNumbers table.\nFind the largest single number. If there is no single number, report null.\nThe result format is in the following example.\nExample 1:\nExample 2:"
  },
  {
    "title": "Not Boring Movies",
    "problem_id": "620",
    "frontend_id": "620",
    "difficulty": "Easy",
    "problem_slug": "not-boring-movies",
    "topics": [
      "Database"
    ],
    "description": "Table: Cinema\nWrite a solution to report the movies with an odd-numbered ID and a description that is not \"boring\".\nReturn the result table ordered by rating in descending order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Task Scheduler",
    "problem_id": "621",
    "frontend_id": "621",
    "difficulty": "Medium",
    "problem_slug": "task-scheduler",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)",
      "Counting"
    ],
    "description": "You are given an array of CPU tasks, each labeled with a letter from A to Z, and a number n. Each CPU interval can be idle or allow the completion of one task. Tasks can be completed in any order, but there's a constraint: there has to be a gap of at least n intervals between two tasks with the same label.\nReturn the minimum number of CPU intervals required to complete all tasks.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Design Circular Queue",
    "problem_id": "860",
    "frontend_id": "622",
    "difficulty": "Medium",
    "problem_slug": "design-circular-queue",
    "topics": [
      "Array",
      "Linked List",
      "Design",
      "Queue"
    ],
    "description": "Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called \"Ring Buffer\".\nOne of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.\nImplement the MyCircularQueue class:\nYou must solve the problem without using the built-in queue data structure in your programming language.\nExample 1:\nConstraints:"
  },
  {
    "title": "Add One Row to Tree",
    "problem_id": "623",
    "frontend_id": "623",
    "difficulty": "Medium",
    "problem_slug": "add-one-row-to-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree and two integers val and depth, add a row of nodes with value val at the given depth depth.\nNote that the root node is at depth 1.\nThe adding rule is:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Distance in Arrays",
    "problem_id": "624",
    "frontend_id": "624",
    "difficulty": "Medium",
    "problem_slug": "maximum-distance-in-arrays",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "You are given m arrays, where each array is sorted in ascending order.\nYou can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers a and b to be their absolute difference |a - b|.\nReturn the maximum distance.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Exchange Seats",
    "problem_id": "626",
    "frontend_id": "626",
    "difficulty": "Medium",
    "problem_slug": "exchange-seats",
    "topics": [
      "Database"
    ],
    "description": "Table: Seat\nWrite a solution to swap the seat id of every two consecutive students. If the number of students is odd, the id of the last student is not swapped.\nReturn the result table ordered by id in ascending order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Swap Salary",
    "problem_id": "627",
    "frontend_id": "627",
    "difficulty": "Easy",
    "problem_slug": "swap-salary",
    "topics": [
      "Database"
    ],
    "description": "Table: Salary\nWrite a solution to swap all 'f' and 'm' values (i.e., change all 'f' values to 'm' and vice versa) with a single update statement and no intermediate temporary tables.\nNote that you must write a single update statement, do not write any select statement for this problem.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Maximum Product of Three Numbers",
    "problem_id": "628",
    "frontend_id": "628",
    "difficulty": "Easy",
    "problem_slug": "maximum-product-of-three-numbers",
    "topics": [
      "Array",
      "Math",
      "Sorting"
    ],
    "description": "Given an integer array nums, find three numbers whose product is maximum and return the maximum product.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "K Inverse Pairs Array",
    "problem_id": "629",
    "frontend_id": "629",
    "difficulty": "Hard",
    "problem_slug": "k-inverse-pairs-array",
    "topics": [
      "Dynamic Programming"
    ],
    "description": "For an integer array nums, an inverse pair is a pair of integers [i, j] where 0 <= i < j < nums.length and nums[i] > nums[j].\nGiven two integers n and k, return the number of different arrays consisting of numbers from 1 to n such that there are exactly k inverse pairs. Since the answer can be huge, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Course Schedule III",
    "problem_id": "630",
    "frontend_id": "630",
    "difficulty": "Hard",
    "problem_slug": "course-schedule-iii",
    "topics": [
      "Array",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "There are n different online courses numbered from 1 to n. You are given an array courses where courses[i] = [durationi, lastDayi] indicate that the ith course should be taken continuously for durationi days and must be finished before or on lastDayi.\nYou will start on the 1st day and you cannot take two or more courses simultaneously.\nReturn the maximum number of courses that you can take.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Smallest Range Covering Elements from K Lists",
    "problem_id": "632",
    "frontend_id": "632",
    "difficulty": "Hard",
    "problem_slug": "smallest-range-covering-elements-from-k-lists",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Sliding Window",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You have k lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the k lists.\nWe define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Square Numbers",
    "problem_id": "633",
    "frontend_id": "633",
    "difficulty": "Medium",
    "problem_slug": "sum-of-square-numbers",
    "topics": [
      "Math",
      "Two Pointers",
      "Binary Search"
    ],
    "description": "Given a non-negative integer c, decide whether there're two integers a and b such that a2 + b2 = c.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Exclusive Time of Functions",
    "problem_id": "636",
    "frontend_id": "636",
    "difficulty": "Medium",
    "problem_slug": "exclusive-time-of-functions",
    "topics": [
      "Array",
      "Stack"
    ],
    "description": "On a single-threaded CPU, we execute a program containing n functions. Each function has a unique ID between 0 and n-1.\nFunction calls are stored in a call stack: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is the current function being executed. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.\nYou are given a list logs, where logs[i] represents the ith log message formatted as a string \"{function_id}:{\"start\" | \"end\"}:{timestamp}\". For example, \"0:start:3\" means a function call with function ID 0 started at the beginning of timestamp 3, and \"1:end:2\" means a function call with function ID 1 ended at the end of timestamp 2. Note that a function can be called multiple times, possibly recursively.\nA function's exclusive time is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for 2 time units and another call executing for 1 time unit, the exclusive time is 2 + 1 = 3.\nReturn the exclusive time of each function in an array, where the value at the ith index represents the exclusive time for the function with ID i.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Average of Levels in Binary Tree",
    "problem_id": "637",
    "frontend_id": "637",
    "difficulty": "Easy",
    "problem_slug": "average-of-levels-in-binary-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Example 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Shopping Offers",
    "problem_id": "638",
    "frontend_id": "638",
    "difficulty": "Medium",
    "problem_slug": "shopping-offers",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Memoization",
      "Bitmask"
    ],
    "description": "In LeetCode Store, there are n items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.\nYou are given an integer array price where price[i] is the price of the ith item, and an integer array needs where needs[i] is the number of pieces of the ith item you want to buy.\nYou are also given an array special where special[i] is of size n + 1 where special[i][j] is the number of pieces of the jth item in the ith offer and special[i][n] (i.e., the last integer in the array) is the price of the ith offer.\nReturn the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers. You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Decode Ways II",
    "problem_id": "639",
    "frontend_id": "639",
    "difficulty": "Hard",
    "problem_slug": "decode-ways-ii",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "A message containing letters from A-Z can be encoded into numbers using the following mapping:\nTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\nNote that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\".\nIn addition to the mapping above, an encoded message may contain the '*' character, which can represent any digit from '1' to '9' ('0' is excluded). For example, the encoded message \"1*\" may represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\". Decoding \"1*\" is equivalent to decoding any of the encoded messages it can represent.\nGiven a string s consisting of digits and '*' characters, return the number of ways to decode it.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Solve the Equation",
    "problem_id": "640",
    "frontend_id": "640",
    "difficulty": "Medium",
    "problem_slug": "solve-the-equation",
    "topics": [
      "Math",
      "String",
      "Simulation"
    ],
    "description": "Solve a given equation and return the value of 'x' in the form of a string \"x=#value\". The equation contains only '+', '-' operation, the variable 'x' and its coefficient. You should return \"No solution\" if there is no solution for the equation, or \"Infinite solutions\" if there are infinite solutions for the equation.\nIf there is exactly one solution for the equation, we ensure that the value of 'x' is an integer.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Design Circular Deque",
    "problem_id": "859",
    "frontend_id": "641",
    "difficulty": "Medium",
    "problem_slug": "design-circular-deque",
    "topics": [
      "Array",
      "Linked List",
      "Design",
      "Queue"
    ],
    "description": "Design your implementation of the circular double-ended queue (deque).\nImplement the MyCircularDeque class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Maximum Average Subarray I",
    "problem_id": "643",
    "frontend_id": "643",
    "difficulty": "Easy",
    "problem_slug": "maximum-average-subarray-i",
    "topics": [
      "Array",
      "Sliding Window"
    ],
    "description": "You are given an integer array nums consisting of n elements, and an integer k.\nFind a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Set Mismatch",
    "problem_id": "645",
    "frontend_id": "645",
    "difficulty": "Easy",
    "problem_slug": "set-mismatch",
    "topics": [
      "Array",
      "Hash Table",
      "Bit Manipulation",
      "Sorting"
    ],
    "description": "You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.\nYou are given an integer array nums representing the data status of this set after the error.\nFind the number that occurs twice and the number that is missing and return them in the form of an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Length of Pair Chain",
    "problem_id": "646",
    "frontend_id": "646",
    "difficulty": "Medium",
    "problem_slug": "maximum-length-of-pair-chain",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an array of n pairs pairs where pairs[i] = [lefti, righti] and lefti < righti.\nA pair p2 = [c, d] follows a pair p1 = [a, b] if b < c. A chain of pairs can be formed in this fashion.\nReturn the length longest chain which can be formed.\nYou do not need to use up all the given intervals. You can select pairs in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Palindromic Substrings",
    "problem_id": "647",
    "frontend_id": "647",
    "difficulty": "Medium",
    "problem_slug": "palindromic-substrings",
    "topics": [
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "description": "Given a string s, return the number of palindromic substrings in it.\nA string is a palindrome when it reads the same backward as forward.\nA substring is a contiguous sequence of characters within the string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Replace Words",
    "problem_id": "648",
    "frontend_id": "648",
    "difficulty": "Medium",
    "problem_slug": "replace-words",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Trie"
    ],
    "description": "In English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word derivative. For example, when the root \"help\" is followed by the word \"ful\", we can form a derivative \"helpful\".\nGiven a dictionary consisting of many roots and a sentence consisting of words separated by spaces, replace all the derivatives in the sentence with the root forming it. If a derivative can be replaced by more than one root, replace it with the root that has the shortest length.\nReturn the sentence after the replacement.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Dota2 Senate",
    "problem_id": "649",
    "frontend_id": "649",
    "difficulty": "Medium",
    "problem_slug": "dota2-senate",
    "topics": [
      "String",
      "Greedy",
      "Queue"
    ],
    "description": "In the world of Dota2, there are two parties: the Radiant and the Dire.\nThe Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise one of the two rights:\nGiven a string senate representing each senator's party belonging. The character 'R' and 'D' represent the Radiant party and the Dire party. Then if there are n senators, the size of the given string will be n.\nThe round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.\nSuppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be \"Radiant\" or \"Dire\".\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "2 Keys Keyboard",
    "problem_id": "650",
    "frontend_id": "650",
    "difficulty": "Medium",
    "problem_slug": "2-keys-keyboard",
    "topics": [
      "Math",
      "Dynamic Programming"
    ],
    "description": "There is only one character 'A' on the screen of a notepad. You can perform one of two operations on this notepad for each step:\nGiven an integer n, return the minimum number of operations to get the character 'A' exactly n times on the screen.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Duplicate Subtrees",
    "problem_id": "652",
    "frontend_id": "652",
    "difficulty": "Medium",
    "problem_slug": "find-duplicate-subtrees",
    "topics": [
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return all duplicate subtrees.\nFor each kind of duplicate subtrees, you only need to return the root node of any one of them.\nTwo trees are duplicate if they have the same structure with the same node values.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Two Sum IV - Input is a BST",
    "problem_id": "653",
    "frontend_id": "653",
    "difficulty": "Easy",
    "problem_slug": "two-sum-iv-input-is-a-bst",
    "topics": [
      "Hash Table",
      "Two Pointers",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given the root of a binary search tree and an integer k, return true if there exist two elements in the BST such that their sum is equal to k, or false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Binary Tree",
    "problem_id": "654",
    "frontend_id": "654",
    "difficulty": "Medium",
    "problem_slug": "maximum-binary-tree",
    "topics": [
      "Array",
      "Divide and Conquer",
      "Stack",
      "Tree",
      "Monotonic Stack",
      "Binary Tree"
    ],
    "description": "You are given an integer array nums with no duplicates. A maximum binary tree can be built recursively from nums using the following algorithm:\nReturn the maximum binary tree built from nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Print Binary Tree",
    "problem_id": "655",
    "frontend_id": "655",
    "difficulty": "Medium",
    "problem_slug": "print-binary-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, construct a 0-indexed m x n string matrix res that represents a formatted layout of the tree. The formatted layout matrix should be constructed using the following rules:\nReturn the constructed matrix res.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Robot Return to Origin",
    "problem_id": "657",
    "frontend_id": "657",
    "difficulty": "Easy",
    "problem_slug": "robot-return-to-origin",
    "topics": [
      "String",
      "Simulation"
    ],
    "description": "There is a robot starting at the position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.\nYou are given a string moves that represents the move sequence of the robot where moves[i] represents its ith move. Valid moves are 'R' (right), 'L' (left), 'U' (up), and 'D' (down).\nReturn true if the robot returns to the origin after it finishes all of its moves, or false otherwise.\nNote: The way that the robot is \"facing\" is irrelevant. 'R' will always make the robot move to the right once, 'L' will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find K Closest Elements",
    "problem_id": "658",
    "frontend_id": "658",
    "difficulty": "Medium",
    "problem_slug": "find-k-closest-elements",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sliding Window",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.\nAn integer a is closer to x than an integer b if:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Split Array into Consecutive Subsequences",
    "problem_id": "659",
    "frontend_id": "659",
    "difficulty": "Medium",
    "problem_slug": "split-array-into-consecutive-subsequences",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Heap (Priority Queue)"
    ],
    "description": "You are given an integer array nums that is sorted in non-decreasing order.\nDetermine if it is possible to split nums into one or more subsequences such that both of the following conditions are true:\nReturn true if you can split nums according to the above conditions, or false otherwise.\nA subsequence of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., [1,3,5] is a subsequence of [1,2,3,4,5] while [1,3,2] is not).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Image Smoother",
    "problem_id": "661",
    "frontend_id": "661",
    "difficulty": "Easy",
    "problem_slug": "image-smoother",
    "topics": [
      "Array",
      "Matrix"
    ],
    "description": "An image smoother is a filter of the size 3 x 3 that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).\nGiven an m x n integer matrix img representing the grayscale of an image, return the image after applying the smoother on each cell of it.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Width of Binary Tree",
    "problem_id": "662",
    "frontend_id": "662",
    "difficulty": "Medium",
    "problem_slug": "maximum-width-of-binary-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the maximum width of the given tree.\nThe maximum width of a tree is the maximum width among all levels.\nThe width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.\nIt is guaranteed that the answer will in the range of a 32-bit signed integer.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Strange Printer",
    "problem_id": "664",
    "frontend_id": "664",
    "difficulty": "Hard",
    "problem_slug": "strange-printer",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "There is a strange printer with the following two special properties:\nGiven a string s, return the minimum number of turns the printer needed to print it.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Non-decreasing Array",
    "problem_id": "665",
    "frontend_id": "665",
    "difficulty": "Medium",
    "problem_slug": "non-decreasing-array",
    "topics": [
      "Array"
    ],
    "description": "Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element.\nWe define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Beautiful Arrangement II",
    "problem_id": "667",
    "frontend_id": "667",
    "difficulty": "Medium",
    "problem_slug": "beautiful-arrangement-ii",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "Given two integers n and k, construct a list answer that contains n different positive integers ranging from 1 to n and obeys the following requirement:\nReturn the list answer. If there multiple valid answers, return any of them.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Kth Smallest Number in Multiplication Table",
    "problem_id": "668",
    "frontend_id": "668",
    "difficulty": "Hard",
    "problem_slug": "kth-smallest-number-in-multiplication-table",
    "topics": [
      "Math",
      "Binary Search"
    ],
    "description": "Nearly everyone has used the Multiplication Table. The multiplication table of size m x n is an integer matrix mat where mat[i][j] == i * j (1-indexed).\nGiven three integers m, n, and k, return the kth smallest element in the m x n multiplication table.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Trim a Binary Search Tree",
    "problem_id": "669",
    "frontend_id": "669",
    "difficulty": "Medium",
    "problem_slug": "trim-a-binary-search-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer.\nReturn the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Swap",
    "problem_id": "670",
    "frontend_id": "670",
    "difficulty": "Medium",
    "problem_slug": "maximum-swap",
    "topics": [
      "Math",
      "Greedy"
    ],
    "description": "You are given an integer num. You can swap two digits at most once to get the maximum valued number.\nReturn the maximum valued number you can get.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Second Minimum Node In a Binary Tree",
    "problem_id": "671",
    "frontend_id": "671",
    "difficulty": "Easy",
    "problem_slug": "second-minimum-node-in-a-binary-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property root.val = min(root.left.val, root.right.val) always holds.\nGiven such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.\nIf no such second minimum value exists, output -1 instead.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Bulb Switcher II",
    "problem_id": "672",
    "frontend_id": "672",
    "difficulty": "Medium",
    "problem_slug": "bulb-switcher-ii",
    "topics": [
      "Math",
      "Bit Manipulation",
      "Depth-First Search",
      "Breadth-First Search"
    ],
    "description": "There is a room with n bulbs labeled from 1 to n that all are turned on initially, and four buttons on the wall. Each of the four buttons has a different functionality where:\nYou must make exactly presses button presses in total. For each press, you may pick any of the four buttons to press.\nGiven the two integers n and presses, return the number of different possible statuses after performing all presses button presses.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Longest Increasing Subsequence",
    "problem_id": "673",
    "frontend_id": "673",
    "difficulty": "Medium",
    "problem_slug": "number-of-longest-increasing-subsequence",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Binary Indexed Tree",
      "Segment Tree"
    ],
    "description": "Given an integer array nums, return the number of longest increasing subsequences.\nNotice that the sequence has to be strictly increasing.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Continuous Increasing Subsequence",
    "problem_id": "674",
    "frontend_id": "674",
    "difficulty": "Easy",
    "problem_slug": "longest-continuous-increasing-subsequence",
    "topics": [
      "Array"
    ],
    "description": "Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.\nA continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Cut Off Trees for Golf Event",
    "problem_id": "675",
    "frontend_id": "675",
    "difficulty": "Hard",
    "problem_slug": "cut-off-trees-for-golf-event",
    "topics": [
      "Array",
      "Breadth-First Search",
      "Heap (Priority Queue)",
      "Matrix"
    ],
    "description": "You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an m x n matrix. In this matrix:\nIn one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.\nYou must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes 1 (an empty cell).\nStarting from the point (0, 0), return the minimum steps you need to walk to cut off all the trees. If you cannot cut off all the trees, return -1.\nNote: The input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Implement Magic Dictionary",
    "problem_id": "676",
    "frontend_id": "676",
    "difficulty": "Medium",
    "problem_slug": "implement-magic-dictionary",
    "topics": [
      "Hash Table",
      "String",
      "Depth-First Search",
      "Design",
      "Trie"
    ],
    "description": "Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.\nImplement the MagicDictionary class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Map Sum Pairs",
    "problem_id": "677",
    "frontend_id": "677",
    "difficulty": "Medium",
    "problem_slug": "map-sum-pairs",
    "topics": [
      "Hash Table",
      "String",
      "Design",
      "Trie"
    ],
    "description": "Design a map that allows you to do the following:\nImplement the MapSum class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Valid Parenthesis String",
    "problem_id": "678",
    "frontend_id": "678",
    "difficulty": "Medium",
    "problem_slug": "valid-parenthesis-string",
    "topics": [
      "String",
      "Dynamic Programming",
      "Stack",
      "Greedy"
    ],
    "description": "Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.\nThe following rules define a valid string:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "24 Game",
    "problem_id": "679",
    "frontend_id": "679",
    "difficulty": "Hard",
    "problem_slug": "24-game",
    "topics": [
      "Array",
      "Math",
      "Backtracking"
    ],
    "description": "You are given an integer array cards of length 4. You have four cards, each containing a number in the range [1, 9]. You should arrange the numbers on these cards in a mathematical expression using the operators ['+', '-', '*', '/'] and the parentheses '(' and ')' to get the value 24.\nYou are restricted with the following rules:\nReturn true if you can get such expression that evaluates to 24, and false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Valid Palindrome II",
    "problem_id": "680",
    "frontend_id": "680",
    "difficulty": "Easy",
    "problem_slug": "valid-palindrome-ii",
    "topics": [
      "Two Pointers",
      "String",
      "Greedy"
    ],
    "description": "Given a string s, return true if the s can be palindrome after deleting at most one character from it.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Baseball Game",
    "problem_id": "682",
    "frontend_id": "682",
    "difficulty": "Easy",
    "problem_slug": "baseball-game",
    "topics": [
      "Array",
      "Stack",
      "Simulation"
    ],
    "description": "You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record.\nYou are given a list of strings operations, where operations[i] is the ith operation you must apply to the record and is one of the following:\nReturn the sum of all the scores on the record after applying all the operations.\nThe test cases are generated such that the answer and all intermediate calculations fit in a 32-bit integer and that all operations are valid.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Redundant Connection",
    "problem_id": "684",
    "frontend_id": "684",
    "difficulty": "Medium",
    "problem_slug": "redundant-connection",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "description": "In this problem, a tree is an undirected graph that is connected and has no cycles.\nYou are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.\nReturn an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Redundant Connection II",
    "problem_id": "685",
    "frontend_id": "685",
    "difficulty": "Hard",
    "problem_slug": "redundant-connection-ii",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "description": "In this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.\nThe given input is a directed graph that started as a rooted tree with n nodes (with distinct values from 1 to n), with one additional directed edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed.\nThe resulting graph is given as a 2D-array of edges. Each element of edges is a pair [ui, vi] that represents a directed edge connecting nodes ui and vi, where ui is a parent of child vi.\nReturn an edge that can be removed so that the resulting graph is a rooted tree of n nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Repeated String Match",
    "problem_id": "686",
    "frontend_id": "686",
    "difficulty": "Medium",
    "problem_slug": "repeated-string-match",
    "topics": [
      "String",
      "String Matching"
    ],
    "description": "Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b​​​​​​ to be a substring of a after repeating it, return -1.\nNotice: string \"abc\" repeated 0 times is \"\", repeated 1 time is \"abc\" and repeated 2 times is \"abcabc\".\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Univalue Path",
    "problem_id": "687",
    "frontend_id": "687",
    "difficulty": "Medium",
    "problem_slug": "longest-univalue-path",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root.\nThe length of the path between two nodes is represented by the number of edges between them.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Knight Probability in Chessboard",
    "problem_id": "688",
    "frontend_id": "688",
    "difficulty": "Medium",
    "problem_slug": "knight-probability-in-chessboard",
    "topics": [
      "Dynamic Programming"
    ],
    "description": "On an n x n chessboard, a knight starts at the cell (row, column) and attempts to make exactly k moves. The rows and columns are 0-indexed, so the top-left cell is (0, 0), and the bottom-right cell is (n - 1, n - 1).\nA chess knight has eight possible moves it can make, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.\nEach time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.\nThe knight continues moving until it has made exactly k moves or has moved off the chessboard.\nReturn the probability that the knight remains on the board after it has stopped moving.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Sum of 3 Non-Overlapping Subarrays",
    "problem_id": "689",
    "frontend_id": "689",
    "difficulty": "Hard",
    "problem_slug": "maximum-sum-of-3-non-overlapping-subarrays",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "Given an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them.\nReturn the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Employee Importance",
    "problem_id": "690",
    "frontend_id": "690",
    "difficulty": "Medium",
    "problem_slug": "employee-importance",
    "topics": [
      "Array",
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search"
    ],
    "description": "You have a data structure of employee information, including the employee's unique ID, importance value, and direct subordinates' IDs.\nYou are given an array of employees employees where:\nGiven an integer id that represents an employee's ID, return the total importance value of this employee and all their direct and indirect subordinates.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Stickers to Spell Word",
    "problem_id": "691",
    "frontend_id": "691",
    "difficulty": "Hard",
    "problem_slug": "stickers-to-spell-word",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Memoization",
      "Bitmask"
    ],
    "description": "We are given n different types of stickers. Each sticker has a lowercase English word on it.\nYou would like to spell out the given string target by cutting individual letters from your collection of stickers and rearranging them. You can use each sticker more than once if you want, and you have infinite quantities of each sticker.\nReturn the minimum number of stickers that you need to spell out target. If the task is impossible, return -1.\nNote: In all test cases, all words were chosen randomly from the 1000 most common US English words, and target was chosen as a concatenation of two random words.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Top K Frequent Words",
    "problem_id": "692",
    "frontend_id": "692",
    "difficulty": "Medium",
    "problem_slug": "top-k-frequent-words",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Trie",
      "Sorting",
      "Heap (Priority Queue)",
      "Bucket Sort",
      "Counting"
    ],
    "description": "Given an array of strings words and an integer k, return the k most frequent strings.\nReturn the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.\nExample 1:\nExample 2:\nConstraints:\nFollow-up: Could you solve it in O(n log(k)) time and O(n) extra space?"
  },
  {
    "title": "Binary Number with Alternating Bits",
    "problem_id": "693",
    "frontend_id": "693",
    "difficulty": "Easy",
    "problem_slug": "binary-number-with-alternating-bits",
    "topics": [
      "Bit Manipulation"
    ],
    "description": "Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Max Area of Island",
    "problem_id": "695",
    "frontend_id": "695",
    "difficulty": "Medium",
    "problem_slug": "max-area-of-island",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix"
    ],
    "description": "You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\nThe area of an island is the number of cells with a value 1 in the island.\nReturn the maximum area of an island in grid. If there is no island, return 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Binary Substrings",
    "problem_id": "696",
    "frontend_id": "696",
    "difficulty": "Easy",
    "problem_slug": "count-binary-substrings",
    "topics": [
      "Two Pointers",
      "String"
    ],
    "description": "Given a binary string s, return the number of non-empty substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively.\nSubstrings that occur multiple times are counted the number of times they occur.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Degree of an Array",
    "problem_id": "697",
    "frontend_id": "697",
    "difficulty": "Easy",
    "problem_slug": "degree-of-an-array",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.\nYour task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Partition to K Equal Sum Subsets",
    "problem_id": "698",
    "frontend_id": "698",
    "difficulty": "Medium",
    "problem_slug": "partition-to-k-equal-sum-subsets",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Memoization",
      "Bitmask"
    ],
    "description": "Given an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Falling Squares",
    "problem_id": "699",
    "frontend_id": "699",
    "difficulty": "Hard",
    "problem_slug": "falling-squares",
    "topics": [
      "Array",
      "Segment Tree",
      "Ordered Set"
    ],
    "description": "There are several squares being dropped onto the X-axis of a 2D plane.\nYou are given a 2D integer array positions where positions[i] = [lefti, sideLengthi] represents the ith square with a side length of sideLengthi that is dropped with its left edge aligned with X-coordinate lefti.\nEach square is dropped one at a time from a height above any landed squares. It then falls downward (negative Y direction) until it either lands on the top side of another square or on the X-axis. A square brushing the left/right side of another square does not count as landing on it. Once it lands, it freezes in place and cannot be moved.\nAfter each square is dropped, you must record the height of the current tallest stack of squares.\nReturn an integer array ans where ans[i] represents the height described above after dropping the ith square.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Search in a Binary Search Tree",
    "problem_id": "783",
    "frontend_id": "700",
    "difficulty": "Easy",
    "problem_slug": "search-in-a-binary-search-tree",
    "topics": [
      "Tree",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "You are given the root of a binary search tree (BST) and an integer val.\nFind the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Insert into a Binary Search Tree",
    "problem_id": "784",
    "frontend_id": "701",
    "difficulty": "Medium",
    "problem_slug": "insert-into-a-binary-search-tree",
    "topics": [
      "Tree",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "You are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.\nNotice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Kth Largest Element in a Stream",
    "problem_id": "789",
    "frontend_id": "703",
    "difficulty": "Easy",
    "problem_slug": "kth-largest-element-in-a-stream",
    "topics": [
      "Tree",
      "Design",
      "Binary Search Tree",
      "Heap (Priority Queue)",
      "Binary Tree",
      "Data Stream"
    ],
    "description": "You are part of a university admissions office and need to keep track of the kth highest test score from applicants in real-time. This helps to determine cut-off marks for interviews and admissions dynamically as new applicants submit their scores.\nYou are tasked to implement a class which, for a given integer k, maintains a stream of test scores and continuously returns the kth highest test score after a new score has been submitted. More specifically, we are looking for the kth highest score in the sorted list of all scores.\nImplement the KthLargest class:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Binary Search",
    "problem_id": "792",
    "frontend_id": "704",
    "difficulty": "Easy",
    "problem_slug": "binary-search",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.\nYou must write an algorithm with O(log n) runtime complexity.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Design HashSet",
    "problem_id": "816",
    "frontend_id": "705",
    "difficulty": "Easy",
    "problem_slug": "design-hashset",
    "topics": [
      "Array",
      "Hash Table",
      "Linked List",
      "Design",
      "Hash Function"
    ],
    "description": "Design a HashSet without using any built-in hash table libraries.\nImplement MyHashSet class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Design HashMap",
    "problem_id": "817",
    "frontend_id": "706",
    "difficulty": "Easy",
    "problem_slug": "design-hashmap",
    "topics": [
      "Array",
      "Hash Table",
      "Linked List",
      "Design",
      "Hash Function"
    ],
    "description": "Design a HashMap without using any built-in hash table libraries.\nImplement the MyHashMap class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Design Linked List",
    "problem_id": "838",
    "frontend_id": "707",
    "difficulty": "Medium",
    "problem_slug": "design-linked-list",
    "topics": [
      "Linked List",
      "Design"
    ],
    "description": "Design your implementation of the linked list. You can choose to use a singly or doubly linked list.\nA node in a singly linked list should have two attributes: val and next. val is the value of the current node, and next is a pointer/reference to the next node.\nIf you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.\nImplement the MyLinkedList class:\nExample 1:\nConstraints:"
  },
  {
    "title": "To Lower Case",
    "problem_id": "742",
    "frontend_id": "709",
    "difficulty": "Easy",
    "problem_slug": "to-lower-case",
    "topics": [
      "String"
    ],
    "description": "Given a string s, return the string after replacing every uppercase letter with the same lowercase letter.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Random Pick with Blacklist",
    "problem_id": "894",
    "frontend_id": "710",
    "difficulty": "Hard",
    "problem_slug": "random-pick-with-blacklist",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Binary Search",
      "Sorting",
      "Randomized"
    ],
    "description": "You are given an integer n and an array of unique integers blacklist. Design an algorithm to pick a random integer in the range [0, n - 1] that is not in blacklist. Any integer that is in the mentioned range and not in blacklist should be equally likely to be returned.\nOptimize your algorithm such that it minimizes the number of calls to the built-in random function of your language.\nImplement the Solution class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Minimum ASCII Delete Sum for Two Strings",
    "problem_id": "712",
    "frontend_id": "712",
    "difficulty": "Medium",
    "problem_slug": "minimum-ascii-delete-sum-for-two-strings",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "Given two strings s1 and s2, return the lowest ASCII sum of deleted characters to make two strings equal.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Subarray Product Less Than K",
    "problem_id": "713",
    "frontend_id": "713",
    "difficulty": "Medium",
    "problem_slug": "subarray-product-less-than-k",
    "topics": [
      "Array",
      "Binary Search",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "Given an array of integers nums and an integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Best Time to Buy and Sell Stock with Transaction Fee",
    "problem_id": "714",
    "frontend_id": "714",
    "difficulty": "Medium",
    "problem_slug": "best-time-to-buy-and-sell-stock-with-transaction-fee",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.\nFind the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.\nNote:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Range Module",
    "problem_id": "715",
    "frontend_id": "715",
    "difficulty": "Hard",
    "problem_slug": "range-module",
    "topics": [
      "Design",
      "Segment Tree",
      "Ordered Set"
    ],
    "description": "A Range Module is a module that tracks ranges of numbers. Design a data structure to track the ranges represented as half-open intervals and query about them.\nA half-open interval [left, right) denotes all the real numbers x where left <= x < right.\nImplement the RangeModule class:\nExample 1:\nConstraints:"
  },
  {
    "title": "1-bit and 2-bit Characters",
    "problem_id": "717",
    "frontend_id": "717",
    "difficulty": "Easy",
    "problem_slug": "1-bit-and-2-bit-characters",
    "topics": [
      "Array"
    ],
    "description": "We have two special characters:\nGiven a binary array bits that ends with 0, return true if the last character must be a one-bit character.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Length of Repeated Subarray",
    "problem_id": "718",
    "frontend_id": "718",
    "difficulty": "Medium",
    "problem_slug": "maximum-length-of-repeated-subarray",
    "topics": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Sliding Window",
      "Rolling Hash",
      "Hash Function"
    ],
    "description": "Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find K-th Smallest Pair Distance",
    "problem_id": "719",
    "frontend_id": "719",
    "difficulty": "Hard",
    "problem_slug": "find-k-th-smallest-pair-distance",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "description": "The distance of a pair of integers a and b is defined as the absolute difference between a and b.\nGiven an integer array nums and an integer k, return the kth smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest Word in Dictionary",
    "problem_id": "720",
    "frontend_id": "720",
    "difficulty": "Medium",
    "problem_slug": "longest-word-in-dictionary",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Trie",
      "Sorting"
    ],
    "description": "Given an array of strings words representing an English Dictionary, return the longest word in words that can be built one character at a time by other words in words.\nIf there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.\nNote that the word should be built from left to right with each additional character being added to the end of a previous word.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Accounts Merge",
    "problem_id": "721",
    "frontend_id": "721",
    "difficulty": "Medium",
    "problem_slug": "accounts-merge",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Sorting"
    ],
    "description": "Given a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.\nNow, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.\nAfter merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Remove Comments",
    "problem_id": "722",
    "frontend_id": "722",
    "difficulty": "Medium",
    "problem_slug": "remove-comments",
    "topics": [
      "Array",
      "String"
    ],
    "description": "Given a C++ program, remove comments from it. The program source is an array of strings source where source[i] is the ith line of the source code. This represents the result of splitting the original source code string by the newline character '\\n'.\nIn C++, there are two types of comments, line comments, and block comments.\nThe first effective comment takes precedence over others.\nIf a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.\nThere will be no control characters, single quote, or double quote characters.\nAlso, nothing else such as defines or macros will interfere with the comments.\nIt is guaranteed that every open block comment will eventually be closed, so \"/*\" outside of a line or block comment always starts a new comment.\nFinally, implicit newline characters can be deleted by block comments. Please see the examples below for details.\nAfter removing the comments from the source code, return the source code in the same format.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Pivot Index",
    "problem_id": "724",
    "frontend_id": "724",
    "difficulty": "Easy",
    "problem_slug": "find-pivot-index",
    "topics": [
      "Array",
      "Prefix Sum"
    ],
    "description": "Given an array of integers nums, calculate the pivot index of this array.\nThe pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.\nIf the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.\nReturn the leftmost pivot index. If no such index exists, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nNote: This question is the same as 1991: https://leetcode.com/problems/find-the-middle-index-in-array/"
  },
  {
    "title": "Split Linked List in Parts",
    "problem_id": "725",
    "frontend_id": "725",
    "difficulty": "Medium",
    "problem_slug": "split-linked-list-in-parts",
    "topics": [
      "Linked List"
    ],
    "description": "Given the head of a singly linked list and an integer k, split the linked list into k consecutive linked list parts.\nThe length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null.\nThe parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.\nReturn an array of the k parts.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Atoms",
    "problem_id": "726",
    "frontend_id": "726",
    "difficulty": "Hard",
    "problem_slug": "number-of-atoms",
    "topics": [
      "Hash Table",
      "String",
      "Stack",
      "Sorting"
    ],
    "description": "Given a string formula representing a chemical formula, return the count of each atom.\nThe atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.\nOne or more digits representing that element's count may follow if the count is greater than 1. If the count is 1, no digits will follow.\nTwo formulas are concatenated together to produce another formula.\nA formula placed in parentheses, and a count (optionally added) is also a formula.\nReturn the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.\nThe test cases are generated so that all the values in the output fit in a 32-bit integer.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Self Dividing Numbers",
    "problem_id": "728",
    "frontend_id": "728",
    "difficulty": "Easy",
    "problem_slug": "self-dividing-numbers",
    "topics": [
      "Math"
    ],
    "description": "A self-dividing number is a number that is divisible by every digit it contains.\nA self-dividing number is not allowed to contain the digit zero.\nGiven two integers left and right, return a list of all the self-dividing numbers in the range [left, right] (both inclusive).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "My Calendar I",
    "problem_id": "729",
    "frontend_id": "729",
    "difficulty": "Medium",
    "problem_slug": "my-calendar-i",
    "topics": [
      "Array",
      "Binary Search",
      "Design",
      "Segment Tree",
      "Ordered Set"
    ],
    "description": "You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a double booking.\nA double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.).\nThe event can be represented as a pair of integers startTime and endTime that represents a booking on the half-open interval [startTime, endTime), the range of real numbers x such that startTime <= x < endTime.\nImplement the MyCalendar class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Count Different Palindromic Subsequences",
    "problem_id": "730",
    "frontend_id": "730",
    "difficulty": "Hard",
    "problem_slug": "count-different-palindromic-subsequences",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "Given a string s, return the number of different non-empty palindromic subsequences in s. Since the answer may be very large, return it modulo 109 + 7.\nA subsequence of a string is obtained by deleting zero or more characters from the string.\nA sequence is palindromic if it is equal to the sequence reversed.\nTwo sequences a1, a2, ... and b1, b2, ... are different if there is some i for which ai != bi.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "My Calendar II",
    "problem_id": "731",
    "frontend_id": "731",
    "difficulty": "Medium",
    "problem_slug": "my-calendar-ii",
    "topics": [
      "Array",
      "Binary Search",
      "Design",
      "Segment Tree",
      "Prefix Sum",
      "Ordered Set"
    ],
    "description": "You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a triple booking.\nA triple booking happens when three events have some non-empty intersection (i.e., some moment is common to all the three events.).\nThe event can be represented as a pair of integers startTime and endTime that represents a booking on the half-open interval [startTime, endTime), the range of real numbers x such that startTime <= x < endTime.\nImplement the MyCalendarTwo class:\nExample 1:\nConstraints:"
  },
  {
    "title": "My Calendar III",
    "problem_id": "732",
    "frontend_id": "732",
    "difficulty": "Hard",
    "problem_slug": "my-calendar-iii",
    "topics": [
      "Binary Search",
      "Design",
      "Segment Tree",
      "Prefix Sum",
      "Ordered Set"
    ],
    "description": "A k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events.)\nYou are given some events [startTime, endTime), after each given event, return an integer k representing the maximum k-booking between all the previous events.\nImplement the MyCalendarThree class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Flood Fill",
    "problem_id": "733",
    "frontend_id": "733",
    "difficulty": "Easy",
    "problem_slug": "flood-fill",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "You are given an image represented by an m x n grid of integers image, where image[i][j] represents the pixel value of the image. You are also given three integers sr, sc, and color. Your task is to perform a flood fill on the image starting from the pixel image[sr][sc].\nTo perform a flood fill:\nReturn the modified image after performing the flood fill.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Asteroid Collision",
    "problem_id": "735",
    "frontend_id": "735",
    "difficulty": "Medium",
    "problem_slug": "asteroid-collision",
    "topics": [
      "Array",
      "Stack",
      "Simulation"
    ],
    "description": "We are given an array asteroids of integers representing asteroids in a row. The indices of the asteriod in the array represent their relative position in space.\nFor each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.\nFind out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Parse Lisp Expression",
    "problem_id": "736",
    "frontend_id": "736",
    "difficulty": "Hard",
    "problem_slug": "parse-lisp-expression",
    "topics": [
      "Hash Table",
      "String",
      "Stack",
      "Recursion"
    ],
    "description": "You are given a string expression representing a Lisp-like expression to return the integer value of.\nThe syntax for these expressions is given as follows.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Monotone Increasing Digits",
    "problem_id": "738",
    "frontend_id": "738",
    "difficulty": "Medium",
    "problem_slug": "monotone-increasing-digits",
    "topics": [
      "Math",
      "Greedy"
    ],
    "description": "An integer has monotone increasing digits if and only if each pair of adjacent digits x and y satisfy x <= y.\nGiven an integer n, return the largest number that is less than or equal to n with monotone increasing digits.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Daily Temperatures",
    "problem_id": "739",
    "frontend_id": "739",
    "difficulty": "Medium",
    "problem_slug": "daily-temperatures",
    "topics": [
      "Array",
      "Stack",
      "Monotonic Stack"
    ],
    "description": "Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Delete and Earn",
    "problem_id": "740",
    "frontend_id": "740",
    "difficulty": "Medium",
    "problem_slug": "delete-and-earn",
    "topics": [
      "Array",
      "Hash Table",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array nums. You want to maximize the number of points you get by performing the following operation any number of times:\nReturn the maximum number of points you can earn by applying the above operation some number of times.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Cherry Pickup",
    "problem_id": "741",
    "frontend_id": "741",
    "difficulty": "Hard",
    "problem_slug": "cherry-pickup",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "You are given an n x n grid representing a field of cherries, each cell is one of three possible integers.\nReturn the maximum number of cherries you can collect by following the rules below:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Network Delay Time",
    "problem_id": "744",
    "frontend_id": "743",
    "difficulty": "Medium",
    "problem_slug": "network-delay-time",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Heap (Priority Queue)",
      "Shortest Path"
    ],
    "description": "You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.\nWe will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Smallest Letter Greater Than Target",
    "problem_id": "745",
    "frontend_id": "744",
    "difficulty": "Easy",
    "problem_slug": "find-smallest-letter-greater-than-target",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "You are given an array of characters letters that is sorted in non-decreasing order, and a character target. There are at least two different characters in letters.\nReturn the smallest character in letters that is lexicographically greater than target. If such a character does not exist, return the first character in letters.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Prefix and Suffix Search",
    "problem_id": "746",
    "frontend_id": "745",
    "difficulty": "Hard",
    "problem_slug": "prefix-and-suffix-search",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Design",
      "Trie"
    ],
    "description": "Design a special dictionary that searches the words in it by a prefix and a suffix.\nImplement the WordFilter class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Min Cost Climbing Stairs",
    "problem_id": "747",
    "frontend_id": "746",
    "difficulty": "Easy",
    "problem_slug": "min-cost-climbing-stairs",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.\nYou can either start from the step with index 0, or the step with index 1.\nReturn the minimum cost to reach the top of the floor.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Largest Number At Least Twice of Others",
    "problem_id": "748",
    "frontend_id": "747",
    "difficulty": "Easy",
    "problem_slug": "largest-number-at-least-twice-of-others",
    "topics": [
      "Array",
      "Sorting"
    ],
    "description": "You are given an integer array nums where the largest integer is unique.\nDetermine whether the largest element in the array is at least twice as much as every other number in the array. If it is, return the index of the largest element, or return -1 otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Shortest Completing Word",
    "problem_id": "749",
    "frontend_id": "748",
    "difficulty": "Easy",
    "problem_slug": "shortest-completing-word",
    "topics": [
      "Array",
      "Hash Table",
      "String"
    ],
    "description": "Given a string licensePlate and an array of strings words, find the shortest completing word in words.\nA completing word is a word that contains all the letters in licensePlate. Ignore numbers and spaces in licensePlate, and treat letters as case insensitive. If a letter appears more than once in licensePlate, then it must appear in the word the same number of times or more.\nFor example, if licensePlate = \"aBc 12c\", then it contains letters 'a', 'b' (ignoring case), and 'c' twice. Possible completing words are \"abccdef\", \"caaacab\", and \"cbca\".\nReturn the shortest completing word in words. It is guaranteed an answer exists. If there are multiple shortest completing words, return the first one that occurs in words.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Contain Virus",
    "problem_id": "750",
    "frontend_id": "749",
    "difficulty": "Hard",
    "problem_slug": "contain-virus",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Matrix",
      "Simulation"
    ],
    "description": "A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.\nThe world is modeled as an m x n binary grid isInfected, where isInfected[i][j] == 0 represents uninfected cells, and isInfected[i][j] == 1 represents cells contaminated with the virus. A wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary.\nEvery night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. Resources are limited. Each day, you can install walls around only one region (i.e., the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night). There will never be a tie.\nReturn the number of walls used to quarantine all the infected regions. If the world will become fully infected, return the number of walls used.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Open the Lock",
    "problem_id": "753",
    "frontend_id": "752",
    "difficulty": "Medium",
    "problem_slug": "open-the-lock",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Breadth-First Search"
    ],
    "description": "You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'. The wheels can rotate freely and wrap around: for example we can turn '9' to be '0', or '0' to be '9'. Each move consists of turning one wheel one slot.\nThe lock initially starts at '0000', a string representing the state of the 4 wheels.\nYou are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.\nGiven a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Cracking the Safe",
    "problem_id": "754",
    "frontend_id": "753",
    "difficulty": "Hard",
    "problem_slug": "cracking-the-safe",
    "topics": [
      "Depth-First Search",
      "Graph",
      "Eulerian Circuit"
    ],
    "description": "There is a safe protected by a password. The password is a sequence of n digits where each digit can be in the range [0, k - 1].\nThe safe has a peculiar way of checking the password. When you enter in a sequence, it checks the most recent n digits that were entered each time you type a digit.\nReturn any string of minimum length that will unlock the safe at some point of entering it.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Reach a Number",
    "problem_id": "755",
    "frontend_id": "754",
    "difficulty": "Medium",
    "problem_slug": "reach-a-number",
    "topics": [
      "Math",
      "Binary Search"
    ],
    "description": "You are standing at position 0 on an infinite number line. There is a destination at position target.\nYou can make some number of moves numMoves so that:\nGiven the integer target, return the minimum number of moves required (i.e., the minimum numMoves) to reach the destination.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Pyramid Transition Matrix",
    "problem_id": "757",
    "frontend_id": "756",
    "difficulty": "Medium",
    "problem_slug": "pyramid-transition-matrix",
    "topics": [
      "Bit Manipulation",
      "Depth-First Search",
      "Breadth-First Search"
    ],
    "description": "You are stacking blocks to form a pyramid. Each block has a color, which is represented by a single letter. Each row of blocks contains one less block than the row beneath it and is centered on top.\nTo make the pyramid aesthetically pleasing, there are only specific triangular patterns that are allowed. A triangular pattern consists of a single block stacked on top of two blocks. The patterns are given as a list of three-letter strings allowed, where the first two characters of a pattern represent the left and right bottom blocks respectively, and the third character is the top block.\nYou start with a bottom row of blocks bottom, given as a single string, that you must use as the base of the pyramid.\nGiven bottom and allowed, return true if you can build the pyramid all the way to the top such that every triangular pattern in the pyramid is in allowed, or false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Set Intersection Size At Least Two",
    "problem_id": "759",
    "frontend_id": "757",
    "difficulty": "Hard",
    "problem_slug": "set-intersection-size-at-least-two",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given a 2D integer array intervals where intervals[i] = [starti, endi] represents all the integers from starti to endi inclusively.\nA containing set is an array nums where each interval from intervals has at least two integers in nums.\nReturn the minimum possible size of a containing set.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Special Binary String",
    "problem_id": "763",
    "frontend_id": "761",
    "difficulty": "Hard",
    "problem_slug": "special-binary-string",
    "topics": [
      "String",
      "Recursion"
    ],
    "description": "Special binary strings are binary strings with the following two properties:\nYou are given a special binary string s.\nA move consists of choosing two consecutive, non-empty, special substrings of s, and swapping them. Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.\nReturn the lexicographically largest resulting string possible after applying the mentioned operations on the string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Prime Number of Set Bits in Binary Representation",
    "problem_id": "767",
    "frontend_id": "762",
    "difficulty": "Easy",
    "problem_slug": "prime-number-of-set-bits-in-binary-representation",
    "topics": [
      "Math",
      "Bit Manipulation"
    ],
    "description": "Given two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation.\nRecall that the number of set bits an integer has is the number of 1's present when written in binary.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Partition Labels",
    "problem_id": "768",
    "frontend_id": "763",
    "difficulty": "Medium",
    "problem_slug": "partition-labels",
    "topics": [
      "Hash Table",
      "Two Pointers",
      "String",
      "Greedy"
    ],
    "description": "You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part. For example, the string \"ababcc\" can be partitioned into [\"abab\", \"cc\"], but partitions such as [\"aba\", \"bcc\"] or [\"ab\", \"ab\", \"cc\"] are invalid.\nNote that the partition is done so that after concatenating all the parts in order, the resultant string should be s.\nReturn a list of integers representing the size of these parts.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Largest Plus Sign",
    "problem_id": "769",
    "frontend_id": "764",
    "difficulty": "Medium",
    "problem_slug": "largest-plus-sign",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an integer n. You have an n x n binary grid grid with all values initially 1's except for some indices given in the array mines. The ith element of the array mines is defined as mines[i] = [xi, yi] where grid[xi][yi] == 0.\nReturn the order of the largest axis-aligned plus sign of 1's contained in grid. If there is none, return 0.\nAn axis-aligned plus sign of 1's of order k has some center grid[r][c] == 1 along with four arms of length k - 1 going up, down, left, and right, and made of 1's. Note that there could be 0's or 1's beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1's.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Couples Holding Hands",
    "problem_id": "770",
    "frontend_id": "765",
    "difficulty": "Hard",
    "problem_slug": "couples-holding-hands",
    "topics": [
      "Greedy",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "description": "There are n couples sitting in 2n seats arranged in a row and want to hold hands.\nThe people and seats are represented by an integer array row where row[i] is the ID of the person sitting in the ith seat. The couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2n - 2, 2n - 1).\nReturn the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Toeplitz Matrix",
    "problem_id": "777",
    "frontend_id": "766",
    "difficulty": "Easy",
    "problem_slug": "toeplitz-matrix",
    "topics": [
      "Array",
      "Matrix"
    ],
    "description": "Given an m x n matrix, return true if the matrix is Toeplitz. Otherwise, return false.\nA matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.\nExample 1:\nExample 2:\nConstraints:\nFollow up:"
  },
  {
    "title": "Reorganize String",
    "problem_id": "778",
    "frontend_id": "767",
    "difficulty": "Medium",
    "problem_slug": "reorganize-string",
    "topics": [
      "Hash Table",
      "String",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)",
      "Counting"
    ],
    "description": "Given a string s, rearrange the characters of s so that any two adjacent characters are not the same.\nReturn any possible rearrangement of s or return \"\" if not possible.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Max Chunks To Make Sorted II",
    "problem_id": "779",
    "frontend_id": "768",
    "difficulty": "Hard",
    "problem_slug": "max-chunks-to-make-sorted-ii",
    "topics": [
      "Array",
      "Stack",
      "Greedy",
      "Sorting",
      "Monotonic Stack"
    ],
    "description": "You are given an integer array arr.\nWe split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.\nReturn the largest number of chunks we can make to sort the array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Max Chunks To Make Sorted",
    "problem_id": "780",
    "frontend_id": "769",
    "difficulty": "Medium",
    "problem_slug": "max-chunks-to-make-sorted",
    "topics": [
      "Array",
      "Stack",
      "Greedy",
      "Sorting",
      "Monotonic Stack"
    ],
    "description": "You are given an integer array arr of length n that represents a permutation of the integers in the range [0, n - 1].\nWe split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.\nReturn the largest number of chunks we can make to sort the array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Basic Calculator IV",
    "problem_id": "781",
    "frontend_id": "770",
    "difficulty": "Hard",
    "problem_slug": "basic-calculator-iv",
    "topics": [
      "Hash Table",
      "Math",
      "String",
      "Stack",
      "Recursion"
    ],
    "description": "Given an expression such as expression = \"e + 8 - a + 5\" and an evaluation map such as {\"e\": 1} (given in terms of evalvars = [\"e\"] and evalints = [1]), return a list of tokens representing the simplified expression, such as [\"-1*a\",\"14\"]\nExpressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction.\nThe format of the output is as follows:\nNote: You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Jewels and Stones",
    "problem_id": "782",
    "frontend_id": "771",
    "difficulty": "Easy",
    "problem_slug": "jewels-and-stones",
    "topics": [
      "Hash Table",
      "String"
    ],
    "description": "You're given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. Each character in stones is a type of stone you have. You want to know how many of the stones you have are also jewels.\nLetters are case sensitive, so \"a\" is considered a different type of stone from \"A\".\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sliding Puzzle",
    "problem_id": "787",
    "frontend_id": "773",
    "difficulty": "Hard",
    "problem_slug": "sliding-puzzle",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Breadth-First Search",
      "Memoization",
      "Matrix"
    ],
    "description": "On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.\nThe state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].\nGiven the puzzle board board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Global and Local Inversions",
    "problem_id": "790",
    "frontend_id": "775",
    "difficulty": "Medium",
    "problem_slug": "global-and-local-inversions",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "You are given an integer array nums of length n which represents a permutation of all the integers in the range [0, n - 1].\nThe number of global inversions is the number of the different pairs (i, j) where:\nThe number of local inversions is the number of indices i where:\nReturn true if the number of global inversions is equal to the number of local inversions.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Swap Adjacent in LR String",
    "problem_id": "793",
    "frontend_id": "777",
    "difficulty": "Medium",
    "problem_slug": "swap-adjacent-in-lr-string",
    "topics": [
      "Two Pointers",
      "String"
    ],
    "description": "In a string composed of 'L', 'R', and 'X' characters, like \"RXXLRXRXL\", a move consists of either replacing one occurrence of \"XL\" with \"LX\", or replacing one occurrence of \"RX\" with \"XR\". Given the starting string start and the ending string result, return True if and only if there exists a sequence of moves to transform start to result.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Swim in Rising Water",
    "problem_id": "794",
    "frontend_id": "778",
    "difficulty": "Hard",
    "problem_slug": "swim-in-rising-water",
    "topics": [
      "Array",
      "Binary Search",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Heap (Priority Queue)",
      "Matrix"
    ],
    "description": "You are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j).\nIt starts raining, and water gradually rises over time. At time t, the water level is t, meaning any cell with elevation less than equal to t is submerged or reachable.\nYou can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.\nReturn the minimum time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "K-th Symbol in Grammar",
    "problem_id": "795",
    "frontend_id": "779",
    "difficulty": "Medium",
    "problem_slug": "k-th-symbol-in-grammar",
    "topics": [
      "Math",
      "Bit Manipulation",
      "Recursion"
    ],
    "description": "We build a table of n rows (1-indexed). We start by writing 0 in the 1st row. Now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10.\nGiven two integer n and k, return the kth (1-indexed) symbol in the nth row of a table of n rows.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Reaching Points",
    "problem_id": "796",
    "frontend_id": "780",
    "difficulty": "Hard",
    "problem_slug": "reaching-points",
    "topics": [
      "Math"
    ],
    "description": "Given four integers sx, sy, tx, and ty, return true if it is possible to convert the point (sx, sy) to the point (tx, ty) through some operations, or false otherwise.\nThe allowed operation on some point (x, y) is to convert it to either (x, x + y) or (x + y, y).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Rabbits in Forest",
    "problem_id": "797",
    "frontend_id": "781",
    "difficulty": "Medium",
    "problem_slug": "rabbits-in-forest",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Greedy"
    ],
    "description": "There is a forest with an unknown number of rabbits. We asked n rabbits \"How many rabbits have the same color as you?\" and collected the answers in an integer array answers where answers[i] is the answer of the ith rabbit.\nGiven the array answers, return the minimum number of rabbits that could be in the forest.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Transform to Chessboard",
    "problem_id": "798",
    "frontend_id": "782",
    "difficulty": "Hard",
    "problem_slug": "transform-to-chessboard",
    "topics": [
      "Array",
      "Math",
      "Bit Manipulation",
      "Matrix"
    ],
    "description": "You are given an n x n binary grid board. In each move, you can swap any two rows with each other, or any two columns with each other.\nReturn the minimum number of moves to transform the board into a chessboard board. If the task is impossible, return -1.\nA chessboard board is a board where no 0's and no 1's are 4-directionally adjacent.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Distance Between BST Nodes",
    "problem_id": "799",
    "frontend_id": "783",
    "difficulty": "Easy",
    "problem_slug": "minimum-distance-between-bst-nodes",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.\nExample 1:\nExample 2:\nConstraints:\nNote: This question is the same as 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/"
  },
  {
    "title": "Letter Case Permutation",
    "problem_id": "800",
    "frontend_id": "784",
    "difficulty": "Medium",
    "problem_slug": "letter-case-permutation",
    "topics": [
      "String",
      "Backtracking",
      "Bit Manipulation"
    ],
    "description": "Given a string s, you can transform every letter individually to be lowercase or uppercase to create another string.\nReturn a list of all possible strings we could create. Return the output in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Is Graph Bipartite?",
    "problem_id": "801",
    "frontend_id": "785",
    "difficulty": "Medium",
    "problem_slug": "is-graph-bipartite",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "description": "There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:\nA graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.\nReturn true if and only if it is bipartite.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "K-th Smallest Prime Fraction",
    "problem_id": "802",
    "frontend_id": "786",
    "difficulty": "Medium",
    "problem_slug": "k-th-smallest-prime-fraction",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique. You are also given an integer k.\nFor every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j].\nReturn the kth smallest fraction considered. Return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Cheapest Flights Within K Stops",
    "problem_id": "803",
    "frontend_id": "787",
    "difficulty": "Medium",
    "problem_slug": "cheapest-flights-within-k-stops",
    "topics": [
      "Dynamic Programming",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Heap (Priority Queue)",
      "Shortest Path"
    ],
    "description": "There are n cities connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei.\nYou are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Rotated Digits",
    "problem_id": "804",
    "frontend_id": "788",
    "difficulty": "Medium",
    "problem_slug": "rotated-digits",
    "topics": [
      "Math",
      "Dynamic Programming"
    ],
    "description": "An integer x is a good if after rotating each digit individually by 180 degrees, we get a valid number that is different from x. Each digit must be rotated - we cannot choose to leave it alone.\nA number is valid if each digit remains a digit after rotation. For example:\nGiven an integer n, return the number of good integers in the range [1, n].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Escape The Ghosts",
    "problem_id": "805",
    "frontend_id": "789",
    "difficulty": "Medium",
    "problem_slug": "escape-the-ghosts",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point [0, 0], and you are given a destination point target = [xtarget, ytarget] that you are trying to get to. There are several ghosts on the map with their starting positions given as a 2D array ghosts, where ghosts[i] = [xi, yi] represents the starting position of the ith ghost. All inputs are integral coordinates.\nEach turn, you and all the ghosts may independently choose to either move 1 unit in any of the four cardinal directions: north, east, south, or west, or stay still. All actions happen simultaneously.\nYou escape if and only if you can reach the target before any ghost reaches you. If you reach any square (including the target) at the same time as a ghost, it does not count as an escape.\nReturn true if it is possible to escape regardless of how the ghosts move, otherwise return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Domino and Tromino Tiling",
    "problem_id": "806",
    "frontend_id": "790",
    "difficulty": "Medium",
    "problem_slug": "domino-and-tromino-tiling",
    "topics": [
      "Dynamic Programming"
    ],
    "description": "You have two types of tiles: a 2 x 1 domino shape and a tromino shape. You may rotate these shapes.\nGiven an integer n, return the number of ways to tile an 2 x n board. Since the answer may be very large, return it modulo 109 + 7.\nIn a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Custom Sort String",
    "problem_id": "807",
    "frontend_id": "791",
    "difficulty": "Medium",
    "problem_slug": "custom-sort-string",
    "topics": [
      "Hash Table",
      "String",
      "Sorting"
    ],
    "description": "You are given two strings order and s. All the characters of order are unique and were sorted in some custom order previously.\nPermute the characters of s so that they match the order that order was sorted. More specifically, if a character x occurs before a character y in order, then x should occur before y in the permuted string.\nReturn any permutation of s that satisfies this property.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Matching Subsequences",
    "problem_id": "808",
    "frontend_id": "792",
    "difficulty": "Medium",
    "problem_slug": "number-of-matching-subsequences",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Binary Search",
      "Dynamic Programming",
      "Trie",
      "Sorting"
    ],
    "description": "Given a string s and an array of strings words, return the number of words[i] that is a subsequence of s.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Preimage Size of Factorial Zeroes Function",
    "problem_id": "809",
    "frontend_id": "793",
    "difficulty": "Hard",
    "problem_slug": "preimage-size-of-factorial-zeroes-function",
    "topics": [
      "Math",
      "Binary Search"
    ],
    "description": "Let f(x) be the number of zeroes at the end of x!. Recall that x! = 1 * 2 * 3 * ... * x and by convention, 0! = 1.\nGiven an integer k, return the number of non-negative integers x have the property that f(x) = k.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Valid Tic-Tac-Toe State",
    "problem_id": "810",
    "frontend_id": "794",
    "difficulty": "Medium",
    "problem_slug": "valid-tic-tac-toe-state",
    "topics": [
      "Array",
      "Matrix"
    ],
    "description": "Given a Tic-Tac-Toe board as a string array board, return true if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.\nThe board is a 3 x 3 array that consists of characters ' ', 'X', and 'O'. The ' ' character represents an empty square.\nHere are the rules of Tic-Tac-Toe:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Subarrays with Bounded Maximum",
    "problem_id": "811",
    "frontend_id": "795",
    "difficulty": "Medium",
    "problem_slug": "number-of-subarrays-with-bounded-maximum",
    "topics": [
      "Array",
      "Two Pointers"
    ],
    "description": "Given an integer array nums and two integers left and right, return the number of contiguous non-empty subarrays such that the value of the maximum array element in that subarray is in the range [left, right].\nThe test cases are generated so that the answer will fit in a 32-bit integer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Rotate String",
    "problem_id": "812",
    "frontend_id": "796",
    "difficulty": "Easy",
    "problem_slug": "rotate-string",
    "topics": [
      "String",
      "String Matching"
    ],
    "description": "Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s.\nA shift on s consists of moving the leftmost character of s to the rightmost position.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "All Paths From Source to Target",
    "problem_id": "813",
    "frontend_id": "797",
    "difficulty": "Medium",
    "problem_slug": "all-paths-from-source-to-target",
    "topics": [
      "Backtracking",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph"
    ],
    "description": "Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.\nThe graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Smallest Rotation with Highest Score",
    "problem_id": "814",
    "frontend_id": "798",
    "difficulty": "Hard",
    "problem_slug": "smallest-rotation-with-highest-score",
    "topics": [
      "Array",
      "Prefix Sum"
    ],
    "description": "You are given an array nums. You can rotate it by a non-negative integer k so that the array becomes [nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]. Afterward, any entries that are less than or equal to their index are worth one point.\nReturn the rotation index k that corresponds to the highest score we can achieve if we rotated nums by it. If there are multiple answers, return the smallest such index k.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Champagne Tower",
    "problem_id": "815",
    "frontend_id": "799",
    "difficulty": "Medium",
    "problem_slug": "champagne-tower",
    "topics": [
      "Dynamic Programming"
    ],
    "description": "We stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row.  Each glass holds one cup of champagne.\nThen, some champagne is poured into the first glass at the top.  When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.  When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.  (A glass at the bottom row has its excess champagne fall on the floor.)\nFor example, after one cup of champagne is poured, the top most glass is full.  After two cups of champagne are poured, the two glasses on the second row are half full.  After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.  After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.\nNow after pouring some non-negative integer cups of champagne, return how full the jth glass in the ith row is (both i and j are 0-indexed.)\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Swaps To Make Sequences Increasing",
    "problem_id": "819",
    "frontend_id": "801",
    "difficulty": "Hard",
    "problem_slug": "minimum-swaps-to-make-sequences-increasing",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given two integer arrays of the same length nums1 and nums2. In one operation, you are allowed to swap nums1[i] with nums2[i].\nReturn the minimum number of needed operations to make nums1 and nums2 strictly increasing. The test cases are generated so that the given input always makes it possible.\nAn array arr is strictly increasing if and only if arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Eventual Safe States",
    "problem_id": "820",
    "frontend_id": "802",
    "difficulty": "Medium",
    "problem_slug": "find-eventual-safe-states",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort"
    ],
    "description": "There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].\nA node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).\nReturn an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Bricks Falling When Hit",
    "problem_id": "821",
    "frontend_id": "803",
    "difficulty": "Hard",
    "problem_slug": "bricks-falling-when-hit",
    "topics": [
      "Array",
      "Union Find",
      "Matrix"
    ],
    "description": "You are given an m x n binary grid, where each 1 represents a brick and 0 represents an empty space. A brick is stable if:\nYou are also given an array hits, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location hits[i] = (rowi, coli). The brick on that location (if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will fall. Once a brick falls, it is immediately erased from the grid (i.e., it does not land on other stable bricks).\nReturn an array result, where each result[i] is the number of bricks that will fall after the ith erasure is applied.\nNote that an erasure may refer to a location with no brick, and if it does, no bricks drop.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Unique Morse Code Words",
    "problem_id": "822",
    "frontend_id": "804",
    "difficulty": "Easy",
    "problem_slug": "unique-morse-code-words",
    "topics": [
      "Array",
      "Hash Table",
      "String"
    ],
    "description": "International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:\nFor convenience, the full table for the 26 letters of the English alphabet is given below:\nGiven an array of strings words where each word can be written as a concatenation of the Morse code of each letter.\nReturn the number of different transformations among all words we have.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Split Array With Same Average",
    "problem_id": "823",
    "frontend_id": "805",
    "difficulty": "Hard",
    "problem_slug": "split-array-with-same-average",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "You are given an integer array nums.\nYou should move each element of nums into one of the two arrays A and B such that A and B are non-empty, and average(A) == average(B).\nReturn true if it is possible to achieve that and false otherwise.\nNote that for an array arr, average(arr) is the sum of all the elements of arr over the length of arr.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Lines To Write String",
    "problem_id": "824",
    "frontend_id": "806",
    "difficulty": "Easy",
    "problem_slug": "number-of-lines-to-write-string",
    "topics": [
      "Array",
      "String"
    ],
    "description": "You are given a string s of lowercase English letters and an array widths denoting how many pixels wide each lowercase English letter is. Specifically, widths[0] is the width of 'a', widths[1] is the width of 'b', and so on.\nYou are trying to write s across several lines, where each line is no longer than 100 pixels. Starting at the beginning of s, write as many letters on the first line such that the total width does not exceed 100 pixels. Then, from where you stopped in s, continue writing as many letters as you can on the second line. Continue this process until you have written all of s.\nReturn an array result of length 2 where:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Max Increase to Keep City Skyline",
    "problem_id": "825",
    "frontend_id": "807",
    "difficulty": "Medium",
    "problem_slug": "max-increase-to-keep-city-skyline",
    "topics": [
      "Array",
      "Greedy",
      "Matrix"
    ],
    "description": "There is a city composed of n x n blocks, where each block contains a single building shaped like a vertical square prism. You are given a 0-indexed n x n integer matrix grid where grid[r][c] represents the height of the building located in the block at row r and column c.\nA city's skyline is the outer contour formed by all the building when viewing the side of the city from a distance. The skyline from each cardinal direction north, east, south, and west may be different.\nWe are allowed to increase the height of any number of buildings by any amount (the amount can be different per building). The height of a 0-height building can also be increased. However, increasing the height of a building should not affect the city's skyline from any cardinal direction.\nReturn the maximum total sum that the height of the buildings can be increased by without changing the city's skyline from any cardinal direction.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Soup Servings",
    "problem_id": "826",
    "frontend_id": "808",
    "difficulty": "Medium",
    "problem_slug": "soup-servings",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Probability and Statistics"
    ],
    "description": "You have two soups, A and B, each starting with n mL. On every turn, one of the following four serving operations is chosen at random, each with probability 0.25 independent of all previous turns:\nNote:\nThe process stops immediately after any turn in which one of the soups is used up.\nReturn the probability that A is used up before B, plus half the probability that both soups are used up in the same turn. Answers within 10-5 of the actual answer will be accepted.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Expressive Words",
    "problem_id": "827",
    "frontend_id": "809",
    "difficulty": "Medium",
    "problem_slug": "expressive-words",
    "topics": [
      "Array",
      "Two Pointers",
      "String"
    ],
    "description": "Sometimes people repeat letters to represent extra feeling. For example:\nIn these strings like \"heeellooo\", we have groups of adjacent letters that are all the same: \"h\", \"eee\", \"ll\", \"ooo\".\nYou are given a string s and an array of query strings words. A query word is stretchy if it can be made to be equal to s by any number of applications of the following extension operation: choose a group consisting of characters c, and add some number of characters c to the group so that the size of the group is three or more.\nReturn the number of query strings that are stretchy.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Chalkboard XOR Game",
    "problem_id": "828",
    "frontend_id": "810",
    "difficulty": "Hard",
    "problem_slug": "chalkboard-xor-game",
    "topics": [
      "Array",
      "Math",
      "Bit Manipulation",
      "Brainteaser",
      "Game Theory"
    ],
    "description": "You are given an array of integers nums represents the numbers written on a chalkboard.\nAlice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first. If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become 0, then that player loses. The bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is 0.\nAlso, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to 0, then that player wins.\nReturn true if and only if Alice wins the game, assuming both players play optimally.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Subdomain Visit Count",
    "problem_id": "829",
    "frontend_id": "811",
    "difficulty": "Medium",
    "problem_slug": "subdomain-visit-count",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "A website domain \"discuss.leetcode.com\" consists of various subdomains. At the top level, we have \"com\", at the next level, we have \"leetcode.com\" and at the lowest level, \"discuss.leetcode.com\". When we visit a domain like \"discuss.leetcode.com\", we will also visit the parent domains \"leetcode.com\" and \"com\" implicitly.\nA count-paired domain is a domain that has one of the two formats \"rep d1.d2.d3\" or \"rep d1.d2\" where rep is the number of visits to the domain and d1.d2.d3 is the domain itself.\nGiven an array of count-paired domains cpdomains, return an array of the count-paired domains of each subdomain in the input. You may return the answer in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Largest Triangle Area",
    "problem_id": "830",
    "frontend_id": "812",
    "difficulty": "Easy",
    "problem_slug": "largest-triangle-area",
    "topics": [
      "Array",
      "Math",
      "Geometry"
    ],
    "description": "Given an array of points on the X-Y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points. Answers within 10-5 of the actual answer will be accepted.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Largest Sum of Averages",
    "problem_id": "831",
    "frontend_id": "813",
    "difficulty": "Medium",
    "problem_slug": "largest-sum-of-averages",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "description": "You are given an integer array nums and an integer k. You can partition the array into at most k non-empty adjacent subarrays. The score of a partition is the sum of the averages of each subarray.\nNote that the partition must use every integer in nums, and that the score is not necessarily an integer.\nReturn the maximum score you can achieve of all the possible partitions. Answers within 10-6 of the actual answer will be accepted.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Binary Tree Pruning",
    "problem_id": "832",
    "frontend_id": "814",
    "difficulty": "Medium",
    "problem_slug": "binary-tree-pruning",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the same tree where every subtree (of the given tree) not containing a 1 has been removed.\nA subtree of a node node is node plus every node that is a descendant of node.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Bus Routes",
    "problem_id": "833",
    "frontend_id": "815",
    "difficulty": "Hard",
    "problem_slug": "bus-routes",
    "topics": [
      "Array",
      "Hash Table",
      "Breadth-First Search"
    ],
    "description": "You are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.\nYou will start at the bus stop source (You are not on any bus initially), and you want to go to the bus stop target. You can travel between bus stops by buses only.\nReturn the least number of buses you must take to travel from source to target. Return -1 if it is not possible.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Ambiguous Coordinates",
    "problem_id": "834",
    "frontend_id": "816",
    "difficulty": "Medium",
    "problem_slug": "ambiguous-coordinates",
    "topics": [
      "String",
      "Backtracking",
      "Enumeration"
    ],
    "description": "We had some 2-dimensional coordinates, like \"(1, 3)\" or \"(2, 0.5)\". Then, we removed all commas, decimal points, and spaces and ended up with the string s.\nReturn a list of strings representing all possibilities for what our original coordinates could have been.\nOur original representation never had extraneous zeroes, so we never started with numbers like \"00\", \"0.0\", \"0.00\", \"1.0\", \"001\", \"00.01\", or any other number that can be represented with fewer digits. Also, a decimal point within a number never occurs without at least one digit occurring before it, so we never started with numbers like \".1\".\nThe final answer list can be returned in any order. All coordinates in the final answer have exactly one space between them (occurring after the comma.)\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Linked List Components",
    "problem_id": "835",
    "frontend_id": "817",
    "difficulty": "Medium",
    "problem_slug": "linked-list-components",
    "topics": [
      "Array",
      "Hash Table",
      "Linked List"
    ],
    "description": "You are given the head of a linked list containing unique integer values and an integer array nums that is a subset of the linked list values.\nReturn the number of connected components in nums where two values are connected if they appear consecutively in the linked list.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Race Car",
    "problem_id": "836",
    "frontend_id": "818",
    "difficulty": "Hard",
    "problem_slug": "race-car",
    "topics": [
      "Dynamic Programming"
    ],
    "description": "Your car starts at position 0 and speed +1 on an infinite number line. Your car can go into negative positions. Your car drives automatically according to a sequence of instructions 'A' (accelerate) and 'R' (reverse):\nFor example, after commands \"AAR\", your car goes to positions 0 --> 1 --> 3 --> 3, and your speed goes to 1 --> 2 --> 4 --> -1.\nGiven a target position target, return the length of the shortest sequence of instructions to get there.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Most Common Word",
    "problem_id": "837",
    "frontend_id": "819",
    "difficulty": "Easy",
    "problem_slug": "most-common-word",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "Given a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique.\nThe words in paragraph are case-insensitive and the answer should be returned in lowercase.\nNote that words can not contain punctuation symbols.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Short Encoding of Words",
    "problem_id": "839",
    "frontend_id": "820",
    "difficulty": "Medium",
    "problem_slug": "short-encoding-of-words",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Trie"
    ],
    "description": "A valid encoding of an array of words is any reference string s and array of indices indices such that:\nGiven an array of words, return the length of the shortest reference string s possible of any valid encoding of words.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Shortest Distance to a Character",
    "problem_id": "841",
    "frontend_id": "821",
    "difficulty": "Easy",
    "problem_slug": "shortest-distance-to-a-character",
    "topics": [
      "Array",
      "Two Pointers",
      "String"
    ],
    "description": "Given a string s and a character c that occurs in s, return an array of integers answer where answer.length == s.length and answer[i] is the distance from index i to the closest occurrence of character c in s.\nThe distance between two indices i and j is abs(i - j), where abs is the absolute value function.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Card Flipping Game",
    "problem_id": "842",
    "frontend_id": "822",
    "difficulty": "Medium",
    "problem_slug": "card-flipping-game",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "You are given two 0-indexed integer arrays fronts and backs of length n, where the ith card has the positive integer fronts[i] printed on the front and backs[i] printed on the back. Initially, each card is placed on a table such that the front number is facing up and the other is facing down. You may flip over any number of cards (possibly zero).\nAfter flipping the cards, an integer is considered good if it is facing down on some card and not facing up on any card.\nReturn the minimum possible good integer after flipping the cards. If there are no good integers, return 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Binary Trees With Factors",
    "problem_id": "843",
    "frontend_id": "823",
    "difficulty": "Medium",
    "problem_slug": "binary-trees-with-factors",
    "topics": [
      "Array",
      "Hash Table",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "Given an array of unique integers, arr, where each integer arr[i] is strictly greater than 1.\nWe make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children.\nReturn the number of binary trees we can make. The answer may be too large so return the answer modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Goat Latin",
    "problem_id": "851",
    "frontend_id": "824",
    "difficulty": "Easy",
    "problem_slug": "goat-latin",
    "topics": [
      "String"
    ],
    "description": "You are given a string sentence that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.\nWe would like to convert the sentence to \"Goat Latin\" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:\nReturn the final sentence representing the conversion from sentence to Goat Latin.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Friends Of Appropriate Ages",
    "problem_id": "852",
    "frontend_id": "825",
    "difficulty": "Medium",
    "problem_slug": "friends-of-appropriate-ages",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "description": "There are n persons on a social media website. You are given an integer array ages where ages[i] is the age of the ith person.\nA Person x will not send a friend request to a person y (x != y) if any of the following conditions is true:\nOtherwise, x will send a friend request to y.\nNote that if x sends a request to y, y will not necessarily send a request to x. Also, a person will not send a friend request to themself.\nReturn the total number of friend requests made.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Most Profit Assigning Work",
    "problem_id": "853",
    "frontend_id": "826",
    "difficulty": "Medium",
    "problem_slug": "most-profit-assigning-work",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Greedy",
      "Sorting"
    ],
    "description": "You have n jobs and m workers. You are given three arrays: difficulty, profit, and worker where:\nEvery worker can be assigned at most one job, but one job can be completed multiple times.\nReturn the maximum profit we can achieve after assigning the workers to the jobs.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Making A Large Island",
    "problem_id": "854",
    "frontend_id": "827",
    "difficulty": "Hard",
    "problem_slug": "making-a-large-island",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix"
    ],
    "description": "You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.\nReturn the size of the largest island in grid after applying this operation.\nAn island is a 4-directionally connected group of 1s.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Unique Characters of All Substrings of a Given String",
    "problem_id": "855",
    "frontend_id": "828",
    "difficulty": "Hard",
    "problem_slug": "count-unique-characters-of-all-substrings-of-a-given-string",
    "topics": [
      "Hash Table",
      "String",
      "Dynamic Programming"
    ],
    "description": "Let's define a function countUniqueChars(s) that returns the number of unique characters in s.\nGiven a string s, return the sum of countUniqueChars(t) where t is a substring of s. The test cases are generated such that the answer fits in a 32-bit integer.\nNotice that some substrings can be repeated so in this case you have to count the repeated ones too.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Consecutive Numbers Sum",
    "problem_id": "856",
    "frontend_id": "829",
    "difficulty": "Hard",
    "problem_slug": "consecutive-numbers-sum",
    "topics": [
      "Math",
      "Enumeration"
    ],
    "description": "Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Positions of Large Groups",
    "problem_id": "857",
    "frontend_id": "830",
    "difficulty": "Easy",
    "problem_slug": "positions-of-large-groups",
    "topics": [
      "String"
    ],
    "description": "In a string s of lowercase letters, these letters form consecutive groups of the same character.\nFor example, a string like s = \"abbxxxxzyy\" has the groups \"a\", \"bb\", \"xxxx\", \"z\", and \"yy\".\nA group is identified by an interval [start, end], where start and end denote the start and end indices (inclusive) of the group. In the above example, \"xxxx\" has the interval [3,6].\nA group is considered large if it has 3 or more characters.\nReturn the intervals of every large group sorted in increasing order by start index.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Masking Personal Information",
    "problem_id": "858",
    "frontend_id": "831",
    "difficulty": "Medium",
    "problem_slug": "masking-personal-information",
    "topics": [
      "String"
    ],
    "description": "You are given a personal information string s, representing either an email address or a phone number. Return the masked personal information using the below rules.\nEmail address:\nAn email address is:\nTo mask an email:\nPhone number:\nA phone number is formatted as follows:\nTo mask a phone number:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Flipping an Image",
    "problem_id": "861",
    "frontend_id": "832",
    "difficulty": "Easy",
    "problem_slug": "flipping-an-image",
    "topics": [
      "Array",
      "Two Pointers",
      "Bit Manipulation",
      "Matrix",
      "Simulation"
    ],
    "description": "Given an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image.\nTo flip an image horizontally means that each row of the image is reversed.\nTo invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find And Replace in String",
    "problem_id": "862",
    "frontend_id": "833",
    "difficulty": "Medium",
    "problem_slug": "find-and-replace-in-string",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Sorting"
    ],
    "description": "You are given a 0-indexed string s that you must perform k replacement operations on. The replacement operations are given as three 0-indexed parallel arrays, indices, sources, and targets, all of length k.\nTo complete the ith replacement operation:\nFor example, if s = \"abcd\", indices[i] = 0, sources[i] = \"ab\", and targets[i] = \"eee\", then the result of this replacement will be \"eeecd\".\nAll replacement operations must occur simultaneously, meaning the replacement operations should not affect the indexing of each other. The testcases will be generated such that the replacements will not overlap.\nReturn the resulting string after performing all replacement operations on s.\nA substring is a contiguous sequence of characters in a string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Distances in Tree",
    "problem_id": "863",
    "frontend_id": "834",
    "difficulty": "Hard",
    "problem_slug": "sum-of-distances-in-tree",
    "topics": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Graph"
    ],
    "description": "There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\nYou are given the integer n and the array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nReturn an array answer of length n where answer[i] is the sum of the distances between the ith node in the tree and all other nodes.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Image Overlap",
    "problem_id": "864",
    "frontend_id": "835",
    "difficulty": "Medium",
    "problem_slug": "image-overlap",
    "topics": [
      "Array",
      "Matrix"
    ],
    "description": "You are given two images, img1 and img2, represented as binary, square matrices of size n x n. A binary matrix has only 0s and 1s as values.\nWe translate one image however we choose by sliding all the 1 bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the overlap by counting the number of positions that have a 1 in both images.\nNote also that a translation does not include any kind of rotation. Any 1 bits that are translated outside of the matrix borders are erased.\nReturn the largest possible overlap.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Rectangle Overlap",
    "problem_id": "866",
    "frontend_id": "836",
    "difficulty": "Easy",
    "problem_slug": "rectangle-overlap",
    "topics": [
      "Math",
      "Geometry"
    ],
    "description": "An axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.\nTwo rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.\nGiven two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "New 21 Game",
    "problem_id": "867",
    "frontend_id": "837",
    "difficulty": "Medium",
    "problem_slug": "new-21-game",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Sliding Window",
      "Probability and Statistics"
    ],
    "description": "Alice plays the following game, loosely based on the card game \"21\".\nAlice starts with 0 points and draws numbers while she has less than k points. During each draw, she gains an integer number of points randomly from the range [1, maxPts], where maxPts is an integer. Each draw is independent and the outcomes have equal probabilities.\nAlice stops drawing numbers when she gets k or more points.\nReturn the probability that Alice has n or fewer points.\nAnswers within 10-5 of the actual answer are considered accepted.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Push Dominoes",
    "problem_id": "868",
    "frontend_id": "838",
    "difficulty": "Medium",
    "problem_slug": "push-dominoes",
    "topics": [
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "description": "There are n dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right.\nAfter each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.\nWhen a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.\nFor the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.\nYou are given a string dominoes representing the initial state where:\nReturn a string representing the final state.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Similar String Groups",
    "problem_id": "869",
    "frontend_id": "839",
    "difficulty": "Hard",
    "problem_slug": "similar-string-groups",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find"
    ],
    "description": "Two strings, X and Y, are considered similar if either they are identical or we can make them equivalent by swapping at most two letters (in distinct positions) within the string X.\nFor example, \"tars\" and \"rats\" are similar (swapping at positions 0 and 2), and \"rats\" and \"arts\" are similar, but \"star\" is not similar to \"tars\", \"rats\", or \"arts\".\nTogether, these form two connected groups by similarity: {\"tars\", \"rats\", \"arts\"} and {\"star\"}.  Notice that \"tars\" and \"arts\" are in the same group even though they are not similar.  Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.\nWe are given a list strs of strings where every string in strs is an anagram of every other string in strs. How many groups are there?\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Magic Squares In Grid",
    "problem_id": "870",
    "frontend_id": "840",
    "difficulty": "Medium",
    "problem_slug": "magic-squares-in-grid",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Matrix"
    ],
    "description": "A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum.\nGiven a row x col grid of integers, how many 3 x 3 magic square subgrids are there?\nNote: while a magic square can only contain numbers from 1 to 9, grid may contain numbers up to 15.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Keys and Rooms",
    "problem_id": "871",
    "frontend_id": "841",
    "difficulty": "Medium",
    "problem_slug": "keys-and-rooms",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph"
    ],
    "description": "There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.\nWhen you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.\nGiven an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Split Array into Fibonacci Sequence",
    "problem_id": "872",
    "frontend_id": "842",
    "difficulty": "Medium",
    "problem_slug": "split-array-into-fibonacci-sequence",
    "topics": [
      "String",
      "Backtracking"
    ],
    "description": "You are given a string of digits num, such as \"123456579\". We can split it into a Fibonacci-like sequence [123, 456, 579].\nFormally, a Fibonacci-like sequence is a list f of non-negative integers such that:\nNote that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.\nReturn any Fibonacci-like sequence split from num, or return [] if it cannot be done.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Guess the Word",
    "problem_id": "873",
    "frontend_id": "843",
    "difficulty": "Hard",
    "problem_slug": "guess-the-word",
    "topics": [
      "Array",
      "Math",
      "String",
      "Interactive",
      "Game Theory"
    ],
    "description": "You are given an array of unique strings words where words[i] is six letters long. One word of words was chosen as a secret word.\nYou are also given the helper object Master. You may call Master.guess(word) where word is a six-letter-long string, and it must be from words. Master.guess(word) returns:\nThere is a parameter allowedGuesses for each test case where allowedGuesses is the maximum number of times you can call Master.guess(word).\nFor each test case, you should call Master.guess with the secret word without exceeding the maximum number of allowed guesses. You will get:\nThe test cases are generated such that you can guess the secret word with a reasonable strategy (other than using the bruteforce method).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Backspace String Compare",
    "problem_id": "874",
    "frontend_id": "844",
    "difficulty": "Easy",
    "problem_slug": "backspace-string-compare",
    "topics": [
      "Two Pointers",
      "String",
      "Stack",
      "Simulation"
    ],
    "description": "Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.\nNote that after backspacing an empty text, the text will continue empty.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Can you solve it in O(n) time and O(1) space?"
  },
  {
    "title": "Longest Mountain in Array",
    "problem_id": "875",
    "frontend_id": "845",
    "difficulty": "Medium",
    "problem_slug": "longest-mountain-in-array",
    "topics": [
      "Array",
      "Two Pointers",
      "Dynamic Programming",
      "Enumeration"
    ],
    "description": "You may recall that an array arr is a mountain array if and only if:\nGiven an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.\nExample 1:\nExample 2:\nConstraints:\nFollow up:"
  },
  {
    "title": "Hand of Straights",
    "problem_id": "876",
    "frontend_id": "846",
    "difficulty": "Medium",
    "problem_slug": "hand-of-straights",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Sorting"
    ],
    "description": "Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupSize, and consists of groupSize consecutive cards.\nGiven an integer array hand where hand[i] is the value written on the ith card and an integer groupSize, return true if she can rearrange the cards, or false otherwise.\nExample 1:\nExample 2:\nConstraints:\nNote: This question is the same as 1296: https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/"
  },
  {
    "title": "Shortest Path Visiting All Nodes",
    "problem_id": "877",
    "frontend_id": "847",
    "difficulty": "Hard",
    "problem_slug": "shortest-path-visiting-all-nodes",
    "topics": [
      "Dynamic Programming",
      "Bit Manipulation",
      "Breadth-First Search",
      "Graph",
      "Bitmask"
    ],
    "description": "You have an undirected, connected graph of n nodes labeled from 0 to n - 1. You are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge.\nReturn the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Shifting Letters",
    "problem_id": "878",
    "frontend_id": "848",
    "difficulty": "Medium",
    "problem_slug": "shifting-letters",
    "topics": [
      "Array",
      "String",
      "Prefix Sum"
    ],
    "description": "You are given a string s of lowercase English letters and an integer array shifts of the same length.\nCall the shift() of a letter, the next letter in the alphabet, (wrapping around so that 'z' becomes 'a').\nNow for each shifts[i] = x, we want to shift the first i + 1 letters of s, x times.\nReturn the final string after all such shifts to s are applied.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximize Distance to Closest Person",
    "problem_id": "879",
    "frontend_id": "849",
    "difficulty": "Medium",
    "problem_slug": "maximize-distance-to-closest-person",
    "topics": [
      "Array"
    ],
    "description": "You are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the ith seat, and seats[i] = 0 represents that the ith seat is empty (0-indexed).\nThere is at least one empty seat, and at least one person sitting.\nAlex wants to sit in the seat such that the distance between him and the closest person to him is maximized.\nReturn that maximum distance to the closest person.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Rectangle Area II",
    "problem_id": "880",
    "frontend_id": "850",
    "difficulty": "Hard",
    "problem_slug": "rectangle-area-ii",
    "topics": [
      "Array",
      "Segment Tree",
      "Line Sweep",
      "Ordered Set"
    ],
    "description": "You are given a 2D array of axis-aligned rectangles. Each rectangle[i] = [xi1, yi1, xi2, yi2] denotes the ith rectangle where (xi1, yi1) are the coordinates of the bottom-left corner, and (xi2, yi2) are the coordinates of the top-right corner.\nCalculate the total area covered by all rectangles in the plane. Any area covered by two or more rectangles should only be counted once.\nReturn the total area. Since the answer may be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Loud and Rich",
    "problem_id": "881",
    "frontend_id": "851",
    "difficulty": "Medium",
    "problem_slug": "loud-and-rich",
    "topics": [
      "Array",
      "Depth-First Search",
      "Graph",
      "Topological Sort"
    ],
    "description": "There is a group of n people labeled from 0 to n - 1 where each person has a different amount of money and a different level of quietness.\nYou are given an array richer where richer[i] = [ai, bi] indicates that ai has more money than bi and an integer array quiet where quiet[i] is the quietness of the ith person. All the given data in richer are logically correct (i.e., the data will not lead you to a situation where x is richer than y and y is richer than x at the same time).\nReturn an integer array answer where answer[x] = y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]) among all people who definitely have equal to or more money than the person x.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Peak Index in a Mountain Array",
    "problem_id": "882",
    "frontend_id": "852",
    "difficulty": "Medium",
    "problem_slug": "peak-index-in-a-mountain-array",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "You are given an integer mountain array arr of length n where the values increase to a peak element and then decrease.\nReturn the index of the peak element.\nYour task is to solve it in O(log(n)) time complexity.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Car Fleet",
    "problem_id": "883",
    "frontend_id": "853",
    "difficulty": "Medium",
    "problem_slug": "car-fleet",
    "topics": [
      "Array",
      "Stack",
      "Sorting",
      "Monotonic Stack"
    ],
    "description": "There are n cars at given miles away from the starting mile 0, traveling to reach the mile target.\nYou are given two integer arrays position and speed, both of length n, where position[i] is the starting mile of the ith car and speed[i] is the speed of the ith car in miles per hour.\nA car cannot pass another car, but it can catch up and then travel next to it at the speed of the slower car.\nA car fleet is a car or cars driving next to each other. The speed of the car fleet is the minimum speed of any car in the fleet.\nIf a car catches up to a car fleet at the mile target, it will still be considered as part of the car fleet.\nReturn the number of car fleets that will arrive at the destination.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "K-Similar Strings",
    "problem_id": "884",
    "frontend_id": "854",
    "difficulty": "Hard",
    "problem_slug": "k-similar-strings",
    "topics": [
      "Hash Table",
      "String",
      "Breadth-First Search"
    ],
    "description": "Strings s1 and s2 are k-similar (for some non-negative integer k) if we can swap the positions of two letters in s1 exactly k times so that the resulting string equals s2.\nGiven two anagrams s1 and s2, return the smallest k for which s1 and s2 are k-similar.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Exam Room",
    "problem_id": "885",
    "frontend_id": "855",
    "difficulty": "Medium",
    "problem_slug": "exam-room",
    "topics": [
      "Design",
      "Heap (Priority Queue)",
      "Ordered Set"
    ],
    "description": "There is an exam room with n seats in a single row labeled from 0 to n - 1.\nWhen a student enters the room, they must sit in the seat that maximizes the distance to the closest person. If there are multiple such seats, they sit in the seat with the lowest number. If no one is in the room, then the student sits at seat number 0.\nDesign a class that simulates the mentioned exam room.\nImplement the ExamRoom class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Score of Parentheses",
    "problem_id": "886",
    "frontend_id": "856",
    "difficulty": "Medium",
    "problem_slug": "score-of-parentheses",
    "topics": [
      "String",
      "Stack"
    ],
    "description": "Given a balanced parentheses string s, return the score of the string.\nThe score of a balanced parentheses string is based on the following rule:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Cost to Hire K Workers",
    "problem_id": "887",
    "frontend_id": "857",
    "difficulty": "Hard",
    "problem_slug": "minimum-cost-to-hire-k-workers",
    "topics": [
      "Array",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "There are n workers. You are given two integer arrays quality and wage where quality[i] is the quality of the ith worker and wage[i] is the minimum wage expectation for the ith worker.\nWe want to hire exactly k workers to form a paid group. To hire a group of k workers, we must pay them according to the following rules:\nGiven the integer k, return the least amount of money needed to form a paid group satisfying the above conditions. Answers within 10-5 of the actual answer will be accepted.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Mirror Reflection",
    "problem_id": "888",
    "frontend_id": "858",
    "difficulty": "Medium",
    "problem_slug": "mirror-reflection",
    "topics": [
      "Math",
      "Geometry",
      "Number Theory"
    ],
    "description": "There is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered 0, 1, and 2.\nThe square room has walls of length p and a laser ray from the southwest corner first meets the east wall at a distance q from the 0th receptor.\nGiven the two integers p and q, return the number of the receptor that the ray meets first.\nThe test cases are guaranteed so that the ray will meet a receptor eventually.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Buddy Strings",
    "problem_id": "889",
    "frontend_id": "859",
    "difficulty": "Easy",
    "problem_slug": "buddy-strings",
    "topics": [
      "Hash Table",
      "String"
    ],
    "description": "Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.\nSwapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Lemonade Change",
    "problem_id": "890",
    "frontend_id": "860",
    "difficulty": "Easy",
    "problem_slug": "lemonade-change",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "At a lemonade stand, each lemonade costs $5. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. You must provide the correct change to each customer so that the net transaction is that the customer pays $5.\nNote that you do not have any change in hand at first.\nGiven an integer array bills where bills[i] is the bill the ith customer pays, return true if you can provide every customer with the correct change, or false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Score After Flipping Matrix",
    "problem_id": "891",
    "frontend_id": "861",
    "difficulty": "Medium",
    "problem_slug": "score-after-flipping-matrix",
    "topics": [
      "Array",
      "Greedy",
      "Bit Manipulation",
      "Matrix"
    ],
    "description": "You are given an m x n binary matrix grid.\nA move consists of choosing any row or column and toggling each value in that row or column (i.e., changing all 0's to 1's, and all 1's to 0's).\nEvery row of the matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.\nReturn the highest possible score after making any number of moves (including zero moves).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Shortest Subarray with Sum at Least K",
    "problem_id": "892",
    "frontend_id": "862",
    "difficulty": "Hard",
    "problem_slug": "shortest-subarray-with-sum-at-least-k",
    "topics": [
      "Array",
      "Binary Search",
      "Queue",
      "Sliding Window",
      "Heap (Priority Queue)",
      "Prefix Sum",
      "Monotonic Queue"
    ],
    "description": "Given an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. If there is no such subarray, return -1.\nA subarray is a contiguous part of an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "All Nodes Distance K in Binary Tree",
    "problem_id": "893",
    "frontend_id": "863",
    "difficulty": "Medium",
    "problem_slug": "all-nodes-distance-k-in-binary-tree",
    "topics": [
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.\nYou can return the answer in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Shortest Path to Get All Keys",
    "problem_id": "895",
    "frontend_id": "864",
    "difficulty": "Hard",
    "problem_slug": "shortest-path-to-get-all-keys",
    "topics": [
      "Array",
      "Bit Manipulation",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "You are given an m x n grid grid where:\nYou start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall.\nIf you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.\nFor some 1 <= k <= 6, there is exactly one lowercase and one uppercase letter of the first k letters of the English alphabet in the grid. This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.\nReturn the lowest number of moves to acquire all keys. If it is impossible, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Smallest Subtree with all the Deepest Nodes",
    "problem_id": "896",
    "frontend_id": "865",
    "difficulty": "Medium",
    "problem_slug": "smallest-subtree-with-all-the-deepest-nodes",
    "topics": [
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, the depth of each node is the shortest distance to the root.\nReturn the smallest subtree such that it contains all the deepest nodes in the original tree.\nA node is called the deepest if it has the largest depth possible among any node in the entire tree.\nThe subtree of a node is a tree consisting of that node, plus the set of all descendants of that node.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nNote: This question is the same as 1123: https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/"
  },
  {
    "title": "Prime Palindrome",
    "problem_id": "897",
    "frontend_id": "866",
    "difficulty": "Medium",
    "problem_slug": "prime-palindrome",
    "topics": [
      "Math",
      "Number Theory"
    ],
    "description": "Given an integer n, return the smallest prime palindrome greater than or equal to n.\nAn integer is prime if it has exactly two divisors: 1 and itself. Note that 1 is not a prime number.\nAn integer is a palindrome if it reads the same from left to right as it does from right to left.\nThe test cases are generated so that the answer always exists and is in the range [2, 2 * 108].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Transpose Matrix",
    "problem_id": "898",
    "frontend_id": "867",
    "difficulty": "Easy",
    "problem_slug": "transpose-matrix",
    "topics": [
      "Array",
      "Matrix",
      "Simulation"
    ],
    "description": "Given a 2D integer array matrix, return the transpose of matrix.\nThe transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Binary Gap",
    "problem_id": "899",
    "frontend_id": "868",
    "difficulty": "Easy",
    "problem_slug": "binary-gap",
    "topics": [
      "Bit Manipulation"
    ],
    "description": "Given a positive integer n, find and return the longest distance between any two adjacent 1's in the binary representation of n. If there are no two adjacent 1's, return 0.\nTwo 1's are adjacent if there are only 0's separating them (possibly no 0's). The distance between two 1's is the absolute difference between their bit positions. For example, the two 1's in \"1001\" have a distance of 3.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Reordered Power of 2",
    "problem_id": "900",
    "frontend_id": "869",
    "difficulty": "Medium",
    "problem_slug": "reordered-power-of-2",
    "topics": [
      "Hash Table",
      "Math",
      "Sorting",
      "Counting",
      "Enumeration"
    ],
    "description": "You are given an integer n. We reorder the digits in any order (including the original order) such that the leading digit is not zero.\nReturn true if and only if we can do this so that the resulting number is a power of two.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Advantage Shuffle",
    "problem_id": "901",
    "frontend_id": "870",
    "difficulty": "Medium",
    "problem_slug": "advantage-shuffle",
    "topics": [
      "Array",
      "Two Pointers",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given two integer arrays nums1 and nums2 both of the same length. The advantage of nums1 with respect to nums2 is the number of indices i for which nums1[i] > nums2[i].\nReturn any permutation of nums1 that maximizes its advantage with respect to nums2.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of Refueling Stops",
    "problem_id": "902",
    "frontend_id": "871",
    "difficulty": "Hard",
    "problem_slug": "minimum-number-of-refueling-stops",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Greedy",
      "Heap (Priority Queue)"
    ],
    "description": "A car travels from a starting position to a destination which is target miles east of the starting position.\nThere are gas stations along the way. The gas stations are represented as an array stations where stations[i] = [positioni, fueli] indicates that the ith gas station is positioni miles east of the starting position and has fueli liters of gas.\nThe car starts with an infinite tank of gas, which initially has startFuel liters of fuel in it. It uses one liter of gas per one mile that it drives. When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.\nReturn the minimum number of refueling stops the car must make in order to reach its destination. If it cannot reach the destination, return -1.\nNote that if the car reaches a gas station with 0 fuel left, the car can still refuel there. If the car reaches the destination with 0 fuel left, it is still considered to have arrived.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Leaf-Similar Trees",
    "problem_id": "904",
    "frontend_id": "872",
    "difficulty": "Easy",
    "problem_slug": "leaf-similar-trees",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.\nFor example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).\nTwo binary trees are considered leaf-similar if their leaf value sequence is the same.\nReturn true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Length of Longest Fibonacci Subsequence",
    "problem_id": "905",
    "frontend_id": "873",
    "difficulty": "Medium",
    "problem_slug": "length-of-longest-fibonacci-subsequence",
    "topics": [
      "Array",
      "Hash Table",
      "Dynamic Programming"
    ],
    "description": "A sequence x1, x2, ..., xn is Fibonacci-like if:\nGiven a strictly increasing array arr of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of arr. If one does not exist, return 0.\nA subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Walking Robot Simulation",
    "problem_id": "906",
    "frontend_id": "874",
    "difficulty": "Medium",
    "problem_slug": "walking-robot-simulation",
    "topics": [
      "Array",
      "Hash Table",
      "Simulation"
    ],
    "description": "A robot on an infinite XY-plane starts at point (0, 0) facing north. The robot receives an array of integers commands, which represents a sequence of moves that it needs to execute. There are only three possible types of instructions the robot can receive:\nSome of the grid squares are obstacles. The ith obstacle is at grid point obstacles[i] = (xi, yi). If the robot runs into an obstacle, it will stay in its current location (on the block adjacent to the obstacle) and move onto the next command.\nReturn the maximum squared Euclidean distance that the robot reaches at any point in its path (i.e. if the distance is 5, return 25).\nNote:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Koko Eating Bananas",
    "problem_id": "907",
    "frontend_id": "875",
    "difficulty": "Medium",
    "problem_slug": "koko-eating-bananas",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.\nKoko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.\nKoko likes to eat slowly but still wants to finish eating all the bananas before the guards return.\nReturn the minimum integer k such that she can eat all the bananas within h hours.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Middle of the Linked List",
    "problem_id": "908",
    "frontend_id": "876",
    "difficulty": "Easy",
    "problem_slug": "middle-of-the-linked-list",
    "topics": [
      "Linked List",
      "Two Pointers"
    ],
    "description": "Given the head of a singly linked list, return the middle node of the linked list.\nIf there are two middle nodes, return the second middle node.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Stone Game",
    "problem_id": "909",
    "frontend_id": "877",
    "difficulty": "Medium",
    "problem_slug": "stone-game",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Game Theory"
    ],
    "description": "Alice and Bob play a game with piles of stones. There are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].\nThe objective of the game is to end with the most stones. The total number of stones across all the piles is odd, so there are no ties.\nAlice and Bob take turns, with Alice starting first. Each turn, a player takes the entire pile of stones either from the beginning or from the end of the row. This continues until there are no more piles left, at which point the person with the most stones wins.\nAssuming Alice and Bob play optimally, return true if Alice wins the game, or false if Bob wins.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Nth Magical Number",
    "problem_id": "910",
    "frontend_id": "878",
    "difficulty": "Hard",
    "problem_slug": "nth-magical-number",
    "topics": [
      "Math",
      "Binary Search"
    ],
    "description": "A positive integer is magical if it is divisible by either a or b.\nGiven the three integers n, a, and b, return the nth magical number. Since the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Profitable Schemes",
    "problem_id": "911",
    "frontend_id": "879",
    "difficulty": "Hard",
    "problem_slug": "profitable-schemes",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "There is a group of n members, and a list of various crimes they could commit. The ith crime generates a profit[i] and requires group[i] members to participate in it. If a member participates in one crime, that member can't participate in another crime.\nLet's call a profitable scheme any subset of these crimes that generates at least minProfit profit, and the total number of members participating in that subset of crimes is at most n.\nReturn the number of schemes that can be chosen. Since the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Decoded String at Index",
    "problem_id": "916",
    "frontend_id": "880",
    "difficulty": "Medium",
    "problem_slug": "decoded-string-at-index",
    "topics": [
      "String",
      "Stack"
    ],
    "description": "You are given an encoded string s. To decode the string to a tape, the encoded string is read one character at a time and the following steps are taken:\nGiven an integer k, return the kth letter (1-indexed) in the decoded string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Boats to Save People",
    "problem_id": "917",
    "frontend_id": "881",
    "difficulty": "Medium",
    "problem_slug": "boats-to-save-people",
    "topics": [
      "Array",
      "Two Pointers",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit.\nReturn the minimum number of boats to carry every given person.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Reachable Nodes In Subdivided Graph",
    "problem_id": "918",
    "frontend_id": "882",
    "difficulty": "Hard",
    "problem_slug": "reachable-nodes-in-subdivided-graph",
    "topics": [
      "Graph",
      "Heap (Priority Queue)",
      "Shortest Path"
    ],
    "description": "You are given an undirected graph (the \"original graph\") with n nodes labeled from 0 to n - 1. You decide to subdivide each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.\nThe graph is given as a 2D array of edges where edges[i] = [ui, vi, cnti] indicates that there is an edge between nodes ui and vi in the original graph, and cnti is the total number of new nodes that you will subdivide the edge into. Note that cnti == 0 means you will not subdivide the edge.\nTo subdivide the edge [ui, vi], replace it with (cnti + 1) new edges and cnti new nodes. The new nodes are x1, x2, ..., xcnti, and the new edges are [ui, x1], [x1, x2], [x2, x3], ..., [xcnti-1, xcnti], [xcnti, vi].\nIn this new graph, you want to know how many nodes are reachable from the node 0, where a node is reachable if the distance is maxMoves or less.\nGiven the original graph and maxMoves, return the number of nodes that are reachable from node 0 in the new graph.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Projection Area of 3D Shapes",
    "problem_id": "919",
    "frontend_id": "883",
    "difficulty": "Easy",
    "problem_slug": "projection-area-of-3d-shapes",
    "topics": [
      "Array",
      "Math",
      "Geometry",
      "Matrix"
    ],
    "description": "You are given an n x n grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes.\nEach value v = grid[i][j] represents a tower of v cubes placed on top of the cell (i, j).\nWe view the projection of these cubes onto the xy, yz, and zx planes.\nA projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. We are viewing the \"shadow\" when looking at the cubes from the top, the front, and the side.\nReturn the total area of all three projections.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Uncommon Words from Two Sentences",
    "problem_id": "920",
    "frontend_id": "884",
    "difficulty": "Easy",
    "problem_slug": "uncommon-words-from-two-sentences",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "A sentence is a string of single-space separated words where each word consists only of lowercase letters.\nA word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.\nGiven two sentences s1 and s2, return a list of all the uncommon words. You may return the answer in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Spiral Matrix III",
    "problem_id": "921",
    "frontend_id": "885",
    "difficulty": "Medium",
    "problem_slug": "spiral-matrix-iii",
    "topics": [
      "Array",
      "Matrix",
      "Simulation"
    ],
    "description": "You start at the cell (rStart, cStart) of an rows x cols grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column.\nYou will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid's boundary, we continue our walk outside the grid (but may return to the grid boundary later.). Eventually, we reach all rows * cols spaces of the grid.\nReturn an array of coordinates representing the positions of the grid in the order you visited them.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Possible Bipartition",
    "problem_id": "922",
    "frontend_id": "886",
    "difficulty": "Medium",
    "problem_slug": "possible-bipartition",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "description": "We want to split a group of n people (labeled from 1 to n) into two groups of any size. Each person may dislike some other people, and they should not go into the same group.\nGiven the integer n and the array dislikes where dislikes[i] = [ai, bi] indicates that the person labeled ai does not like the person labeled bi, return true if it is possible to split everyone into two groups in this way.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Super Egg Drop",
    "problem_id": "923",
    "frontend_id": "887",
    "difficulty": "Hard",
    "problem_slug": "super-egg-drop",
    "topics": [
      "Math",
      "Binary Search",
      "Dynamic Programming"
    ],
    "description": "You are given k identical eggs and you have access to a building with n floors labeled from 1 to n.\nYou know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.\nEach move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves.\nReturn the minimum number of moves that you need to determine with certainty what the value of f is.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Fair Candy Swap",
    "problem_id": "924",
    "frontend_id": "888",
    "difficulty": "Easy",
    "problem_slug": "fair-candy-swap",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Sorting"
    ],
    "description": "Alice and Bob have a different total number of candies. You are given two integer arrays aliceSizes and bobSizes where aliceSizes[i] is the number of candies of the ith box of candy that Alice has and bobSizes[j] is the number of candies of the jth box of candy that Bob has.\nSince they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have.\nReturn an integer array answer where answer[0] is the number of candies in the box that Alice must exchange, and answer[1] is the number of candies in the box that Bob must exchange. If there are multiple answers, you may return any one of them. It is guaranteed that at least one answer exists.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Construct Binary Tree from Preorder and Postorder Traversal",
    "problem_id": "925",
    "frontend_id": "889",
    "difficulty": "Medium",
    "problem_slug": "construct-binary-tree-from-preorder-and-postorder-traversal",
    "topics": [
      "Array",
      "Hash Table",
      "Divide and Conquer",
      "Tree",
      "Binary Tree"
    ],
    "description": "Given two integer arrays, preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values and postorder is the postorder traversal of the same tree, reconstruct and return the binary tree.\nIf there exist multiple answers, you can return any of them.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find and Replace Pattern",
    "problem_id": "926",
    "frontend_id": "890",
    "difficulty": "Medium",
    "problem_slug": "find-and-replace-pattern",
    "topics": [
      "Array",
      "Hash Table",
      "String"
    ],
    "description": "Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.\nA word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.\nRecall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Subsequence Widths",
    "problem_id": "927",
    "frontend_id": "891",
    "difficulty": "Hard",
    "problem_slug": "sum-of-subsequence-widths",
    "topics": [
      "Array",
      "Math",
      "Sorting"
    ],
    "description": "The width of a sequence is the difference between the maximum and minimum elements in the sequence.\nGiven an array of integers nums, return the sum of the widths of all the non-empty subsequences of nums. Since the answer may be very large, return it modulo 109 + 7.\nA subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Surface Area of 3D Shapes",
    "problem_id": "928",
    "frontend_id": "892",
    "difficulty": "Easy",
    "problem_slug": "surface-area-of-3d-shapes",
    "topics": [
      "Array",
      "Math",
      "Geometry",
      "Matrix"
    ],
    "description": "You are given an n x n grid where you have placed some 1 x 1 x 1 cubes. Each value v = grid[i][j] represents a tower of v cubes placed on top of cell (i, j).\nAfter placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.\nReturn the total surface area of the resulting shapes.\nNote: The bottom face of each shape counts toward its surface area.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Groups of Special-Equivalent Strings",
    "problem_id": "929",
    "frontend_id": "893",
    "difficulty": "Medium",
    "problem_slug": "groups-of-special-equivalent-strings",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Sorting"
    ],
    "description": "You are given an array of strings of the same length words.\nIn one move, you can swap any two even indexed characters or any two odd indexed characters of a string words[i].\nTwo strings words[i] and words[j] are special-equivalent if after any number of moves, words[i] == words[j].\nA group of special-equivalent strings from words is a non-empty subset of words such that:\nReturn the number of groups of special-equivalent strings from words.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "All Possible Full Binary Trees",
    "problem_id": "930",
    "frontend_id": "894",
    "difficulty": "Medium",
    "problem_slug": "all-possible-full-binary-trees",
    "topics": [
      "Dynamic Programming",
      "Tree",
      "Recursion",
      "Memoization",
      "Binary Tree"
    ],
    "description": "Given an integer n, return a list of all possible full binary trees with n nodes. Each node of each tree in the answer must have Node.val == 0.\nEach element of the answer is the root node of one possible tree. You may return the final list of trees in any order.\nA full binary tree is a binary tree where each node has exactly 0 or 2 children.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Frequency Stack",
    "problem_id": "931",
    "frontend_id": "895",
    "difficulty": "Hard",
    "problem_slug": "maximum-frequency-stack",
    "topics": [
      "Hash Table",
      "Stack",
      "Design",
      "Ordered Set"
    ],
    "description": "Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.\nImplement the FreqStack class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Monotonic Array",
    "problem_id": "932",
    "frontend_id": "896",
    "difficulty": "Easy",
    "problem_slug": "monotonic-array",
    "topics": [
      "Array"
    ],
    "description": "An array is monotonic if it is either monotone increasing or monotone decreasing.\nAn array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. An array nums is monotone decreasing if for all i <= j, nums[i] >= nums[j].\nGiven an integer array nums, return true if the given array is monotonic, or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Increasing Order Search Tree",
    "problem_id": "933",
    "frontend_id": "897",
    "difficulty": "Easy",
    "problem_slug": "increasing-order-search-tree",
    "topics": [
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Bitwise ORs of Subarrays",
    "problem_id": "934",
    "frontend_id": "898",
    "difficulty": "Medium",
    "problem_slug": "bitwise-ors-of-subarrays",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation"
    ],
    "description": "Given an integer array arr, return the number of distinct bitwise ORs of all the non-empty subarrays of arr.\nThe bitwise OR of a subarray is the bitwise OR of each integer in the subarray. The bitwise OR of a subarray of one integer is that integer.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Orderly Queue",
    "problem_id": "935",
    "frontend_id": "899",
    "difficulty": "Hard",
    "problem_slug": "orderly-queue",
    "topics": [
      "Math",
      "String",
      "Sorting"
    ],
    "description": "You are given a string s and an integer k. You can choose one of the first k letters of s and append it at the end of the string.\nReturn the lexicographically smallest string you could have after applying the mentioned step any number of moves.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "RLE Iterator",
    "problem_id": "936",
    "frontend_id": "900",
    "difficulty": "Medium",
    "problem_slug": "rle-iterator",
    "topics": [
      "Array",
      "Design",
      "Counting",
      "Iterator"
    ],
    "description": "We can use run-length encoding (i.e., RLE) to encode a sequence of integers. In a run-length encoded array of even length encoding (0-indexed), for all even i, encoding[i] tells us the number of times that the non-negative integer value encoding[i + 1] is repeated in the sequence.\nGiven a run-length encoded array, design an iterator that iterates through it.\nImplement the RLEIterator class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Online Stock Span",
    "problem_id": "937",
    "frontend_id": "901",
    "difficulty": "Medium",
    "problem_slug": "online-stock-span",
    "topics": [
      "Stack",
      "Design",
      "Monotonic Stack",
      "Data Stream"
    ],
    "description": "Design an algorithm that collects daily price quotes for some stock and returns the span of that stock's price for the current day.\nThe span of the stock's price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day.\nImplement the StockSpanner class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Numbers At Most N Given Digit Set",
    "problem_id": "938",
    "frontend_id": "902",
    "difficulty": "Hard",
    "problem_slug": "numbers-at-most-n-given-digit-set",
    "topics": [
      "Array",
      "Math",
      "String",
      "Binary Search",
      "Dynamic Programming"
    ],
    "description": "Given an array of digits which is sorted in non-decreasing order. You can write numbers using each digits[i] as many times as we want. For example, if digits = ['1','3','5'], we may write numbers such as '13', '551', and '1351315'.\nReturn the number of positive integers that can be generated that are less than or equal to a given integer n.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Valid Permutations for DI Sequence",
    "problem_id": "939",
    "frontend_id": "903",
    "difficulty": "Hard",
    "problem_slug": "valid-permutations-for-di-sequence",
    "topics": [
      "String",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "description": "You are given a string s of length n where s[i] is either:\nA permutation perm of n + 1 integers of all the integers in the range [0, n] is called a valid permutation if for all valid i:\nReturn the number of valid permutations perm. Since the answer may be large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Fruit Into Baskets",
    "problem_id": "940",
    "frontend_id": "904",
    "difficulty": "Medium",
    "problem_slug": "fruit-into-baskets",
    "topics": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "description": "You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array fruits where fruits[i] is the type of fruit the ith tree produces.\nYou want to collect as much fruit as possible. However, the owner has some strict rules that you must follow:\nGiven the integer array fruits, return the maximum number of fruits you can pick.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sort Array By Parity",
    "problem_id": "941",
    "frontend_id": "905",
    "difficulty": "Easy",
    "problem_slug": "sort-array-by-parity",
    "topics": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "description": "Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.\nReturn any array that satisfies this condition.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Super Palindromes",
    "problem_id": "942",
    "frontend_id": "906",
    "difficulty": "Hard",
    "problem_slug": "super-palindromes",
    "topics": [
      "Math",
      "String",
      "Enumeration"
    ],
    "description": "Let's say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome.\nGiven two positive integers left and right represented as strings, return the number of super-palindromes integers in the inclusive range [left, right].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Subarray Minimums",
    "problem_id": "943",
    "frontend_id": "907",
    "difficulty": "Medium",
    "problem_slug": "sum-of-subarray-minimums",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Monotonic Stack"
    ],
    "description": "Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Smallest Range I",
    "problem_id": "944",
    "frontend_id": "908",
    "difficulty": "Easy",
    "problem_slug": "smallest-range-i",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "You are given an integer array nums and an integer k.\nIn one operation, you can choose any index i where 0 <= i < nums.length and change nums[i] to nums[i] + x where x is an integer from the range [-k, k]. You can apply this operation at most once for each index i.\nThe score of nums is the difference between the maximum and minimum elements in nums.\nReturn the minimum score of nums after applying the mentioned operation at most once for each index in it.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Snakes and Ladders",
    "problem_id": "945",
    "frontend_id": "909",
    "difficulty": "Medium",
    "problem_slug": "snakes-and-ladders",
    "topics": [
      "Array",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "You are given an n x n integer matrix board where the cells are labeled from 1 to n2 in a Boustrophedon style starting from the bottom left of the board (i.e. board[n - 1][0]) and alternating direction each row.\nYou start on square 1 of the board. In each move, starting from square curr, do the following:\nA board square on row r and column c has a snake or ladder if board[r][c] != -1. The destination of that snake or ladder is board[r][c]. Squares 1 and n2 are not the starting points of any snake or ladder.\nNote that you only take a snake or ladder at most once per dice roll. If the destination to a snake or ladder is the start of another snake or ladder, you do not follow the subsequent snake or ladder.\nReturn the least number of dice rolls required to reach the square n2. If it is not possible to reach the square, return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Smallest Range II",
    "problem_id": "946",
    "frontend_id": "910",
    "difficulty": "Medium",
    "problem_slug": "smallest-range-ii",
    "topics": [
      "Array",
      "Math",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an integer array nums and an integer k.\nFor each index i where 0 <= i < nums.length, change nums[i] to be either nums[i] + k or nums[i] - k.\nThe score of nums is the difference between the maximum and minimum elements in nums.\nReturn the minimum score of nums after changing the values at each index.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Online Election",
    "problem_id": "947",
    "frontend_id": "911",
    "difficulty": "Medium",
    "problem_slug": "online-election",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Design"
    ],
    "description": "You are given two integer arrays persons and times. In an election, the ith vote was cast for persons[i] at time times[i].\nFor each query at a time t, find the person that was leading the election at time t. Votes cast at time t will count towards our query. In the case of a tie, the most recent vote (among tied candidates) wins.\nImplement the TopVotedCandidate class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Sort an Array",
    "problem_id": "948",
    "frontend_id": "912",
    "difficulty": "Medium",
    "problem_slug": "sort-an-array",
    "topics": [
      "Array",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Merge Sort",
      "Bucket Sort",
      "Radix Sort",
      "Counting Sort"
    ],
    "description": "Given an array of integers nums, sort the array in ascending order and return it.\nYou must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Cat and Mouse",
    "problem_id": "949",
    "frontend_id": "913",
    "difficulty": "Hard",
    "problem_slug": "cat-and-mouse",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Graph",
      "Topological Sort",
      "Memoization",
      "Game Theory"
    ],
    "description": "A game on an undirected graph is played by two players, Mouse and Cat, who alternate turns.\nThe graph is given as follows: graph[a] is a list of all nodes b such that ab is an edge of the graph.\nThe mouse starts at node 1 and goes first, the cat starts at node 2 and goes second, and there is a hole at node 0.\nDuring each player's turn, they must travel along one edge of the graph that meets where they are.  For example, if the Mouse is at node 1, it must travel to any node in graph[1].\nAdditionally, it is not allowed for the Cat to travel to the Hole (node 0).\nThen, the game can end in three ways:\nGiven a graph, and assuming both players play optimally, return\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "X of a Kind in a Deck of Cards",
    "problem_id": "950",
    "frontend_id": "914",
    "difficulty": "Easy",
    "problem_slug": "x-of-a-kind-in-a-deck-of-cards",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Counting",
      "Number Theory"
    ],
    "description": "You are given an integer array deck where deck[i] represents the number written on the ith card.\nPartition the cards into one or more groups such that:\nReturn true if such partition is possible, or false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Partition Array into Disjoint Intervals",
    "problem_id": "951",
    "frontend_id": "915",
    "difficulty": "Medium",
    "problem_slug": "partition-array-into-disjoint-intervals",
    "topics": [
      "Array"
    ],
    "description": "Given an integer array nums, partition it into two (contiguous) subarrays left and right so that:\nReturn the length of left after such a partitioning.\nTest cases are generated such that partitioning exists.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Word Subsets",
    "problem_id": "952",
    "frontend_id": "916",
    "difficulty": "Medium",
    "problem_slug": "word-subsets",
    "topics": [
      "Array",
      "Hash Table",
      "String"
    ],
    "description": "You are given two string arrays words1 and words2.\nA string b is a subset of string a if every letter in b occurs in a including multiplicity.\nA string a from words1 is universal if for every string b in words2, b is a subset of a.\nReturn an array of all the universal strings in words1. You may return the answer in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Reverse Only Letters",
    "problem_id": "953",
    "frontend_id": "917",
    "difficulty": "Easy",
    "problem_slug": "reverse-only-letters",
    "topics": [
      "Two Pointers",
      "String"
    ],
    "description": "Given a string s, reverse the string according to the following rules:\nReturn s after reversing it.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Sum Circular Subarray",
    "problem_id": "954",
    "frontend_id": "918",
    "difficulty": "Medium",
    "problem_slug": "maximum-sum-circular-subarray",
    "topics": [
      "Array",
      "Divide and Conquer",
      "Dynamic Programming",
      "Queue",
      "Monotonic Queue"
    ],
    "description": "Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.\nA circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].\nA subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Complete Binary Tree Inserter",
    "problem_id": "955",
    "frontend_id": "919",
    "difficulty": "Medium",
    "problem_slug": "complete-binary-tree-inserter",
    "topics": [
      "Tree",
      "Breadth-First Search",
      "Design",
      "Binary Tree"
    ],
    "description": "A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.\nDesign an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion.\nImplement the CBTInserter class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Number of Music Playlists",
    "problem_id": "956",
    "frontend_id": "920",
    "difficulty": "Hard",
    "problem_slug": "number-of-music-playlists",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "description": "Your music player contains n different songs. You want to listen to goal songs (not necessarily different) during your trip. To avoid boredom, you will create a playlist so that:\nGiven n, goal, and k, return the number of possible playlists that you can create. Since the answer can be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Add to Make Parentheses Valid",
    "problem_id": "957",
    "frontend_id": "921",
    "difficulty": "Medium",
    "problem_slug": "minimum-add-to-make-parentheses-valid",
    "topics": [
      "String",
      "Stack",
      "Greedy"
    ],
    "description": "A parentheses string is valid if and only if:\nYou are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.\nReturn the minimum number of moves required to make s valid.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sort Array By Parity II",
    "problem_id": "958",
    "frontend_id": "922",
    "difficulty": "Easy",
    "problem_slug": "sort-array-by-parity-ii",
    "topics": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "description": "Given an array of integers nums, half of the integers in nums are odd, and the other half are even.\nSort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.\nReturn any answer array that satisfies this condition.\nExample 1:\nExample 2:\nConstraints:\nFollow Up: Could you solve it in-place?"
  },
  {
    "title": "3Sum With Multiplicity",
    "problem_id": "959",
    "frontend_id": "923",
    "difficulty": "Medium",
    "problem_slug": "3sum-with-multiplicity",
    "topics": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Sorting",
      "Counting"
    ],
    "description": "Given an integer array arr, and an integer target, return the number of tuples i, j, k such that i < j < k and arr[i] + arr[j] + arr[k] == target.\nAs the answer can be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimize Malware Spread",
    "problem_id": "960",
    "frontend_id": "924",
    "difficulty": "Hard",
    "problem_slug": "minimize-malware-spread",
    "topics": [
      "Array",
      "Hash Table",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "description": "You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.\nSome nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\nSuppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.\nReturn the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.\nNote that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Long Pressed Name",
    "problem_id": "961",
    "frontend_id": "925",
    "difficulty": "Easy",
    "problem_slug": "long-pressed-name",
    "topics": [
      "Two Pointers",
      "String"
    ],
    "description": "Your friend is typing his name into a keyboard. Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.\nYou examine the typed characters of the keyboard. Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Flip String to Monotone Increasing",
    "problem_id": "962",
    "frontend_id": "926",
    "difficulty": "Medium",
    "problem_slug": "flip-string-to-monotone-increasing",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "A binary string is monotone increasing if it consists of some number of 0's (possibly none), followed by some number of 1's (also possibly none).\nYou are given a binary string s. You can flip s[i] changing it from 0 to 1 or from 1 to 0.\nReturn the minimum number of flips to make s monotone increasing.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Three Equal Parts",
    "problem_id": "963",
    "frontend_id": "927",
    "difficulty": "Hard",
    "problem_slug": "three-equal-parts",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "You are given an array arr which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value.\nIf it is possible, return any [i, j] with i + 1 < j, such that:\nIf it is not possible, return [-1, -1].\nNote that the entire part is used when considering what binary value it represents. For example, [1,1,0] represents 6 in decimal, not 3. Also, leading zeros are allowed, so [0,1,1] and [1,1] represent the same value.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimize Malware Spread II",
    "problem_id": "964",
    "frontend_id": "928",
    "difficulty": "Hard",
    "problem_slug": "minimize-malware-spread-ii",
    "topics": [
      "Array",
      "Hash Table",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "description": "You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.\nSome nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\nSuppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops.\nWe will remove exactly one node from initial, completely removing it and any connections from this node to any other node.\nReturn the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Unique Email Addresses",
    "problem_id": "965",
    "frontend_id": "929",
    "difficulty": "Easy",
    "problem_slug": "unique-email-addresses",
    "topics": [
      "Array",
      "Hash Table",
      "String"
    ],
    "description": "Every valid email consists of a local name and a domain name, separated by the '@' sign. Besides lowercase letters, the email may contain one or more '.' or '+'.\nIf you add periods '.' between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule does not apply to domain names.\nIf you add a plus '+' in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered. Note that this rule does not apply to domain names.\nIt is possible to use both of these rules at the same time.\nGiven an array of strings emails where we send one email to each emails[i], return the number of different addresses that actually receive mails.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Binary Subarrays With Sum",
    "problem_id": "966",
    "frontend_id": "930",
    "difficulty": "Medium",
    "problem_slug": "binary-subarrays-with-sum",
    "topics": [
      "Array",
      "Hash Table",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.\nA subarray is a contiguous part of the array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Falling Path Sum",
    "problem_id": "967",
    "frontend_id": "931",
    "difficulty": "Medium",
    "problem_slug": "minimum-falling-path-sum",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.\nA falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Beautiful Array",
    "problem_id": "968",
    "frontend_id": "932",
    "difficulty": "Medium",
    "problem_slug": "beautiful-array",
    "topics": [
      "Array",
      "Math",
      "Divide and Conquer"
    ],
    "description": "An array nums of length n is beautiful if:\nGiven the integer n, return any beautiful array nums of length n. There will be at least one valid answer for the given n.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Recent Calls",
    "problem_id": "969",
    "frontend_id": "933",
    "difficulty": "Easy",
    "problem_slug": "number-of-recent-calls",
    "topics": [
      "Design",
      "Queue",
      "Data Stream"
    ],
    "description": "You have a RecentCounter class which counts the number of recent requests within a certain time frame.\nImplement the RecentCounter class:\nIt is guaranteed that every call to ping uses a strictly larger value of t than the previous call.\nExample 1:\nConstraints:"
  },
  {
    "title": "Shortest Bridge",
    "problem_id": "971",
    "frontend_id": "934",
    "difficulty": "Medium",
    "problem_slug": "shortest-bridge",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "You are given an n x n binary matrix grid where 1 represents land and 0 represents water.\nAn island is a 4-directionally connected group of 1's not connected to any other 1's. There are exactly two islands in grid.\nYou may change 0's to 1's to connect the two islands to form one island.\nReturn the smallest number of 0's you must flip to connect the two islands.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Knight Dialer",
    "problem_id": "972",
    "frontend_id": "935",
    "difficulty": "Medium",
    "problem_slug": "knight-dialer",
    "topics": [
      "Dynamic Programming"
    ],
    "description": "The chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). The possible movements of chess knight are shown in this diagram:\nA chess knight can move as indicated in the chess diagram below:\nWe have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell (i.e. blue cell).\nGiven an integer n, return how many distinct phone numbers of length n we can dial.\nYou are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps.\nAs the answer may be very large, return the answer modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Stamping The Sequence",
    "problem_id": "973",
    "frontend_id": "936",
    "difficulty": "Hard",
    "problem_slug": "stamping-the-sequence",
    "topics": [
      "String",
      "Stack",
      "Greedy",
      "Queue"
    ],
    "description": "You are given two strings stamp and target. Initially, there is a string s of length target.length with all s[i] == '?'.\nIn one turn, you can place stamp over s and replace every letter in the s with the corresponding letter from stamp.\nWe want to convert s to target using at most 10 * target.length turns.\nReturn an array of the index of the left-most letter being stamped at each turn. If we cannot obtain target from s within 10 * target.length turns, return an empty array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Reorder Data in Log Files",
    "problem_id": "974",
    "frontend_id": "937",
    "difficulty": "Medium",
    "problem_slug": "reorder-data-in-log-files",
    "topics": [
      "Array",
      "String",
      "Sorting"
    ],
    "description": "You are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier.\nThere are two types of logs:\nReorder these logs so that:\nReturn the final order of the logs.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Range Sum of BST",
    "problem_id": "975",
    "frontend_id": "938",
    "difficulty": "Easy",
    "problem_slug": "range-sum-of-bst",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Area Rectangle",
    "problem_id": "976",
    "frontend_id": "939",
    "difficulty": "Medium",
    "problem_slug": "minimum-area-rectangle",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Geometry",
      "Sorting"
    ],
    "description": "You are given an array of points in the X-Y plane points where points[i] = [xi, yi].\nReturn the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes. If there is not any such rectangle, return 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Distinct Subsequences II",
    "problem_id": "977",
    "frontend_id": "940",
    "difficulty": "Hard",
    "problem_slug": "distinct-subsequences-ii",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "Given a string s, return the number of distinct non-empty subsequences of s. Since the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Valid Mountain Array",
    "problem_id": "978",
    "frontend_id": "941",
    "difficulty": "Easy",
    "problem_slug": "valid-mountain-array",
    "topics": [
      "Array"
    ],
    "description": "Given an array of integers arr, return true if and only if it is a valid mountain array.\nRecall that arr is a mountain array if and only if:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "DI String Match",
    "problem_id": "979",
    "frontend_id": "942",
    "difficulty": "Easy",
    "problem_slug": "di-string-match",
    "topics": [
      "Array",
      "Two Pointers",
      "String",
      "Greedy"
    ],
    "description": "A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:\nGiven a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Shortest Superstring",
    "problem_id": "980",
    "frontend_id": "943",
    "difficulty": "Hard",
    "problem_slug": "find-the-shortest-superstring",
    "topics": [
      "Array",
      "String",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "Given an array of strings words, return the smallest string that contains each string in words as a substring. If there are multiple valid strings of the smallest length, return any of them.\nYou may assume that no string in words is a substring of another string in words.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Delete Columns to Make Sorted",
    "problem_id": "981",
    "frontend_id": "944",
    "difficulty": "Easy",
    "problem_slug": "delete-columns-to-make-sorted",
    "topics": [
      "Array",
      "String"
    ],
    "description": "You are given an array of n strings strs, all of the same length.\nThe strings can be arranged such that there is one on each line, making a grid.\nYou want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 ('a', 'b', 'c') and 2 ('c', 'e', 'e') are sorted, while column 1 ('b', 'c', 'a') is not, so you would delete column 1.\nReturn the number of columns that you will delete.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Increment to Make Array Unique",
    "problem_id": "982",
    "frontend_id": "945",
    "difficulty": "Medium",
    "problem_slug": "minimum-increment-to-make-array-unique",
    "topics": [
      "Array",
      "Greedy",
      "Sorting",
      "Counting"
    ],
    "description": "You are given an integer array nums. In one move, you can pick an index i where 0 <= i < nums.length and increment nums[i] by 1.\nReturn the minimum number of moves to make every value in nums unique.\nThe test cases are generated so that the answer fits in a 32-bit integer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Validate Stack Sequences",
    "problem_id": "983",
    "frontend_id": "946",
    "difficulty": "Medium",
    "problem_slug": "validate-stack-sequences",
    "topics": [
      "Array",
      "Stack",
      "Simulation"
    ],
    "description": "Given two integer arrays pushed and popped each with distinct values, return true if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Most Stones Removed with Same Row or Column",
    "problem_id": "984",
    "frontend_id": "947",
    "difficulty": "Medium",
    "problem_slug": "most-stones-removed-with-same-row-or-column",
    "topics": [
      "Hash Table",
      "Depth-First Search",
      "Union Find",
      "Graph"
    ],
    "description": "On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.\nA stone can be removed if it shares either the same row or the same column as another stone that has not been removed.\nGiven an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Bag of Tokens",
    "problem_id": "985",
    "frontend_id": "948",
    "difficulty": "Medium",
    "problem_slug": "bag-of-tokens",
    "topics": [
      "Array",
      "Two Pointers",
      "Greedy",
      "Sorting"
    ],
    "description": "You start with an initial power of power, an initial score of 0, and a bag of tokens given as an integer array tokens, where each tokens[i] denotes the value of tokeni.\nYour goal is to maximize the total score by strategically playing these tokens. In one move, you can play an unplayed token in one of the two ways (but not both for the same token):\nReturn the maximum possible score you can achieve after playing any number of tokens.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Largest Time for Given Digits",
    "problem_id": "986",
    "frontend_id": "949",
    "difficulty": "Medium",
    "problem_slug": "largest-time-for-given-digits",
    "topics": [
      "Array",
      "String",
      "Backtracking",
      "Enumeration"
    ],
    "description": "Given an array arr of 4 digits, find the latest 24-hour time that can be made using each digit exactly once.\n24-hour times are formatted as \"HH:MM\", where HH is between 00 and 23, and MM is between 00 and 59. The earliest 24-hour time is 00:00, and the latest is 23:59.\nReturn the latest 24-hour time in \"HH:MM\" format. If no valid time can be made, return an empty string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Reveal Cards In Increasing Order",
    "problem_id": "987",
    "frontend_id": "950",
    "difficulty": "Medium",
    "problem_slug": "reveal-cards-in-increasing-order",
    "topics": [
      "Array",
      "Queue",
      "Sorting",
      "Simulation"
    ],
    "description": "You are given an integer array deck. There is a deck of cards where every card has a unique integer. The integer on the ith card is deck[i].\nYou can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.\nYou will do the following steps repeatedly until all cards are revealed:\nReturn an ordering of the deck that would reveal the cards in increasing order.\nNote that the first entry in the answer is considered to be the top of the deck.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Flip Equivalent Binary Trees",
    "problem_id": "988",
    "frontend_id": "951",
    "difficulty": "Medium",
    "problem_slug": "flip-equivalent-binary-trees",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.\nA binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.\nGiven the roots of two binary trees root1 and root2, return true if the two trees are flip equivalent or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Largest Component Size by Common Factor",
    "problem_id": "989",
    "frontend_id": "952",
    "difficulty": "Hard",
    "problem_slug": "largest-component-size-by-common-factor",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Union Find",
      "Number Theory"
    ],
    "description": "You are given an integer array of unique positive integers nums. Consider the following graph:\nReturn the size of the largest connected component in the graph.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Verifying an Alien Dictionary",
    "problem_id": "990",
    "frontend_id": "953",
    "difficulty": "Easy",
    "problem_slug": "verifying-an-alien-dictionary",
    "topics": [
      "Array",
      "Hash Table",
      "String"
    ],
    "description": "In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different order. The order of the alphabet is some permutation of lowercase letters.\nGiven a sequence of words written in the alien language, and the order of the alphabet, return true if and only if the given words are sorted lexicographically in this alien language.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Array of Doubled Pairs",
    "problem_id": "991",
    "frontend_id": "954",
    "difficulty": "Medium",
    "problem_slug": "array-of-doubled-pairs",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Sorting"
    ],
    "description": "Given an integer array of even length arr, return true if it is possible to reorder arr such that arr[2 * i + 1] = 2 * arr[2 * i] for every 0 <= i < len(arr) / 2, or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Delete Columns to Make Sorted II",
    "problem_id": "992",
    "frontend_id": "955",
    "difficulty": "Medium",
    "problem_slug": "delete-columns-to-make-sorted-ii",
    "topics": [
      "Array",
      "String",
      "Greedy"
    ],
    "description": "You are given an array of n strings strs, all of the same length.\nWe may choose any deletion indices, and we delete all the characters in those indices for each string.\nFor example, if we have strs = [\"abcdef\",\"uvwxyz\"] and deletion indices {0, 2, 3}, then the final array after deletions is [\"bef\", \"vyz\"].\nSuppose we chose a set of deletion indices answer such that after deletions, the final array has its elements in lexicographic order (i.e., strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]). Return the minimum possible value of answer.length.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Tallest Billboard",
    "problem_id": "993",
    "frontend_id": "956",
    "difficulty": "Hard",
    "problem_slug": "tallest-billboard",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. Each steel support must be an equal height.\nYou are given a collection of rods that can be welded together. For example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a support of length 6.\nReturn the largest possible height of your billboard installation. If you cannot support the billboard, return 0.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Prison Cells After N Days",
    "problem_id": "994",
    "frontend_id": "957",
    "difficulty": "Medium",
    "problem_slug": "prison-cells-after-n-days",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Bit Manipulation"
    ],
    "description": "There are 8 prison cells in a row and each cell is either occupied or vacant.\nEach day, whether the cell is occupied or vacant changes according to the following rules:\nNote that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.\nYou are given an integer array cells where cells[i] == 1 if the ith cell is occupied and cells[i] == 0 if the ith cell is vacant, and you are given an integer n.\nReturn the state of the prison after n days (i.e., n such changes described above).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check Completeness of a Binary Tree",
    "problem_id": "998",
    "frontend_id": "958",
    "difficulty": "Medium",
    "problem_slug": "check-completeness-of-a-binary-tree",
    "topics": [
      "Tree",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, determine if it is a complete binary tree.\nIn a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Regions Cut By Slashes",
    "problem_id": "999",
    "frontend_id": "959",
    "difficulty": "Medium",
    "problem_slug": "regions-cut-by-slashes",
    "topics": [
      "Array",
      "Hash Table",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix"
    ],
    "description": "An n x n grid is composed of 1 x 1 squares where each 1 x 1 square consists of a '/', '\\', or blank space ' '. These characters divide the square into contiguous regions.\nGiven the grid grid represented as a string array, return the number of regions.\nNote that backslash characters are escaped, so a '\\' is represented as '\\\\'.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Delete Columns to Make Sorted III",
    "problem_id": "1000",
    "frontend_id": "960",
    "difficulty": "Hard",
    "problem_slug": "delete-columns-to-make-sorted-iii",
    "topics": [
      "Array",
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given an array of n strings strs, all of the same length.\nWe may choose any deletion indices, and we delete all the characters in those indices for each string.\nFor example, if we have strs = [\"abcdef\",\"uvwxyz\"] and deletion indices {0, 2, 3}, then the final array after deletions is [\"bef\", \"vyz\"].\nSuppose we chose a set of deletion indices answer such that after deletions, the final array has every string (row) in lexicographic order. (i.e., (strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1]), and (strs[1][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1]), and so on). Return the minimum possible value of answer.length.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "N-Repeated Element in Size 2N Array",
    "problem_id": "1001",
    "frontend_id": "961",
    "difficulty": "Easy",
    "problem_slug": "n-repeated-element-in-size-2n-array",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "You are given an integer array nums with the following properties:\nReturn the element that is repeated n times.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Width Ramp",
    "problem_id": "1002",
    "frontend_id": "962",
    "difficulty": "Medium",
    "problem_slug": "maximum-width-ramp",
    "topics": [
      "Array",
      "Two Pointers",
      "Stack",
      "Monotonic Stack"
    ],
    "description": "A ramp in an integer array nums is a pair (i, j) for which i < j and nums[i] <= nums[j]. The width of such a ramp is j - i.\nGiven an integer array nums, return the maximum width of a ramp in nums. If there is no ramp in nums, return 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Area Rectangle II",
    "problem_id": "1003",
    "frontend_id": "963",
    "difficulty": "Medium",
    "problem_slug": "minimum-area-rectangle-ii",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Geometry"
    ],
    "description": "You are given an array of points in the X-Y plane points where points[i] = [xi, yi].\nReturn the minimum area of any rectangle formed from these points, with sides not necessarily parallel to the X and Y axes. If there is not any such rectangle, return 0.\nAnswers within 10-5 of the actual answer will be accepted.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Least Operators to Express Number",
    "problem_id": "1004",
    "frontend_id": "964",
    "difficulty": "Hard",
    "problem_slug": "least-operators-to-express-number",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Memoization"
    ],
    "description": "Given a single positive integer x, we will write an expression of the form x (op1) x (op2) x (op3) x ... where each operator op1, op2, etc. is either addition, subtraction, multiplication, or division (+, -, *, or /). For example, with x = 3, we might write 3 * 3 / 3 + 3 - 3 which is a value of 3.\nWhen writing such an expression, we adhere to the following conventions:\nWe would like to write an expression with the least number of operators such that the expression equals the given target. Return the least number of operators used.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Univalued Binary Tree",
    "problem_id": "1005",
    "frontend_id": "965",
    "difficulty": "Easy",
    "problem_slug": "univalued-binary-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "A binary tree is uni-valued if every node in the tree has the same value.\nGiven the root of a binary tree, return true if the given tree is uni-valued, or false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Vowel Spellchecker",
    "problem_id": "1006",
    "frontend_id": "966",
    "difficulty": "Medium",
    "problem_slug": "vowel-spellchecker",
    "topics": [
      "Array",
      "Hash Table",
      "String"
    ],
    "description": "Given a wordlist, we want to implement a spellchecker that converts a query word into a correct word.\nFor a given query word, the spell checker handles two categories of spelling mistakes:\nIn addition, the spell checker operates under the following precedence rules:\nGiven some queries, return a list of words answer, where answer[i] is the correct word for query = queries[i].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Numbers With Same Consecutive Differences",
    "problem_id": "1007",
    "frontend_id": "967",
    "difficulty": "Medium",
    "problem_slug": "numbers-with-same-consecutive-differences",
    "topics": [
      "Backtracking",
      "Breadth-First Search"
    ],
    "description": "Given two integers n and k, return an array of all the integers of length n where the difference between every two consecutive digits is k. You may return the answer in any order.\nNote that the integers should not have leading zeros. Integers as 02 and 043 are not allowed.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Binary Tree Cameras",
    "problem_id": "1008",
    "frontend_id": "968",
    "difficulty": "Hard",
    "problem_slug": "binary-tree-cameras",
    "topics": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "You are given the root of a binary tree. We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children.\nReturn the minimum number of cameras needed to monitor all nodes of the tree.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Pancake Sorting",
    "problem_id": "1009",
    "frontend_id": "969",
    "difficulty": "Medium",
    "problem_slug": "pancake-sorting",
    "topics": [
      "Array",
      "Two Pointers",
      "Greedy",
      "Sorting"
    ],
    "description": "Given an array of integers arr, sort the array by performing a series of pancake flips.\nIn one pancake flip we do the following steps:\nFor example, if arr = [3,2,1,4] and we performed a pancake flip choosing k = 3, we reverse the sub-array [3,2,1], so arr = [1,2,3,4] after the pancake flip at k = 3.\nReturn an array of the k-values corresponding to a sequence of pancake flips that sort arr. Any valid answer that sorts the array within 10 * arr.length flips will be judged as correct.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Powerful Integers",
    "problem_id": "1010",
    "frontend_id": "970",
    "difficulty": "Medium",
    "problem_slug": "powerful-integers",
    "topics": [
      "Hash Table",
      "Math",
      "Enumeration"
    ],
    "description": "Given three integers x, y, and bound, return a list of all the powerful integers that have a value less than or equal to bound.\nAn integer is powerful if it can be represented as xi + yj for some integers i >= 0 and j >= 0.\nYou may return the answer in any order. In your answer, each value should occur at most once.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Flip Binary Tree To Match Preorder Traversal",
    "problem_id": "1011",
    "frontend_id": "971",
    "difficulty": "Medium",
    "problem_slug": "flip-binary-tree-to-match-preorder-traversal",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "You are given the root of a binary tree with n nodes, where each node is uniquely assigned a value from 1 to n. You are also given a sequence of n values voyage, which is the desired pre-order traversal of the binary tree.\nAny node in the binary tree can be flipped by swapping its left and right subtrees. For example, flipping node 1 will have the following effect:\nFlip the smallest number of nodes so that the pre-order traversal of the tree matches voyage.\nReturn a list of the values of all flipped nodes. You may return the answer in any order. If it is impossible to flip the nodes in the tree to make the pre-order traversal match voyage, return the list [-1].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Equal Rational Numbers",
    "problem_id": "1012",
    "frontend_id": "972",
    "difficulty": "Hard",
    "problem_slug": "equal-rational-numbers",
    "topics": [
      "Math",
      "String"
    ],
    "description": "Given two strings s and t, each of which represents a non-negative rational number, return true if and only if they represent the same number. The strings may use parentheses to denote the repeating part of the rational number.\nA rational number can be represented using up to three parts: <IntegerPart>, <NonRepeatingPart>, and a <RepeatingPart>. The number will be represented in one of the following three ways:\nThe repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. For example:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "K Closest Points to Origin",
    "problem_id": "1014",
    "frontend_id": "973",
    "difficulty": "Medium",
    "problem_slug": "k-closest-points-to-origin",
    "topics": [
      "Array",
      "Math",
      "Divide and Conquer",
      "Geometry",
      "Sorting",
      "Heap (Priority Queue)",
      "Quickselect"
    ],
    "description": "Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).\nThe distance between two points on the X-Y plane is the Euclidean distance (i.e., √(x1 - x2)2 + (y1 - y2)2).\nYou may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Subarray Sums Divisible by K",
    "problem_id": "1016",
    "frontend_id": "974",
    "difficulty": "Medium",
    "problem_slug": "subarray-sums-divisible-by-k",
    "topics": [
      "Array",
      "Hash Table",
      "Prefix Sum"
    ],
    "description": "Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.\nA subarray is a contiguous part of an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Odd Even Jump",
    "problem_id": "1017",
    "frontend_id": "975",
    "difficulty": "Hard",
    "problem_slug": "odd-even-jump",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Sorting",
      "Monotonic Stack",
      "Ordered Set"
    ],
    "description": "You are given an integer array arr. From some starting index, you can make a series of jumps. The (1st, 3rd, 5th, ...) jumps in the series are called odd-numbered jumps, and the (2nd, 4th, 6th, ...) jumps in the series are called even-numbered jumps. Note that the jumps are numbered, not the indices.\nYou may jump forward from index i to index j (with i < j) in the following way:\nA starting index is good if, starting from that index, you can reach the end of the array (index arr.length - 1) by jumping some number of times (possibly 0 or more than once).\nReturn the number of good starting indices.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Largest Perimeter Triangle",
    "problem_id": "1018",
    "frontend_id": "976",
    "difficulty": "Easy",
    "problem_slug": "largest-perimeter-triangle",
    "topics": [
      "Array",
      "Math",
      "Greedy",
      "Sorting"
    ],
    "description": "Given an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Squares of a Sorted Array",
    "problem_id": "1019",
    "frontend_id": "977",
    "difficulty": "Easy",
    "problem_slug": "squares-of-a-sorted-array",
    "topics": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "description": "Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Turbulent Subarray",
    "problem_id": "1020",
    "frontend_id": "978",
    "difficulty": "Medium",
    "problem_slug": "longest-turbulent-subarray",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "description": "Given an integer array arr, return the length of a maximum size turbulent subarray of arr.\nA subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.\nMore formally, a subarray [arr[i], arr[i + 1], ..., arr[j]] of arr is said to be turbulent if and only if:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Distribute Coins in Binary Tree",
    "problem_id": "1021",
    "frontend_id": "979",
    "difficulty": "Medium",
    "problem_slug": "distribute-coins-in-binary-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "You are given the root of a binary tree with n nodes where each node in the tree has node.val coins. There are n coins in total throughout the whole tree.\nIn one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent.\nReturn the minimum number of moves required to make every node have exactly one coin.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Unique Paths III",
    "problem_id": "1022",
    "frontend_id": "980",
    "difficulty": "Hard",
    "problem_slug": "unique-paths-iii",
    "topics": [
      "Array",
      "Backtracking",
      "Bit Manipulation",
      "Matrix"
    ],
    "description": "You are given an m x n integer array grid where grid[i][j] could be:\nReturn the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Time Based Key-Value Store",
    "problem_id": "1023",
    "frontend_id": "981",
    "difficulty": "Medium",
    "problem_slug": "time-based-key-value-store",
    "topics": [
      "Hash Table",
      "String",
      "Binary Search",
      "Design"
    ],
    "description": "Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.\nImplement the TimeMap class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Triples with Bitwise AND Equal To Zero",
    "problem_id": "1024",
    "frontend_id": "982",
    "difficulty": "Hard",
    "problem_slug": "triples-with-bitwise-and-equal-to-zero",
    "topics": [
      "Array",
      "Hash Table",
      "Bit Manipulation"
    ],
    "description": "Given an integer array nums, return the number of AND triples.\nAn AND triple is a triple of indices (i, j, k) such that:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Cost For Tickets",
    "problem_id": "1025",
    "frontend_id": "983",
    "difficulty": "Medium",
    "problem_slug": "minimum-cost-for-tickets",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array days. Each day is an integer from 1 to 365.\nTrain tickets are sold in three different ways:\nThe passes allow that many days of consecutive travel.\nReturn the minimum number of dollars you need to travel every day in the given list of days.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "String Without AAA or BBB",
    "problem_id": "1026",
    "frontend_id": "984",
    "difficulty": "Medium",
    "problem_slug": "string-without-aaa-or-bbb",
    "topics": [
      "String",
      "Greedy"
    ],
    "description": "Given two integers a and b, return any string s such that:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Even Numbers After Queries",
    "problem_id": "1027",
    "frontend_id": "985",
    "difficulty": "Medium",
    "problem_slug": "sum-of-even-numbers-after-queries",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "You are given an integer array nums and an array queries where queries[i] = [vali, indexi].\nFor each query i, first, apply nums[indexi] = nums[indexi] + vali, then print the sum of the even values of nums.\nReturn an integer array answer where answer[i] is the answer to the ith query.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Interval List Intersections",
    "problem_id": "1028",
    "frontend_id": "986",
    "difficulty": "Medium",
    "problem_slug": "interval-list-intersections",
    "topics": [
      "Array",
      "Two Pointers",
      "Line Sweep"
    ],
    "description": "You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted order.\nReturn the intersection of these two interval lists.\nA closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.\nThe intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Vertical Order Traversal of a Binary Tree",
    "problem_id": "1029",
    "frontend_id": "987",
    "difficulty": "Hard",
    "problem_slug": "vertical-order-traversal-of-a-binary-tree",
    "topics": [
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Sorting",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, calculate the vertical order traversal of the binary tree.\nFor each node at position (row, col), its left and right children will be at positions (row + 1, col - 1) and (row + 1, col + 1) respectively. The root of the tree is at (0, 0).\nThe vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.\nReturn the vertical order traversal of the binary tree.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Smallest String Starting From Leaf",
    "problem_id": "1030",
    "frontend_id": "988",
    "difficulty": "Medium",
    "problem_slug": "smallest-string-starting-from-leaf",
    "topics": [
      "String",
      "Backtracking",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "You are given the root of a binary tree where each node has a value in the range [0, 25] representing the letters 'a' to 'z'.\nReturn the lexicographically smallest string that starts at a leaf of this tree and ends at the root.\nAs a reminder, any shorter prefix of a string is lexicographically smaller.\nA leaf of a node is a node that has no children.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Add to Array-Form of Integer",
    "problem_id": "1031",
    "frontend_id": "989",
    "difficulty": "Easy",
    "problem_slug": "add-to-array-form-of-integer",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "The array-form of an integer num is an array representing its digits in left to right order.\nGiven num, the array-form of an integer, and an integer k, return the array-form of the integer num + k.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Satisfiability of Equality Equations",
    "problem_id": "1032",
    "frontend_id": "990",
    "difficulty": "Medium",
    "problem_slug": "satisfiability-of-equality-equations",
    "topics": [
      "Array",
      "String",
      "Union Find",
      "Graph"
    ],
    "description": "You are given an array of strings equations that represent relationships between variables where each string equations[i] is of length 4 and takes one of two different forms: \"xi==yi\" or \"xi!=yi\".Here, xi and yi are lowercase letters (not necessarily different) that represent one-letter variable names.\nReturn true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Broken Calculator",
    "problem_id": "1033",
    "frontend_id": "991",
    "difficulty": "Medium",
    "problem_slug": "broken-calculator",
    "topics": [
      "Math",
      "Greedy"
    ],
    "description": "There is a broken calculator that has the integer startValue on its display initially. In one operation, you can:\nGiven two integers startValue and target, return the minimum number of operations needed to display target on the calculator.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Subarrays with K Different Integers",
    "problem_id": "1034",
    "frontend_id": "992",
    "difficulty": "Hard",
    "problem_slug": "subarrays-with-k-different-integers",
    "topics": [
      "Array",
      "Hash Table",
      "Sliding Window",
      "Counting"
    ],
    "description": "Given an integer array nums and an integer k, return the number of good subarrays of nums.\nA good array is an array where the number of different integers in that array is exactly k.\nA subarray is a contiguous part of an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Cousins in Binary Tree",
    "problem_id": "1035",
    "frontend_id": "993",
    "difficulty": "Easy",
    "problem_slug": "cousins-in-binary-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.\nTwo nodes of a binary tree are cousins if they have the same depth with different parents.\nNote that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Rotting Oranges",
    "problem_id": "1036",
    "frontend_id": "994",
    "difficulty": "Medium",
    "problem_slug": "rotting-oranges",
    "topics": [
      "Array",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "You are given an m x n grid where each cell can have one of three values:\nEvery minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.\nReturn the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of K Consecutive Bit Flips",
    "problem_id": "1037",
    "frontend_id": "995",
    "difficulty": "Hard",
    "problem_slug": "minimum-number-of-k-consecutive-bit-flips",
    "topics": [
      "Array",
      "Bit Manipulation",
      "Queue",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "You are given a binary array nums and an integer k.\nA k-bit flip is choosing a subarray of length k from nums and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0.\nReturn the minimum number of k-bit flips required so that there is no 0 in the array. If it is not possible, return -1.\nA subarray is a contiguous part of an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Squareful Arrays",
    "problem_id": "1038",
    "frontend_id": "996",
    "difficulty": "Hard",
    "problem_slug": "number-of-squareful-arrays",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "An array is squareful if the sum of every pair of adjacent elements is a perfect square.\nGiven an integer array nums, return the number of permutations of nums that are squareful.\nTwo permutations perm1 and perm2 are different if there is some index i such that perm1[i] != perm2[i].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Town Judge",
    "problem_id": "1039",
    "frontend_id": "997",
    "difficulty": "Easy",
    "problem_slug": "find-the-town-judge",
    "topics": [
      "Array",
      "Hash Table",
      "Graph"
    ],
    "description": "In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.\nIf the town judge exists, then:\nYou are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi. If a trust relationship does not exist in trust array, then such a trust relationship does not exist.\nReturn the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Binary Tree II",
    "problem_id": "1040",
    "frontend_id": "998",
    "difficulty": "Medium",
    "problem_slug": "maximum-binary-tree-ii",
    "topics": [
      "Tree",
      "Binary Tree"
    ],
    "description": "A maximum tree is a tree where every node has a value greater than any other value in its subtree.\nYou are given the root of a maximum binary tree and an integer val.\nJust as in the previous problem, the given tree was constructed from a list a (root = Construct(a)) recursively with the following Construct(a) routine:\nNote that we were not given a directly, only a root node root = Construct(a).\nSuppose b is a copy of a with the value val appended to it. It is guaranteed that b has unique values.\nReturn Construct(b).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Available Captures for Rook",
    "problem_id": "1041",
    "frontend_id": "999",
    "difficulty": "Easy",
    "problem_slug": "available-captures-for-rook",
    "topics": [
      "Array",
      "Matrix",
      "Simulation"
    ],
    "description": "You are given an 8 x 8 matrix representing a chessboard. There is exactly one white rook represented by 'R', some number of white bishops 'B', and some number of black pawns 'p'. Empty squares are represented by '.'.\nA rook can move any number of squares horizontally or vertically (up, down, left, right) until it reaches another piece or the edge of the board. A rook is attacking a pawn if it can move to the pawn's square in one move.\nNote: A rook cannot move through other pieces, such as bishops or pawns. This means a rook cannot attack a pawn if there is another piece blocking the path.\nReturn the number of pawns the white rook is attacking.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Cost to Merge Stones",
    "problem_id": "1042",
    "frontend_id": "1000",
    "difficulty": "Hard",
    "problem_slug": "minimum-cost-to-merge-stones",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "description": "There are n piles of stones arranged in a row. The ith pile has stones[i] stones.\nA move consists of merging exactly k consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these k piles.\nReturn the minimum cost to merge all piles of stones into one pile. If it is impossible, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Grid Illumination",
    "problem_id": "1043",
    "frontend_id": "1001",
    "difficulty": "Hard",
    "problem_slug": "grid-illumination",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "There is a 2D grid of size n x n where each cell of this grid has a lamp that is initially turned off.\nYou are given a 2D array of lamp positions lamps, where lamps[i] = [rowi, coli] indicates that the lamp at grid[rowi][coli] is turned on. Even if the same lamp is listed more than once, it is turned on.\nWhen a lamp is turned on, it illuminates its cell and all other cells in the same row, column, or diagonal.\nYou are also given another 2D array queries, where queries[j] = [rowj, colj]. For the jth query, determine whether grid[rowj][colj] is illuminated or not. After answering the jth query, turn off the lamp at grid[rowj][colj] and its 8 adjacent lamps if they exist. A lamp is adjacent if its cell shares either a side or corner with grid[rowj][colj].\nReturn an array of integers ans, where ans[j] should be 1 if the cell in the jth query was illuminated, or 0 if the lamp was not.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Common Characters",
    "problem_id": "1044",
    "frontend_id": "1002",
    "difficulty": "Easy",
    "problem_slug": "find-common-characters",
    "topics": [
      "Array",
      "Hash Table",
      "String"
    ],
    "description": "Given a string array words, return an array of all characters that show up in all strings within the words (including duplicates). You may return the answer in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check If Word Is Valid After Substitutions",
    "problem_id": "1045",
    "frontend_id": "1003",
    "difficulty": "Medium",
    "problem_slug": "check-if-word-is-valid-after-substitutions",
    "topics": [
      "String",
      "Stack"
    ],
    "description": "Given a string s, determine if it is valid.\nA string s is valid if, starting with an empty string t = \"\", you can transform t into s after performing the following operation any number of times:\nReturn true if s is a valid string, otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Max Consecutive Ones III",
    "problem_id": "1046",
    "frontend_id": "1004",
    "difficulty": "Medium",
    "problem_slug": "max-consecutive-ones-iii",
    "topics": [
      "Array",
      "Binary Search",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximize Sum Of Array After K Negations",
    "problem_id": "1047",
    "frontend_id": "1005",
    "difficulty": "Easy",
    "problem_slug": "maximize-sum-of-array-after-k-negations",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "Given an integer array nums and an integer k, modify the array in the following way:\nYou should apply this process exactly k times. You may choose the same index i multiple times.\nReturn the largest possible sum of the array after modifying it in this way.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Clumsy Factorial",
    "problem_id": "1048",
    "frontend_id": "1006",
    "difficulty": "Medium",
    "problem_slug": "clumsy-factorial",
    "topics": [
      "Math",
      "Stack",
      "Simulation"
    ],
    "description": "The factorial of a positive integer n is the product of all positive integers less than or equal to n.\nWe make a clumsy factorial using the integers in decreasing order by swapping out the multiply operations for a fixed rotation of operations with multiply '*', divide '/', add '+', and subtract '-' in this order.\nHowever, these operations are still applied using the usual order of operations of arithmetic. We do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right.\nAdditionally, the division that we use is floor division such that 10 * 9 / 8 = 90 / 8 = 11.\nGiven an integer n, return the clumsy factorial of n.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Domino Rotations For Equal Row",
    "problem_id": "1049",
    "frontend_id": "1007",
    "difficulty": "Medium",
    "problem_slug": "minimum-domino-rotations-for-equal-row",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "In a row of dominoes, tops[i] and bottoms[i] represent the top and bottom halves of the ith domino. (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)\nWe may rotate the ith domino, so that tops[i] and bottoms[i] swap values.\nReturn the minimum number of rotations so that all the values in tops are the same, or all the values in bottoms are the same.\nIf it cannot be done, return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Construct Binary Search Tree from Preorder Traversal",
    "problem_id": "1050",
    "frontend_id": "1008",
    "difficulty": "Medium",
    "problem_slug": "construct-binary-search-tree-from-preorder-traversal",
    "topics": [
      "Array",
      "Stack",
      "Tree",
      "Binary Search Tree",
      "Monotonic Stack",
      "Binary Tree"
    ],
    "description": "Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.\nIt is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.\nA binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, and any descendant of Node.right has a value strictly greater than Node.val.\nA preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Complement of Base 10 Integer",
    "problem_id": "1054",
    "frontend_id": "1009",
    "difficulty": "Easy",
    "problem_slug": "complement-of-base-10-integer",
    "topics": [
      "Bit Manipulation"
    ],
    "description": "The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.\nGiven an integer n, return its complement.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nNote: This question is the same as 476: https://leetcode.com/problems/number-complement/"
  },
  {
    "title": "Pairs of Songs With Total Durations Divisible by 60",
    "problem_id": "1055",
    "frontend_id": "1010",
    "difficulty": "Medium",
    "problem_slug": "pairs-of-songs-with-total-durations-divisible-by-60",
    "topics": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "description": "You are given a list of songs where the ith song has a duration of time[i] seconds.\nReturn the number of pairs of songs for which their total duration in seconds is divisible by 60. Formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Capacity To Ship Packages Within D Days",
    "problem_id": "1056",
    "frontend_id": "1011",
    "difficulty": "Medium",
    "problem_slug": "capacity-to-ship-packages-within-d-days",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "A conveyor belt has packages that must be shipped from one port to another within days days.\nThe ith package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.\nReturn the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Numbers With Repeated Digits",
    "problem_id": "1057",
    "frontend_id": "1012",
    "difficulty": "Hard",
    "problem_slug": "numbers-with-repeated-digits",
    "topics": [
      "Math",
      "Dynamic Programming"
    ],
    "description": "Given an integer n, return the number of positive integers in the range [1, n] that have at least one repeated digit.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Partition Array Into Three Parts With Equal Sum",
    "problem_id": "1062",
    "frontend_id": "1013",
    "difficulty": "Easy",
    "problem_slug": "partition-array-into-three-parts-with-equal-sum",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "Given an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums.\nFormally, we can partition the array if we can find indexes i + 1 < j with (arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Best Sightseeing Pair",
    "problem_id": "1063",
    "frontend_id": "1014",
    "difficulty": "Medium",
    "problem_slug": "best-sightseeing-pair",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array values where values[i] represents the value of the ith sightseeing spot. Two sightseeing spots i and j have a distance j - i between them.\nThe score of a pair (i < j) of sightseeing spots is values[i] + values[j] + i - j: the sum of the values of the sightseeing spots, minus the distance between them.\nReturn the maximum score of a pair of sightseeing spots.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Smallest Integer Divisible by K",
    "problem_id": "1064",
    "frontend_id": "1015",
    "difficulty": "Medium",
    "problem_slug": "smallest-integer-divisible-by-k",
    "topics": [
      "Hash Table",
      "Math"
    ],
    "description": "Given a positive integer k, you need to find the length of the smallest positive integer n such that n is divisible by k, and n only contains the digit 1.\nReturn the length of n. If there is no such n, return -1.\nNote: n may not fit in a 64-bit signed integer.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Binary String With Substrings Representing 1 To N",
    "problem_id": "1065",
    "frontend_id": "1016",
    "difficulty": "Medium",
    "problem_slug": "binary-string-with-substrings-representing-1-to-n",
    "topics": [
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Sliding Window"
    ],
    "description": "Given a binary string s and a positive integer n, return true if the binary representation of all the integers in the range [1, n] are substrings of s, or false otherwise.\nA substring is a contiguous sequence of characters within a string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Convert to Base -2",
    "problem_id": "1070",
    "frontend_id": "1017",
    "difficulty": "Medium",
    "problem_slug": "convert-to-base-2",
    "topics": [
      "Math"
    ],
    "description": "Given an integer n, return a binary string representing its representation in base -2.\nNote that the returned string should not have leading zeros unless the string is \"0\".\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Binary Prefix Divisible By 5",
    "problem_id": "1071",
    "frontend_id": "1018",
    "difficulty": "Easy",
    "problem_slug": "binary-prefix-divisible-by-5",
    "topics": [
      "Array",
      "Bit Manipulation"
    ],
    "description": "You are given a binary array nums (0-indexed).\nWe define xi as the number whose binary representation is the subarray nums[0..i] (from most-significant-bit to least-significant-bit).\nReturn an array of booleans answer where answer[i] is true if xi is divisible by 5.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Next Greater Node In Linked List",
    "problem_id": "1072",
    "frontend_id": "1019",
    "difficulty": "Medium",
    "problem_slug": "next-greater-node-in-linked-list",
    "topics": [
      "Array",
      "Linked List",
      "Stack",
      "Monotonic Stack"
    ],
    "description": "You are given the head of a linked list with n nodes.\nFor each node in the list, find the value of the next greater node. That is, for each node, find the value of the first node that is next to it and has a strictly larger value than it.\nReturn an integer array answer where answer[i] is the value of the next greater node of the ith node (1-indexed). If the ith node does not have a next greater node, set answer[i] = 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Enclaves",
    "problem_id": "1073",
    "frontend_id": "1020",
    "difficulty": "Medium",
    "problem_slug": "number-of-enclaves",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix"
    ],
    "description": "You are given an m x n binary matrix grid, where 0 represents a sea cell and 1 represents a land cell.\nA move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid.\nReturn the number of land cells in grid for which we cannot walk off the boundary of the grid in any number of moves.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Remove Outermost Parentheses",
    "problem_id": "1078",
    "frontend_id": "1021",
    "difficulty": "Easy",
    "problem_slug": "remove-outermost-parentheses",
    "topics": [
      "String",
      "Stack"
    ],
    "description": "A valid parentheses string is either empty \"\", \"(\" + A + \")\", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.\nA valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings.\nGiven a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are primitive valid parentheses strings.\nReturn s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sum of Root To Leaf Binary Numbers",
    "problem_id": "1079",
    "frontend_id": "1022",
    "difficulty": "Easy",
    "problem_slug": "sum-of-root-to-leaf-binary-numbers",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "You are given the root of a binary tree where each node has a value 0 or 1. Each root-to-leaf path represents a binary number starting with the most significant bit.\nFor all leaves in the tree, consider the numbers represented by the path from the root to that leaf. Return the sum of these numbers.\nThe test cases are generated so that the answer fits in a 32-bits integer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Camelcase Matching",
    "problem_id": "1080",
    "frontend_id": "1023",
    "difficulty": "Medium",
    "problem_slug": "camelcase-matching",
    "topics": [
      "Array",
      "Two Pointers",
      "String",
      "Trie",
      "String Matching"
    ],
    "description": "Given an array of strings queries and a string pattern, return a boolean array answer where answer[i] is true if queries[i] matches pattern, and false otherwise.\nA query word queries[i] matches pattern if you can insert lowercase English letters into the pattern so that it equals the query. You may insert a character at any position in pattern or you may choose not to insert any characters at all.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Video Stitching",
    "problem_id": "1081",
    "frontend_id": "1024",
    "difficulty": "Medium",
    "problem_slug": "video-stitching",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "You are given a series of video clips from a sporting event that lasted time seconds. These video clips can be overlapping with each other and have varying lengths.\nEach video clip is described by an array clips where clips[i] = [starti, endi] indicates that the ith clip started at starti and ended at endi.\nWe can cut these clips into segments freely.\nReturn the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event [0, time]. If the task is impossible, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Divisor Game",
    "problem_id": "1086",
    "frontend_id": "1025",
    "difficulty": "Easy",
    "problem_slug": "divisor-game",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Brainteaser",
      "Game Theory"
    ],
    "description": "Alice and Bob take turns playing a game, with Alice starting first.\nInitially, there is a number n on the chalkboard. On each player's turn, that player makes a move consisting of:\nAlso, if a player cannot make a move, they lose the game.\nReturn true if and only if Alice wins the game, assuming both players play optimally.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Difference Between Node and Ancestor",
    "problem_id": "1092",
    "frontend_id": "1026",
    "difficulty": "Medium",
    "problem_slug": "maximum-difference-between-node-and-ancestor",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.\nA node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Arithmetic Subsequence",
    "problem_id": "1087",
    "frontend_id": "1027",
    "difficulty": "Medium",
    "problem_slug": "longest-arithmetic-subsequence",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Dynamic Programming"
    ],
    "description": "Given an array nums of integers, return the length of the longest arithmetic subsequence in nums.\nNote that:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Recover a Tree From Preorder Traversal",
    "problem_id": "1093",
    "frontend_id": "1028",
    "difficulty": "Hard",
    "problem_slug": "recover-a-tree-from-preorder-traversal",
    "topics": [
      "String",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "We run a preorder depth-first search (DFS) on the root of a binary tree.\nAt each node in this traversal, we output D dashes (where D is the depth of this node), then we output the value of this node.  If the depth of a node is D, the depth of its immediate child is D + 1.  The depth of the root node is 0.\nIf a node has only one child, that child is guaranteed to be the left child.\nGiven the output traversal of this traversal, recover the tree and return its root.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Two City Scheduling",
    "problem_id": "1095",
    "frontend_id": "1029",
    "difficulty": "Medium",
    "problem_slug": "two-city-scheduling",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "A company is planning to interview 2n people. Given the array costs where costs[i] = [aCosti, bCosti], the cost of flying the ith person to city a is aCosti, and the cost of flying the ith person to city b is bCosti.\nReturn the minimum cost to fly every person to a city such that exactly n people arrive in each city.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Matrix Cells in Distance Order",
    "problem_id": "1094",
    "frontend_id": "1030",
    "difficulty": "Easy",
    "problem_slug": "matrix-cells-in-distance-order",
    "topics": [
      "Array",
      "Math",
      "Geometry",
      "Sorting",
      "Matrix"
    ],
    "description": "You are given four integers row, cols, rCenter, and cCenter. There is a rows x cols matrix and you are on the cell with the coordinates (rCenter, cCenter).\nReturn the coordinates of all cells in the matrix, sorted by their distance from (rCenter, cCenter) from the smallest distance to the largest distance. You may return the answer in any order that satisfies this condition.\nThe distance between two cells (r1, c1) and (r2, c2) is |r1 - r2| + |c1 - c2|.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Sum of Two Non-Overlapping Subarrays",
    "problem_id": "1096",
    "frontend_id": "1031",
    "difficulty": "Medium",
    "problem_slug": "maximum-sum-of-two-non-overlapping-subarrays",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "description": "Given an integer array nums and two integers firstLen and secondLen, return the maximum sum of elements in two non-overlapping subarrays with lengths firstLen and secondLen.\nThe array with length firstLen could occur before or after the array with length secondLen, but they have to be non-overlapping.\nA subarray is a contiguous part of an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Stream of Characters",
    "problem_id": "1097",
    "frontend_id": "1032",
    "difficulty": "Hard",
    "problem_slug": "stream-of-characters",
    "topics": [
      "Array",
      "String",
      "Design",
      "Trie",
      "Data Stream"
    ],
    "description": "Design an algorithm that accepts a stream of characters and checks if a suffix of these characters is a string of a given array of strings words.\nFor example, if words = [\"abc\", \"xyz\"] and the stream added the four characters (one by one) 'a', 'x', 'y', and 'z', your algorithm should detect that the suffix \"xyz\" of the characters \"axyz\" matches \"xyz\" from words.\nImplement the StreamChecker class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Moving Stones Until Consecutive",
    "problem_id": "1103",
    "frontend_id": "1033",
    "difficulty": "Medium",
    "problem_slug": "moving-stones-until-consecutive",
    "topics": [
      "Math",
      "Brainteaser"
    ],
    "description": "There are three stones in different positions on the X-axis. You are given three integers a, b, and c, the positions of the stones.\nIn one move, you pick up a stone at an endpoint (i.e., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints. Formally, let's say the stones are currently at positions x, y, and z with x < y < z. You pick up the stone at either position x or position z, and move that stone to an integer position k, with x < k < z and k != y.\nThe game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).\nReturn an integer array answer of length 2 where:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Coloring A Border",
    "problem_id": "1104",
    "frontend_id": "1034",
    "difficulty": "Medium",
    "problem_slug": "coloring-a-border",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "You are given an m x n integer matrix grid, and three integers row, col, and color. Each value in the grid represents the color of the grid square at that location.\nTwo squares are called adjacent if they are next to each other in any of the 4 directions.\nTwo squares belong to the same connected component if they have the same color and they are adjacent.\nThe border of a connected component is all the squares in the connected component that are either adjacent to (at least) a square not in the component, or on the boundary of the grid (the first or last row or column).\nYou should color the border of the connected component that contains the square grid[row][col] with color.\nReturn the final grid.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Uncrossed Lines",
    "problem_id": "1105",
    "frontend_id": "1035",
    "difficulty": "Medium",
    "problem_slug": "uncrossed-lines",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given two integer arrays nums1 and nums2. We write the integers of nums1 and nums2 (in the order they are given) on two separate horizontal lines.\nWe may draw connecting lines: a straight line connecting two numbers nums1[i] and nums2[j] such that:\nNote that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line).\nReturn the maximum number of connecting lines we can draw in this way.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Escape a Large Maze",
    "problem_id": "1106",
    "frontend_id": "1036",
    "difficulty": "Hard",
    "problem_slug": "escape-a-large-maze",
    "topics": [
      "Array",
      "Hash Table",
      "Depth-First Search",
      "Breadth-First Search"
    ],
    "description": "There is a 1 million by 1 million grid on an XY-plane, and the coordinates of each grid square are (x, y).\nWe start at the source = [sx, sy] square and want to reach the target = [tx, ty] square. There is also an array of blocked squares, where each blocked[i] = [xi, yi] represents a blocked square with coordinates (xi, yi).\nEach move, we can walk one square north, east, south, or west if the square is not in the array of blocked squares. We are also not allowed to walk outside of the grid.\nReturn true if and only if it is possible to reach the target square from the source square through a sequence of valid moves.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Valid Boomerang",
    "problem_id": "1115",
    "frontend_id": "1037",
    "difficulty": "Easy",
    "problem_slug": "valid-boomerang",
    "topics": [
      "Array",
      "Math",
      "Geometry"
    ],
    "description": "Given an array points where points[i] = [xi, yi] represents a point on the X-Y plane, return true if these points are a boomerang.\nA boomerang is a set of three points that are all distinct and not in a straight line.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Binary Search Tree to Greater Sum Tree",
    "problem_id": "1114",
    "frontend_id": "1038",
    "difficulty": "Medium",
    "problem_slug": "binary-search-tree-to-greater-sum-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.\nAs a reminder, a binary search tree is a tree that satisfies these constraints:\nExample 1:\nExample 2:\nConstraints:\nNote: This question is the same as 538: https://leetcode.com/problems/convert-bst-to-greater-tree/"
  },
  {
    "title": "Minimum Score Triangulation of Polygon",
    "problem_id": "1111",
    "frontend_id": "1039",
    "difficulty": "Medium",
    "problem_slug": "minimum-score-triangulation-of-polygon",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You have a convex n-sided polygon where each vertex has an integer value. You are given an integer array values where values[i] is the value of the ith vertex in clockwise order.\nPolygon triangulation is a process where you divide a polygon into a set of triangles and the vertices of each triangle must also be vertices of the original polygon. Note that no other shapes other than triangles are allowed in the division. This process will result in n - 2 triangles.\nYou will triangulate the polygon. For each triangle, the weight of that triangle is the product of the values at its vertices. The total score of the triangulation is the sum of these weights over all n - 2 triangles.\nReturn the minimum possible score that you can achieve with some triangulation of the polygon.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Moving Stones Until Consecutive II",
    "problem_id": "1113",
    "frontend_id": "1040",
    "difficulty": "Medium",
    "problem_slug": "moving-stones-until-consecutive-ii",
    "topics": [
      "Array",
      "Math",
      "Sliding Window",
      "Sorting"
    ],
    "description": "There are some stones in different positions on the X-axis. You are given an integer array stones, the positions of the stones.\nCall a stone an endpoint stone if it has the smallest or largest position. In one move, you pick up an endpoint stone and move it to an unoccupied position so that it is no longer an endpoint stone.\nThe game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).\nReturn an integer array answer of length 2 where:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Robot Bounded In Circle",
    "problem_id": "1119",
    "frontend_id": "1041",
    "difficulty": "Medium",
    "problem_slug": "robot-bounded-in-circle",
    "topics": [
      "Math",
      "String",
      "Simulation"
    ],
    "description": "On an infinite plane, a robot initially stands at (0, 0) and faces north. Note that:\nThe robot can receive one of three instructions:\nThe robot performs the instructions given in order, and repeats them forever.\nReturn true if and only if there exists a circle in the plane such that the robot never leaves the circle.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Flower Planting With No Adjacent",
    "problem_id": "1120",
    "frontend_id": "1042",
    "difficulty": "Medium",
    "problem_slug": "flower-planting-with-no-adjacent",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph"
    ],
    "description": "You have n gardens, labeled from 1 to n, and an array paths where paths[i] = [xi, yi] describes a bidirectional path between garden xi to garden yi. In each garden, you want to plant one of 4 types of flowers.\nAll gardens have at most 3 paths coming into or leaving it.\nYour task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.\nReturn any such a choice as an array answer, where answer[i] is the type of flower planted in the (i+1)th garden. The flower types are denoted 1, 2, 3, or 4. It is guaranteed an answer exists.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Partition Array for Maximum Sum",
    "problem_id": "1121",
    "frontend_id": "1043",
    "difficulty": "Medium",
    "problem_slug": "partition-array-for-maximum-sum",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "Given an integer array arr, partition the array into (contiguous) subarrays of length at most k. After partitioning, each subarray has their values changed to become the maximum value of that subarray.\nReturn the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a 32-bit integer.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest Duplicate Substring",
    "problem_id": "1122",
    "frontend_id": "1044",
    "difficulty": "Hard",
    "problem_slug": "longest-duplicate-substring",
    "topics": [
      "String",
      "Binary Search",
      "Sliding Window",
      "Rolling Hash",
      "Suffix Array",
      "Hash Function"
    ],
    "description": "Given a string s, consider all duplicated substrings: (contiguous) substrings of s that occur 2 or more times. The occurrences may overlap.\nReturn any duplicated substring that has the longest possible length. If s does not have a duplicated substring, the answer is \"\".\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Customers Who Bought All Products",
    "problem_id": "1135",
    "frontend_id": "1045",
    "difficulty": "Medium",
    "problem_slug": "customers-who-bought-all-products",
    "topics": [
      "Database"
    ],
    "description": "Table: Customer\nTable: Product\nWrite a solution to report the customer ids from the Customer table that bought all the products in the Product table.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Last Stone Weight",
    "problem_id": "1127",
    "frontend_id": "1046",
    "difficulty": "Easy",
    "problem_slug": "last-stone-weight",
    "topics": [
      "Array",
      "Heap (Priority Queue)"
    ],
    "description": "You are given an array of integers stones where stones[i] is the weight of the ith stone.\nWe are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights x and y with x <= y. The result of this smash is:\nAt the end of the game, there is at most one stone left.\nReturn the weight of the last remaining stone. If there are no stones left, return 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Remove All Adjacent Duplicates In String",
    "problem_id": "1128",
    "frontend_id": "1047",
    "difficulty": "Easy",
    "problem_slug": "remove-all-adjacent-duplicates-in-string",
    "topics": [
      "String",
      "Stack"
    ],
    "description": "You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them.\nWe repeatedly make duplicate removals on s until we no longer can.\nReturn the final string after all such duplicate removals have been made. It can be proven that the answer is unique.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest String Chain",
    "problem_id": "1129",
    "frontend_id": "1048",
    "difficulty": "Medium",
    "problem_slug": "longest-string-chain",
    "topics": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "String",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "You are given an array of words where each word consists of lowercase English letters.\nwordA is a predecessor of wordB if and only if we can insert exactly one letter anywhere in wordA without changing the order of the other characters to make it equal to wordB.\nA word chain is a sequence of words [word1, word2, ..., wordk] with k >= 1, where word1 is a predecessor of word2, word2 is a predecessor of word3, and so on. A single word is trivially a word chain with k == 1.\nReturn the length of the longest possible word chain with words chosen from the given list of words.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Last Stone Weight II",
    "problem_id": "1130",
    "frontend_id": "1049",
    "difficulty": "Medium",
    "problem_slug": "last-stone-weight-ii",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an array of integers stones where stones[i] is the weight of the ith stone.\nWe are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights x and y with x <= y. The result of this smash is:\nAt the end of the game, there is at most one stone left.\nReturn the smallest possible weight of the left stone. If there are no stones left, return 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Actors and Directors Who Cooperated At Least Three Times",
    "problem_id": "1136",
    "frontend_id": "1050",
    "difficulty": "Easy",
    "problem_slug": "actors-and-directors-who-cooperated-at-least-three-times",
    "topics": [
      "Database"
    ],
    "description": "Table: ActorDirector\nWrite a solution to find all the pairs (actor_id, director_id) where the actor has cooperated with the director at least three times.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Height Checker",
    "problem_id": "1137",
    "frontend_id": "1051",
    "difficulty": "Easy",
    "problem_slug": "height-checker",
    "topics": [
      "Array",
      "Sorting",
      "Counting Sort"
    ],
    "description": "A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. Let this ordering be represented by the integer array expected where expected[i] is the expected height of the ith student in line.\nYou are given an integer array heights representing the current order that the students are standing in. Each heights[i] is the height of the ith student in line (0-indexed).\nReturn the number of indices where heights[i] != expected[i].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Grumpy Bookstore Owner",
    "problem_id": "1138",
    "frontend_id": "1052",
    "difficulty": "Medium",
    "problem_slug": "grumpy-bookstore-owner",
    "topics": [
      "Array",
      "Sliding Window"
    ],
    "description": "There is a bookstore owner that has a store open for n minutes. You are given an integer array customers of length n where customers[i] is the number of the customers that enter the store at the start of the ith minute and all those customers leave after the end of that minute.\nDuring certain minutes, the bookstore owner is grumpy. You are given a binary array grumpy where grumpy[i] is 1 if the bookstore owner is grumpy during the ith minute, and is 0 otherwise.\nWhen the bookstore owner is grumpy, the customers entering during that minute are not satisfied. Otherwise, they are satisfied.\nThe bookstore owner knows a secret technique to remain not grumpy for minutes consecutive minutes, but this technique can only be used once.\nReturn the maximum number of customers that can be satisfied throughout the day.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Previous Permutation With One Swap",
    "problem_id": "1139",
    "frontend_id": "1053",
    "difficulty": "Medium",
    "problem_slug": "previous-permutation-with-one-swap",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "Given an array of positive integers arr (not necessarily distinct), return the lexicographically largest permutation that is smaller than arr, that can be made with exactly one swap. If it cannot be done, then return the same array.\nNote that a swap exchanges the positions of two numbers arr[i] and arr[j]\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Distant Barcodes",
    "problem_id": "1140",
    "frontend_id": "1054",
    "difficulty": "Medium",
    "problem_slug": "distant-barcodes",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)",
      "Counting"
    ],
    "description": "In a warehouse, there is a row of barcodes, where the ith barcode is barcodes[i].\nRearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer, and it is guaranteed an answer exists.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Lexicographically Smallest Equivalent String",
    "problem_id": "1058",
    "frontend_id": "1061",
    "difficulty": "Medium",
    "problem_slug": "lexicographically-smallest-equivalent-string",
    "topics": [
      "String",
      "Union Find"
    ],
    "description": "You are given two strings of the same length s1 and s2 and a string baseStr.\nWe say s1[i] and s2[i] are equivalent characters.\nEquivalent characters follow the usual rules of any equivalence relation:\nFor example, given the equivalency information from s1 = \"abc\" and s2 = \"cde\", \"acd\" and \"aab\" are equivalent strings of baseStr = \"eed\", and \"aab\" is the lexicographically smallest equivalent string of baseStr.\nReturn the lexicographically smallest equivalent string of baseStr by using the equivalency information from s1 and s2.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Product Sales Analysis I",
    "problem_id": "1153",
    "frontend_id": "1068",
    "difficulty": "Easy",
    "problem_slug": "product-sales-analysis-i",
    "topics": [
      "Database"
    ],
    "description": "Table: Sales\nTable: Product\nWrite a solution to report the product_name, year, and price for each sale_id in the Sales table.\nReturn the resulting table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Product Sales Analysis III",
    "problem_id": "1155",
    "frontend_id": "1070",
    "difficulty": "Medium",
    "problem_slug": "product-sales-analysis-iii",
    "topics": [
      "Database"
    ],
    "description": "Table: Sales\nWrite a solution to find all sales that occurred in the first year each product was sold.\nReturn a table with the following columns: product_id, first_year, quantity, and price.\nReturn the result in any order.\nExample 1:"
  },
  {
    "title": "Greatest Common Divisor of Strings",
    "problem_id": "1146",
    "frontend_id": "1071",
    "difficulty": "Easy",
    "problem_slug": "greatest-common-divisor-of-strings",
    "topics": [
      "Math",
      "String"
    ],
    "description": "For two strings s and t, we say \"t divides s\" if and only if s = t + t + t + ... + t + t (i.e., t is concatenated with itself one or more times).\nGiven two strings str1 and str2, return the largest string x such that x divides both str1 and str2.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Flip Columns For Maximum Number of Equal Rows",
    "problem_id": "1147",
    "frontend_id": "1072",
    "difficulty": "Medium",
    "problem_slug": "flip-columns-for-maximum-number-of-equal-rows",
    "topics": [
      "Array",
      "Hash Table",
      "Matrix"
    ],
    "description": "You are given an m x n binary matrix matrix.\nYou can choose any number of columns in the matrix and flip every cell in that column (i.e., Change the value of the cell from 0 to 1 or vice versa).\nReturn the maximum number of rows that have all values equal after some number of flips.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Adding Two Negabinary Numbers",
    "problem_id": "1148",
    "frontend_id": "1073",
    "difficulty": "Medium",
    "problem_slug": "adding-two-negabinary-numbers",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "Given two numbers arr1 and arr2 in base -2, return the result of adding them together.\nEach number is given in array format:  as an array of 0s and 1s, from most significant bit to least significant bit.  For example, arr = [1,1,0,1] represents the number (-2)^3 + (-2)^2 + (-2)^0 = -3.  A number arr in array, format is also guaranteed to have no leading zeros: either arr == [0] or arr[0] == 1.\nReturn the result of adding arr1 and arr2 in the same format: as an array of 0s and 1s with no leading zeros.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Submatrices That Sum to Target",
    "problem_id": "1145",
    "frontend_id": "1074",
    "difficulty": "Hard",
    "problem_slug": "number-of-submatrices-that-sum-to-target",
    "topics": [
      "Array",
      "Hash Table",
      "Matrix",
      "Prefix Sum"
    ],
    "description": "Given a matrix and a target, return the number of non-empty submatrices that sum to target.\nA submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2.\nTwo submatrices (x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some coordinate that is different: for example, if x1 != x1'.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Project Employees I",
    "problem_id": "1161",
    "frontend_id": "1075",
    "difficulty": "Easy",
    "problem_slug": "project-employees-i",
    "topics": [
      "Database"
    ],
    "description": "Table: Project\nTable: Employee\nWrite an SQL query that reports the average experience years of all the employees for each project, rounded to 2 digits.\nReturn the result table in any order.\nThe query result format is in the following example.\nExample 1:"
  },
  {
    "title": "Occurrences After Bigram",
    "problem_id": "1156",
    "frontend_id": "1078",
    "difficulty": "Easy",
    "problem_slug": "occurrences-after-bigram",
    "topics": [
      "String"
    ],
    "description": "Given two strings first and second, consider occurrences in some text of the form \"first second third\", where second comes immediately after first, and third comes immediately after second.\nReturn an array of all the words third for each occurrence of \"first second third\".\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Letter Tile Possibilities",
    "problem_id": "1160",
    "frontend_id": "1079",
    "difficulty": "Medium",
    "problem_slug": "letter-tile-possibilities",
    "topics": [
      "Hash Table",
      "String",
      "Backtracking",
      "Counting"
    ],
    "description": "You have n  tiles, where each tile has one letter tiles[i] printed on it.\nReturn the number of possible non-empty sequences of letters you can make using the letters printed on those tiles.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Insufficient Nodes in Root to Leaf Paths",
    "problem_id": "1157",
    "frontend_id": "1080",
    "difficulty": "Medium",
    "problem_slug": "insufficient-nodes-in-root-to-leaf-paths",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree and an integer limit, delete all insufficient nodes in the tree simultaneously, and return the root of the resulting binary tree.\nA node is insufficient if every root to leaf path intersecting this node has a sum strictly less than limit.\nA leaf is a node with no children.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Smallest Subsequence of Distinct Characters",
    "problem_id": "1159",
    "frontend_id": "1081",
    "difficulty": "Medium",
    "problem_slug": "smallest-subsequence-of-distinct-characters",
    "topics": [
      "String",
      "Stack",
      "Greedy",
      "Monotonic Stack"
    ],
    "description": "Given a string s, return the lexicographically smallest subsequence of s that contains all the distinct characters of s exactly once.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sales Analysis III",
    "problem_id": "1174",
    "frontend_id": "1084",
    "difficulty": "Easy",
    "problem_slug": "sales-analysis-iii",
    "topics": [
      "Database"
    ],
    "description": "Table: Product\nTable: Sales\nWrite a solution to report the products that were only sold in the first quarter of 2019. That is, between 2019-01-01 and 2019-03-31 inclusive.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Duplicate Zeros",
    "problem_id": "1168",
    "frontend_id": "1089",
    "difficulty": "Easy",
    "problem_slug": "duplicate-zeros",
    "topics": [
      "Array",
      "Two Pointers"
    ],
    "description": "Given a fixed-length integer array arr, duplicate each occurrence of zero, shifting the remaining elements to the right.\nNote that elements beyond the length of the original array are not written. Do the above modifications to the input array in place and do not return anything.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Largest Values From Labels",
    "problem_id": "1169",
    "frontend_id": "1090",
    "difficulty": "Medium",
    "problem_slug": "largest-values-from-labels",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Sorting",
      "Counting"
    ],
    "description": "You are given n item's value and label as two integer arrays values and labels. You are also given two integers numWanted and useLimit.\nYour task is to find a subset of items with the maximum sum of their values such that:\nReturn the maximum sum.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Shortest Path in Binary Matrix",
    "problem_id": "1171",
    "frontend_id": "1091",
    "difficulty": "Medium",
    "problem_slug": "shortest-path-in-binary-matrix",
    "topics": [
      "Array",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.\nA clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:\nThe length of a clear path is the number of visited cells of this path.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Shortest Common Supersequence ",
    "problem_id": "1170",
    "frontend_id": "1092",
    "difficulty": "Hard",
    "problem_slug": "shortest-common-supersequence",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.\nA string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Statistics from a Large Sample",
    "problem_id": "1183",
    "frontend_id": "1093",
    "difficulty": "Medium",
    "problem_slug": "statistics-from-a-large-sample",
    "topics": [
      "Array",
      "Math",
      "Probability and Statistics"
    ],
    "description": "You are given a large sample of integers in the range [0, 255]. Since the sample is so large, it is represented by an array count where count[k] is the number of times that k appears in the sample.\nCalculate the following statistics:\nReturn the statistics of the sample as an array of floating-point numbers [minimum, maximum, mean, median, mode]. Answers within 10-5 of the actual answer will be accepted.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Car Pooling",
    "problem_id": "1184",
    "frontend_id": "1094",
    "difficulty": "Medium",
    "problem_slug": "car-pooling",
    "topics": [
      "Array",
      "Sorting",
      "Heap (Priority Queue)",
      "Simulation",
      "Prefix Sum"
    ],
    "description": "There is a car with capacity empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).\nYou are given the integer capacity and an array trips where trips[i] = [numPassengersi, fromi, toi] indicates that the ith trip has numPassengersi passengers and the locations to pick them up and drop them off are fromi and toi respectively. The locations are given as the number of kilometers due east from the car's initial location.\nReturn true if it is possible to pick up and drop off all passengers for all the given trips, or false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find in Mountain Array",
    "problem_id": "1185",
    "frontend_id": "1095",
    "difficulty": "Hard",
    "problem_slug": "find-in-mountain-array",
    "topics": [
      "Array",
      "Binary Search",
      "Interactive"
    ],
    "description": "(This problem is an interactive problem.)\nYou may recall that an array arr is a mountain array if and only if:\nGiven a mountain array mountainArr, return the minimum index such that mountainArr.get(index) == target. If such an index does not exist, return -1.\nYou cannot access the mountain array directly. You may only access the array using a MountainArray interface:\nSubmissions making more than 100 calls to MountainArray.get will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Brace Expansion II",
    "problem_id": "1188",
    "frontend_id": "1096",
    "difficulty": "Hard",
    "problem_slug": "brace-expansion-ii",
    "topics": [
      "String",
      "Backtracking",
      "Stack",
      "Breadth-First Search"
    ],
    "description": "Under the grammar given below, strings can represent a set of lowercase words. Let R(expr) denote the set of words the expression represents.\nThe grammar can best be understood through simple examples:\nFormally, the three rules for our grammar:\nGiven an expression representing a set of words under the given grammar, return the sorted list of words that the expression represents.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Distribute Candies to People",
    "problem_id": "1195",
    "frontend_id": "1103",
    "difficulty": "Easy",
    "problem_slug": "distribute-candies-to-people",
    "topics": [
      "Math",
      "Simulation"
    ],
    "description": "We distribute some number of candies, to a row of n = num_people people in the following way:\nWe then give 1 candy to the first person, 2 candies to the second person, and so on until we give n candies to the last person.\nThen, we go back to the start of the row, giving n + 1 candies to the first person, n + 2 candies to the second person, and so on until we give 2 * n candies to the last person.\nThis process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies.  The last person will receive all of our remaining candies (not necessarily one more than the previous gift).\nReturn an array (of length num_people and sum candies) that represents the final distribution of candies.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Path In Zigzag Labelled Binary Tree",
    "problem_id": "1194",
    "frontend_id": "1104",
    "difficulty": "Medium",
    "problem_slug": "path-in-zigzag-labelled-binary-tree",
    "topics": [
      "Math",
      "Tree",
      "Binary Tree"
    ],
    "description": "In an infinite binary tree where every node has two children, the nodes are labelled in row order.\nIn the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left.\nGiven the label of a node in this tree, return the labels in the path from the root of the tree to the node with that label.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Filling Bookcase Shelves",
    "problem_id": "1196",
    "frontend_id": "1105",
    "difficulty": "Medium",
    "problem_slug": "filling-bookcase-shelves",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an array books where books[i] = [thicknessi, heighti] indicates the thickness and height of the ith book. You are also given an integer shelfWidth.\nWe want to place these books in order onto bookcase shelves that have a total width shelfWidth.\nWe choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to shelfWidth, then build another level of the shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down. We repeat this process until there are no more books to place.\nNote that at each step of the above process, the order of the books we place is the same order as the given sequence of books.\nReturn the minimum possible height that the total bookshelf can be after placing shelves in this manner.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Parsing A Boolean Expression",
    "problem_id": "1197",
    "frontend_id": "1106",
    "difficulty": "Hard",
    "problem_slug": "parsing-a-boolean-expression",
    "topics": [
      "String",
      "Stack",
      "Recursion"
    ],
    "description": "A boolean expression is an expression that evaluates to either true or false. It can be in one of the following shapes:\nGiven a string expression that represents a boolean expression, return the evaluation of that expression.\nIt is guaranteed that the given expression is valid and follows the given rules.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Defanging an IP Address",
    "problem_id": "1205",
    "frontend_id": "1108",
    "difficulty": "Easy",
    "problem_slug": "defanging-an-ip-address",
    "topics": [
      "String"
    ],
    "description": "Given a valid (IPv4) IP address, return a defanged version of that IP address.\nA defanged IP address replaces every period \".\" with \"[.]\".\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Corporate Flight Bookings",
    "problem_id": "1206",
    "frontend_id": "1109",
    "difficulty": "Medium",
    "problem_slug": "corporate-flight-bookings",
    "topics": [
      "Array",
      "Prefix Sum"
    ],
    "description": "There are n flights that are labeled from 1 to n.\nYou are given an array of flight bookings bookings, where bookings[i] = [firsti, lasti, seatsi] represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range.\nReturn an array answer of length n, where answer[i] is the total number of seats reserved for flight i.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Delete Nodes And Return Forest",
    "problem_id": "1207",
    "frontend_id": "1110",
    "difficulty": "Medium",
    "problem_slug": "delete-nodes-and-return-forest",
    "topics": [
      "Array",
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, each node in the tree has a distinct value.\nAfter deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).\nReturn the roots of the trees in the remaining forest. You may return the result in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Nesting Depth of Two Valid Parentheses Strings",
    "problem_id": "1208",
    "frontend_id": "1111",
    "difficulty": "Medium",
    "problem_slug": "maximum-nesting-depth-of-two-valid-parentheses-strings",
    "topics": [
      "String",
      "Stack"
    ],
    "description": "A string is a valid parentheses string (denoted VPS) if and only if it consists of \"(\" and \")\" characters only, and:\nWe can similarly define the nesting depth depth(S) of any VPS S as follows:\nFor example,  \"\", \"()()\", and \"()(()())\" are VPS's (with nesting depths 0, 1, and 2), and \")(\" and \"(()\" are not VPS's.\nGiven a VPS seq, split it into two disjoint subsequences A and B, such that A and B are VPS's (and A.length + B.length = seq.length).\nNow choose any such A and B such that max(depth(A), depth(B)) is the minimum possible value.\nReturn an answer array (of length seq.length) that encodes such a choice of A and B:  answer[i] = 0 if seq[i] is part of A, else answer[i] = 1.  Note that even though multiple answers may exist, you may return any of them.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Print in Order",
    "problem_id": "1203",
    "frontend_id": "1114",
    "difficulty": "Easy",
    "problem_slug": "print-in-order",
    "topics": [
      "Concurrency"
    ],
    "description": "Suppose we have a class:\nThe same instance of Foo will be passed to three different threads. Thread A will call first(), thread B will call second(), and thread C will call third(). Design a mechanism and modify the program to ensure that second() is executed after first(), and third() is executed after second().\nNote:\nWe do not know how the threads will be scheduled in the operating system, even though the numbers in the input seem to imply the ordering. The input format you see is mainly to ensure our tests' comprehensiveness.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Print FooBar Alternately",
    "problem_id": "1187",
    "frontend_id": "1115",
    "difficulty": "Medium",
    "problem_slug": "print-foobar-alternately",
    "topics": [
      "Concurrency"
    ],
    "description": "Suppose you are given the following code:\nThe same instance of FooBar will be passed to two different threads:\nModify the given program to output \"foobar\" n times.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Print Zero Even Odd",
    "problem_id": "1216",
    "frontend_id": "1116",
    "difficulty": "Medium",
    "problem_slug": "print-zero-even-odd",
    "topics": [
      "Concurrency"
    ],
    "description": "You have a function printNumber that can be called with an integer parameter and prints it to the console.\nYou are given an instance of the class ZeroEvenOdd that has three functions: zero, even, and odd. The same instance of ZeroEvenOdd will be passed to three different threads:\nModify the given class to output the series \"010203040506...\" where the length of the series must be 2n.\nImplement the ZeroEvenOdd class:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Building H2O",
    "problem_id": "1186",
    "frontend_id": "1117",
    "difficulty": "Medium",
    "problem_slug": "building-h2o",
    "topics": [
      "Concurrency"
    ],
    "description": "There are two kinds of threads: oxygen and hydrogen. Your goal is to group these threads to form water molecules.\nThere is a barrier where each thread has to wait until a complete molecule can be formed. Hydrogen and oxygen threads will be given releaseHydrogen and releaseOxygen methods respectively, which will allow them to pass the barrier. These threads should pass the barrier in groups of three, and they must immediately bond with each other to form a water molecule. You must guarantee that all the threads from one molecule bond before any other threads from the next molecule do.\nIn other words:\nWe do not have to worry about matching the threads up explicitly; the threads do not necessarily know which other threads they are paired up with. The key is that threads pass the barriers in complete sets; thus, if we examine the sequence of threads that bind and divide them into groups of three, each group should contain one oxygen and two hydrogen threads.\nWrite synchronization code for oxygen and hydrogen molecules that enforces these constraints.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Relative Sort Array",
    "problem_id": "1217",
    "frontend_id": "1122",
    "difficulty": "Easy",
    "problem_slug": "relative-sort-array",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting",
      "Counting Sort"
    ],
    "description": "Given two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1.\nSort the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2. Elements that do not appear in arr2 should be placed at the end of arr1 in ascending order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Lowest Common Ancestor of Deepest Leaves",
    "problem_id": "1218",
    "frontend_id": "1123",
    "difficulty": "Medium",
    "problem_slug": "lowest-common-ancestor-of-deepest-leaves",
    "topics": [
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the lowest common ancestor of its deepest leaves.\nRecall that:\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nNote: This question is the same as 865: https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/"
  },
  {
    "title": "Longest Well-Performing Interval",
    "problem_id": "1219",
    "frontend_id": "1124",
    "difficulty": "Medium",
    "problem_slug": "longest-well-performing-interval",
    "topics": [
      "Array",
      "Hash Table",
      "Stack",
      "Monotonic Stack",
      "Prefix Sum"
    ],
    "description": "We are given hours, a list of the number of hours worked per day for a given employee.\nA day is considered to be a tiring day if and only if the number of hours worked is (strictly) greater than 8.\nA well-performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days.\nReturn the length of the longest well-performing interval.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Smallest Sufficient Team",
    "problem_id": "1220",
    "frontend_id": "1125",
    "difficulty": "Hard",
    "problem_slug": "smallest-sufficient-team",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "In a project, you have a list of required skills req_skills, and a list of people. The ith person people[i] contains a list of skills that the person has.\nConsider a sufficient team: a set of people such that for every required skill in req_skills, there is at least one person in the team who has that skill. We can represent these teams by the index of each person.\nReturn any sufficient team of the smallest possible size, represented by the index of each person. You may return the answer in any order.\nIt is guaranteed an answer exists.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Equivalent Domino Pairs",
    "problem_id": "1227",
    "frontend_id": "1128",
    "difficulty": "Easy",
    "problem_slug": "number-of-equivalent-domino-pairs",
    "topics": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "description": "Given a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a == c and b == d), or (a == d and b == c) - that is, one domino can be rotated to be equal to another domino.\nReturn the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i] is equivalent to dominoes[j].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Shortest Path with Alternating Colors",
    "problem_id": "1229",
    "frontend_id": "1129",
    "difficulty": "Medium",
    "problem_slug": "shortest-path-with-alternating-colors",
    "topics": [
      "Breadth-First Search",
      "Graph"
    ],
    "description": "You are given an integer n, the number of nodes in a directed graph where the nodes are labeled from 0 to n - 1. Each edge is red or blue in this graph, and there could be self-edges and parallel edges.\nYou are given two arrays redEdges and blueEdges where:\nReturn an array answer of length n, where each answer[x] is the length of the shortest path from node 0 to node x such that the edge colors alternate along the path, or -1 if such a path does not exist.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Cost Tree From Leaf Values",
    "problem_id": "1228",
    "frontend_id": "1130",
    "difficulty": "Medium",
    "problem_slug": "minimum-cost-tree-from-leaf-values",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Greedy",
      "Monotonic Stack"
    ],
    "description": "Given an array arr of positive integers, consider all binary trees such that:\nAmong all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node. It is guaranteed this sum fits into a 32-bit integer.\nA node is a leaf if and only if it has zero children.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum of Absolute Value Expression",
    "problem_id": "1230",
    "frontend_id": "1131",
    "difficulty": "Medium",
    "problem_slug": "maximum-of-absolute-value-expression",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "Given two arrays of integers with equal lengths, return the maximum value of:\n|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|\nwhere the maximum is taken over all 0 <= i, j < arr1.length.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "N-th Tribonacci Number",
    "problem_id": "1236",
    "frontend_id": "1137",
    "difficulty": "Easy",
    "problem_slug": "n-th-tribonacci-number",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Memoization"
    ],
    "description": "The Tribonacci sequence Tn is defined as follows:\nT0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.\nGiven n, return the value of Tn.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Alphabet Board Path",
    "problem_id": "1238",
    "frontend_id": "1138",
    "difficulty": "Medium",
    "problem_slug": "alphabet-board-path",
    "topics": [
      "Hash Table",
      "String"
    ],
    "description": "On an alphabet board, we start at position (0, 0), corresponding to character board[0][0].\nHere, board = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\", \"z\"], as shown in the diagram below.\nWe may make the following moves:\n(Here, the only positions that exist on the board are positions with letters on them.)\nReturn a sequence of moves that makes our answer equal to target in the minimum number of moves.  You may return any path that does so.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Largest 1-Bordered Square",
    "problem_id": "1239",
    "frontend_id": "1139",
    "difficulty": "Medium",
    "problem_slug": "largest-1-bordered-square",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "Given a 2D grid of 0s and 1s, return the number of elements in the largest square subgrid that has all 1s on its border, or 0 if such a subgrid doesn't exist in the grid.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Stone Game II",
    "problem_id": "1240",
    "frontend_id": "1140",
    "difficulty": "Medium",
    "problem_slug": "stone-game-ii",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Prefix Sum",
      "Game Theory"
    ],
    "description": "Alice and Bob continue their games with piles of stones. There are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i]. The objective of the game is to end with the most stones.\nAlice and Bob take turns, with Alice starting first.\nOn each player's turn, that player can take all the stones in the first X remaining piles, where 1 <= X <= 2M. Then, we set M = max(M, X). Initially, M = 1.\nThe game continues until all the stones have been taken.\nAssuming Alice and Bob play optimally, return the maximum number of stones Alice can get.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "User Activity for the Past 30 Days I",
    "problem_id": "1245",
    "frontend_id": "1141",
    "difficulty": "Easy",
    "problem_slug": "user-activity-for-the-past-30-days-i",
    "topics": [
      "Database"
    ],
    "description": "Table: Activity\nWrite a solution to find the daily active user count for a period of 30 days ending 2019-07-27 inclusively. A user was active on someday if they made at least one activity on that day.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Longest Common Subsequence",
    "problem_id": "1250",
    "frontend_id": "1143",
    "difficulty": "Medium",
    "problem_slug": "longest-common-subsequence",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\nA common subsequence of two strings is a subsequence that is common to both strings.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Decrease Elements To Make Array Zigzag",
    "problem_id": "1247",
    "frontend_id": "1144",
    "difficulty": "Medium",
    "problem_slug": "decrease-elements-to-make-array-zigzag",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "Given an array nums of integers, a move consists of choosing any element and decreasing it by 1.\nAn array A is a zigzag array if either:\nReturn the minimum number of moves to transform the given array nums into a zigzag array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Binary Tree Coloring Game",
    "problem_id": "1248",
    "frontend_id": "1145",
    "difficulty": "Medium",
    "problem_slug": "binary-tree-coloring-game",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Two players play a turn based game on a binary tree. We are given the root of this binary tree, and the number of nodes n in the tree. n is odd, and each node has a distinct value from 1 to n.\nInitially, the first player names a value x with 1 <= x <= n, and the second player names a value y with 1 <= y <= n and y != x. The first player colors the node with value x red, and the second player colors the node with value y blue.\nThen, the players take turns starting with the first player. In each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an uncolored neighbor of the chosen node (either the left child, right child, or parent of the chosen node.)\nIf (and only if) a player cannot choose such a node in this way, they must pass their turn. If both players pass their turn, the game ends, and the winner is the player that colored more nodes.\nYou are the second player. If it is possible to choose such a y to ensure you win the game, return true. If it is not possible, return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Snapshot Array",
    "problem_id": "1249",
    "frontend_id": "1146",
    "difficulty": "Medium",
    "problem_slug": "snapshot-array",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Design"
    ],
    "description": "Implement a SnapshotArray that supports the following interface:\nExample 1:\nConstraints:"
  },
  {
    "title": "Longest Chunked Palindrome Decomposition",
    "problem_id": "1251",
    "frontend_id": "1147",
    "difficulty": "Hard",
    "problem_slug": "longest-chunked-palindrome-decomposition",
    "topics": [
      "Two Pointers",
      "String",
      "Dynamic Programming",
      "Greedy",
      "Rolling Hash",
      "Hash Function"
    ],
    "description": "You are given a string text. You should split it to k substrings (subtext1, subtext2, ..., subtextk) such that:\nReturn the largest possible value of k.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Article Views I",
    "problem_id": "1258",
    "frontend_id": "1148",
    "difficulty": "Easy",
    "problem_slug": "article-views-i",
    "topics": [
      "Database"
    ],
    "description": "Table: Views\nWrite a solution to find all the authors that viewed at least one of their own articles.\nReturn the result table sorted by id in ascending order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Day of the Year",
    "problem_id": "1260",
    "frontend_id": "1154",
    "difficulty": "Easy",
    "problem_slug": "day-of-the-year",
    "topics": [
      "Math",
      "String"
    ],
    "description": "Given a string date representing a Gregorian calendar date formatted as YYYY-MM-DD, return the day number of the year.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Dice Rolls With Target Sum",
    "problem_id": "1263",
    "frontend_id": "1155",
    "difficulty": "Medium",
    "problem_slug": "number-of-dice-rolls-with-target-sum",
    "topics": [
      "Dynamic Programming"
    ],
    "description": "You have n dice, and each dice has k faces numbered from 1 to k.\nGiven three integers n, k, and target, return the number of possible ways (out of the kn total ways) to roll the dice, so the sum of the face-up numbers equals target. Since the answer may be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Swap For Longest Repeated Character Substring",
    "problem_id": "1261",
    "frontend_id": "1156",
    "difficulty": "Medium",
    "problem_slug": "swap-for-longest-repeated-character-substring",
    "topics": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "You are given a string text. You can swap two of the characters in the text.\nReturn the length of the longest substring with repeated characters.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Online Majority Element In Subarray",
    "problem_id": "1262",
    "frontend_id": "1157",
    "difficulty": "Hard",
    "problem_slug": "online-majority-element-in-subarray",
    "topics": [
      "Array",
      "Binary Search",
      "Design",
      "Binary Indexed Tree",
      "Segment Tree"
    ],
    "description": "Design a data structure that efficiently finds the majority element of a given subarray.\nThe majority element of a subarray is an element that occurs threshold times or more in the subarray.\nImplementing the MajorityChecker class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Market Analysis I",
    "problem_id": "1268",
    "frontend_id": "1158",
    "difficulty": "Medium",
    "problem_slug": "market-analysis-i",
    "topics": [
      "Database"
    ],
    "description": "Table: Users\nTable: Orders\nTable: Items\nWrite a solution to find for each user, the join date and the number of orders they made as a buyer in 2019.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Find Words That Can Be Formed by Characters",
    "problem_id": "1112",
    "frontend_id": "1160",
    "difficulty": "Easy",
    "problem_slug": "find-words-that-can-be-formed-by-characters",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "You are given an array of strings words and a string chars.\nA string is good if it can be formed by characters from chars (each character can only be used once for each word in words).\nReturn the sum of lengths of all good strings in words.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Level Sum of a Binary Tree",
    "problem_id": "1116",
    "frontend_id": "1161",
    "difficulty": "Medium",
    "problem_slug": "maximum-level-sum-of-a-binary-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.\nReturn the smallest level x such that the sum of all the values of nodes at level x is maximal.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "As Far from Land as Possible",
    "problem_id": "1117",
    "frontend_id": "1162",
    "difficulty": "Medium",
    "problem_slug": "as-far-from-land-as-possible",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "Given an n x n grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. If no land or water exists in the grid, return -1.\nThe distance used in this problem is the Manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Last Substring in Lexicographical Order",
    "problem_id": "1133",
    "frontend_id": "1163",
    "difficulty": "Hard",
    "problem_slug": "last-substring-in-lexicographical-order",
    "topics": [
      "Two Pointers",
      "String"
    ],
    "description": "Given a string s, return the last substring of s in lexicographical order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Product Price at a Given Date",
    "problem_id": "1278",
    "frontend_id": "1164",
    "difficulty": "Medium",
    "problem_slug": "product-price-at-a-given-date",
    "topics": [
      "Database"
    ],
    "description": "Table: Products\nInitially, all products have price 10.\nWrite a solution to find the prices of all products on the date 2019-08-16.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Invalid Transactions",
    "problem_id": "1272",
    "frontend_id": "1169",
    "difficulty": "Medium",
    "problem_slug": "invalid-transactions",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Sorting"
    ],
    "description": "A transaction is possibly invalid if:\nYou are given an array of strings transaction where transactions[i] consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction.\nReturn a list of transactions that are possibly invalid. You may return the answer in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Compare Strings by Frequency of the Smallest Character",
    "problem_id": "1273",
    "frontend_id": "1170",
    "difficulty": "Medium",
    "problem_slug": "compare-strings-by-frequency-of-the-smallest-character",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Binary Search",
      "Sorting"
    ],
    "description": "Let the function f(s) be the frequency of the lexicographically smallest character in a non-empty string s. For example, if s = \"dcce\" then f(s) = 2 because the lexicographically smallest character is 'c', which has a frequency of 2.\nYou are given an array of strings words and another array of query strings queries. For each query queries[i], count the number of words in words such that f(queries[i]) < f(W) for each W in words.\nReturn an integer array answer, where each answer[i] is the answer to the ith query.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Remove Zero Sum Consecutive Nodes from Linked List",
    "problem_id": "1267",
    "frontend_id": "1171",
    "difficulty": "Medium",
    "problem_slug": "remove-zero-sum-consecutive-nodes-from-linked-list",
    "topics": [
      "Hash Table",
      "Linked List"
    ],
    "description": "Given the head of a linked list, we repeatedly delete consecutive sequences of nodes that sum to 0 until there are no such sequences.\nAfter doing so, return the head of the final linked list.  You may return any such answer.\n(Note that in the examples below, all sequences are serializations of ListNode objects.)\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Dinner Plate Stacks",
    "problem_id": "1270",
    "frontend_id": "1172",
    "difficulty": "Hard",
    "problem_slug": "dinner-plate-stacks",
    "topics": [
      "Hash Table",
      "Stack",
      "Design",
      "Heap (Priority Queue)"
    ],
    "description": "You have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same maximum capacity.\nImplement the DinnerPlates class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Immediate Food Delivery II",
    "problem_id": "1292",
    "frontend_id": "1174",
    "difficulty": "Medium",
    "problem_slug": "immediate-food-delivery-ii",
    "topics": [
      "Database"
    ],
    "description": "Table: Delivery\nIf the customer's preferred delivery date is the same as the order date, then the order is called immediate; otherwise, it is called scheduled.\nThe first order of a customer is the order with the earliest order date that the customer made. It is guaranteed that a customer has precisely one first order.\nWrite a solution to find the percentage of immediate orders in the first orders of all customers, rounded to 2 decimal places.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Prime Arrangements",
    "problem_id": "1279",
    "frontend_id": "1175",
    "difficulty": "Easy",
    "problem_slug": "prime-arrangements",
    "topics": [
      "Math"
    ],
    "description": "Return the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.)\n(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)\nSince the answer may be large, return the answer modulo 10^9 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Can Make Palindrome from Substring",
    "problem_id": "1281",
    "frontend_id": "1177",
    "difficulty": "Medium",
    "problem_slug": "can-make-palindrome-from-substring",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Prefix Sum"
    ],
    "description": "You are given a string s and array queries where queries[i] = [lefti, righti, ki]. We may rearrange the substring s[lefti...righti] for each query and then choose up to ki of them to replace with any lowercase English letter.\nIf the substring is possible to be a palindrome string after the operations above, the result of the query is true. Otherwise, the result is false.\nReturn a boolean array answer where answer[i] is the result of the ith query queries[i].\nNote that each letter is counted individually for replacement, so if, for example s[lefti...righti] = \"aaa\", and ki = 2, we can only replace two of the letters. Also, note that no query modifies the initial string s.\nExample :\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Valid Words for Each Puzzle",
    "problem_id": "1282",
    "frontend_id": "1178",
    "difficulty": "Hard",
    "problem_slug": "number-of-valid-words-for-each-puzzle",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Trie"
    ],
    "description": "Example 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Reformat Department Table",
    "problem_id": "1301",
    "frontend_id": "1179",
    "difficulty": "Easy",
    "problem_slug": "reformat-department-table",
    "topics": [
      "Database"
    ],
    "description": "Table: Department\nReformat the table such that there is a department id column and a revenue column for each month.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Distance Between Bus Stops",
    "problem_id": "1287",
    "frontend_id": "1184",
    "difficulty": "Easy",
    "problem_slug": "distance-between-bus-stops",
    "topics": [
      "Array"
    ],
    "description": "A bus has n stops numbered from 0 to n - 1 that form a circle. We know the distance between all pairs of neighboring stops where distance[i] is the distance between the stops number i and (i + 1) % n.\nThe bus goes along both directions i.e. clockwise and counterclockwise.\nReturn the shortest distance between the given start and destination stops.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Day of the Week",
    "problem_id": "1289",
    "frontend_id": "1185",
    "difficulty": "Easy",
    "problem_slug": "day-of-the-week",
    "topics": [
      "Math"
    ],
    "description": "Given a date, return the corresponding day of the week for that date.\nThe input is given as three integers representing the day, month and year respectively.\nReturn the answer as one of the following values {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"}.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Subarray Sum with One Deletion",
    "problem_id": "1288",
    "frontend_id": "1186",
    "difficulty": "Medium",
    "problem_slug": "maximum-subarray-sum-with-one-deletion",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "Given an array of integers, return the maximum sum for a non-empty subarray (contiguous elements) with at most one element deletion. In other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the sum of the remaining elements is maximum possible.\nNote that the subarray needs to be non-empty after deleting one element.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Make Array Strictly Increasing",
    "problem_id": "1290",
    "frontend_id": "1187",
    "difficulty": "Hard",
    "problem_slug": "make-array-strictly-increasing",
    "topics": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "Given two integer arrays arr1 and arr2, return the minimum number of operations (possibly zero) needed to make arr1 strictly increasing.\nIn one operation, you can choose two indices 0 <= i < arr1.length and 0 <= j < arr2.length and do the assignment arr1[i] = arr2[j].\nIf there is no way to make arr1 strictly increasing, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Number of Balloons",
    "problem_id": "1297",
    "frontend_id": "1189",
    "difficulty": "Easy",
    "problem_slug": "maximum-number-of-balloons",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "Given a string text, you want to use the characters of text to form as many instances of the word \"balloon\" as possible.\nYou can use each character in text at most once. Return the maximum number of instances that can be formed.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nNote: This question is the same as  2287: Rearrange Characters to Make Target String."
  },
  {
    "title": "Reverse Substrings Between Each Pair of Parentheses",
    "problem_id": "1298",
    "frontend_id": "1190",
    "difficulty": "Medium",
    "problem_slug": "reverse-substrings-between-each-pair-of-parentheses",
    "topics": [
      "String",
      "Stack"
    ],
    "description": "You are given a string s that consists of lower case English letters and brackets.\nReverse the strings in each pair of matching parentheses, starting from the innermost one.\nYour result should not contain any brackets.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "K-Concatenation Maximum Sum",
    "problem_id": "1299",
    "frontend_id": "1191",
    "difficulty": "Medium",
    "problem_slug": "k-concatenation-maximum-sum",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "Given an integer array arr and an integer k, modify the array by repeating it k times.\nFor example, if arr = [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2].\nReturn the maximum sub-array sum in the modified array. Note that the length of the sub-array can be 0 and its sum in that case is 0.\nAs the answer can be very large, return the answer modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Critical Connections in a Network",
    "problem_id": "1300",
    "frontend_id": "1192",
    "difficulty": "Hard",
    "problem_slug": "critical-connections-in-a-network",
    "topics": [
      "Depth-First Search",
      "Graph",
      "Biconnected Component"
    ],
    "description": "There are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi. Any server can reach other servers directly or indirectly through the network.\nA critical connection is a connection that, if removed, will make some servers unable to reach some other server.\nReturn all critical connections in the network in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Monthly Transactions I",
    "problem_id": "1317",
    "frontend_id": "1193",
    "difficulty": "Medium",
    "problem_slug": "monthly-transactions-i",
    "topics": [
      "Database"
    ],
    "description": "Table: Transactions\nWrite an SQL query to find for each month and country, the number of transactions and their total amount, the number of approved transactions and their total amount.\nReturn the result table in any order.\nThe query result format is in the following example.\nExample 1:"
  },
  {
    "title": "Fizz Buzz Multithreaded",
    "problem_id": "1316",
    "frontend_id": "1195",
    "difficulty": "Medium",
    "problem_slug": "fizz-buzz-multithreaded",
    "topics": [
      "Concurrency"
    ],
    "description": "You have the four functions:\nYou are given an instance of the class FizzBuzz that has four functions: fizz, buzz, fizzbuzz and number. The same instance of FizzBuzz will be passed to four different threads:\nModify the given class to output the series [1, 2, \"fizz\", 4, \"buzz\", ...] where the ith token (1-indexed) of the series is:\nImplement the FizzBuzz class:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Absolute Difference",
    "problem_id": "1306",
    "frontend_id": "1200",
    "difficulty": "Easy",
    "problem_slug": "minimum-absolute-difference",
    "topics": [
      "Array",
      "Sorting"
    ],
    "description": "Given an array of distinct integers arr, find all pairs of elements with the minimum absolute difference of any two elements.\nReturn a list of pairs in ascending order(with respect to pairs), each pair [a, b] follows\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Ugly Number III",
    "problem_id": "1307",
    "frontend_id": "1201",
    "difficulty": "Medium",
    "problem_slug": "ugly-number-iii",
    "topics": [
      "Math",
      "Binary Search",
      "Combinatorics",
      "Number Theory"
    ],
    "description": "An ugly number is a positive integer that is divisible by a, b, or c.\nGiven four integers n, a, b, and c, return the nth ugly number.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Smallest String With Swaps",
    "problem_id": "1308",
    "frontend_id": "1202",
    "difficulty": "Medium",
    "problem_slug": "smallest-string-with-swaps",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Sorting"
    ],
    "description": "You are given a string s, and an array of pairs of indices in the string pairs where pairs[i] = [a, b] indicates 2 indices(0-indexed) of the string.\nYou can swap the characters at any pair of indices in the given pairs any number of times.\nReturn the lexicographically smallest string that s can be changed to after using the swaps.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sort Items by Groups Respecting Dependencies",
    "problem_id": "1309",
    "frontend_id": "1203",
    "difficulty": "Hard",
    "problem_slug": "sort-items-by-groups-respecting-dependencies",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort"
    ],
    "description": "There are n items each belonging to zero or one of m groups where group[i] is the group that the i-th item belongs to and it's equal to -1 if the i-th item belongs to no group. The items and the groups are zero indexed. A group can have no item belonging to it.\nReturn a sorted list of the items such that:\nReturn any solution if there is more than one solution and return an empty list if there is no solution.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Last Person to Fit in the Bus",
    "problem_id": "1327",
    "frontend_id": "1204",
    "difficulty": "Medium",
    "problem_slug": "last-person-to-fit-in-the-bus",
    "topics": [
      "Database"
    ],
    "description": "Table: Queue\nThere is a queue of people waiting to board a bus. However, the bus has a weight limit of 1000 kilograms, so there may be some people who cannot board.\nWrite a solution to find the person_name of the last person that can fit on the bus without exceeding the weight limit. The test cases are generated such that the first person does not exceed the weight limit.\nNote that only one person can board the bus at any given turn.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Design Skiplist",
    "problem_id": "1337",
    "frontend_id": "1206",
    "difficulty": "Hard",
    "problem_slug": "design-skiplist",
    "topics": [
      "Linked List",
      "Design"
    ],
    "description": "Design a Skiplist without using any built-in libraries.\nA skiplist is a data structure that takes O(log(n)) time to add, erase and search. Comparing with treap and red-black tree which has the same function and performance, the code length of Skiplist can be comparatively short and the idea behind Skiplists is just simple linked lists.\nFor example, we have a Skiplist containing [30,40,50,60,70,90] and we want to add 80 and 45 into it. The Skiplist works this way:\nArtyom Kalinin [CC BY-SA 3.0], via Wikimedia Commons\nYou can see there are many layers in the Skiplist. Each layer is a sorted linked list. With the help of the top layers, add, erase and search can be faster than O(n). It can be proven that the average time complexity for each operation is O(log(n)) and space complexity is O(n).\nSee more about Skiplist: https://en.wikipedia.org/wiki/Skip_list\nImplement the Skiplist class:\nNote that duplicates may exist in the Skiplist, your code needs to handle this situation.\nExample 1:\nConstraints:"
  },
  {
    "title": "Unique Number of Occurrences",
    "problem_id": "1319",
    "frontend_id": "1207",
    "difficulty": "Easy",
    "problem_slug": "unique-number-of-occurrences",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "Given an array of integers arr, return true if the number of occurrences of each value in the array is unique or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Get Equal Substrings Within Budget",
    "problem_id": "1321",
    "frontend_id": "1208",
    "difficulty": "Medium",
    "problem_slug": "get-equal-substrings-within-budget",
    "topics": [
      "String",
      "Binary Search",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "You are given two strings s and t of the same length and an integer maxCost.\nYou want to change s to t. Changing the ith character of s to ith character of t costs |s[i] - t[i]| (i.e., the absolute difference between the ASCII values of the characters).\nReturn the maximum length of a substring of s that can be changed to be the same as the corresponding substring of t with a cost less than or equal to maxCost. If there is no substring from s that can be changed to its corresponding substring from t, return 0.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Remove All Adjacent Duplicates in String II",
    "problem_id": "1320",
    "frontend_id": "1209",
    "difficulty": "Medium",
    "problem_slug": "remove-all-adjacent-duplicates-in-string-ii",
    "topics": [
      "String",
      "Stack"
    ],
    "description": "You are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together.\nWe repeatedly make k duplicate removals on s until we no longer can.\nReturn the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Moves to Reach Target with Rotations",
    "problem_id": "1322",
    "frontend_id": "1210",
    "difficulty": "Hard",
    "problem_slug": "minimum-moves-to-reach-target-with-rotations",
    "topics": [
      "Array",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "In an n*n grid, there is a snake that spans 2 cells and starts moving from the top left corner at (0, 0) and (0, 1). The grid has empty cells represented by zeros and blocked cells represented by ones. The snake wants to reach the lower right corner at (n-1, n-2) and (n-1, n-1).\nIn one move the snake can:\nReturn the minimum number of moves to reach the target.\nIf there is no way to reach the target, return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Queries Quality and Percentage",
    "problem_id": "1338",
    "frontend_id": "1211",
    "difficulty": "Easy",
    "problem_slug": "queries-quality-and-percentage",
    "topics": [
      "Database"
    ],
    "description": "Table: Queries\nWe define query quality as:\nWe also define poor query percentage as:\nWrite a solution to find each query_name, the quality and poor_query_percentage.\nBoth quality and poor_query_percentage should be rounded to 2 decimal places.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Minimum Cost to Move Chips to The Same Position",
    "problem_id": "1329",
    "frontend_id": "1217",
    "difficulty": "Easy",
    "problem_slug": "minimum-cost-to-move-chips-to-the-same-position",
    "topics": [
      "Array",
      "Math",
      "Greedy"
    ],
    "description": "We have n chips, where the position of the ith chip is position[i].\nWe need to move all the chips to the same position. In one step, we can change the position of the ith chip from position[i] to:\nReturn the minimum cost needed to move all the chips to the same position.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest Arithmetic Subsequence of Given Difference",
    "problem_id": "1330",
    "frontend_id": "1218",
    "difficulty": "Medium",
    "problem_slug": "longest-arithmetic-subsequence-of-given-difference",
    "topics": [
      "Array",
      "Hash Table",
      "Dynamic Programming"
    ],
    "description": "Given an integer array arr and an integer difference, return the length of the longest subsequence in arr which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals difference.\nA subsequence is a sequence that can be derived from arr by deleting some or no elements without changing the order of the remaining elements.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Path with Maximum Gold",
    "problem_id": "1331",
    "frontend_id": "1219",
    "difficulty": "Medium",
    "problem_slug": "path-with-maximum-gold",
    "topics": [
      "Array",
      "Backtracking",
      "Matrix"
    ],
    "description": "In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.\nReturn the maximum amount of gold you can collect under the conditions:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Vowels Permutation",
    "problem_id": "1332",
    "frontend_id": "1220",
    "difficulty": "Hard",
    "problem_slug": "count-vowels-permutation",
    "topics": [
      "Dynamic Programming"
    ],
    "description": "Given an integer n, your task is to count how many strings of length n can be formed under the following rules:\nSince the answer may be too large, return it modulo 10^9 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Split a String in Balanced Strings",
    "problem_id": "1341",
    "frontend_id": "1221",
    "difficulty": "Easy",
    "problem_slug": "split-a-string-in-balanced-strings",
    "topics": [
      "String",
      "Greedy",
      "Counting"
    ],
    "description": "Balanced strings are those that have an equal quantity of 'L' and 'R' characters.\nGiven a balanced string s, split it into some number of substrings such that:\nReturn the maximum number of balanced strings you can obtain.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Queens That Can Attack the King",
    "problem_id": "1342",
    "frontend_id": "1222",
    "difficulty": "Medium",
    "problem_slug": "queens-that-can-attack-the-king",
    "topics": [
      "Array",
      "Matrix",
      "Simulation"
    ],
    "description": "On a 0-indexed 8 x 8 chessboard, there can be multiple black queens and one white king.\nYou are given a 2D integer array queens where queens[i] = [xQueeni, yQueeni] represents the position of the ith black queen on the chessboard. You are also given an integer array king of length 2 where king = [xKing, yKing] represents the position of the white king.\nReturn the coordinates of the black queens that can directly attack the king. You may return the answer in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Dice Roll Simulation",
    "problem_id": "1343",
    "frontend_id": "1223",
    "difficulty": "Hard",
    "problem_slug": "dice-roll-simulation",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "A die simulator generates a random number from 1 to 6 for each roll. You introduced a constraint to the generator such that it cannot roll the number i more than rollMax[i] (1-indexed) consecutive times.\nGiven an array of integers rollMax and an integer n, return the number of distinct sequences that can be obtained with exact n rolls. Since the answer may be too large, return it modulo 109 + 7.\nTwo sequences are considered different if at least one element differs from each other.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Equal Frequency",
    "problem_id": "1344",
    "frontend_id": "1224",
    "difficulty": "Hard",
    "problem_slug": "maximum-equal-frequency",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "Given an array nums of positive integers, return the longest possible length of an array prefix of nums, such that it is possible to remove exactly one element from this prefix so that every number that has appeared in it will have the same number of occurrences.\nIf after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "The Dining Philosophers",
    "problem_id": "1340",
    "frontend_id": "1226",
    "difficulty": "Medium",
    "problem_slug": "the-dining-philosophers",
    "topics": [
      "Concurrency"
    ],
    "description": "Five silent philosophers sit at a round table with bowls of spaghetti. Forks are placed between each pair of adjacent philosophers.\nEach philosopher must alternately think and eat. However, a philosopher can only eat spaghetti when they have both left and right forks. Each fork can be held by only one philosopher and so a philosopher can use the fork only if it is not being used by another philosopher. After an individual philosopher finishes eating, they need to put down both forks so that the forks become available to others. A philosopher can take the fork on their right or the one on their left as they become available, but cannot start eating before getting both forks.\nEating is not limited by the remaining amounts of spaghetti or stomach space; an infinite supply and an infinite demand are assumed.\nDesign a discipline of behaviour (a concurrent algorithm) such that no philosopher will starve; i.e., each can forever continue to alternate between eating and thinking, assuming that no philosopher can know when others may want to eat or think.\nThe problem statement and the image above are taken from wikipedia.org\nThe philosophers' ids are numbered from 0 to 4 in a clockwise order. Implement the function void wantsToEat(philosopher, pickLeftFork, pickRightFork, eat, putLeftFork, putRightFork) where:\nFive threads, each representing a philosopher, will simultaneously use one object of your class to simulate the process. The function may be called for the same philosopher more than once, even before the last call ends.\nExample 1:\nConstraints:"
  },
  {
    "title": "Airplane Seat Assignment Probability",
    "problem_id": "1362",
    "frontend_id": "1227",
    "difficulty": "Medium",
    "problem_slug": "airplane-seat-assignment-probability",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Brainteaser",
      "Probability and Statistics"
    ],
    "description": "n passengers board an airplane with exactly n seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of the passengers will:\nReturn the probability that the nth person gets his own seat.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check If It Is a Straight Line",
    "problem_id": "1349",
    "frontend_id": "1232",
    "difficulty": "Easy",
    "problem_slug": "check-if-it-is-a-straight-line",
    "topics": [
      "Array",
      "Math",
      "Geometry"
    ],
    "description": "You are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. Check if these points make a straight line in the XY plane.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Remove Sub-Folders from the Filesystem",
    "problem_id": "1350",
    "frontend_id": "1233",
    "difficulty": "Medium",
    "problem_slug": "remove-sub-folders-from-the-filesystem",
    "topics": [
      "Array",
      "String",
      "Depth-First Search",
      "Trie"
    ],
    "description": "Given a list of folders folder, return the folders after removing all sub-folders in those folders. You may return the answer in any order.\nIf a folder[i] is located within another folder[j], it is called a sub-folder of it. A sub-folder of folder[j] must start with folder[j], followed by a \"/\". For example, \"/a/b\" is a sub-folder of \"/a\", but \"/b\" is not a sub-folder of \"/a/b/c\".\nThe format of a path is one or more concatenated strings of the form: '/' followed by one or more lowercase English letters.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Replace the Substring for Balanced String",
    "problem_id": "1351",
    "frontend_id": "1234",
    "difficulty": "Medium",
    "problem_slug": "replace-the-substring-for-balanced-string",
    "topics": [
      "String",
      "Sliding Window"
    ],
    "description": "You are given a string s of length n containing only four kinds of characters: 'Q', 'W', 'E', and 'R'.\nA string is said to be balanced if each of its characters appears n / 4 times where n is the length of the string.\nReturn the minimum length of the substring that can be replaced with any other string of the same length to make s balanced. If s is already balanced, return 0.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Profit in Job Scheduling",
    "problem_id": "1352",
    "frontend_id": "1235",
    "difficulty": "Hard",
    "problem_slug": "maximum-profit-in-job-scheduling",
    "topics": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].\nYou're given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.\nIf you choose a job that ends at time X you will be able to start another job that starts at time X.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Positive Integer Solution for a Given Equation",
    "problem_id": "1358",
    "frontend_id": "1237",
    "difficulty": "Medium",
    "problem_slug": "find-positive-integer-solution-for-a-given-equation",
    "topics": [
      "Math",
      "Two Pointers",
      "Binary Search",
      "Interactive"
    ],
    "description": "Given a callable function f(x, y) with a hidden formula and a value z, reverse engineer the formula and return all positive integer pairs x and y where f(x,y) == z. You may return the pairs in any order.\nWhile the exact formula is hidden, the function is monotonically increasing, i.e.:\nThe function interface is defined like this:\nWe will judge your solution as follows:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Circular Permutation in Binary Representation",
    "problem_id": "1359",
    "frontend_id": "1238",
    "difficulty": "Medium",
    "problem_slug": "circular-permutation-in-binary-representation",
    "topics": [
      "Math",
      "Backtracking",
      "Bit Manipulation"
    ],
    "description": "Given 2 integers n and start. Your task is return any permutation p of (0,1,2.....,2^n -1) such that :\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Length of a Concatenated String with Unique Characters",
    "problem_id": "1360",
    "frontend_id": "1239",
    "difficulty": "Medium",
    "problem_slug": "maximum-length-of-a-concatenated-string-with-unique-characters",
    "topics": [
      "Array",
      "String",
      "Backtracking",
      "Bit Manipulation"
    ],
    "description": "You are given an array of strings arr. A string s is formed by the concatenation of a subsequence of arr that has unique characters.\nReturn the maximum possible length of s.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Tiling a Rectangle with the Fewest Squares",
    "problem_id": "1361",
    "frontend_id": "1240",
    "difficulty": "Hard",
    "problem_slug": "tiling-a-rectangle-with-the-fewest-squares",
    "topics": [
      "Backtracking"
    ],
    "description": "Given a rectangle of size n x m, return the minimum number of integer-sided squares that tile the rectangle.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Swaps to Make Strings Equal",
    "problem_id": "1369",
    "frontend_id": "1247",
    "difficulty": "Medium",
    "problem_slug": "minimum-swaps-to-make-strings-equal",
    "topics": [
      "Math",
      "String",
      "Greedy"
    ],
    "description": "You are given two strings s1 and s2 of equal length consisting of letters \"x\" and \"y\" only. Your task is to make these two strings equal to each other. You can swap any two characters that belong to different strings, which means: swap s1[i] and s2[j].\nReturn the minimum number of swaps required to make s1 and s2 equal, or return -1 if it is impossible to do so.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Number of Nice Subarrays",
    "problem_id": "1370",
    "frontend_id": "1248",
    "difficulty": "Medium",
    "problem_slug": "count-number-of-nice-subarrays",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.\nReturn the number of nice sub-arrays.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Remove to Make Valid Parentheses",
    "problem_id": "1371",
    "frontend_id": "1249",
    "difficulty": "Medium",
    "problem_slug": "minimum-remove-to-make-valid-parentheses",
    "topics": [
      "String",
      "Stack"
    ],
    "description": "Given a string s of '(' , ')' and lowercase English characters.\nYour task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.\nFormally, a parentheses string is valid if and only if:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check If It Is a Good Array",
    "problem_id": "1372",
    "frontend_id": "1250",
    "difficulty": "Hard",
    "problem_slug": "check-if-it-is-a-good-array",
    "topics": [
      "Array",
      "Math",
      "Number Theory"
    ],
    "description": "Given an array nums of positive integers. Your task is to select some subset of nums, multiply each element by an integer and add all these numbers. The array is said to be good if you can obtain a sum of 1 from the array by any possible subset and multiplicand.\nReturn True if the array is good otherwise return False.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Average Selling Price",
    "problem_id": "1390",
    "frontend_id": "1251",
    "difficulty": "Easy",
    "problem_slug": "average-selling-price",
    "topics": [
      "Database"
    ],
    "description": "Table: Prices\nTable: UnitsSold\nWrite a solution to find the average selling price for each product. average_price should be rounded to 2 decimal places. If a product does not have any sold units, its average selling price is assumed to be 0.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Cells with Odd Values in a Matrix",
    "problem_id": "1378",
    "frontend_id": "1252",
    "difficulty": "Easy",
    "problem_slug": "cells-with-odd-values-in-a-matrix",
    "topics": [
      "Array",
      "Math",
      "Simulation"
    ],
    "description": "There is an m x n matrix that is initialized to all 0's. There is also a 2D array indices where each indices[i] = [ri, ci] represents a 0-indexed location to perform some increment operations on the matrix.\nFor each location indices[i], do both of the following:\nGiven m, n, and indices, return the number of odd-valued cells in the matrix after applying the increment to all locations in indices.\nExample 1:\nExample 2:\nConstraints:\nFollow up: Could you solve this in O(n + m + indices.length) time with only O(n + m) extra space?"
  },
  {
    "title": "Reconstruct a 2-Row Binary Matrix",
    "problem_id": "1379",
    "frontend_id": "1253",
    "difficulty": "Medium",
    "problem_slug": "reconstruct-a-2-row-binary-matrix",
    "topics": [
      "Array",
      "Greedy",
      "Matrix"
    ],
    "description": "Given the following details of a matrix with n columns and 2 rows :\nYour task is to reconstruct the matrix with upper, lower and colsum.\nReturn it as a 2-D integer array.\nIf there are more than one valid solution, any of them will be accepted.\nIf no valid solution exists, return an empty 2-D array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Closed Islands",
    "problem_id": "1380",
    "frontend_id": "1254",
    "difficulty": "Medium",
    "problem_slug": "number-of-closed-islands",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix"
    ],
    "description": "Given a 2D grid consists of 0s (land) and 1s (water).  An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s.\nReturn the number of closed islands.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Score Words Formed by Letters",
    "problem_id": "1381",
    "frontend_id": "1255",
    "difficulty": "Hard",
    "problem_slug": "maximum-score-words-formed-by-letters",
    "topics": [
      "Array",
      "String",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "Given a list of words, list of  single letters (might be repeating) and score of every character.\nReturn the maximum score of any valid set of words formed by using the given letters (words[i] cannot be used two or more times).\nIt is not necessary to use all characters in letters and each letter can only be used once. Score of letters 'a', 'b', 'c', ... ,'z' is given by score[0], score[1], ... , score[25] respectively.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Shift 2D Grid",
    "problem_id": "1386",
    "frontend_id": "1260",
    "difficulty": "Easy",
    "problem_slug": "shift-2d-grid",
    "topics": [
      "Array",
      "Matrix",
      "Simulation"
    ],
    "description": "Given a 2D grid of size m x n and an integer k. You need to shift the grid k times.\nIn one shift operation:\nReturn the 2D grid after applying shift operation k times.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Elements in a Contaminated Binary Tree",
    "problem_id": "1387",
    "frontend_id": "1261",
    "difficulty": "Medium",
    "problem_slug": "find-elements-in-a-contaminated-binary-tree",
    "topics": [
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Design",
      "Binary Tree"
    ],
    "description": "Given a binary tree with the following rules:\nNow the binary tree is contaminated, which means all treeNode.val have been changed to -1.\nImplement the FindElements class:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Greatest Sum Divisible by Three",
    "problem_id": "1388",
    "frontend_id": "1262",
    "difficulty": "Medium",
    "problem_slug": "greatest-sum-divisible-by-three",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Greedy",
      "Sorting"
    ],
    "description": "Given an integer array nums, return the maximum possible sum of elements of the array such that it is divisible by three.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Moves to Move a Box to Their Target Location",
    "problem_id": "1389",
    "frontend_id": "1263",
    "difficulty": "Hard",
    "problem_slug": "minimum-moves-to-move-a-box-to-their-target-location",
    "topics": [
      "Array",
      "Breadth-First Search",
      "Heap (Priority Queue)",
      "Matrix"
    ],
    "description": "A storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations.\nThe game is represented by an m x n grid of characters grid where each element is a wall, floor, or box.\nYour task is to move the box 'B' to the target position 'T' under the following rules:\nReturn the minimum number of pushes to move the box to the target. If there is no way to reach the target, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Time Visiting All Points",
    "problem_id": "1395",
    "frontend_id": "1266",
    "difficulty": "Easy",
    "problem_slug": "minimum-time-visiting-all-points",
    "topics": [
      "Array",
      "Math",
      "Geometry"
    ],
    "description": "On a 2D plane, there are n points with integer coordinates points[i] = [xi, yi]. Return the minimum time in seconds to visit all the points in the order given by points.\nYou can move according to these rules:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Servers that Communicate",
    "problem_id": "1396",
    "frontend_id": "1267",
    "difficulty": "Medium",
    "problem_slug": "count-servers-that-communicate",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix",
      "Counting"
    ],
    "description": "You are given a map of a server center, represented as a m * n integer matrix grid, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.\n\nReturn the number of servers that communicate with any other server.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Search Suggestions System",
    "problem_id": "1397",
    "frontend_id": "1268",
    "difficulty": "Medium",
    "problem_slug": "search-suggestions-system",
    "topics": [
      "Array",
      "String",
      "Binary Search",
      "Trie",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given an array of strings products and a string searchWord.\nDesign a system that suggests at most three product names from products after each character of searchWord is typed. Suggested products should have common prefix with searchWord. If there are more than three products with a common prefix return the three lexicographically minimums products.\nReturn a list of lists of the suggested products after each character of searchWord is typed.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Ways to Stay in the Same Place After Some Steps",
    "problem_id": "1398",
    "frontend_id": "1269",
    "difficulty": "Hard",
    "problem_slug": "number-of-ways-to-stay-in-the-same-place-after-some-steps",
    "topics": [
      "Dynamic Programming"
    ],
    "description": "You have a pointer at index 0 in an array of size arrLen. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time).\nGiven two integers steps and arrLen, return the number of ways such that your pointer is still at index 0 after exactly steps steps. Since the answer may be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Winner on a Tic Tac Toe Game",
    "problem_id": "1400",
    "frontend_id": "1275",
    "difficulty": "Easy",
    "problem_slug": "find-winner-on-a-tic-tac-toe-game",
    "topics": [
      "Array",
      "Hash Table",
      "Matrix",
      "Simulation"
    ],
    "description": "Tic-tac-toe is played by two players A and B on a 3 x 3 grid. The rules of Tic-Tac-Toe are:\nGiven a 2D integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli]. return the winner of the game if it exists (A or B). In case the game ends in a draw return \"Draw\". If there are still movements to play return \"Pending\".\nYou can assume that moves is valid (i.e., it follows the rules of Tic-Tac-Toe), the grid is initially empty, and A will play first.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Burgers with No Waste of Ingredients",
    "problem_id": "1401",
    "frontend_id": "1276",
    "difficulty": "Medium",
    "problem_slug": "number-of-burgers-with-no-waste-of-ingredients",
    "topics": [
      "Math"
    ],
    "description": "Given two integers tomatoSlices and cheeseSlices. The ingredients of different burgers are as follows:\nReturn [total_jumbo, total_small] so that the number of remaining tomatoSlices equal to 0 and the number of remaining cheeseSlices equal to 0. If it is not possible to make the remaining tomatoSlices and cheeseSlices equal to 0 return [].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Square Submatrices with All Ones",
    "problem_id": "1402",
    "frontend_id": "1277",
    "difficulty": "Medium",
    "problem_slug": "count-square-submatrices-with-all-ones",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Palindrome Partitioning III",
    "problem_id": "1403",
    "frontend_id": "1278",
    "difficulty": "Hard",
    "problem_slug": "palindrome-partitioning-iii",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given a string s containing lowercase letters and an integer k. You need to :\nReturn the minimal number of characters that you need to change to divide the string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Students and Examinations",
    "problem_id": "1415",
    "frontend_id": "1280",
    "difficulty": "Easy",
    "problem_slug": "students-and-examinations",
    "topics": [
      "Database"
    ],
    "description": "Table: Students\nTable: Subjects\nTable: Examinations\nWrite a solution to find the number of times each student attended each exam.\nReturn the result table ordered by student_id and subject_name.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Subtract the Product and Sum of Digits of an Integer",
    "problem_id": "1406",
    "frontend_id": "1281",
    "difficulty": "Easy",
    "problem_slug": "subtract-the-product-and-sum-of-digits-of-an-integer",
    "topics": [
      "Math"
    ],
    "description": "Example 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Group the People Given the Group Size They Belong To",
    "problem_id": "1407",
    "frontend_id": "1282",
    "difficulty": "Medium",
    "problem_slug": "group-the-people-given-the-group-size-they-belong-to",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy"
    ],
    "description": "There are n people that are split into some unknown number of groups. Each person is labeled with a unique ID from 0 to n - 1.\nYou are given an integer array groupSizes, where groupSizes[i] is the size of the group that person i is in. For example, if groupSizes[1] = 3, then person 1 must be in a group of size 3.\nReturn a list of groups such that each person i is in a group of size groupSizes[i].\nEach person should appear in exactly one group, and every person must be in a group. If there are multiple answers, return any of them. It is guaranteed that there will be at least one valid solution for the given input.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Smallest Divisor Given a Threshold",
    "problem_id": "1408",
    "frontend_id": "1283",
    "difficulty": "Medium",
    "problem_slug": "find-the-smallest-divisor-given-a-threshold",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "Given an array of integers nums and an integer threshold, we will choose a positive integer divisor, divide all the array by it, and sum the division's result. Find the smallest divisor such that the result mentioned above is less than or equal to threshold.\nEach result of the division is rounded to the nearest integer greater than or equal to that element. (For example: 7/3 = 3 and 10/2 = 5).\nThe test cases are generated so that there will be an answer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
    "problem_id": "1409",
    "frontend_id": "1284",
    "difficulty": "Hard",
    "problem_slug": "minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix",
    "topics": [
      "Array",
      "Hash Table",
      "Bit Manipulation",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "Given a m x n binary matrix mat. In one step, you can choose one cell and flip it and all the four neighbors of it if they exist (Flip is changing 1 to 0 and 0 to 1). A pair of cells are called neighbors if they share one edge.\nReturn the minimum number of steps required to convert mat to a zero matrix or -1 if you cannot.\nA binary matrix is a matrix with all cells equal to 0 or 1 only.\nA zero matrix is a matrix with all cells equal to 0.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Iterator for Combination",
    "problem_id": "1211",
    "frontend_id": "1286",
    "difficulty": "Medium",
    "problem_slug": "iterator-for-combination",
    "topics": [
      "String",
      "Backtracking",
      "Design",
      "Iterator"
    ],
    "description": "Design the CombinationIterator class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Element Appearing More Than 25% In Sorted Array",
    "problem_id": "1221",
    "frontend_id": "1287",
    "difficulty": "Easy",
    "problem_slug": "element-appearing-more-than-25-in-sorted-array",
    "topics": [
      "Array"
    ],
    "description": "Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Remove Covered Intervals",
    "problem_id": "1222",
    "frontend_id": "1288",
    "difficulty": "Medium",
    "problem_slug": "remove-covered-intervals",
    "topics": [
      "Array",
      "Sorting"
    ],
    "description": "Given an array intervals where intervals[i] = [li, ri] represent the interval [li, ri), remove all intervals that are covered by another interval in the list.\nThe interval [a, b) is covered by the interval [c, d) if and only if c <= a and b <= d.\nReturn the number of remaining intervals.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Falling Path Sum II",
    "problem_id": "1224",
    "frontend_id": "1289",
    "difficulty": "Hard",
    "problem_slug": "minimum-falling-path-sum-ii",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "Given an n x n integer matrix grid, return the minimum sum of a falling path with non-zero shifts.\nA falling path with non-zero shifts is a choice of exactly one element from each row of grid such that no two elements chosen in adjacent rows are in the same column.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Convert Binary Number in a Linked List to Integer",
    "problem_id": "1411",
    "frontend_id": "1290",
    "difficulty": "Easy",
    "problem_slug": "convert-binary-number-in-a-linked-list-to-integer",
    "topics": [
      "Linked List",
      "Math"
    ],
    "description": "Given head which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.\nReturn the decimal value of the number in the linked list.\nThe most significant bit is at the head of the linked list.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sequential Digits",
    "problem_id": "1212",
    "frontend_id": "1291",
    "difficulty": "Medium",
    "problem_slug": "sequential-digits",
    "topics": [
      "Enumeration"
    ],
    "description": "An integer has sequential digits if and only if each digit in the number is one more than the previous digit.\nReturn a sorted list of all the integers in the range [low, high] inclusive that have sequential digits.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
    "problem_id": "1413",
    "frontend_id": "1292",
    "difficulty": "Medium",
    "problem_slug": "maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold",
    "topics": [
      "Array",
      "Binary Search",
      "Matrix",
      "Prefix Sum"
    ],
    "description": "Given a m x n matrix mat and an integer threshold, return the maximum side-length of a square with a sum less than or equal to threshold or return 0 if there is no such square.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Shortest Path in a Grid with Obstacles Elimination",
    "problem_id": "1414",
    "frontend_id": "1293",
    "difficulty": "Hard",
    "problem_slug": "shortest-path-in-a-grid-with-obstacles-elimination",
    "topics": [
      "Array",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "You are given an m x n integer matrix grid where each cell is either 0 (empty) or 1 (obstacle). You can move up, down, left, or right from and to an empty cell in one step.\nReturn the minimum number of steps to walk from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1) given that you can eliminate at most k obstacles. If it is not possible to find such walk return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Numbers with Even Number of Digits",
    "problem_id": "1421",
    "frontend_id": "1295",
    "difficulty": "Easy",
    "problem_slug": "find-numbers-with-even-number-of-digits",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "Given an array nums of integers, return how many of them contain an even number of digits.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Divide Array in Sets of K Consecutive Numbers",
    "problem_id": "1422",
    "frontend_id": "1296",
    "difficulty": "Medium",
    "problem_slug": "divide-array-in-sets-of-k-consecutive-numbers",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Sorting"
    ],
    "description": "Given an array of integers nums and a positive integer k, check whether it is possible to divide this array into sets of k consecutive numbers.\nReturn true if it is possible. Otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Number of Occurrences of a Substring",
    "problem_id": "1423",
    "frontend_id": "1297",
    "difficulty": "Medium",
    "problem_slug": "maximum-number-of-occurrences-of-a-substring",
    "topics": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "Given a string s, return the maximum number of occurrences of any substring under the following rules:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Candies You Can Get from Boxes",
    "problem_id": "1424",
    "frontend_id": "1298",
    "difficulty": "Hard",
    "problem_slug": "maximum-candies-you-can-get-from-boxes",
    "topics": [
      "Array",
      "Breadth-First Search",
      "Graph"
    ],
    "description": "You have n boxes labeled from 0 to n - 1. You are given four arrays: status, candies, keys, and containedBoxes where:\nYou are given an integer array initialBoxes that contains the labels of the boxes you initially have. You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.\nReturn the maximum number of candies you can get following the rules above.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Replace Elements with Greatest Element on Right Side",
    "problem_id": "1231",
    "frontend_id": "1299",
    "difficulty": "Easy",
    "problem_slug": "replace-elements-with-greatest-element-on-right-side",
    "topics": [
      "Array"
    ],
    "description": "Given an array arr, replace every element in that array with the greatest element among the elements to its right, and replace the last element with -1.\nAfter doing so, return the array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Mutated Array Closest to Target",
    "problem_id": "1232",
    "frontend_id": "1300",
    "difficulty": "Medium",
    "problem_slug": "sum-of-mutated-array-closest-to-target",
    "topics": [
      "Array",
      "Binary Search",
      "Sorting"
    ],
    "description": "Given an integer array arr and a target value target, return the integer value such that when we change all the integers larger than value in the given array to be equal to value, the sum of the array gets as close as possible (in absolute difference) to target.\nIn case of a tie, return the minimum such integer.\nNotice that the answer is not neccesarilly a number from arr.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Paths with Max Score",
    "problem_id": "1234",
    "frontend_id": "1301",
    "difficulty": "Hard",
    "problem_slug": "number-of-paths-with-max-score",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "You are given a square board of characters. You can move on the board starting at the bottom right square marked with the character 'S'.\nYou need to reach the top left square marked with the character 'E'. The rest of the squares are labeled either with a numeric character 1, 2, ..., 9 or with an obstacle 'X'. In one move you can go up, left or up-left (diagonally) only if there is no obstacle there.\nReturn a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, taken modulo 10^9 + 7.\nIn case there is no path, return [0, 0].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Deepest Leaves Sum",
    "problem_id": "1254",
    "frontend_id": "1302",
    "difficulty": "Medium",
    "problem_slug": "deepest-leaves-sum",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Example 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find N Unique Integers Sum up to Zero",
    "problem_id": "1426",
    "frontend_id": "1304",
    "difficulty": "Easy",
    "problem_slug": "find-n-unique-integers-sum-up-to-zero",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "Given an integer n, return any array containing n unique integers such that they add up to 0.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "All Elements in Two Binary Search Trees",
    "problem_id": "1427",
    "frontend_id": "1305",
    "difficulty": "Medium",
    "problem_slug": "all-elements-in-two-binary-search-trees",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Sorting",
      "Binary Tree"
    ],
    "description": "Given two binary search trees root1 and root2, return a list containing all the integers from both trees sorted in ascending order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Jump Game III",
    "problem_id": "1428",
    "frontend_id": "1306",
    "difficulty": "Medium",
    "problem_slug": "jump-game-iii",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search"
    ],
    "description": "Given an array of non-negative integers arr, you are initially positioned at start index of the array. When you are at index i, you can jump to i + arr[i] or i - arr[i], check if you can reach any index with value 0.\nNotice that you can not jump outside of the array at any time.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Verbal Arithmetic Puzzle",
    "problem_id": "1429",
    "frontend_id": "1307",
    "difficulty": "Hard",
    "problem_slug": "verbal-arithmetic-puzzle",
    "topics": [
      "Array",
      "Math",
      "String",
      "Backtracking"
    ],
    "description": "Given an equation, represented by words on the left side and the result on the right side.\nYou need to check if the equation is solvable under the following rules:\nReturn true if the equation is solvable, otherwise return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Decrypt String from Alphabet to Integer Mapping",
    "problem_id": "1434",
    "frontend_id": "1309",
    "difficulty": "Easy",
    "problem_slug": "decrypt-string-from-alphabet-to-integer-mapping",
    "topics": [
      "String"
    ],
    "description": "You are given a string s formed by digits and '#'. We want to map s to English lowercase characters as follows:\nReturn the string formed after mapping.\nThe test cases are generated so that a unique mapping will always exist.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "XOR Queries of a Subarray",
    "problem_id": "1435",
    "frontend_id": "1310",
    "difficulty": "Medium",
    "problem_slug": "xor-queries-of-a-subarray",
    "topics": [
      "Array",
      "Bit Manipulation",
      "Prefix Sum"
    ],
    "description": "You are given an array arr of positive integers. You are also given the array queries where queries[i] = [lefti, righti].\nFor each query i compute the XOR of elements from lefti to righti (that is, arr[lefti] XOR arr[lefti + 1] XOR ... XOR arr[righti] ).\nReturn an array answer where answer[i] is the answer to the ith query.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Get Watched Videos by Your Friends",
    "problem_id": "1436",
    "frontend_id": "1311",
    "difficulty": "Medium",
    "problem_slug": "get-watched-videos-by-your-friends",
    "topics": [
      "Array",
      "Hash Table",
      "Breadth-First Search",
      "Graph",
      "Sorting"
    ],
    "description": "There are n people, each person has a unique id between 0 and n-1. Given the arrays watchedVideos and friends, where watchedVideos[i] and friends[i] contain the list of watched videos and the list of friends respectively for the person with id = i.\nLevel 1 of videos are all watched videos by your friends, level 2 of videos are all watched videos by the friends of your friends and so on. In general, the level k of videos are all watched videos by people with the shortest path exactly equal to k with you. Given your id and the level of videos, return the list of videos ordered by their frequencies (increasing). For videos with the same frequency order them alphabetically from least to greatest.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Insertion Steps to Make a String Palindrome",
    "problem_id": "1437",
    "frontend_id": "1312",
    "difficulty": "Hard",
    "problem_slug": "minimum-insertion-steps-to-make-a-string-palindrome",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "Given a string s. In one step you can insert any character at any index of the string.\nReturn the minimum number of steps to make s palindrome.\nA Palindrome String is one that reads the same backward as well as forward.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Decompress Run-Length Encoded List",
    "problem_id": "1241",
    "frontend_id": "1313",
    "difficulty": "Easy",
    "problem_slug": "decompress-run-length-encoded-list",
    "topics": [
      "Array"
    ],
    "description": "We are given a list nums of integers representing a list compressed with run-length encoding.\nConsider each adjacent pair of elements [freq, val] = [nums[2*i], nums[2*i+1]] (with i >= 0).  For each such pair, there are freq elements with value val concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list.\nReturn the decompressed list.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Matrix Block Sum",
    "problem_id": "1242",
    "frontend_id": "1314",
    "difficulty": "Medium",
    "problem_slug": "matrix-block-sum",
    "topics": [
      "Array",
      "Matrix",
      "Prefix Sum"
    ],
    "description": "Given a m x n matrix mat and an integer k, return a matrix answer where each answer[i][j] is the sum of all elements mat[r][c] for:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Nodes with Even-Valued Grandparent",
    "problem_id": "1243",
    "frontend_id": "1315",
    "difficulty": "Medium",
    "problem_slug": "sum-of-nodes-with-even-valued-grandparent",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the sum of values of nodes with an even-valued grandparent. If there are no nodes with an even-valued grandparent, return 0.\nA grandparent of a node is the parent of its parent if it exists.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Distinct Echo Substrings",
    "problem_id": "1244",
    "frontend_id": "1316",
    "difficulty": "Hard",
    "problem_slug": "distinct-echo-substrings",
    "topics": [
      "String",
      "Trie",
      "Rolling Hash",
      "Hash Function"
    ],
    "description": "Return the number of distinct non-empty substrings of text that can be written as the concatenation of some string with itself (i.e. it can be written as a + a where a is some string).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Convert Integer to the Sum of Two No-Zero Integers",
    "problem_id": "1440",
    "frontend_id": "1317",
    "difficulty": "Easy",
    "problem_slug": "convert-integer-to-the-sum-of-two-no-zero-integers",
    "topics": [
      "Math"
    ],
    "description": "No-Zero integer is a positive integer that does not contain any 0 in its decimal representation.\nGiven an integer n, return a list of two integers [a, b] where:\nThe test cases are generated so that there is at least one valid solution. If there are many valid solutions, you can return any of them.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Flips to Make a OR b Equal to c",
    "problem_id": "1441",
    "frontend_id": "1318",
    "difficulty": "Medium",
    "problem_slug": "minimum-flips-to-make-a-or-b-equal-to-c",
    "topics": [
      "Bit Manipulation"
    ],
    "description": "Given 3 positives numbers a, b and c. Return the minimum flips required in some bits of a and b to make ( a OR b == c ). (bitwise OR operation).\r\nFlip operation consists of change any single bit 1 to 0 or change the bit 0 to 1 in their binary representation.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Operations to Make Network Connected",
    "problem_id": "1442",
    "frontend_id": "1319",
    "difficulty": "Medium",
    "problem_slug": "number-of-operations-to-make-network-connected",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "description": "There are n computers numbered from 0 to n - 1 connected by ethernet cables connections forming a network where connections[i] = [ai, bi] represents a connection between computers ai and bi. Any computer can reach any other computer directly or indirectly through the network.\nYou are given an initial computer network connections. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected.\nReturn the minimum number of times you need to do this in order to make all the computers connected. If it is not possible, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Distance to Type a Word Using Two Fingers",
    "problem_id": "1443",
    "frontend_id": "1320",
    "difficulty": "Hard",
    "problem_slug": "minimum-distance-to-type-a-word-using-two-fingers",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "You have a keyboard layout as shown above in the X-Y plane, where each English uppercase letter is located at some coordinate.\nGiven the string word, return the minimum total distance to type such string using only two fingers.\nThe distance between coordinates (x1, y1) and (x2, y2) is |x1 - x2| + |y1 - y2|.\nNote that the initial positions of your two fingers are considered free so do not count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Restaurant Growth",
    "problem_id": "1452",
    "frontend_id": "1321",
    "difficulty": "Medium",
    "problem_slug": "restaurant-growth",
    "topics": [
      "Database"
    ],
    "description": "Table: Customer\nYou are the restaurant owner and you want to analyze a possible expansion (there will be at least one customer every day).\nCompute the moving average of how much the customer paid in a seven days window (i.e., current day + 6 days before). average_amount should be rounded to two decimal places.\nReturn the result table ordered by visited_on in ascending order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Maximum 69 Number",
    "problem_id": "1448",
    "frontend_id": "1323",
    "difficulty": "Easy",
    "problem_slug": "maximum-69-number",
    "topics": [
      "Math",
      "Greedy"
    ],
    "description": "You are given a positive integer num consisting only of digits 6 and 9.\nReturn the maximum number you can get by changing at most one digit (6 becomes 9, and 9 becomes 6).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Print Words Vertically",
    "problem_id": "1449",
    "frontend_id": "1324",
    "difficulty": "Medium",
    "problem_slug": "print-words-vertically",
    "topics": [
      "Array",
      "String",
      "Simulation"
    ],
    "description": "Given a string s. Return all the words vertically in the same order in which they appear in s.\r\nWords are returned as a list of strings, complete with spaces when is necessary. (Trailing spaces are not allowed).\r\nEach word would be put on only one column and that in one column there will be only one word.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Delete Leaves With a Given Value",
    "problem_id": "1450",
    "frontend_id": "1325",
    "difficulty": "Medium",
    "problem_slug": "delete-leaves-with-a-given-value",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given a binary tree root and an integer target, delete all the leaf nodes with value target.\nNote that once you delete a leaf node with value target, if its parent node becomes a leaf node and has the value target, it should also be deleted (you need to continue doing that until you cannot).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Taps to Open to Water a Garden",
    "problem_id": "1451",
    "frontend_id": "1326",
    "difficulty": "Hard",
    "problem_slug": "minimum-number-of-taps-to-open-to-water-a-garden",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "There is a one-dimensional garden on the x-axis. The garden starts at the point 0 and ends at the point n. (i.e., the length of the garden is n).\nThere are n + 1 taps located at points [0, 1, ..., n] in the garden.\nGiven an integer n and an integer array ranges of length n + 1 where ranges[i] (0-indexed) means the i-th tap can water the area [i - ranges[i], i + ranges[i]] if it was open.\nReturn the minimum number of taps that should be open to water the whole garden, If the garden cannot be watered return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "List the Products Ordered in a Period",
    "problem_id": "1462",
    "frontend_id": "1327",
    "difficulty": "Easy",
    "problem_slug": "list-the-products-ordered-in-a-period",
    "topics": [
      "Database"
    ],
    "description": "Table: Products\nTable: Orders\nWrite a solution to get the names of products that have at least 100 units ordered in February 2020 and their amount.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Break a Palindrome",
    "problem_id": "1252",
    "frontend_id": "1328",
    "difficulty": "Medium",
    "problem_slug": "break-a-palindrome",
    "topics": [
      "String",
      "Greedy"
    ],
    "description": "Given a palindromic string of lowercase English letters palindrome, replace exactly one character with any lowercase English letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible.\nReturn the resulting string. If there is no way to replace a character to make it not a palindrome, return an empty string.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, a has a character strictly smaller than the corresponding character in b. For example, \"abcc\" is lexicographically smaller than \"abcd\" because the first position they differ is at the fourth character, and 'c' is smaller than 'd'.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sort the Matrix Diagonally",
    "problem_id": "1253",
    "frontend_id": "1329",
    "difficulty": "Medium",
    "problem_slug": "sort-the-matrix-diagonally",
    "topics": [
      "Array",
      "Sorting",
      "Matrix"
    ],
    "description": "A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the matrix diagonal starting from mat[2][0], where mat is a 6 x 3 matrix, includes cells mat[2][0], mat[3][1], and mat[4][2].\nGiven an m x n matrix mat of integers, sort each matrix diagonal in ascending order and return the resulting matrix.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Reverse Subarray To Maximize Array Value",
    "problem_id": "1255",
    "frontend_id": "1330",
    "difficulty": "Hard",
    "problem_slug": "reverse-subarray-to-maximize-array-value",
    "topics": [
      "Array",
      "Math",
      "Greedy"
    ],
    "description": "You are given an integer array nums. The value of this array is defined as the sum of |nums[i] - nums[i + 1]| for all 0 <= i < nums.length - 1.\nYou are allowed to select any subarray of the given array and reverse it. You can perform this operation only once.\nFind maximum possible value of the final array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Rank Transform of an Array",
    "problem_id": "1256",
    "frontend_id": "1331",
    "difficulty": "Easy",
    "problem_slug": "rank-transform-of-an-array",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting"
    ],
    "description": "Given an array of integers arr, replace each element with its rank.\nThe rank represents how large the element is. The rank has the following rules:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Remove Palindromic Subsequences",
    "problem_id": "1454",
    "frontend_id": "1332",
    "difficulty": "Easy",
    "problem_slug": "remove-palindromic-subsequences",
    "topics": [
      "Two Pointers",
      "String"
    ],
    "description": "You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.\nReturn the minimum number of steps to make the given string empty.\nA string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.\nA string is called palindrome if is one that reads the same backward as well as forward.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Filter Restaurants by Vegan-Friendly, Price and Distance",
    "problem_id": "1455",
    "frontend_id": "1333",
    "difficulty": "Medium",
    "problem_slug": "filter-restaurants-by-vegan-friendly-price-and-distance",
    "topics": [
      "Array",
      "Sorting"
    ],
    "description": "Given the array restaurants where  restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]. You have to filter the restaurants using three filters.\nThe veganFriendly filter will be either true (meaning you should only include restaurants with veganFriendlyi set to true) or false (meaning you can include any restaurant). In addition, you have the filters maxPrice and maxDistance which are the maximum value for price and distance of restaurants you should consider respectively.\nReturn the array of restaurant IDs after filtering, ordered by rating from highest to lowest. For restaurants with the same rating, order them by id from highest to lowest. For simplicity veganFriendlyi and veganFriendly take value 1 when it is true, and 0 when it is false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
    "problem_id": "1456",
    "frontend_id": "1334",
    "difficulty": "Medium",
    "problem_slug": "find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance",
    "topics": [
      "Dynamic Programming",
      "Graph",
      "Shortest Path"
    ],
    "description": "There are n cities numbered from 0 to n-1. Given the array edges where edges[i] = [fromi, toi, weighti] represents a bidirectional and weighted edge between cities fromi and toi, and given the integer distanceThreshold.\nReturn the city with the smallest number of cities that are reachable through some path and whose distance is at most distanceThreshold, If there are multiple such cities, return the city with the greatest number.\nNotice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Difficulty of a Job Schedule",
    "problem_id": "1457",
    "frontend_id": "1335",
    "difficulty": "Hard",
    "problem_slug": "minimum-difficulty-of-a-job-schedule",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You want to schedule a list of jobs in d days. Jobs are dependent (i.e To work on the ith job, you have to finish all the jobs j where 0 <= j < i).\nYou have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the d days. The difficulty of a day is the maximum difficulty of a job done on that day.\nYou are given an integer array jobDifficulty and an integer d. The difficulty of the ith job is jobDifficulty[i].\nReturn the minimum difficulty of a job schedule. If you cannot find a schedule for the jobs return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "The K Weakest Rows in a Matrix",
    "problem_id": "1463",
    "frontend_id": "1337",
    "difficulty": "Easy",
    "problem_slug": "the-k-weakest-rows-in-a-matrix",
    "topics": [
      "Array",
      "Binary Search",
      "Sorting",
      "Heap (Priority Queue)",
      "Matrix"
    ],
    "description": "You are given an m x n binary matrix mat of 1's (representing soldiers) and 0's (representing civilians). The soldiers are positioned in front of the civilians. That is, all the 1's will appear to the left of all the 0's in each row.\nA row i is weaker than a row j if one of the following is true:\nReturn the indices of the k weakest rows in the matrix ordered from weakest to strongest.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Reduce Array Size to The Half",
    "problem_id": "1464",
    "frontend_id": "1338",
    "difficulty": "Medium",
    "problem_slug": "reduce-array-size-to-the-half",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given an integer array arr. You can choose a set of integers and remove all the occurrences of these integers in the array.\nReturn the minimum size of the set so that at least half of the integers of the array are removed.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Product of Splitted Binary Tree",
    "problem_id": "1465",
    "frontend_id": "1339",
    "difficulty": "Medium",
    "problem_slug": "maximum-product-of-splitted-binary-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized.\nReturn the maximum product of the sums of the two subtrees. Since the answer may be too large, return it modulo 109 + 7.\nNote that you need to maximize the answer before taking the mod and not after taking it.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Jump Game V",
    "problem_id": "1466",
    "frontend_id": "1340",
    "difficulty": "Hard",
    "problem_slug": "jump-game-v",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "Given an array of integers arr and an integer d. In one step you can jump from index i to index:\nIn addition, you can only jump from index i to index j if arr[i] > arr[j] and arr[i] > arr[k] for all indices k between i and j (More formally min(i, j) < k < max(i, j)).\nYou can choose any index of the array and start jumping. Return the maximum number of indices you can visit.\nNotice that you can not jump outside of the array at any time.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Movie Rating",
    "problem_id": "1480",
    "frontend_id": "1341",
    "difficulty": "Medium",
    "problem_slug": "movie-rating",
    "topics": [
      "Database"
    ],
    "description": "Table: Movies\nTable: Users\nTable: MovieRating\nWrite a solution to:\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Number of Steps to Reduce a Number to Zero",
    "problem_id": "1444",
    "frontend_id": "1342",
    "difficulty": "Easy",
    "problem_slug": "number-of-steps-to-reduce-a-number-to-zero",
    "topics": [
      "Math",
      "Bit Manipulation"
    ],
    "description": "Given an integer num, return the number of steps to reduce it to zero.\nIn one step, if the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
    "problem_id": "1445",
    "frontend_id": "1343",
    "difficulty": "Medium",
    "problem_slug": "number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold",
    "topics": [
      "Array",
      "Sliding Window"
    ],
    "description": "Given an array of integers arr and two integers k and threshold, return the number of sub-arrays of size k and average greater than or equal to threshold.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Angle Between Hands of a Clock",
    "problem_id": "1446",
    "frontend_id": "1344",
    "difficulty": "Medium",
    "problem_slug": "angle-between-hands-of-a-clock",
    "topics": [
      "Math"
    ],
    "description": "Given two numbers, hour and minutes, return the smaller angle (in degrees) formed between the hour and the minute hand.\nAnswers within 10-5 of the actual value will be accepted as correct.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Jump Game IV",
    "problem_id": "1447",
    "frontend_id": "1345",
    "difficulty": "Hard",
    "problem_slug": "jump-game-iv",
    "topics": [
      "Array",
      "Hash Table",
      "Breadth-First Search"
    ],
    "description": "Given an array of integers arr, you are initially positioned at the first index of the array.\nIn one step you can jump from index i to index:\nReturn the minimum number of steps to reach the last index of the array.\nNotice that you can not jump outside of the array at any time.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check If N and Its Double Exist",
    "problem_id": "1468",
    "frontend_id": "1346",
    "difficulty": "Easy",
    "problem_slug": "check-if-n-and-its-double-exist",
    "topics": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "description": "Given an array arr of integers, check if there exist two indices i and j such that :\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of Steps to Make Two Strings Anagram",
    "problem_id": "1469",
    "frontend_id": "1347",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-steps-to-make-two-strings-anagram",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "You are given two strings of the same length s and t. In one step you can choose any character of t and replace it with another character.\nReturn the minimum number of steps to make t an anagram of s.\nAn Anagram of a string is a string that contains the same characters with a different (or the same) ordering.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Tweet Counts Per Frequency",
    "problem_id": "1470",
    "frontend_id": "1348",
    "difficulty": "Medium",
    "problem_slug": "tweet-counts-per-frequency",
    "topics": [
      "Hash Table",
      "Binary Search",
      "Design",
      "Sorting",
      "Ordered Set"
    ],
    "description": "A social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. These periods can be partitioned into smaller time chunks based on a certain frequency (every minute, hour, or day).\nFor example, the period [10, 10000] (in seconds) would be partitioned into the following time chunks with these frequencies:\nNotice that the last chunk may be shorter than the specified frequency's chunk size and will always end with the end time of the period (10000 in the above example).\nDesign and implement an API to help the company with their analysis.\nImplement the TweetCounts class:\nExample:\nConstraints:"
  },
  {
    "title": "Maximum Students Taking Exam",
    "problem_id": "1471",
    "frontend_id": "1349",
    "difficulty": "Hard",
    "problem_slug": "maximum-students-taking-exam",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Matrix",
      "Bitmask"
    ],
    "description": "Given a m * n matrix seats  that represent seats distributions in a classroom. If a seat is broken, it is denoted by '#' character otherwise it is denoted by a '.' character.\nStudents can see the answers of those sitting next to the left, right, upper left and upper right, but he cannot see the answers of the student sitting directly in front or behind him. Return the maximum number of students that can take the exam together without any cheating being possible.\nStudents must be placed in seats in good condition.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Negative Numbers in a Sorted Matrix",
    "problem_id": "1476",
    "frontend_id": "1351",
    "difficulty": "Easy",
    "problem_slug": "count-negative-numbers-in-a-sorted-matrix",
    "topics": [
      "Array",
      "Binary Search",
      "Matrix"
    ],
    "description": "Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Product of the Last K Numbers",
    "problem_id": "1477",
    "frontend_id": "1352",
    "difficulty": "Medium",
    "problem_slug": "product-of-the-last-k-numbers",
    "topics": [
      "Array",
      "Math",
      "Design",
      "Data Stream",
      "Prefix Sum"
    ],
    "description": "Design an algorithm that accepts a stream of integers and retrieves the product of the last k integers of the stream.\nImplement the ProductOfNumbers class:\nThe test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.\nExample:\nConstraints:"
  },
  {
    "title": "Maximum Number of Events That Can Be Attended",
    "problem_id": "1478",
    "frontend_id": "1353",
    "difficulty": "Medium",
    "problem_slug": "maximum-number-of-events-that-can-be-attended",
    "topics": [
      "Array",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given an array of events where events[i] = [startDayi, endDayi]. Every event i starts at startDayi and ends at endDayi.\nYou can attend an event i at any day d where startDayi <= d <= endDayi. You can only attend one event at any time d.\nReturn the maximum number of events you can attend.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Construct Target Array With Multiple Sums",
    "problem_id": "1479",
    "frontend_id": "1354",
    "difficulty": "Hard",
    "problem_slug": "construct-target-array-with-multiple-sums",
    "topics": [
      "Array",
      "Heap (Priority Queue)"
    ],
    "description": "You are given an array target of n integers. From a starting array arr consisting of n 1's, you may perform the following procedure :\nReturn true if it is possible to construct the target array from arr, otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sort Integers by The Number of 1 Bits",
    "problem_id": "1458",
    "frontend_id": "1356",
    "difficulty": "Easy",
    "problem_slug": "sort-integers-by-the-number-of-1-bits",
    "topics": [
      "Array",
      "Bit Manipulation",
      "Sorting",
      "Counting"
    ],
    "description": "You are given an integer array arr. Sort the integers in the array in ascending order by the number of 1's in their binary representation and in case of two or more integers have the same number of 1's you have to sort them in ascending order.\nReturn the array after sorting it.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Apply Discount Every n Orders",
    "problem_id": "1459",
    "frontend_id": "1357",
    "difficulty": "Medium",
    "problem_slug": "apply-discount-every-n-orders",
    "topics": [
      "Array",
      "Hash Table",
      "Design"
    ],
    "description": "There is a supermarket that is frequented by many customers. The products sold at the supermarket are represented as two parallel integer arrays products and prices, where the ith product has an ID of products[i] and a price of prices[i].\nWhen a customer is paying, their bill is represented as two parallel integer arrays product and amount, where the jth product they purchased has an ID of product[j], and amount[j] is how much of the product they bought. Their subtotal is calculated as the sum of each amount[j] * (price of the jth product).\nThe supermarket decided to have a sale. Every nth customer paying for their groceries will be given a percentage discount. The discount amount is given by discount, where they will be given discount percent off their subtotal. More formally, if their subtotal is bill, then they would actually pay bill * ((100 - discount) / 100).\nImplement the Cashier class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Number of Substrings Containing All Three Characters",
    "problem_id": "1460",
    "frontend_id": "1358",
    "difficulty": "Medium",
    "problem_slug": "number-of-substrings-containing-all-three-characters",
    "topics": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "Given a string s consisting only of characters a, b and c.\nReturn the number of substrings containing at least one occurrence of all these characters a, b and c.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count All Valid Pickup and Delivery Options",
    "problem_id": "1461",
    "frontend_id": "1359",
    "difficulty": "Hard",
    "problem_slug": "count-all-valid-pickup-and-delivery-options",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "description": "Given n orders, each order consists of a pickup and a delivery service.\nCount all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i).\nSince the answer may be too large, return it modulo 10^9 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Days Between Two Dates",
    "problem_id": "1274",
    "frontend_id": "1360",
    "difficulty": "Easy",
    "problem_slug": "number-of-days-between-two-dates",
    "topics": [
      "Math",
      "String"
    ],
    "description": "Write a program to count the number of days between two dates.\nThe two dates are given as strings, their format is YYYY-MM-DD as shown in the examples.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Validate Binary Tree Nodes",
    "problem_id": "1275",
    "frontend_id": "1361",
    "difficulty": "Medium",
    "problem_slug": "validate-binary-tree-nodes",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph",
      "Binary Tree"
    ],
    "description": "You have n binary tree nodes numbered from 0 to n - 1 where node i has two children leftChild[i] and rightChild[i], return true if and only if all the given nodes form exactly one valid binary tree.\nIf node i has no left child then leftChild[i] will equal -1, similarly for the right child.\nNote that the nodes have no values and that we only use the node numbers in this problem.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Closest Divisors",
    "problem_id": "1276",
    "frontend_id": "1362",
    "difficulty": "Medium",
    "problem_slug": "closest-divisors",
    "topics": [
      "Math"
    ],
    "description": "Given an integer num, find the closest two integers in absolute difference whose product equals num + 1 or num + 2.\nReturn the two integers in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Largest Multiple of Three",
    "problem_id": "1277",
    "frontend_id": "1363",
    "difficulty": "Hard",
    "problem_slug": "largest-multiple-of-three",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Greedy",
      "Sorting"
    ],
    "description": "Given an array of digits digits, return the largest multiple of three that can be formed by concatenating some of the given digits in any order. If there is no answer return an empty string.\nSince the answer may not fit in an integer data type, return the answer as a string. Note that the returning answer must not contain unnecessary leading zeros.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "How Many Numbers Are Smaller Than the Current Number",
    "problem_id": "1482",
    "frontend_id": "1365",
    "difficulty": "Easy",
    "problem_slug": "how-many-numbers-are-smaller-than-the-current-number",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting",
      "Counting Sort"
    ],
    "description": "Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].\nReturn the answer in an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Rank Teams by Votes",
    "problem_id": "1483",
    "frontend_id": "1366",
    "difficulty": "Medium",
    "problem_slug": "rank-teams-by-votes",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Sorting",
      "Counting"
    ],
    "description": "In a special ranking system, each voter gives a rank from highest to lowest to all teams participating in the competition.\nThe ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter.\nYou are given an array of strings votes which is the votes of all voters in the ranking systems. Sort all teams according to the ranking system described above.\nReturn a string of all teams sorted by the ranking system.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Linked List in Binary Tree",
    "problem_id": "1484",
    "frontend_id": "1367",
    "difficulty": "Medium",
    "problem_slug": "linked-list-in-binary-tree",
    "topics": [
      "Linked List",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given a binary tree root and a linked list with head as the first node.\nReturn True if all the elements in the linked list starting from the head correspond to some downward path connected in the binary tree otherwise return False.\nIn this context downward path means a path that starts at some node and goes downwards.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Cost to Make at Least One Valid Path in a Grid",
    "problem_id": "1485",
    "frontend_id": "1368",
    "difficulty": "Hard",
    "problem_slug": "minimum-cost-to-make-at-least-one-valid-path-in-a-grid",
    "topics": [
      "Array",
      "Breadth-First Search",
      "Graph",
      "Heap (Priority Queue)",
      "Matrix",
      "Shortest Path"
    ],
    "description": "Given an m x n grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of grid[i][j] can be:\nNotice that there could be some signs on the cells of the grid that point outside the grid.\nYou will initially start at the upper left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1) following the signs on the grid. The valid path does not have to be the shortest.\nYou can modify the sign on a cell with cost = 1. You can modify the sign on a cell one time only.\nReturn the minimum cost to make the grid have at least one valid path.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Increasing Decreasing String",
    "problem_id": "1472",
    "frontend_id": "1370",
    "difficulty": "Easy",
    "problem_slug": "increasing-decreasing-string",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "You are given a string s. Reorder the string using the following algorithm:\nIf the smallest or largest character appears more than once, you may choose any occurrence to append to the result.\nReturn the resulting string after reordering s using this algorithm.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Longest Substring Containing Vowels in Even Counts",
    "problem_id": "1473",
    "frontend_id": "1371",
    "difficulty": "Medium",
    "problem_slug": "find-the-longest-substring-containing-vowels-in-even-counts",
    "topics": [
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Prefix Sum"
    ],
    "description": "Given the string s, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest ZigZag Path in a Binary Tree",
    "problem_id": "1474",
    "frontend_id": "1372",
    "difficulty": "Medium",
    "problem_slug": "longest-zigzag-path-in-a-binary-tree",
    "topics": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "You are given the root of a binary tree.\nA ZigZag path for a binary tree is defined as follow:\nZigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).\nReturn the longest ZigZag path contained in that tree.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Sum BST in Binary Tree",
    "problem_id": "1475",
    "frontend_id": "1373",
    "difficulty": "Hard",
    "problem_slug": "maximum-sum-bst-in-binary-tree",
    "topics": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given a binary tree root, return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).\nAssume a BST is defined as follows:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Generate a String With Characters That Have Odd Counts",
    "problem_id": "1490",
    "frontend_id": "1374",
    "difficulty": "Easy",
    "problem_slug": "generate-a-string-with-characters-that-have-odd-counts",
    "topics": [
      "String"
    ],
    "description": "Given an integer n, return a string with n characters such that each character in such string occurs an odd number of times.\nThe returned string must contain only lowercase English letters. If there are multiples valid strings, return any of them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Times Binary String Is Prefix-Aligned",
    "problem_id": "1491",
    "frontend_id": "1375",
    "difficulty": "Medium",
    "problem_slug": "number-of-times-binary-string-is-prefix-aligned",
    "topics": [
      "Array"
    ],
    "description": "You have a 1-indexed binary string of length n where all the bits are 0 initially. We will flip all the bits of this binary string (i.e., change them from 0 to 1) one by one. You are given a 1-indexed integer array flips where flips[i] indicates that the bit at index flips[i] will be flipped in the ith step.\nA binary string is prefix-aligned if, after the ith step, all the bits in the inclusive range [1, i] are ones and all the other bits are zeros.\nReturn the number of times the binary string is prefix-aligned during the flipping process.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Time Needed to Inform All Employees",
    "problem_id": "1492",
    "frontend_id": "1376",
    "difficulty": "Medium",
    "problem_slug": "time-needed-to-inform-all-employees",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search"
    ],
    "description": "A company has n employees with a unique ID for each employee from 0 to n - 1. The head of the company is the one with headID.\nEach employee has one direct manager given in the manager array where manager[i] is the direct manager of the i-th employee, manager[headID] = -1. Also, it is guaranteed that the subordination relationships have a tree structure.\nThe head of the company wants to inform all the company employees of an urgent piece of news. He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news.\nThe i-th employee needs informTime[i] minutes to inform all of his direct subordinates (i.e., After informTime[i] minutes, all his direct subordinates can start spreading the news).\nReturn the number of minutes needed to inform all the employees about the urgent news.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Frog Position After T Seconds",
    "problem_id": "1493",
    "frontend_id": "1377",
    "difficulty": "Hard",
    "problem_slug": "frog-position-after-t-seconds",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph"
    ],
    "description": "Given an undirected tree consisting of n vertices numbered from 1 to n. A frog starts jumping from vertex 1. In one second, the frog jumps from its current vertex to another unvisited vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.\nThe edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi.\nReturn the probability that after t seconds the frog is on the vertex target. Answers within 10-5 of the actual answer will be accepted.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Replace Employee ID With The Unique Identifier",
    "problem_id": "1509",
    "frontend_id": "1378",
    "difficulty": "Easy",
    "problem_slug": "replace-employee-id-with-the-unique-identifier",
    "topics": [
      "Database"
    ],
    "description": "Table: Employees\nTable: EmployeeUNI\nWrite a solution to show the unique ID of each user, If a user does not have a unique ID replace just show null.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
    "problem_id": "1498",
    "frontend_id": "1379",
    "difficulty": "Easy",
    "problem_slug": "find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given two binary trees original and cloned and given a reference to a node target in the original tree.\nThe cloned tree is a copy of the original tree.\nReturn a reference to the same node in the cloned tree.\nNote that you are not allowed to change any of the two trees or the target node and the answer must be a reference to a node in the cloned tree.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Could you solve the problem if repeated values on the tree are allowed?"
  },
  {
    "title": "Lucky Numbers in a Matrix",
    "problem_id": "1496",
    "frontend_id": "1380",
    "difficulty": "Easy",
    "problem_slug": "lucky-numbers-in-a-matrix",
    "topics": [
      "Array",
      "Matrix"
    ],
    "description": "Given an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order.\nA lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Design a Stack With Increment Operation",
    "problem_id": "1497",
    "frontend_id": "1381",
    "difficulty": "Medium",
    "problem_slug": "design-a-stack-with-increment-operation",
    "topics": [
      "Array",
      "Stack",
      "Design"
    ],
    "description": "Design a stack that supports increment operations on its elements.\nImplement the CustomStack class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Balance a Binary Search Tree",
    "problem_id": "1285",
    "frontend_id": "1382",
    "difficulty": "Medium",
    "problem_slug": "balance-a-binary-search-tree",
    "topics": [
      "Divide and Conquer",
      "Greedy",
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "Given the root of a binary search tree, return a balanced binary search tree with the same node values. If there is more than one answer, return any of them.\nA binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Performance of a Team",
    "problem_id": "1499",
    "frontend_id": "1383",
    "difficulty": "Hard",
    "problem_slug": "maximum-performance-of-a-team",
    "topics": [
      "Array",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given two integers n and k and two integer arrays speed and efficiency both of length n. There are n engineers numbered from 1 to n. speed[i] and efficiency[i] represent the speed and efficiency of the ith engineer respectively.\nChoose at most k different engineers out of the n engineers to form a team with the maximum performance.\nThe performance of a team is the sum of its engineers' speeds multiplied by the minimum efficiency among its engineers.\nReturn the maximum performance of this team. Since the answer can be a huge number, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Distance Value Between Two Arrays",
    "problem_id": "1486",
    "frontend_id": "1385",
    "difficulty": "Easy",
    "problem_slug": "find-the-distance-value-between-two-arrays",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "description": "Given two integer arrays arr1 and arr2, and the integer d, return the distance value between the two arrays.\nThe distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| <= d.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Cinema Seat Allocation",
    "problem_id": "1487",
    "frontend_id": "1386",
    "difficulty": "Medium",
    "problem_slug": "cinema-seat-allocation",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Bit Manipulation"
    ],
    "description": "A cinema has n rows of seats, numbered from 1 to n and there are ten seats in each row, labelled from 1 to 10 as shown in the figure above.\nGiven the array reservedSeats containing the numbers of seats already reserved, for example, reservedSeats[i] = [3,8] means the seat located in row 3 and labelled with 8 is already reserved.\nReturn the maximum number of four-person groups you can assign on the cinema seats. A four-person group occupies four adjacent seats in one single row. Seats across an aisle (such as [3,3] and [3,4]) are not considered to be adjacent, but there is an exceptional case on which an aisle split a four-person group, in that case, the aisle split a four-person group in the middle, which means to have two people on each side.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sort Integers by The Power Value",
    "problem_id": "1488",
    "frontend_id": "1387",
    "difficulty": "Medium",
    "problem_slug": "sort-integers-by-the-power-value",
    "topics": [
      "Dynamic Programming",
      "Memoization",
      "Sorting"
    ],
    "description": "The power of an integer x is defined as the number of steps needed to transform x into 1 using the following steps:\nFor example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 (3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1).\nGiven three integers lo, hi and k. The task is to sort all integers in the interval [lo, hi] by the power value in ascending order, if two or more integers have the same power value sort them by ascending order.\nReturn the kth integer in the range [lo, hi] sorted by the power value.\nNotice that for any integer x (lo <= x <= hi) it is guaranteed that x will transform into 1 using these steps and that the power of x is will fit in a 32-bit signed integer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Pizza With 3n Slices",
    "problem_id": "1489",
    "frontend_id": "1388",
    "difficulty": "Hard",
    "problem_slug": "pizza-with-3n-slices",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Greedy",
      "Heap (Priority Queue)"
    ],
    "description": "There is a pizza with 3n slices of varying size, you and your friends will take slices of pizza as follows:\nGiven an integer array slices that represent the sizes of the pizza slices in a clockwise direction, return the maximum possible sum of slice sizes that you can pick.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Create Target Array in the Given Order",
    "problem_id": "1505",
    "frontend_id": "1389",
    "difficulty": "Easy",
    "problem_slug": "create-target-array-in-the-given-order",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "Given two arrays of integers nums and index. Your task is to create target array under the following rules:\nReturn the target array.\nIt is guaranteed that the insertion operations will be valid.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Four Divisors",
    "problem_id": "1284",
    "frontend_id": "1390",
    "difficulty": "Medium",
    "problem_slug": "four-divisors",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "Given an integer array nums, return the sum of divisors of the integers in that array that have exactly four divisors. If there is no such integer in the array, return 0.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check if There is a Valid Path in a Grid",
    "problem_id": "1507",
    "frontend_id": "1391",
    "difficulty": "Medium",
    "problem_slug": "check-if-there-is-a-valid-path-in-a-grid",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix"
    ],
    "description": "You are given an m x n grid. Each cell of grid represents a street. The street of grid[i][j] can be:\nYou will initially start at the street of the upper-left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1). The path should only follow the streets.\nNotice that you are not allowed to change any street.\nReturn true if there is a valid path in the grid or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest Happy Prefix",
    "problem_id": "1508",
    "frontend_id": "1392",
    "difficulty": "Hard",
    "problem_slug": "longest-happy-prefix",
    "topics": [
      "String",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "description": "A string is called a happy prefix if is a non-empty prefix which is also a suffix (excluding itself).\nGiven a string s, return the longest happy prefix of s. Return an empty string \"\" if no such prefix exists.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Capital Gain/Loss",
    "problem_id": "1523",
    "frontend_id": "1393",
    "difficulty": "Medium",
    "problem_slug": "capital-gainloss",
    "topics": [
      "Database"
    ],
    "description": "Table: Stocks\nWrite a solution to report the Capital gain/loss for each stock.\nThe Capital gain/loss of a stock is the total gain or loss after buying and selling the stock one or many times.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Find Lucky Integer in an Array",
    "problem_id": "1510",
    "frontend_id": "1394",
    "difficulty": "Easy",
    "problem_slug": "find-lucky-integer-in-an-array",
    "topics": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "description": "Given an array of integers arr, a lucky integer is an integer that has a frequency in the array equal to its value.\nReturn the largest lucky integer in the array. If there is no lucky integer return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Number of Teams",
    "problem_id": "1511",
    "frontend_id": "1395",
    "difficulty": "Medium",
    "problem_slug": "count-number-of-teams",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Binary Indexed Tree",
      "Segment Tree"
    ],
    "description": "There are n soldiers standing in a line. Each soldier is assigned a unique rating value.\nYou have to form a team of 3 soldiers amongst them under the following rules:\nReturn the number of teams you can form given the conditions. (soldiers can be part of multiple teams).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Design Underground System",
    "problem_id": "1512",
    "frontend_id": "1396",
    "difficulty": "Medium",
    "problem_slug": "design-underground-system",
    "topics": [
      "Hash Table",
      "String",
      "Design"
    ],
    "description": "An underground railway system is keeping track of customer travel times between different stations. They are using this data to calculate the average time it takes to travel from one station to another.\nImplement the UndergroundSystem class:\nYou may assume all calls to the checkIn and checkOut methods are consistent. If a customer checks in at time t1 then checks out at time t2, then t1 < t2. All events happen in chronological order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find All Good Strings",
    "problem_id": "1513",
    "frontend_id": "1397",
    "difficulty": "Hard",
    "problem_slug": "find-all-good-strings",
    "topics": [
      "String",
      "Dynamic Programming",
      "String Matching"
    ],
    "description": "Given the strings s1 and s2 of size n and the string evil, return the number of good strings.\nA good string has size n, it is alphabetically greater than or equal to s1, it is alphabetically smaller than or equal to s2, and it does not contain the string evil as a substring. Since the answer can be a huge number, return this modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Largest Group",
    "problem_id": "1500",
    "frontend_id": "1399",
    "difficulty": "Easy",
    "problem_slug": "count-largest-group",
    "topics": [
      "Hash Table",
      "Math"
    ],
    "description": "You are given an integer n.\nWe need to group the numbers from 1 to n according to the sum of its digits. For example, the numbers 14 and 5 belong to the same group, whereas 13 and 3 belong to different groups.\nReturn the number of groups that have the largest size, i.e. the maximum number of elements.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Construct K Palindrome Strings",
    "problem_id": "1502",
    "frontend_id": "1400",
    "difficulty": "Medium",
    "problem_slug": "construct-k-palindrome-strings",
    "topics": [
      "Hash Table",
      "String",
      "Greedy",
      "Counting"
    ],
    "description": "Given a string s and an integer k, return true if you can use all the characters in s to construct non-empty k palindrome strings or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Circle and Rectangle Overlapping",
    "problem_id": "1501",
    "frontend_id": "1401",
    "difficulty": "Medium",
    "problem_slug": "circle-and-rectangle-overlapping",
    "topics": [
      "Math",
      "Geometry"
    ],
    "description": "You are given a circle represented as (radius, xCenter, yCenter) and an axis-aligned rectangle represented as (x1, y1, x2, y2), where (x1, y1) are the coordinates of the bottom-left corner, and (x2, y2) are the coordinates of the top-right corner of the rectangle.\nReturn true if the circle and rectangle are overlapped otherwise return false. In other words, check if there is any point (xi, yi) that belongs to the circle and the rectangle at the same time.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Reducing Dishes",
    "problem_id": "1503",
    "frontend_id": "1402",
    "difficulty": "Hard",
    "problem_slug": "reducing-dishes",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Greedy",
      "Sorting"
    ],
    "description": "A chef has collected data on the satisfaction level of his n dishes. Chef can cook any dish in 1 unit of time.\nLike-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. time[i] * satisfaction[i].\nReturn the maximum sum of like-time coefficient that the chef can obtain after preparing some amount of dishes.\nDishes can be prepared in any order and the chef can discard some dishes to get this maximum value.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Subsequence in Non-Increasing Order",
    "problem_id": "1519",
    "frontend_id": "1403",
    "difficulty": "Easy",
    "problem_slug": "minimum-subsequence-in-non-increasing-order",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "Given the array nums, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non included elements in such subsequence.\nIf there are multiple solutions, return the subsequence with minimum size and if there still exist multiple solutions, return the subsequence with the maximum total sum of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array.\nNote that the solution with the given constraints is guaranteed to be unique. Also return the answer sorted in non-increasing order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Steps to Reduce a Number in Binary Representation to One",
    "problem_id": "1520",
    "frontend_id": "1404",
    "difficulty": "Medium",
    "problem_slug": "number-of-steps-to-reduce-a-number-in-binary-representation-to-one",
    "topics": [
      "String",
      "Bit Manipulation",
      "Simulation"
    ],
    "description": "Given the binary representation of an integer as a string s, return the number of steps to reduce it to 1 under the following rules:\nIt is guaranteed that you can always reach one for all test cases.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest Happy String",
    "problem_id": "1304",
    "frontend_id": "1405",
    "difficulty": "Medium",
    "problem_slug": "longest-happy-string",
    "topics": [
      "String",
      "Greedy",
      "Heap (Priority Queue)"
    ],
    "description": "A string s is called happy if it satisfies the following conditions:\nGiven three integers a, b, and c, return the longest possible happy string. If there are multiple longest happy strings, return any of them. If there is no such string, return the empty string \"\".\nA substring is a contiguous sequence of characters within a string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Stone Game III",
    "problem_id": "1522",
    "frontend_id": "1406",
    "difficulty": "Hard",
    "problem_slug": "stone-game-iii",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Game Theory"
    ],
    "description": "Alice and Bob continue their games with piles of stones. There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue.\nAlice and Bob take turns, with Alice starting first. On each player's turn, that player can take 1, 2, or 3 stones from the first remaining stones in the row.\nThe score of each player is the sum of the values of the stones taken. The score of each player is 0 initially.\nThe objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. The game continues until all the stones have been taken.\nAssume Alice and Bob play optimally.\nReturn \"Alice\" if Alice will win, \"Bob\" if Bob will win, or \"Tie\" if they will end the game with the same score.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Top Travellers",
    "problem_id": "1541",
    "frontend_id": "1407",
    "difficulty": "Easy",
    "problem_slug": "top-travellers",
    "topics": [
      "Database"
    ],
    "description": "Table: Users\nTable: Rides\nWrite a solution to report the distance traveled by each user.\nReturn the result table ordered by travelled_distance in descending order, if two or more users traveled the same distance, order them by their name in ascending order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "String Matching in an Array",
    "problem_id": "1524",
    "frontend_id": "1408",
    "difficulty": "Easy",
    "problem_slug": "string-matching-in-an-array",
    "topics": [
      "Array",
      "String",
      "String Matching"
    ],
    "description": "Given an array of string words, return all strings in words that are a substring of another word. You can return the answer in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Queries on a Permutation With Key",
    "problem_id": "1525",
    "frontend_id": "1409",
    "difficulty": "Medium",
    "problem_slug": "queries-on-a-permutation-with-key",
    "topics": [
      "Array",
      "Binary Indexed Tree",
      "Simulation"
    ],
    "description": "Given the array queries of positive integers between 1 and m, you have to process all queries[i] (from i=0 to i=queries.length-1) according to the following rules:\nReturn an array containing the result for the given queries.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "HTML Entity Parser",
    "problem_id": "1526",
    "frontend_id": "1410",
    "difficulty": "Medium",
    "problem_slug": "html-entity-parser",
    "topics": [
      "Hash Table",
      "String"
    ],
    "description": "HTML entity parser is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself.\nThe special characters and their entities for HTML are:\nGiven the input text string to the HTML parser, you have to implement the entity parser.\nReturn the text after replacing the entities by the special characters.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Ways to Paint N × 3 Grid",
    "problem_id": "1527",
    "frontend_id": "1411",
    "difficulty": "Hard",
    "problem_slug": "number-of-ways-to-paint-n-3-grid",
    "topics": [
      "Dynamic Programming"
    ],
    "description": "You have a grid of size n x 3 and you want to paint each cell of the grid with exactly one of the three colors: Red, Yellow, or Green while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color).\nGiven n the number of rows of the grid, return the number of ways you can paint this grid. As the answer may grow large, the answer must be computed modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Value to Get Positive Step by Step Sum",
    "problem_id": "1514",
    "frontend_id": "1413",
    "difficulty": "Easy",
    "problem_slug": "minimum-value-to-get-positive-step-by-step-sum",
    "topics": [
      "Array",
      "Prefix Sum"
    ],
    "description": "Given an array of integers nums, you start with an initial positive value startValue.\nIn each iteration, you calculate the step by step sum of startValue plus elements in nums (from left to right).\nReturn the minimum positive value of startValue such that the step by step sum is never less than 1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
    "problem_id": "1515",
    "frontend_id": "1414",
    "difficulty": "Medium",
    "problem_slug": "find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k",
    "topics": [
      "Math",
      "Greedy"
    ],
    "description": "Given an integer k, return the minimum number of Fibonacci numbers whose sum is equal to k. The same Fibonacci number can be used multiple times.\nThe Fibonacci numbers are defined as:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "The k-th Lexicographical String of All Happy Strings of Length n",
    "problem_id": "1516",
    "frontend_id": "1415",
    "difficulty": "Medium",
    "problem_slug": "the-k-th-lexicographical-string-of-all-happy-strings-of-length-n",
    "topics": [
      "String",
      "Backtracking"
    ],
    "description": "A happy string is a string that:\nFor example, strings \"abc\", \"ac\", \"b\" and \"abcbabcbcb\" are all happy strings and strings \"aa\", \"baa\" and \"ababbc\" are not happy strings.\nGiven two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order.\nReturn the kth string of this list or return an empty string if there are less than k happy strings of length n.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Restore The Array",
    "problem_id": "1517",
    "frontend_id": "1416",
    "difficulty": "Hard",
    "problem_slug": "restore-the-array",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits s and all we know is that all integers in the array were in the range [1, k] and there are no leading zeros in the array.\nGiven the string s and the integer k, return the number of the possible arrays that can be printed as s using the mentioned program. Since the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Reformat The String",
    "problem_id": "1532",
    "frontend_id": "1417",
    "difficulty": "Easy",
    "problem_slug": "reformat-the-string",
    "topics": [
      "String"
    ],
    "description": "You are given an alphanumeric string s. (Alphanumeric string is a string consisting of lowercase English letters and digits).\nYou have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. That is, no two adjacent characters have the same type.\nReturn the reformatted string or return an empty string if it is impossible to reformat the string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Display Table of Food Orders in a Restaurant",
    "problem_id": "1533",
    "frontend_id": "1418",
    "difficulty": "Medium",
    "problem_slug": "display-table-of-food-orders-in-a-restaurant",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Sorting",
      "Ordered Set"
    ],
    "description": "Given the array orders, which represents the orders that customers have done in a restaurant. More specifically orders[i]=[customerNamei,tableNumberi,foodItemi] where customerNamei is the name of the customer, tableNumberi is the table customer sit at, and foodItemi is the item customer orders.\nReturn the restaurant's “display table”. The “display table” is a table whose row entries denote how many of each food item each table ordered. The first column is the table number and the remaining columns correspond to each food item in alphabetical order. The first row should be a header whose first column is “Table”, followed by the names of the food items. Note that the customer names are not part of the table. Additionally, the rows should be sorted in numerically increasing order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Frogs Croaking",
    "problem_id": "1534",
    "frontend_id": "1419",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-frogs-croaking",
    "topics": [
      "String",
      "Counting"
    ],
    "description": "You are given the string croakOfFrogs, which represents a combination of the string \"croak\" from different frogs, that is, multiple frogs can croak at the same time, so multiple \"croak\" are mixed.\nReturn the minimum number of different frogs to finish all the croaks in the given string.\nA valid \"croak\" means a frog is printing five letters 'c', 'r', 'o', 'a', and 'k' sequentially. The frogs have to print all five letters to finish a croak. If the given string is not a combination of a valid \"croak\" return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
    "problem_id": "1535",
    "frontend_id": "1420",
    "difficulty": "Hard",
    "problem_slug": "build-array-where-you-can-find-the-maximum-exactly-k-comparisons",
    "topics": [
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "description": "You are given three integers n, m and k. Consider the following algorithm to find the maximum element of an array of positive integers:\nYou should build the array arr which has the following properties:\nReturn the number of ways to build the array arr under the mentioned conditions. As the answer may grow large, the answer must be computed modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Score After Splitting a String",
    "problem_id": "1537",
    "frontend_id": "1422",
    "difficulty": "Easy",
    "problem_slug": "maximum-score-after-splitting-a-string",
    "topics": [
      "String",
      "Prefix Sum"
    ],
    "description": "Given a string s of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.e. left substring and right substring).\nThe score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Points You Can Obtain from Cards",
    "problem_id": "1538",
    "frontend_id": "1423",
    "difficulty": "Medium",
    "problem_slug": "maximum-points-you-can-obtain-from-cards",
    "topics": [
      "Array",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "There are several cards arranged in a row, and each card has an associated number of points. The points are given in the integer array cardPoints.\nIn one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.\nYour score is the sum of the points of the cards you have taken.\nGiven the integer array cardPoints and the integer k, return the maximum score you can obtain.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Diagonal Traverse II",
    "problem_id": "1539",
    "frontend_id": "1424",
    "difficulty": "Medium",
    "problem_slug": "diagonal-traverse-ii",
    "topics": [
      "Array",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "Given a 2D integer array nums, return all elements of nums in diagonal order as shown in the below images.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Constrained Subsequence Sum",
    "problem_id": "1286",
    "frontend_id": "1425",
    "difficulty": "Hard",
    "problem_slug": "constrained-subsequence-sum",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Queue",
      "Sliding Window",
      "Heap (Priority Queue)",
      "Monotonic Queue"
    ],
    "description": "Given an integer array nums and an integer k, return the maximum sum of a non-empty subsequence of that array such that for every two consecutive integers in the subsequence, nums[i] and nums[j], where i < j, the condition j - i <= k is satisfied.\nA subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Kids With the Greatest Number of Candies",
    "problem_id": "1528",
    "frontend_id": "1431",
    "difficulty": "Easy",
    "problem_slug": "kids-with-the-greatest-number-of-candies",
    "topics": [
      "Array"
    ],
    "description": "There are n kids with candies. You are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, and an integer extraCandies, denoting the number of extra candies that you have.\nReturn a boolean array result of length n, where result[i] is true if, after giving the ith kid all the extraCandies, they will have the greatest number of candies among all the kids, or false otherwise.\nNote that multiple kids can have the greatest number of candies.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Max Difference You Can Get From Changing an Integer",
    "problem_id": "1529",
    "frontend_id": "1432",
    "difficulty": "Medium",
    "problem_slug": "max-difference-you-can-get-from-changing-an-integer",
    "topics": [
      "Math",
      "Greedy"
    ],
    "description": "You are given an integer num. You will apply the following steps to num two separate times:\nLet a and b be the two results from applying the operation to num independently.\nReturn the max difference between a and b.\nNote that neither a nor b may have any leading zeros, and must not be 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check If a String Can Break Another String",
    "problem_id": "1530",
    "frontend_id": "1433",
    "difficulty": "Medium",
    "problem_slug": "check-if-a-string-can-break-another-string",
    "topics": [
      "String",
      "Greedy",
      "Sorting"
    ],
    "description": "Given two strings: s1 and s2 with the same size, check if some permutation of string s1 can break some permutation of string s2 or vice-versa. In other words s2 can break s1 or vice-versa.\nA string x can break string y (both of size n) if x[i] >= y[i] (in alphabetical order) for all i between 0 and n-1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Ways to Wear Different Hats to Each Other",
    "problem_id": "1531",
    "frontend_id": "1434",
    "difficulty": "Hard",
    "problem_slug": "number-of-ways-to-wear-different-hats-to-each-other",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "There are n people and 40 types of hats labeled from 1 to 40.\nGiven a 2D integer array hats, where hats[i] is a list of all hats preferred by the ith person.\nReturn the number of ways that n people can wear different hats from each other.\nSince the answer may be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Destination City",
    "problem_id": "1547",
    "frontend_id": "1436",
    "difficulty": "Easy",
    "problem_slug": "destination-city",
    "topics": [
      "Array",
      "Hash Table",
      "String"
    ],
    "description": "You are given the array paths, where paths[i] = [cityAi, cityBi] means there exists a direct path going from cityAi to cityBi. Return the destination city, that is, the city without any path outgoing to another city.\nIt is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check If All 1's Are at Least Length K Places Away",
    "problem_id": "1548",
    "frontend_id": "1437",
    "difficulty": "Easy",
    "problem_slug": "check-if-all-1s-are-at-least-length-k-places-away",
    "topics": [
      "Array"
    ],
    "description": "Given an binary array nums and an integer k, return true if all 1's are at least k places away from each other, otherwise return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
    "problem_id": "1549",
    "frontend_id": "1438",
    "difficulty": "Medium",
    "problem_slug": "longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit",
    "topics": [
      "Array",
      "Queue",
      "Sliding Window",
      "Heap (Priority Queue)",
      "Ordered Set",
      "Monotonic Queue"
    ],
    "description": "Given an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Kth Smallest Sum of a Matrix With Sorted Rows",
    "problem_id": "1550",
    "frontend_id": "1439",
    "difficulty": "Hard",
    "problem_slug": "find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows",
    "topics": [
      "Array",
      "Binary Search",
      "Heap (Priority Queue)",
      "Matrix"
    ],
    "description": "You are given an m x n matrix mat that has its rows sorted in non-decreasing order and an integer k.\nYou are allowed to choose exactly one element from each row to form an array.\nReturn the kth smallest array sum among all possible arrays.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Build an Array With Stack Operations",
    "problem_id": "1552",
    "frontend_id": "1441",
    "difficulty": "Medium",
    "problem_slug": "build-an-array-with-stack-operations",
    "topics": [
      "Array",
      "Stack",
      "Simulation"
    ],
    "description": "You are given an integer array target and an integer n.\nYou have an empty stack with the two following operations:\nYou also have a stream of the integers in the range [1, n].\nUse the two stack operations to make the numbers in the stack (from the bottom to the top) equal to target. You should follow the following rules:\nReturn the stack operations needed to build target following the mentioned rules. If there are multiple valid answers, return any of them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Triplets That Can Form Two Arrays of Equal XOR",
    "problem_id": "1553",
    "frontend_id": "1442",
    "difficulty": "Medium",
    "problem_slug": "count-triplets-that-can-form-two-arrays-of-equal-xor",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Bit Manipulation",
      "Prefix Sum"
    ],
    "description": "Given an array of integers arr.\nWe want to select three indices i, j and k where (0 <= i < j <= k < arr.length).\nLet's define a and b as follows:\nNote that ^ denotes the bitwise-xor operation.\nReturn the number of triplets (i, j and k) Where a == b.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Time to Collect All Apples in a Tree",
    "problem_id": "1554",
    "frontend_id": "1443",
    "difficulty": "Medium",
    "problem_slug": "minimum-time-to-collect-all-apples-in-a-tree",
    "topics": [
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search"
    ],
    "description": "Given an undirected tree consisting of n vertices numbered from 0 to n-1, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.\nThe edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. Additionally, there is a boolean array hasApple, where hasApple[i] = true means that vertex i has an apple; otherwise, it does not have any apple.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Ways of Cutting a Pizza",
    "problem_id": "1555",
    "frontend_id": "1444",
    "difficulty": "Hard",
    "problem_slug": "number-of-ways-of-cutting-a-pizza",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Memoization",
      "Matrix",
      "Prefix Sum"
    ],
    "description": "Given a rectangular pizza represented as a rows x cols matrix containing the following characters: 'A' (an apple) and '.' (empty cell) and given the integer k. You have to cut the pizza into k pieces using k-1 cuts.\nFor each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. If you cut the pizza vertically, give the left part of the pizza to a person. If you cut the pizza horizontally, give the upper part of the pizza to a person. Give the last piece of pizza to the last person.\nReturn the number of ways of cutting the pizza such that each piece contains at least one apple. Since the answer can be a huge number, return this modulo 10^9 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Consecutive Characters",
    "problem_id": "1542",
    "frontend_id": "1446",
    "difficulty": "Easy",
    "problem_slug": "consecutive-characters",
    "topics": [
      "String"
    ],
    "description": "The power of the string is the maximum length of a non-empty substring that contains only one unique character.\nGiven a string s, return the power of s.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Simplified Fractions",
    "problem_id": "1543",
    "frontend_id": "1447",
    "difficulty": "Medium",
    "problem_slug": "simplified-fractions",
    "topics": [
      "Math",
      "String",
      "Number Theory"
    ],
    "description": "Given an integer n, return a list of all simplified fractions between 0 and 1 (exclusive) such that the denominator is less-than-or-equal-to n. You can return the answer in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Good Nodes in Binary Tree",
    "problem_id": "1544",
    "frontend_id": "1448",
    "difficulty": "Medium",
    "problem_slug": "count-good-nodes-in-binary-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.\nReturn the number of good nodes in the binary tree.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Form Largest Integer With Digits That Add up to Target",
    "problem_id": "1545",
    "frontend_id": "1449",
    "difficulty": "Hard",
    "problem_slug": "form-largest-integer-with-digits-that-add-up-to-target",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "Given an array of integers cost and an integer target, return the maximum integer you can paint under the following rules:\nSince the answer may be very large, return it as a string. If there is no way to paint any integer given the condition, return \"0\".\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Students Doing Homework at a Given Time",
    "problem_id": "1560",
    "frontend_id": "1450",
    "difficulty": "Easy",
    "problem_slug": "number-of-students-doing-homework-at-a-given-time",
    "topics": [
      "Array"
    ],
    "description": "Given two integer arrays startTime and endTime and given an integer queryTime.\nThe ith student started doing their homework at the time startTime[i] and finished it at time endTime[i].\nReturn the number of students doing their homework at time queryTime. More formally, return the number of students where queryTime lays in the interval [startTime[i], endTime[i]] inclusive.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Rearrange Words in a Sentence",
    "problem_id": "1561",
    "frontend_id": "1451",
    "difficulty": "Medium",
    "problem_slug": "rearrange-words-in-a-sentence",
    "topics": [
      "String",
      "Sorting"
    ],
    "description": "Given a sentence text (A sentence is a string of space-separated words) in the following format:\nYour task is to rearrange the words in text such that all words are rearranged in an increasing order of their lengths. If two words have the same length, arrange them in their original order.\nReturn the new text following the format shown above.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "People Whose List of Favorite Companies Is Not a Subset of Another List",
    "problem_id": "1562",
    "frontend_id": "1452",
    "difficulty": "Medium",
    "problem_slug": "people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list",
    "topics": [
      "Array",
      "Hash Table",
      "String"
    ],
    "description": "Given the array favoriteCompanies where favoriteCompanies[i] is the list of favorites companies for the ith person (indexed from 0).\nReturn the indices of people whose list of favorite companies is not a subset of any other list of favorites companies. You must return the indices in increasing order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Number of Darts Inside of a Circular Dartboard",
    "problem_id": "1563",
    "frontend_id": "1453",
    "difficulty": "Hard",
    "problem_slug": "maximum-number-of-darts-inside-of-a-circular-dartboard",
    "topics": [
      "Array",
      "Math",
      "Geometry"
    ],
    "description": "Alice is throwing n darts on a very large wall. You are given an array darts where darts[i] = [xi, yi] is the position of the ith dart that Alice threw on the wall.\nBob knows the positions of the n darts on the wall. He wants to place a dartboard of radius r on the wall so that the maximum number of darts that Alice throws lie on the dartboard.\nGiven the integer r, return the maximum number of darts that can lie on the dartboard.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
    "problem_id": "1566",
    "frontend_id": "1455",
    "difficulty": "Easy",
    "problem_slug": "check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence",
    "topics": [
      "Two Pointers",
      "String",
      "String Matching"
    ],
    "description": "Given a sentence that consists of some words separated by a single space, and a searchWord, check if searchWord is a prefix of any word in sentence.\nReturn the index of the word in sentence (1-indexed) where searchWord is a prefix of this word. If searchWord is a prefix of more than one word, return the index of the first word (minimum index). If there is no such word return -1.\nA prefix of a string s is any leading contiguous substring of s.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Number of Vowels in a Substring of Given Length",
    "problem_id": "1567",
    "frontend_id": "1456",
    "difficulty": "Medium",
    "problem_slug": "maximum-number-of-vowels-in-a-substring-of-given-length",
    "topics": [
      "String",
      "Sliding Window"
    ],
    "description": "Given a string s and an integer k, return the maximum number of vowel letters in any substring of s with length k.\nVowel letters in English are 'a', 'e', 'i', 'o', and 'u'.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Pseudo-Palindromic Paths in a Binary Tree",
    "problem_id": "1568",
    "frontend_id": "1457",
    "difficulty": "Medium",
    "problem_slug": "pseudo-palindromic-paths-in-a-binary-tree",
    "topics": [
      "Bit Manipulation",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.\nReturn the number of pseudo-palindromic paths going from the root node to leaf nodes.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Max Dot Product of Two Subsequences",
    "problem_id": "1569",
    "frontend_id": "1458",
    "difficulty": "Hard",
    "problem_slug": "max-dot-product-of-two-subsequences",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "Given two arrays nums1 and nums2.\nReturn the maximum dot product between non-empty subsequences of nums1 and nums2 with the same length.\nA subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, [2,3,5] is a subsequence of [1,2,3,4,5] while [1,5,3] is not).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Make Two Arrays Equal by Reversing Subarrays",
    "problem_id": "1556",
    "frontend_id": "1460",
    "difficulty": "Easy",
    "problem_slug": "make-two-arrays-equal-by-reversing-subarrays",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting"
    ],
    "description": "You are given two integer arrays of equal length target and arr. In one step, you can select any non-empty subarray of arr and reverse it. You are allowed to make any number of steps.\nReturn true if you can make arr equal to target or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check If a String Contains All Binary Codes of Size K",
    "problem_id": "1557",
    "frontend_id": "1461",
    "difficulty": "Medium",
    "problem_slug": "check-if-a-string-contains-all-binary-codes-of-size-k",
    "topics": [
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Rolling Hash",
      "Hash Function"
    ],
    "description": "Given a binary string s and an integer k, return true if every binary code of length k is a substring of s. Otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Course Schedule IV",
    "problem_id": "1558",
    "frontend_id": "1462",
    "difficulty": "Medium",
    "problem_slug": "course-schedule-iv",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort"
    ],
    "description": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course ai first if you want to take course bi.\nPrerequisites can also be indirect. If course a is a prerequisite of course b, and course b is a prerequisite of course c, then course a is a prerequisite of course c.\nYou are also given an array queries where queries[j] = [uj, vj]. For the jth query, you should answer whether course uj is a prerequisite of course vj or not.\nReturn a boolean array answer, where answer[j] is the answer to the jth query.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Cherry Pickup II",
    "problem_id": "1559",
    "frontend_id": "1463",
    "difficulty": "Hard",
    "problem_slug": "cherry-pickup-ii",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "You are given a rows x cols matrix grid representing a field of cherries where grid[i][j] represents the number of cherries that you can collect from the (i, j) cell.\nYou have two robots that can collect cherries for you:\nReturn the maximum number of cherries collection using both robots by following the rules below:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Product of Two Elements in an Array",
    "problem_id": "1574",
    "frontend_id": "1464",
    "difficulty": "Easy",
    "problem_slug": "maximum-product-of-two-elements-in-an-array",
    "topics": [
      "Array",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "Example 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
    "problem_id": "1575",
    "frontend_id": "1465",
    "difficulty": "Medium",
    "problem_slug": "maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given a rectangular cake of size h x w and two arrays of integers horizontalCuts and verticalCuts where:\nReturn the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays horizontalCuts and verticalCuts. Since the answer can be a large number, return this modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Reorder Routes to Make All Paths Lead to the City Zero",
    "problem_id": "1576",
    "frontend_id": "1466",
    "difficulty": "Medium",
    "problem_slug": "reorder-routes-to-make-all-paths-lead-to-the-city-zero",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph"
    ],
    "description": "There are n cities numbered from 0 to n - 1 and n - 1 roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.\nRoads are represented by connections where connections[i] = [ai, bi] represents a road from city ai to city bi.\nThis year, there will be a big event in the capital (city 0), and many people want to travel to this city.\nYour task consists of reorienting some roads such that each city can visit the city 0. Return the minimum number of edges changed.\nIt's guaranteed that each city can reach city 0 after reorder.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
    "problem_id": "1577",
    "frontend_id": "1467",
    "difficulty": "Hard",
    "problem_slug": "probability-of-a-two-boxes-having-the-same-number-of-distinct-balls",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Backtracking",
      "Combinatorics",
      "Probability and Statistics"
    ],
    "description": "Given 2n balls of k distinct colors. You will be given an integer array balls of size k where balls[i] is the number of balls of color i.\nAll the balls will be shuffled uniformly at random, then we will distribute the first n balls to the first box and the remaining n balls to the other box (Please read the explanation of the second example carefully).\nPlease note that the two boxes are considered different. For example, if we have two balls of colors a and b, and two boxes [] and (), then the distribution [a] (b) is considered different than the distribution [b] (a) (Please read the explanation of the first example carefully).\nReturn the probability that the two boxes have the same number of distinct balls. Answers within 10-5 of the actual value will be accepted as correct.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Shuffle the Array",
    "problem_id": "1580",
    "frontend_id": "1470",
    "difficulty": "Easy",
    "problem_slug": "shuffle-the-array",
    "topics": [
      "Array"
    ],
    "description": "Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].\nReturn the array in the form [x1,y1,x2,y2,...,xn,yn].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "The k Strongest Values in an Array",
    "problem_id": "1581",
    "frontend_id": "1471",
    "difficulty": "Medium",
    "problem_slug": "the-k-strongest-values-in-an-array",
    "topics": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "description": "Given an array of integers arr and an integer k.\nA value arr[i] is said to be stronger than a value arr[j] if |arr[i] - m| > |arr[j] - m| where m is the centre of the array.\nIf |arr[i] - m| == |arr[j] - m|, then arr[i] is said to be stronger than arr[j] if arr[i] > arr[j].\nReturn a list of the strongest k values in the array. return the answer in any arbitrary order.\nThe centre is the middle value in an ordered integer list. More formally, if the length of the list is n, the centre is the element in position ((n - 1) / 2) in the sorted list (0-indexed).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Design Browser History",
    "problem_id": "1582",
    "frontend_id": "1472",
    "difficulty": "Medium",
    "problem_slug": "design-browser-history",
    "topics": [
      "Array",
      "Linked List",
      "Stack",
      "Design",
      "Doubly-Linked List",
      "Data Stream"
    ],
    "description": "You have a browser of one tab where you start on the homepage and you can visit another url, get back in the history number of steps or move forward in the history number of steps.\nImplement the BrowserHistory class:\nExample:\nConstraints:"
  },
  {
    "title": "Paint House III",
    "problem_id": "1583",
    "frontend_id": "1473",
    "difficulty": "Hard",
    "problem_slug": "paint-house-iii",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "There is a row of m houses in a small city, each house must be painted with one of the n colors (labeled from 1 to n), some houses that have been painted last summer should not be painted again.\nA neighborhood is a maximal group of continuous houses that are painted with the same color.\nGiven an array houses, an m x n matrix cost and an integer target where:\nReturn the minimum cost of painting all the remaining houses in such a way that there are exactly target neighborhoods. If it is not possible, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Final Prices With a Special Discount in a Shop",
    "problem_id": "1570",
    "frontend_id": "1475",
    "difficulty": "Easy",
    "problem_slug": "final-prices-with-a-special-discount-in-a-shop",
    "topics": [
      "Array",
      "Stack",
      "Monotonic Stack"
    ],
    "description": "You are given an integer array prices where prices[i] is the price of the ith item in a shop.\nThere is a special discount for items in the shop. If you buy the ith item, then you will receive a discount equivalent to prices[j] where j is the minimum index such that j > i and prices[j] <= prices[i]. Otherwise, you will not receive any discount at all.\nReturn an integer array answer where answer[i] is the final price you will pay for the ith item of the shop, considering the special discount.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Subrectangle Queries",
    "problem_id": "1572",
    "frontend_id": "1476",
    "difficulty": "Medium",
    "problem_slug": "subrectangle-queries",
    "topics": [
      "Array",
      "Design",
      "Matrix"
    ],
    "description": "Implement the class SubrectangleQueries which receives a rows x cols rectangle as a matrix of integers in the constructor and supports two methods:\n1. updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)\n2. getValue(int row, int col)\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
    "problem_id": "1573",
    "frontend_id": "1477",
    "difficulty": "Medium",
    "problem_slug": "find-two-non-overlapping-sub-arrays-each-with-target-sum",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "description": "You are given an array of integers arr and an integer target.\nYou have to find two non-overlapping sub-arrays of arr each with a sum equal target. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum.\nReturn the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Allocate Mailboxes",
    "problem_id": "1571",
    "frontend_id": "1478",
    "difficulty": "Hard",
    "problem_slug": "allocate-mailboxes",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "Given the array houses where houses[i] is the location of the ith house along a street and an integer k, allocate k mailboxes in the street.\nReturn the minimum total distance between each house and its nearest mailbox.\nThe test cases are generated so that the answer fits in a 32-bit integer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Running Sum of 1d Array",
    "problem_id": "1603",
    "frontend_id": "1480",
    "difficulty": "Easy",
    "problem_slug": "running-sum-of-1d-array",
    "topics": [
      "Array",
      "Prefix Sum"
    ],
    "description": "Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]).\nReturn the running sum of nums.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Least Number of Unique Integers after K Removals",
    "problem_id": "1604",
    "frontend_id": "1481",
    "difficulty": "Medium",
    "problem_slug": "least-number-of-unique-integers-after-k-removals",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Sorting",
      "Counting"
    ],
    "description": "Given an array of integers arr and an integer k. Find the least number of unique integers after removing exactly k elements.\nExample 1:"
  },
  {
    "title": "Minimum Number of Days to Make m Bouquets",
    "problem_id": "1605",
    "frontend_id": "1482",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-days-to-make-m-bouquets",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "You are given an integer array bloomDay, an integer m and an integer k.\nYou want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.\nThe garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.\nReturn the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Kth Ancestor of a Tree Node",
    "problem_id": "1296",
    "frontend_id": "1483",
    "difficulty": "Hard",
    "problem_slug": "kth-ancestor-of-a-tree-node",
    "topics": [
      "Binary Search",
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Design"
    ],
    "description": "You are given a tree with n nodes numbered from 0 to n - 1 in the form of a parent array parent where parent[i] is the parent of ith node. The root of the tree is node 0. Find the kth ancestor of a given node.\nThe kth ancestor of a tree node is the kth node in the path from that node to the root node.\nImplement the TreeAncestor class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Group Sold Products By The Date",
    "problem_id": "1625",
    "frontend_id": "1484",
    "difficulty": "Easy",
    "problem_slug": "group-sold-products-by-the-date",
    "topics": [
      "Database"
    ],
    "description": "Table Activities:\nWrite a solution to find for each date the number of different products sold and their names.\nThe sold products names for each date should be sorted lexicographically.\nReturn the result table ordered by sell_date.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "XOR Operation in an Array",
    "problem_id": "1610",
    "frontend_id": "1486",
    "difficulty": "Easy",
    "problem_slug": "xor-operation-in-an-array",
    "topics": [
      "Math",
      "Bit Manipulation"
    ],
    "description": "You are given an integer n and an integer start.\nDefine an array nums where nums[i] = start + 2 * i (0-indexed) and n == nums.length.\nReturn the bitwise XOR of all elements of nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Making File Names Unique",
    "problem_id": "1611",
    "frontend_id": "1487",
    "difficulty": "Medium",
    "problem_slug": "making-file-names-unique",
    "topics": [
      "Array",
      "Hash Table",
      "String"
    ],
    "description": "Given an array of strings names of size n. You will create n folders in your file system such that, at the ith minute, you will create a folder with the name names[i].\nSince two files cannot have the same name, if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of (k), where, k is the smallest positive integer such that the obtained name remains unique.\nReturn an array of strings of length n where ans[i] is the actual name the system will assign to the ith folder when you create it.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Avoid Flood in The City",
    "problem_id": "1612",
    "frontend_id": "1488",
    "difficulty": "Medium",
    "problem_slug": "avoid-flood-in-the-city",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Greedy",
      "Heap (Priority Queue)"
    ],
    "description": "Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the nth lake, the nth lake becomes full of water. If it rains over a lake that is full of water, there will be a flood. Your goal is to avoid floods in any lake.\nGiven an integer array rains where:\nReturn an array ans where:\nIf there are multiple valid answers return any of them. If it is impossible to avoid flood return an empty array.\nNotice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
    "problem_id": "1613",
    "frontend_id": "1489",
    "difficulty": "Hard",
    "problem_slug": "find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree",
    "topics": [
      "Union Find",
      "Graph",
      "Sorting",
      "Minimum Spanning Tree",
      "Strongly Connected Component"
    ],
    "description": "Given a weighted undirected connected graph with n vertices numbered from 0 to n - 1, and an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional and weighted edge between nodes ai and bi. A minimum spanning tree (MST) is a subset of the graph's edges that connects all vertices without cycles and with the minimum possible total edge weight.\nFind all the critical and pseudo-critical edges in the given graph's minimum spanning tree (MST). An MST edge whose deletion from the graph would cause the MST weight to increase is called a critical edge. On the other hand, a pseudo-critical edge is that which can appear in some MSTs but not all.\nNote that you can return the indices of the edges in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Average Salary Excluding the Minimum and Maximum Salary",
    "problem_id": "1584",
    "frontend_id": "1491",
    "difficulty": "Easy",
    "problem_slug": "average-salary-excluding-the-minimum-and-maximum-salary",
    "topics": [
      "Array",
      "Sorting"
    ],
    "description": "You are given an array of unique integers salary where salary[i] is the salary of the ith employee.\nReturn the average salary of employees excluding the minimum and maximum salary. Answers within 10-5 of the actual answer will be accepted.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "The kth Factor of n",
    "problem_id": "1585",
    "frontend_id": "1492",
    "difficulty": "Medium",
    "problem_slug": "the-kth-factor-of-n",
    "topics": [
      "Math",
      "Number Theory"
    ],
    "description": "You are given two positive integers n and k. A factor of an integer n is defined as an integer i where n % i == 0.\nConsider a list of all factors of n sorted in ascending order, return the kth factor in this list or return -1 if n has less than k factors.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up:\nCould you solve this problem in less than O(n) complexity?"
  },
  {
    "title": "Longest Subarray of 1's After Deleting One Element",
    "problem_id": "1586",
    "frontend_id": "1493",
    "difficulty": "Medium",
    "problem_slug": "longest-subarray-of-1s-after-deleting-one-element",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "description": "Given a binary array nums, you should delete one element from it.\nReturn the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Parallel Courses II",
    "problem_id": "1587",
    "frontend_id": "1494",
    "difficulty": "Hard",
    "problem_slug": "parallel-courses-ii",
    "topics": [
      "Dynamic Programming",
      "Bit Manipulation",
      "Graph",
      "Bitmask"
    ],
    "description": "You are given an integer n, which indicates that there are n courses labeled from 1 to n. You are also given an array relations where relations[i] = [prevCoursei, nextCoursei], representing a prerequisite relationship between course prevCoursei and course nextCoursei: course prevCoursei has to be taken before course nextCoursei. Also, you are given the integer k.\nIn one semester, you can take at most k courses as long as you have taken all the prerequisites in the previous semesters for the courses you are taking.\nReturn the minimum number of semesters needed to take all courses. The testcases will be generated such that it is possible to take every course.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Path Crossing",
    "problem_id": "1619",
    "frontend_id": "1496",
    "difficulty": "Easy",
    "problem_slug": "path-crossing",
    "topics": [
      "Hash Table",
      "String"
    ],
    "description": "Given a string path, where path[i] = 'N', 'S', 'E' or 'W', each representing moving one unit north, south, east, or west, respectively. You start at the origin (0, 0) on a 2D plane and walk on the path specified by path.\nReturn true if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited. Return false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check If Array Pairs Are Divisible by k",
    "problem_id": "1620",
    "frontend_id": "1497",
    "difficulty": "Medium",
    "problem_slug": "check-if-array-pairs-are-divisible-by-k",
    "topics": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "description": "Given an array of integers arr of even length n and an integer k.\nWe want to divide the array into exactly n / 2 pairs such that the sum of each pair is divisible by k.\nReturn true If you can find a way to do that or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Subsequences That Satisfy the Given Sum Condition",
    "problem_id": "1621",
    "frontend_id": "1498",
    "difficulty": "Medium",
    "problem_slug": "number-of-subsequences-that-satisfy-the-given-sum-condition",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "description": "You are given an array of integers nums and an integer target.\nReturn the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal to target. Since the answer may be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Max Value of Equation",
    "problem_id": "1622",
    "frontend_id": "1499",
    "difficulty": "Hard",
    "problem_slug": "max-value-of-equation",
    "topics": [
      "Array",
      "Queue",
      "Sliding Window",
      "Heap (Priority Queue)",
      "Monotonic Queue"
    ],
    "description": "You are given an array points containing the coordinates of points on a 2D plane, sorted by the x-values, where points[i] = [xi, yi] such that xi < xj for all 1 <= i < j <= points.length. You are also given an integer k.\nReturn the maximum value of the equation yi + yj + |xi - xj| where |xi - xj| <= k and 1 <= i < j <= points.length.\nIt is guaranteed that there exists at least one pair of points that satisfy the constraint |xi - xj| <= k.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Can Make Arithmetic Progression From Sequence",
    "problem_id": "1626",
    "frontend_id": "1502",
    "difficulty": "Easy",
    "problem_slug": "can-make-arithmetic-progression-from-sequence",
    "topics": [
      "Array",
      "Sorting"
    ],
    "description": "A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.\nGiven an array of numbers arr, return true if the array can be rearranged to form an arithmetic progression. Otherwise, return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Last Moment Before All Ants Fall Out of a Plank",
    "problem_id": "1627",
    "frontend_id": "1503",
    "difficulty": "Medium",
    "problem_slug": "last-moment-before-all-ants-fall-out-of-a-plank",
    "topics": [
      "Array",
      "Brainteaser",
      "Simulation"
    ],
    "description": "We have a wooden plank of the length n units. Some ants are walking on the plank, each ant moves with a speed of 1 unit per second. Some of the ants move to the left, the other move to the right.\nWhen two ants moving in two different directions meet at some point, they change their directions and continue moving again. Assume changing directions does not take any additional time.\nWhen an ant reaches one end of the plank at a time t, it falls out of the plank immediately.\nGiven an integer n and two integer arrays left and right, the positions of the ants moving to the left and the right, return the moment when the last ant(s) fall out of the plank.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Submatrices With All Ones",
    "problem_id": "1628",
    "frontend_id": "1504",
    "difficulty": "Medium",
    "problem_slug": "count-submatrices-with-all-ones",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Matrix",
      "Monotonic Stack"
    ],
    "description": "Given an m x n binary matrix mat, return the number of submatrices that have all ones.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Possible Integer After at Most K Adjacent Swaps On Digits",
    "problem_id": "1629",
    "frontend_id": "1505",
    "difficulty": "Hard",
    "problem_slug": "minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits",
    "topics": [
      "String",
      "Greedy",
      "Binary Indexed Tree",
      "Segment Tree"
    ],
    "description": "You are given a string num representing the digits of a very large integer and an integer k. You are allowed to swap any two adjacent digits of the integer at most k times.\nReturn the minimum integer you can obtain also as a string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Reformat Date",
    "problem_id": "1283",
    "frontend_id": "1507",
    "difficulty": "Easy",
    "problem_slug": "reformat-date",
    "topics": [
      "String"
    ],
    "description": "Given a date string in the form Day Month Year, where:\nConvert the date string to the format YYYY-MM-DD, where:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Range Sum of Sorted Subarray Sums",
    "problem_id": "1615",
    "frontend_id": "1508",
    "difficulty": "Medium",
    "problem_slug": "range-sum-of-sorted-subarray-sums",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting",
      "Prefix Sum"
    ],
    "description": "You are given the array nums consisting of n positive integers. You computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers.\nReturn the sum of the numbers from index left to index right (indexed from 1), inclusive, in the new array. Since the answer can be a huge number return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Difference Between Largest and Smallest Value in Three Moves",
    "problem_id": "1616",
    "frontend_id": "1509",
    "difficulty": "Medium",
    "problem_slug": "minimum-difference-between-largest-and-smallest-value-in-three-moves",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an integer array nums.\nIn one move, you can choose one element of nums and change it to any value.\nReturn the minimum difference between the largest and smallest value of nums after performing at most three moves.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Stone Game IV",
    "problem_id": "1617",
    "frontend_id": "1510",
    "difficulty": "Hard",
    "problem_slug": "stone-game-iv",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Game Theory"
    ],
    "description": "Alice and Bob take turns playing a game, with Alice starting first.\nInitially, there are n stones in a pile. On each player's turn, that player makes a move consisting of removing any non-zero square number of stones in the pile.\nAlso, if a player cannot make a move, he/she loses the game.\nGiven a positive integer n, return true if and only if Alice wins the game otherwise return false, assuming both players play optimally.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Good Pairs",
    "problem_id": "1635",
    "frontend_id": "1512",
    "difficulty": "Easy",
    "problem_slug": "number-of-good-pairs",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Counting"
    ],
    "description": "Given an array of integers nums, return the number of good pairs.\nA pair (i, j) is called good if nums[i] == nums[j] and i < j.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Substrings With Only 1s",
    "problem_id": "1636",
    "frontend_id": "1513",
    "difficulty": "Medium",
    "problem_slug": "number-of-substrings-with-only-1s",
    "topics": [
      "Math",
      "String"
    ],
    "description": "Given a binary string s, return the number of substrings with all characters 1's. Since the answer may be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Path with Maximum Probability",
    "problem_id": "1325",
    "frontend_id": "1514",
    "difficulty": "Medium",
    "problem_slug": "path-with-maximum-probability",
    "topics": [
      "Array",
      "Graph",
      "Heap (Priority Queue)",
      "Shortest Path"
    ],
    "description": "You are given an undirected weighted graph of n nodes (0-indexed), represented by an edge list where edges[i] = [a, b] is an undirected edge connecting the nodes a and b with a probability of success of traversing that edge succProb[i].\nGiven two nodes start and end, find the path with the maximum probability of success to go from start to end and return its success probability.\nIf there is no path from start to end, return 0. Your answer will be accepted if it differs from the correct answer by at most 1e-5.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Best Position for a Service Centre",
    "problem_id": "1638",
    "frontend_id": "1515",
    "difficulty": "Hard",
    "problem_slug": "best-position-for-a-service-centre",
    "topics": [
      "Array",
      "Math",
      "Geometry",
      "Randomized"
    ],
    "description": "A delivery company wants to build a new service center in a new city. The company knows the positions of all the customers in this city on a 2D-Map and wants to build the new center in a position such that the sum of the euclidean distances to all customers is minimum.\nGiven an array positions where positions[i] = [xi, yi] is the position of the ith customer on the map, return the minimum sum of the euclidean distances to all customers.\nIn other words, you need to choose the position of the service center [xcentre, ycentre] such that the following formula is minimized:\nAnswers within 10-5 of the actual value will be accepted.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Users With Valid E-Mails",
    "problem_id": "1664",
    "frontend_id": "1517",
    "difficulty": "Easy",
    "problem_slug": "find-users-with-valid-e-mails",
    "topics": [
      "Database"
    ],
    "description": "Table: Users\nWrite a solution to find the users who have valid emails.\nA valid e-mail has a prefix name and a domain where:\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Water Bottles",
    "problem_id": "1642",
    "frontend_id": "1518",
    "difficulty": "Easy",
    "problem_slug": "water-bottles",
    "topics": [
      "Math",
      "Simulation"
    ],
    "description": "There are numBottles water bottles that are initially full of water. You can exchange numExchange empty water bottles from the market with one full water bottle.\nThe operation of drinking a full water bottle turns it into an empty bottle.\nGiven the two integers numBottles and numExchange, return the maximum number of water bottles you can drink.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Nodes in the Sub-Tree With the Same Label",
    "problem_id": "1643",
    "frontend_id": "1519",
    "difficulty": "Medium",
    "problem_slug": "number-of-nodes-in-the-sub-tree-with-the-same-label",
    "topics": [
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Counting"
    ],
    "description": "You are given a tree (i.e. a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. The root of the tree is the node 0, and each node of the tree has a label which is a lower-case character given in the string labels (i.e. The node with the number i has the label labels[i]).\nThe edges array is given on the form edges[i] = [ai, bi], which means there is an edge between nodes ai and bi in the tree.\nReturn an array of size n where ans[i] is the number of nodes in the subtree of the ith node which have the same label as node i.\nA subtree of a tree T is the tree consisting of a node in T and all of its descendant nodes.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Number of Non-Overlapping Substrings",
    "problem_id": "1644",
    "frontend_id": "1520",
    "difficulty": "Hard",
    "problem_slug": "maximum-number-of-non-overlapping-substrings",
    "topics": [
      "String",
      "Greedy"
    ],
    "description": "Given a string s of lowercase letters, you need to find the maximum number of non-empty substrings of s that meet the following conditions:\nFind the maximum number of substrings that meet the above conditions. If there are multiple solutions with the same number of substrings, return the one with minimum total length. It can be shown that there exists a unique solution of minimum total length.\nNotice that you can return the substrings in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find a Value of a Mysterious Function Closest to Target",
    "problem_id": "1645",
    "frontend_id": "1521",
    "difficulty": "Hard",
    "problem_slug": "find-a-value-of-a-mysterious-function-closest-to-target",
    "topics": [
      "Array",
      "Binary Search",
      "Bit Manipulation",
      "Segment Tree"
    ],
    "description": "Winston was given the above mysterious function func. He has an integer array arr and an integer target and he wants to find the values l and r that make the value |func(arr, l, r) - target| minimum possible.\nReturn the minimum possible value of |func(arr, l, r) - target|.\nNotice that func should be called with the values l and r where 0 <= l, r < arr.length.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Odd Numbers in an Interval Range",
    "problem_id": "1630",
    "frontend_id": "1523",
    "difficulty": "Easy",
    "problem_slug": "count-odd-numbers-in-an-interval-range",
    "topics": [
      "Math"
    ],
    "description": "Given two non-negative integers low and high. Return the count of odd numbers between low and high (inclusive).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Sub-arrays With Odd Sum",
    "problem_id": "1631",
    "frontend_id": "1524",
    "difficulty": "Medium",
    "problem_slug": "number-of-sub-arrays-with-odd-sum",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "description": "Given an array of integers arr, return the number of subarrays with an odd sum.\nSince the answer can be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Good Ways to Split a String",
    "problem_id": "1632",
    "frontend_id": "1525",
    "difficulty": "Medium",
    "problem_slug": "number-of-good-ways-to-split-a-string",
    "topics": [
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Bit Manipulation"
    ],
    "description": "You are given a string s.\nA split is called good if you can split s into two non-empty strings sleft and sright where their concatenation is equal to s (i.e., sleft + sright = s) and the number of distinct letters in sleft and sright is the same.\nReturn the number of good splits you can make in s.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of Increments on Subarrays to Form a Target Array",
    "problem_id": "1633",
    "frontend_id": "1526",
    "difficulty": "Hard",
    "problem_slug": "minimum-number-of-increments-on-subarrays-to-form-a-target-array",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Greedy",
      "Monotonic Stack"
    ],
    "description": "You are given an integer array target. You have an integer array initial of the same size as target with all elements initially zeros.\nIn one operation you can choose any subarray from initial and increment each value by one.\nReturn the minimum number of operations to form a target array from initial.\nThe test cases are generated so that the answer fits in a 32-bit integer.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Patients With a Condition",
    "problem_id": "1670",
    "frontend_id": "1527",
    "difficulty": "Easy",
    "problem_slug": "patients-with-a-condition",
    "topics": [
      "Database"
    ],
    "description": "Table: Patients\nWrite a solution to find the patient_id, patient_name, and conditions of the patients who have Type I Diabetes. Type I Diabetes always starts with DIAB1 prefix.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Shuffle String",
    "problem_id": "1651",
    "frontend_id": "1528",
    "difficulty": "Easy",
    "problem_slug": "shuffle-string",
    "topics": [
      "Array",
      "String"
    ],
    "description": "You are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.\nReturn the shuffled string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Suffix Flips",
    "problem_id": "1652",
    "frontend_id": "1529",
    "difficulty": "Medium",
    "problem_slug": "minimum-suffix-flips",
    "topics": [
      "String",
      "Greedy"
    ],
    "description": "You are given a 0-indexed binary string target of length n. You have another binary string s of length n that is initially set to all zeros. You want to make s equal to target.\nIn one operation, you can pick an index i where 0 <= i < n and flip all bits in the inclusive range [i, n - 1]. Flip means changing '0' to '1' and '1' to '0'.\nReturn the minimum number of operations needed to make s equal to target.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Good Leaf Nodes Pairs",
    "problem_id": "1653",
    "frontend_id": "1530",
    "difficulty": "Medium",
    "problem_slug": "number-of-good-leaf-nodes-pairs",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "You are given the root of a binary tree and an integer distance. A pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to distance.\nReturn the number of good leaf node pairs in the tree.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "String Compression II",
    "problem_id": "1637",
    "frontend_id": "1531",
    "difficulty": "Hard",
    "problem_slug": "string-compression-ii",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "Run-length encoding is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string \"aabccc\" we replace \"aa\" by \"a2\" and replace \"ccc\" by \"c3\". Thus the compressed string becomes \"a2bc3\".\nNotice that in this problem, we are not adding '1' after single characters.\nGiven a string s and an integer k. You need to delete at most k characters from s such that the run-length encoded version of s has minimum length.\nFind the minimum length of the run-length encoded version of s after deleting at most k characters.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Good Triplets",
    "problem_id": "1656",
    "frontend_id": "1534",
    "difficulty": "Easy",
    "problem_slug": "count-good-triplets",
    "topics": [
      "Array",
      "Enumeration"
    ],
    "description": "Given an array of integers arr, and three integers a, b and c. You need to find the number of good triplets.\nA triplet (arr[i], arr[j], arr[k]) is good if the following conditions are true:\nWhere |x| denotes the absolute value of x.\nReturn the number of good triplets.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Winner of an Array Game",
    "problem_id": "1657",
    "frontend_id": "1535",
    "difficulty": "Medium",
    "problem_slug": "find-the-winner-of-an-array-game",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "Given an integer array arr of distinct integers and an integer k.\nA game will be played between the first two elements of the array (i.e. arr[0] and arr[1]). In each round of the game, we compare arr[0] with arr[1], the larger integer wins and remains at position 0, and the smaller integer moves to the end of the array. The game ends when an integer wins k consecutive rounds.\nReturn the integer which will win the game.\nIt is guaranteed that there will be a winner of the game.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Swaps to Arrange a Binary Grid",
    "problem_id": "1658",
    "frontend_id": "1536",
    "difficulty": "Medium",
    "problem_slug": "minimum-swaps-to-arrange-a-binary-grid",
    "topics": [
      "Array",
      "Greedy",
      "Matrix"
    ],
    "description": "Given an n x n binary grid, in one step you can choose two adjacent rows of the grid and swap them.\nA grid is said to be valid if all the cells above the main diagonal are zeros.\nReturn the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid.\nThe main diagonal of a grid is the diagonal that starts at cell (1, 1) and ends at cell (n, n).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Get the Maximum Score",
    "problem_id": "1659",
    "frontend_id": "1537",
    "difficulty": "Hard",
    "problem_slug": "get-the-maximum-score",
    "topics": [
      "Array",
      "Two Pointers",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "You are given two sorted arrays of distinct integers nums1 and nums2.\nA valid path is defined as follows:\nThe score is defined as the sum of unique values in a valid path.\nReturn the maximum score you can obtain of all possible valid paths. Since the answer may be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Kth Missing Positive Number",
    "problem_id": "1646",
    "frontend_id": "1539",
    "difficulty": "Easy",
    "problem_slug": "kth-missing-positive-number",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "Given an array arr of positive integers sorted in a strictly increasing order, and an integer k.\nReturn the kth positive integer that is missing from this array.\nExample 1:\nExample 2:\nConstraints:\nFollow up:\nCould you solve this problem in less than O(n) complexity?"
  },
  {
    "title": "Can Convert String in K Moves",
    "problem_id": "1647",
    "frontend_id": "1540",
    "difficulty": "Medium",
    "problem_slug": "can-convert-string-in-k-moves",
    "topics": [
      "Hash Table",
      "String"
    ],
    "description": "Given two strings s and t, your goal is to convert s into t in k moves or less.\nDuring the ith (1 <= i <= k) move you can:\nShifting a character means replacing it by the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). Shifting a character by i means applying the shift operations i times.\nRemember that any index j can be picked at most once.\nReturn true if it's possible to convert s into t in no more than k moves, otherwise return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Insertions to Balance a Parentheses String",
    "problem_id": "1648",
    "frontend_id": "1541",
    "difficulty": "Medium",
    "problem_slug": "minimum-insertions-to-balance-a-parentheses-string",
    "topics": [
      "String",
      "Stack",
      "Greedy"
    ],
    "description": "Given a parentheses string s containing only the characters '(' and ')'. A parentheses string is balanced if:\nIn other words, we treat '(' as an opening parenthesis and '))' as a closing parenthesis.\nYou can insert the characters '(' and ')' at any position of the string to balance it if needed.\nReturn the minimum number of insertions needed to make s balanced.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Longest Awesome Substring",
    "problem_id": "1668",
    "frontend_id": "1542",
    "difficulty": "Hard",
    "problem_slug": "find-longest-awesome-substring",
    "topics": [
      "Hash Table",
      "String",
      "Bit Manipulation"
    ],
    "description": "You are given a string s. An awesome substring is a non-empty substring of s such that we can make any number of swaps in order to make it a palindrome.\nReturn the length of the maximum length awesome substring of s.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Make The String Great",
    "problem_id": "1666",
    "frontend_id": "1544",
    "difficulty": "Easy",
    "problem_slug": "make-the-string-great",
    "topics": [
      "String",
      "Stack"
    ],
    "description": "Given a string s of lower and upper case English letters.\nA good string is a string which doesn't have two adjacent characters s[i] and s[i + 1] where:\nTo make the string good, you can choose two adjacent characters that make the string bad and remove them. You can keep doing this until the string becomes good.\nReturn the string after making it good. The answer is guaranteed to be unique under the given constraints.\nNotice that an empty string is also good.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Kth Bit in Nth Binary String",
    "problem_id": "1667",
    "frontend_id": "1545",
    "difficulty": "Medium",
    "problem_slug": "find-kth-bit-in-nth-binary-string",
    "topics": [
      "String",
      "Recursion",
      "Simulation"
    ],
    "description": "Given two positive integers n and k, the binary string Sn is formed as follows:\nWhere + denotes the concatenation operation, reverse(x) returns the reversed string x, and invert(x) inverts all the bits in x (0 changes to 1 and 1 changes to 0).\nFor example, the first four strings in the above sequence are:\nReturn the kth bit in Sn. It is guaranteed that k is valid for the given n.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
    "problem_id": "1649",
    "frontend_id": "1546",
    "difficulty": "Medium",
    "problem_slug": "maximum-number-of-non-overlapping-subarrays-with-sum-equals-target",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Prefix Sum"
    ],
    "description": "Given an array nums and an integer target, return the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to target.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Cost to Cut a Stick",
    "problem_id": "1669",
    "frontend_id": "1547",
    "difficulty": "Hard",
    "problem_slug": "minimum-cost-to-cut-a-stick",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "Given a wooden stick of length n units. The stick is labelled from 0 to n. For example, a stick of length 6 is labelled as follows:\nGiven an integer array cuts where cuts[i] denotes a position you should perform a cut at.\nYou should perform the cuts in order, you can change the order of the cuts as you wish.\nThe cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.\nReturn the minimum total cost of the cuts.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Three Consecutive Odds",
    "problem_id": "1293",
    "frontend_id": "1550",
    "difficulty": "Easy",
    "problem_slug": "three-consecutive-odds",
    "topics": [
      "Array"
    ],
    "description": "Example 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Make Array Equal",
    "problem_id": "1674",
    "frontend_id": "1551",
    "difficulty": "Medium",
    "problem_slug": "minimum-operations-to-make-array-equal",
    "topics": [
      "Math"
    ],
    "description": "You have an array arr of length n where arr[i] = (2 * i) + 1 for all valid values of i (i.e., 0 <= i < n).\nIn one operation, you can select two indices x and y where 0 <= x, y < n and subtract 1 from arr[x] and add 1 to arr[y] (i.e., perform arr[x] -=1 and arr[y] += 1). The goal is to make all the elements of the array equal. It is guaranteed that all the elements of the array can be made equal using some operations.\nGiven an integer n, the length of the array, return the minimum number of operations needed to make all the elements of arr equal.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Magnetic Force Between Two Balls",
    "problem_id": "1675",
    "frontend_id": "1552",
    "difficulty": "Medium",
    "problem_slug": "magnetic-force-between-two-balls",
    "topics": [
      "Array",
      "Binary Search",
      "Sorting"
    ],
    "description": "In the universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. Rick has n empty baskets, the ith basket is at position[i], Morty has m balls and needs to distribute the balls into the baskets such that the minimum magnetic force between any two balls is maximum.\nRick stated that magnetic force between two different balls at positions x and y is |x - y|.\nGiven the integer array position and the integer m. Return the required force.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of Days to Eat N Oranges",
    "problem_id": "1676",
    "frontend_id": "1553",
    "difficulty": "Hard",
    "problem_slug": "minimum-number-of-days-to-eat-n-oranges",
    "topics": [
      "Dynamic Programming",
      "Memoization"
    ],
    "description": "There are n oranges in the kitchen and you decided to eat some of these oranges every day as follows:\nYou can only choose one of the actions per day.\nGiven the integer n, return the minimum number of days to eat n oranges.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Thousand Separator",
    "problem_id": "1660",
    "frontend_id": "1556",
    "difficulty": "Easy",
    "problem_slug": "thousand-separator",
    "topics": [
      "String"
    ],
    "description": "Given an integer n, add a dot (\".\") as the thousands separator and return it in string format.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of Vertices to Reach All Nodes",
    "problem_id": "1661",
    "frontend_id": "1557",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-vertices-to-reach-all-nodes",
    "topics": [
      "Graph"
    ],
    "description": "Given a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi] represents a directed edge from node fromi to node toi.\nFind the smallest set of vertices from which all nodes in the graph are reachable. It's guaranteed that a unique solution exists.\nNotice that you can return the vertices in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Numbers of Function Calls to Make Target Array",
    "problem_id": "1662",
    "frontend_id": "1558",
    "difficulty": "Medium",
    "problem_slug": "minimum-numbers-of-function-calls-to-make-target-array",
    "topics": [
      "Array",
      "Greedy",
      "Bit Manipulation"
    ],
    "description": "You are given an integer array nums. You have an integer array arr of the same length with all values set to 0 initially. You also have the following modify function:\nYou want to use the modify function to convert arr to nums using the minimum number of calls.\nReturn the minimum number of function calls to make nums from arr.\nThe test cases are generated so that the answer fits in a 32-bit signed integer.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Detect Cycles in 2D Grid",
    "problem_id": "1663",
    "frontend_id": "1559",
    "difficulty": "Medium",
    "problem_slug": "detect-cycles-in-2d-grid",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix"
    ],
    "description": "Given a 2D array of characters grid of size m x n, you need to find if there exists any cycle consisting of the same value in grid.\nA cycle is a path of length 4 or more in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the same value of the current cell.\nAlso, you cannot move to the cell that you visited in your last move. For example, the cycle (1, 1) -> (1, 2) -> (1, 1) is invalid because from (1, 2) we visited (1, 1) which was the last visited cell.\nReturn true if any cycle of the same value exists in grid, otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Most Visited Sector in  a Circular Track",
    "problem_id": "1682",
    "frontend_id": "1560",
    "difficulty": "Easy",
    "problem_slug": "most-visited-sector-in-a-circular-track",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "Given an integer n and an integer array rounds. We have a circular track which consists of n sectors labeled from 1 to n. A marathon will be held on this track, the marathon consists of m rounds. The ith round starts at sector rounds[i - 1] and ends at sector rounds[i]. For example, round 1 starts at sector rounds[0] and ends at sector rounds[1]\nReturn an array of the most visited sectors sorted in ascending order.\nNotice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Number of Coins You Can Get",
    "problem_id": "1683",
    "frontend_id": "1561",
    "difficulty": "Medium",
    "problem_slug": "maximum-number-of-coins-you-can-get",
    "topics": [
      "Array",
      "Math",
      "Greedy",
      "Sorting",
      "Game Theory"
    ],
    "description": "There are 3n piles of coins of varying size, you and your friends will take piles of coins as follows:\nGiven an array of integers piles where piles[i] is the number of coins in the ith pile.\nReturn the maximum number of coins that you can have.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Latest Group of Size M",
    "problem_id": "1684",
    "frontend_id": "1562",
    "difficulty": "Medium",
    "problem_slug": "find-latest-group-of-size-m",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Simulation"
    ],
    "description": "Given an array arr that represents a permutation of numbers from 1 to n.\nYou have a binary string of size n that initially has all its bits set to zero. At each step i (assuming both the binary string and arr are 1-indexed) from 1 to n, the bit at position arr[i] is set to 1.\nYou are also given an integer m. Find the latest step at which there exists a group of ones of length m. A group of ones is a contiguous substring of 1's such that it cannot be extended in either direction.\nReturn the latest step at which there exists a group of ones of length exactly m. If no such group exists, return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Stone Game V",
    "problem_id": "1685",
    "frontend_id": "1563",
    "difficulty": "Hard",
    "problem_slug": "stone-game-v",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Game Theory"
    ],
    "description": "There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue.\nIn each round of the game, Alice divides the row into two non-empty rows (i.e. left row and right row), then Bob calculates the value of each row which is the sum of the values of all the stones in this row. Bob throws away the row which has the maximum value, and Alice's score increases by the value of the remaining row. If the value of the two rows are equal, Bob lets Alice decide which row will be thrown away. The next round starts with the remaining row.\nThe game ends when there is only one stone remaining. Alice's score is initially zero.\nReturn the maximum score that Alice can obtain.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Detect Pattern of Length M Repeated K or More Times",
    "problem_id": "1689",
    "frontend_id": "1566",
    "difficulty": "Easy",
    "problem_slug": "detect-pattern-of-length-m-repeated-k-or-more-times",
    "topics": [
      "Array",
      "Enumeration"
    ],
    "description": "Given an array of positive integers arr, find a pattern of length m that is repeated k or more times.\nA pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. A pattern is defined by its length and the number of repetitions.\nReturn true if there exists a pattern of length m that is repeated k or more times, otherwise return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Length of Subarray With Positive Product",
    "problem_id": "1690",
    "frontend_id": "1567",
    "difficulty": "Medium",
    "problem_slug": "maximum-length-of-subarray-with-positive-product",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "Given an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive.\nA subarray of an array is a consecutive sequence of zero or more values taken out of that array.\nReturn the maximum length of a subarray with positive product.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Days to Disconnect Island",
    "problem_id": "1691",
    "frontend_id": "1568",
    "difficulty": "Hard",
    "problem_slug": "minimum-number-of-days-to-disconnect-island",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Matrix",
      "Strongly Connected Component"
    ],
    "description": "You are given an m x n binary grid grid where 1 represents land and 0 represents water. An island is a maximal 4-directionally (horizontal or vertical) connected group of 1's.\nThe grid is said to be connected if we have exactly one island, otherwise is said disconnected.\nIn one day, we are allowed to change any single land cell (1) into a water cell (0).\nReturn the minimum number of days to disconnect the grid.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Ways to Reorder Array to Get Same BST",
    "problem_id": "1692",
    "frontend_id": "1569",
    "difficulty": "Hard",
    "problem_slug": "number-of-ways-to-reorder-array-to-get-same-bst",
    "topics": [
      "Array",
      "Math",
      "Divide and Conquer",
      "Dynamic Programming",
      "Tree",
      "Union Find",
      "Binary Search Tree",
      "Memoization",
      "Combinatorics",
      "Binary Tree"
    ],
    "description": "Given an array nums that represents a permutation of integers from 1 to n. We are going to construct a binary search tree (BST) by inserting the elements of nums in order into an initially empty BST. Find the number of different ways to reorder nums so that the constructed BST is identical to that formed from the original array nums.\nReturn the number of ways to reorder nums such that the BST formed is identical to the original BST formed from nums.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Matrix Diagonal Sum",
    "problem_id": "1677",
    "frontend_id": "1572",
    "difficulty": "Easy",
    "problem_slug": "matrix-diagonal-sum",
    "topics": [
      "Array",
      "Matrix"
    ],
    "description": "Given a square matrix mat, return the sum of the matrix diagonals.\nOnly include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Ways to Split a String",
    "problem_id": "1678",
    "frontend_id": "1573",
    "difficulty": "Medium",
    "problem_slug": "number-of-ways-to-split-a-string",
    "topics": [
      "Math",
      "String"
    ],
    "description": "Given a binary string s, you can split s into 3 non-empty strings s1, s2, and s3 where s1 + s2 + s3 = s.\nReturn the number of ways s can be split such that the number of ones is the same in s1, s2, and s3. Since the answer may be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Shortest Subarray to be Removed to Make Array Sorted",
    "problem_id": "1679",
    "frontend_id": "1574",
    "difficulty": "Medium",
    "problem_slug": "shortest-subarray-to-be-removed-to-make-array-sorted",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Stack",
      "Monotonic Stack"
    ],
    "description": "Given an integer array arr, remove a subarray (can be empty) from arr such that the remaining elements in arr are non-decreasing.\nReturn the length of the shortest subarray to remove.\nA subarray is a contiguous subsequence of the array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count All Possible Routes",
    "problem_id": "1680",
    "frontend_id": "1575",
    "difficulty": "Hard",
    "problem_slug": "count-all-possible-routes",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Memoization"
    ],
    "description": "You are given an array of distinct positive integers locations where locations[i] represents the position of city i. You are also given integers start, finish and fuel representing the starting city, ending city, and the initial amount of fuel you have, respectively.\nAt each step, if you are at city i, you can pick any city j such that j != i and 0 <= j < locations.length and move to city j. Moving from city i to city j reduces the amount of fuel you have by |locations[i] - locations[j]|. Please notice that |x| denotes the absolute value of x.\nNotice that fuel cannot become negative at any point in time, and that you are allowed to visit any city more than once (including start and finish).\nReturn the count of all possible routes from start to finish. Since the answer may be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Replace All ?'s to Avoid Consecutive Repeating Characters",
    "problem_id": "1698",
    "frontend_id": "1576",
    "difficulty": "Easy",
    "problem_slug": "replace-all-s-to-avoid-consecutive-repeating-characters",
    "topics": [
      "String"
    ],
    "description": "Given a string s containing only lowercase English letters and the '?' character, convert all the '?' characters into lowercase letters such that the final string does not contain any consecutive repeating characters. You cannot modify the non '?' characters.\nIt is guaranteed that there are no consecutive repeating characters in the given string except for '?'.\nReturn the final string after all the conversions (possibly zero) have been made. If there is more than one solution, return any of them. It can be shown that an answer is always possible with the given constraints.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
    "problem_id": "1699",
    "frontend_id": "1577",
    "difficulty": "Medium",
    "problem_slug": "number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Two Pointers"
    ],
    "description": "Given two arrays of integers nums1 and nums2, return the number of triplets formed (type 1 and type 2) under the following rules:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Time to Make Rope Colorful",
    "problem_id": "1700",
    "frontend_id": "1578",
    "difficulty": "Medium",
    "problem_slug": "minimum-time-to-make-rope-colorful",
    "topics": [
      "Array",
      "String",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "Alice has n balloons arranged on a rope. You are given a 0-indexed string colors where colors[i] is the color of the ith balloon.\nAlice wants the rope to be colorful. She does not want two consecutive balloons to be of the same color, so she asks Bob for help. Bob can remove some balloons from the rope to make it colorful. You are given a 0-indexed integer array neededTime where neededTime[i] is the time (in seconds) that Bob needs to remove the ith balloon from the rope.\nReturn the minimum time Bob needs to make the rope colorful.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Remove Max Number of Edges to Keep Graph Fully Traversable",
    "problem_id": "1701",
    "frontend_id": "1579",
    "difficulty": "Hard",
    "problem_slug": "remove-max-number-of-edges-to-keep-graph-fully-traversable",
    "topics": [
      "Union Find",
      "Graph"
    ],
    "description": "Alice and Bob have an undirected graph of n nodes and three types of edges:\nGiven an array edges where edges[i] = [typei, ui, vi] represents a bidirectional edge of type typei between nodes ui and vi, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.\nReturn the maximum number of edges you can remove, or return -1 if Alice and Bob cannot fully traverse the graph.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Customer Who Visited but Did Not Make Any Transactions",
    "problem_id": "1724",
    "frontend_id": "1581",
    "difficulty": "Easy",
    "problem_slug": "customer-who-visited-but-did-not-make-any-transactions",
    "topics": [
      "Database"
    ],
    "description": "Table: Visits\nTable: Transactions\nWrite a solution to find the IDs of the users who visited without making any transactions and the number of times they made these types of visits.\nReturn the result table sorted in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Special Positions in a Binary Matrix",
    "problem_id": "1704",
    "frontend_id": "1582",
    "difficulty": "Easy",
    "problem_slug": "special-positions-in-a-binary-matrix",
    "topics": [
      "Array",
      "Matrix"
    ],
    "description": "Given an m x n binary matrix mat, return the number of special positions in mat.\nA position (i, j) is called special if mat[i][j] == 1 and all other elements in row i and column j are 0 (rows and columns are 0-indexed).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Unhappy Friends",
    "problem_id": "1705",
    "frontend_id": "1583",
    "difficulty": "Medium",
    "problem_slug": "count-unhappy-friends",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "You are given a list of preferences for n friends, where n is always even.\nFor each person i, preferences[i] contains a list of friends sorted in the order of preference. In other words, a friend earlier in the list is more preferred than a friend later in the list. Friends in each list are denoted by integers from 0 to n-1.\nAll the friends are divided into pairs. The pairings are given in a list pairs, where pairs[i] = [xi, yi] denotes xi is paired with yi and yi is paired with xi.\nHowever, this pairing may cause some of the friends to be unhappy. A friend x is unhappy if x is paired with y and there exists a friend u who is paired with v but:\nReturn the number of unhappy friends.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Min Cost to Connect All Points",
    "problem_id": "1706",
    "frontend_id": "1584",
    "difficulty": "Medium",
    "problem_slug": "min-cost-to-connect-all-points",
    "topics": [
      "Array",
      "Union Find",
      "Graph",
      "Minimum Spanning Tree"
    ],
    "description": "You are given an array points representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi].\nThe cost of connecting two points [xi, yi] and [xj, yj] is the manhattan distance between them: |xi - xj| + |yi - yj|, where |val| denotes the absolute value of val.\nReturn the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check If String Is Transformable With Substring Sort Operations",
    "problem_id": "1707",
    "frontend_id": "1585",
    "difficulty": "Hard",
    "problem_slug": "check-if-string-is-transformable-with-substring-sort-operations",
    "topics": [
      "String",
      "Greedy",
      "Sorting"
    ],
    "description": "Given two strings s and t, transform string s into string t using the following operation any number of times:\nReturn true if it is possible to transform s into t. Otherwise, return false.\nA substring is a contiguous sequence of characters within a string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Bank Account Summary II",
    "problem_id": "1734",
    "frontend_id": "1587",
    "difficulty": "Easy",
    "problem_slug": "bank-account-summary-ii",
    "topics": [
      "Database"
    ],
    "description": "Table: Users\nTable: Transactions\nWrite a solution to report the name and balance of users with a balance higher than 10000. The balance of an account is equal to the sum of the amounts of all transactions involving that account.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Sum of All Odd Length Subarrays",
    "problem_id": "1693",
    "frontend_id": "1588",
    "difficulty": "Easy",
    "problem_slug": "sum-of-all-odd-length-subarrays",
    "topics": [
      "Array",
      "Math",
      "Prefix Sum"
    ],
    "description": "Given an array of positive integers arr, return the sum of all possible odd-length subarrays of arr.\nA subarray is a contiguous subsequence of the array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up:\nCould you solve this problem in O(n) time complexity?"
  },
  {
    "title": "Maximum Sum Obtained of Any Permutation",
    "problem_id": "1695",
    "frontend_id": "1589",
    "difficulty": "Medium",
    "problem_slug": "maximum-sum-obtained-of-any-permutation",
    "topics": [
      "Array",
      "Greedy",
      "Sorting",
      "Prefix Sum"
    ],
    "description": "We have an array of integers, nums, and an array of requests where requests[i] = [starti, endi]. The ith request asks for the sum of nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]. Both starti and endi are 0-indexed.\nReturn the maximum total sum of all requests among all permutations of nums.\nSince the answer may be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Make Sum Divisible by P",
    "problem_id": "1694",
    "frontend_id": "1590",
    "difficulty": "Medium",
    "problem_slug": "make-sum-divisible-by-p",
    "topics": [
      "Array",
      "Hash Table",
      "Prefix Sum"
    ],
    "description": "Given an array of positive integers nums, remove the smallest subarray (possibly empty) such that the sum of the remaining elements is divisible by p. It is not allowed to remove the whole array.\nReturn the length of the smallest subarray that you need to remove, or -1 if it's impossible.\nA subarray is defined as a contiguous block of elements in the array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Strange Printer II",
    "problem_id": "1696",
    "frontend_id": "1591",
    "difficulty": "Hard",
    "problem_slug": "strange-printer-ii",
    "topics": [
      "Array",
      "Graph",
      "Topological Sort",
      "Matrix"
    ],
    "description": "There is a strange printer with the following two special requirements:\nYou are given a m x n matrix targetGrid, where targetGrid[row][col] is the color in the position (row, col) of the grid.\nReturn true if it is possible to print the matrix targetGrid, otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Rearrange Spaces Between Words",
    "problem_id": "1714",
    "frontend_id": "1592",
    "difficulty": "Easy",
    "problem_slug": "rearrange-spaces-between-words",
    "topics": [
      "String"
    ],
    "description": "You are given a string text of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. It's guaranteed that text contains at least one word.\nRearrange the spaces so that there is an equal number of spaces between every pair of adjacent words and that number is maximized. If you cannot redistribute all the spaces equally, place the extra spaces at the end, meaning the returned string should be the same length as text.\nReturn the string after rearranging the spaces.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Split a String Into the Max Number of Unique Substrings",
    "problem_id": "1715",
    "frontend_id": "1593",
    "difficulty": "Medium",
    "problem_slug": "split-a-string-into-the-max-number-of-unique-substrings",
    "topics": [
      "Hash Table",
      "String",
      "Backtracking"
    ],
    "description": "Given a string s, return the maximum number of unique substrings that the given string can be split into.\nYou can split string s into any list of non-empty substrings, where the concatenation of the substrings forms the original string. However, you must split the substrings such that all of them are unique.\nA substring is a contiguous sequence of characters within a string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Non Negative Product in a Matrix",
    "problem_id": "1716",
    "frontend_id": "1594",
    "difficulty": "Medium",
    "problem_slug": "maximum-non-negative-product-in-a-matrix",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "You are given a m x n matrix grid. Initially, you are located at the top-left corner (0, 0), and in each step, you can only move right or down in the matrix.\nAmong all possible paths starting from the top-left corner (0, 0) and ending in the bottom-right corner (m - 1, n - 1), find the path with the maximum non-negative product. The product of a path is the product of all integers in the grid cells visited along the path.\nReturn the maximum non-negative product modulo 109 + 7. If the maximum product is negative, return -1.\nNotice that the modulo is performed after getting the maximum product.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Cost to Connect Two Groups of Points",
    "problem_id": "1717",
    "frontend_id": "1595",
    "difficulty": "Hard",
    "problem_slug": "minimum-cost-to-connect-two-groups-of-points",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Matrix",
      "Bitmask"
    ],
    "description": "You are given two groups of points where the first group has size1 points, the second group has size2 points, and size1 >= size2.\nThe cost of the connection between any two points are given in an size1 x size2 matrix where cost[i][j] is the cost of connecting point i of the first group and point j of the second group. The groups are connected if each point in both groups is connected to one or more points in the opposite group. In other words, each point in the first group must be connected to at least one point in the second group, and each point in the second group must be connected to at least one point in the first group.\nReturn the minimum cost it takes to connect the two groups.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Crawler Log Folder",
    "problem_id": "1720",
    "frontend_id": "1598",
    "difficulty": "Easy",
    "problem_slug": "crawler-log-folder",
    "topics": [
      "Array",
      "String",
      "Stack"
    ],
    "description": "The Leetcode file system keeps a log each time some user performs a change folder operation.\nThe operations are described below:\nYou are given a list of strings logs where logs[i] is the operation performed by the user at the ith step.\nThe file system starts in the main folder, then the operations in logs are performed.\nReturn the minimum number of operations needed to go back to the main folder after the change folder operations.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Profit of Operating a Centennial Wheel",
    "problem_id": "1721",
    "frontend_id": "1599",
    "difficulty": "Medium",
    "problem_slug": "maximum-profit-of-operating-a-centennial-wheel",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "You are the operator of a Centennial Wheel that has four gondolas, and each gondola has room for up to four people. You have the ability to rotate the gondolas counterclockwise, which costs you runningCost dollars.\nYou are given an array customers of length n where customers[i] is the number of new customers arriving just before the ith rotation (0-indexed). This means you must rotate the wheel i times before the customers[i] customers arrive. You cannot make customers wait if there is room in the gondola. Each customer pays boardingCost dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again.\nYou can stop the wheel at any time, including before serving all customers. If you decide to stop serving customers, all subsequent rotations are free in order to get all the customers down safely. Note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait for the next rotation.\nReturn the minimum number of rotations you need to perform to maximize your profit. If there is no scenario where the profit is positive, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Throne Inheritance",
    "problem_id": "1722",
    "frontend_id": "1600",
    "difficulty": "Medium",
    "problem_slug": "throne-inheritance",
    "topics": [
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Design"
    ],
    "description": "A kingdom consists of a king, his children, his grandchildren, and so on. Every once in a while, someone in the family dies or a child is born.\nThe kingdom has a well-defined order of inheritance that consists of the king as the first member. Let's define the recursive function Successor(x, curOrder), which given a person x and the inheritance order so far, returns who should be the next person after x in the order of inheritance.\nFor example, assume we have a kingdom that consists of the king, his children Alice and Bob (Alice is older than Bob), and finally Alice's son Jack.\nUsing the above function, we can always obtain a unique order of inheritance.\nImplement the ThroneInheritance class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Maximum Number of Achievable Transfer Requests",
    "problem_id": "1723",
    "frontend_id": "1601",
    "difficulty": "Hard",
    "problem_slug": "maximum-number-of-achievable-transfer-requests",
    "topics": [
      "Array",
      "Backtracking",
      "Bit Manipulation",
      "Enumeration"
    ],
    "description": "We have n buildings numbered from 0 to n - 1. Each building has a number of employees. It's transfer season, and some employees want to change the building they reside in.\nYou are given an array requests where requests[i] = [fromi, toi] represents an employee's request to transfer from building fromi to building toi.\nAll buildings are full, so a list of requests is achievable only if for each building, the net change in employee transfers is zero. This means the number of employees leaving is equal to the number of employees moving in. For example if n = 3 and two employees are leaving building 0, one is leaving building 1, and one is leaving building 2, there should be two employees moving to building 0, one employee moving to building 1, and one employee moving to building 2.\nReturn the maximum number of achievable requests.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Design Parking System",
    "problem_id": "1708",
    "frontend_id": "1603",
    "difficulty": "Easy",
    "problem_slug": "design-parking-system",
    "topics": [
      "Design",
      "Simulation",
      "Counting"
    ],
    "description": "Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.\nImplement the ParkingSystem class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Alert Using Same Key-Card Three or More Times in a One Hour Period",
    "problem_id": "1709",
    "frontend_id": "1604",
    "difficulty": "Medium",
    "problem_slug": "alert-using-same-key-card-three-or-more-times-in-a-one-hour-period",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Sorting"
    ],
    "description": "LeetCode company workers use key-cards to unlock office doors. Each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. The system emits an alert if any worker uses the key-card three or more times in a one-hour period.\nYou are given a list of strings keyName and keyTime where [keyName[i], keyTime[i]] corresponds to a person's name and the time when their key-card was used in a single day.\nAccess times are given in the 24-hour time format \"HH:MM\", such as \"23:51\" and \"09:49\".\nReturn a list of unique worker names who received an alert for frequent keycard use. Sort the names in ascending order alphabetically.\nNotice that \"10:00\" - \"11:00\" is considered to be within a one-hour period, while \"22:51\" - \"23:52\" is not considered to be within a one-hour period.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Valid Matrix Given Row and Column Sums",
    "problem_id": "1711",
    "frontend_id": "1605",
    "difficulty": "Medium",
    "problem_slug": "find-valid-matrix-given-row-and-column-sums",
    "topics": [
      "Array",
      "Greedy",
      "Matrix"
    ],
    "description": "You are given two arrays rowSum and colSum of non-negative integers where rowSum[i] is the sum of the elements in the ith row and colSum[j] is the sum of the elements of the jth column of a 2D matrix. In other words, you do not know the elements of the matrix, but you do know the sums of each row and column.\nFind any matrix of non-negative integers of size rowSum.length x colSum.length that satisfies the rowSum and colSum requirements.\nReturn a 2D array representing any matrix that fulfills the requirements. It's guaranteed that at least one matrix that fulfills the requirements exists.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Servers That Handled Most Number of Requests",
    "problem_id": "1710",
    "frontend_id": "1606",
    "difficulty": "Hard",
    "problem_slug": "find-servers-that-handled-most-number-of-requests",
    "topics": [
      "Array",
      "Greedy",
      "Heap (Priority Queue)",
      "Ordered Set"
    ],
    "description": "You have k servers numbered from 0 to k-1 that are being used to handle multiple requests simultaneously. Each server has infinite computational capacity but cannot handle more than one request at a time. The requests are assigned to servers according to a specific algorithm:\nYou are given a strictly increasing array arrival of positive integers, where arrival[i] represents the arrival time of the ith request, and another array load, where load[i] represents the load of the ith request (the time it takes to complete). Your goal is to find the busiest server(s). A server is considered busiest if it handled the most number of requests successfully among all the servers.\nReturn a list containing the IDs (0-indexed) of the busiest server(s). You may return the IDs in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Special Array With X Elements Greater Than or Equal X",
    "problem_id": "1730",
    "frontend_id": "1608",
    "difficulty": "Easy",
    "problem_slug": "special-array-with-x-elements-greater-than-or-equal-x",
    "topics": [
      "Array",
      "Binary Search",
      "Sorting"
    ],
    "description": "You are given an array nums of non-negative integers. nums is considered special if there exists a number x such that there are exactly x numbers in nums that are greater than or equal to x.\nNotice that x does not have to be an element in nums.\nReturn x if the array is special, otherwise, return -1. It can be proven that if nums is special, the value for x is unique.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Even Odd Tree",
    "problem_id": "1731",
    "frontend_id": "1609",
    "difficulty": "Medium",
    "problem_slug": "even-odd-tree",
    "topics": [
      "Tree",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "A binary tree is named Even-Odd if it meets the following conditions:\nGiven the root of a binary tree, return true if the binary tree is Even-Odd, otherwise return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Number of Visible Points",
    "problem_id": "1733",
    "frontend_id": "1610",
    "difficulty": "Hard",
    "problem_slug": "maximum-number-of-visible-points",
    "topics": [
      "Array",
      "Math",
      "Geometry",
      "Sliding Window",
      "Sorting"
    ],
    "description": "You are given an array points, an integer angle, and your location, where location = [posx, posy] and points[i] = [xi, yi] both denote integral coordinates on the X-Y plane.\nInitially, you are facing directly east from your position. You cannot move from your position, but you can rotate. In other words, posx and posy cannot be changed. Your field of view in degrees is represented by angle, determining how wide you can see from any given view direction. Let d be the amount in degrees that you rotate counterclockwise. Then, your field of view is the inclusive range of angles [d - angle/2, d + angle/2].\nYour browser does not support the video tag or this video format.\nYou can see some set of points if, for each point, the angle formed by the point, your position, and the immediate east direction from your position is in your field of view.\nThere can be multiple points at one coordinate. There may be points at your location, and you can always see these points regardless of your rotation. Points do not obstruct your vision to other points.\nReturn the maximum number of points you can see.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum One Bit Operations to Make Integers Zero",
    "problem_id": "1732",
    "frontend_id": "1611",
    "difficulty": "Hard",
    "problem_slug": "minimum-one-bit-operations-to-make-integers-zero",
    "topics": [
      "Dynamic Programming",
      "Bit Manipulation",
      "Memoization"
    ],
    "description": "Given an integer n, you must transform it into 0 using the following operations any number of times:\nReturn the minimum number of operations to transform n into 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Nesting Depth of the Parentheses",
    "problem_id": "1737",
    "frontend_id": "1614",
    "difficulty": "Easy",
    "problem_slug": "maximum-nesting-depth-of-the-parentheses",
    "topics": [
      "String",
      "Stack"
    ],
    "description": "Given a valid parentheses string s, return the nesting depth of s. The nesting depth is the maximum number of nested parentheses.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximal Network Rank",
    "problem_id": "1738",
    "frontend_id": "1615",
    "difficulty": "Medium",
    "problem_slug": "maximal-network-rank",
    "topics": [
      "Graph"
    ],
    "description": "There is an infrastructure of n cities with some number of roads connecting these cities. Each roads[i] = [ai, bi] indicates that there is a bidirectional road between cities ai and bi.\nThe network rank of two different cities is defined as the total number of directly connected roads to either city. If a road is directly connected to both cities, it is only counted once.\nThe maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities.\nGiven the integer n and the array roads, return the maximal network rank of the entire infrastructure.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Split Two Strings to Make Palindrome",
    "problem_id": "1739",
    "frontend_id": "1616",
    "difficulty": "Medium",
    "problem_slug": "split-two-strings-to-make-palindrome",
    "topics": [
      "Two Pointers",
      "String"
    ],
    "description": "You are given two strings a and b of the same length. Choose an index and split both strings at the same index, splitting a into two strings: aprefix and asuffix where a = aprefix + asuffix, and splitting b into two strings: bprefix and bsuffix where b = bprefix + bsuffix. Check if aprefix + bsuffix or bprefix + asuffix forms a palindrome.\nWhen you split a string s into sprefix and ssuffix, either ssuffix or sprefix is allowed to be empty. For example, if s = \"abc\", then \"\" + \"abc\", \"a\" + \"bc\", \"ab\" + \"c\" , and \"abc\" + \"\" are valid splits.\nReturn true if it is possible to form a palindrome string, otherwise return false.\nNotice that x + y denotes the concatenation of strings x and y.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Subtrees With Max Distance Between Cities",
    "problem_id": "1740",
    "frontend_id": "1617",
    "difficulty": "Hard",
    "problem_slug": "count-subtrees-with-max-distance-between-cities",
    "topics": [
      "Dynamic Programming",
      "Bit Manipulation",
      "Tree",
      "Enumeration",
      "Bitmask"
    ],
    "description": "There are n cities numbered from 1 to n. You are given an array edges of size n-1, where edges[i] = [ui, vi] represents a bidirectional edge between cities ui and vi. There exists a unique path between each pair of cities. In other words, the cities form a tree.\nA subtree is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. Two subtrees are different if there is a city in one subtree that is not present in the other.\nFor each d from 1 to n-1, find the number of subtrees in which the maximum distance between any two cities in the subtree is equal to d.\nReturn an array of size n-1 where the dth element (1-indexed) is the number of subtrees in which the maximum distance between any two cities is equal to d.\nNotice that the distance between the two cities is the number of edges in the path between them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Mean of Array After Removing Some Elements",
    "problem_id": "1210",
    "frontend_id": "1619",
    "difficulty": "Easy",
    "problem_slug": "mean-of-array-after-removing-some-elements",
    "topics": [
      "Array",
      "Sorting"
    ],
    "description": "Given an integer array arr, return the mean of the remaining integers after removing the smallest 5% and the largest 5% of the elements.\nAnswers within 10-5 of the actual answer will be considered accepted.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Coordinate With Maximum Network Quality",
    "problem_id": "1726",
    "frontend_id": "1620",
    "difficulty": "Medium",
    "problem_slug": "coordinate-with-maximum-network-quality",
    "topics": [
      "Array",
      "Enumeration"
    ],
    "description": "You are given an array of network towers towers, where towers[i] = [xi, yi, qi] denotes the ith network tower with location (xi, yi) and quality factor qi. All the coordinates are integral coordinates on the X-Y plane, and the distance between the two coordinates is the Euclidean distance.\nYou are also given an integer radius where a tower is reachable if the distance is less than or equal to radius. Outside that distance, the signal becomes garbled, and the tower is not reachable.\nThe signal quality of the ith tower at a coordinate (x, y) is calculated with the formula ⌊qi / (1 + d)⌋, where d is the distance between the tower and the coordinate. The network quality at a coordinate is the sum of the signal qualities from all the reachable towers.\nReturn the array [cx, cy] representing the integral coordinate (cx, cy) where the network quality is maximum. If there are multiple coordinates with the same network quality, return the lexicographically minimum non-negative coordinate.\nNote:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Sets of K Non-Overlapping Line Segments",
    "problem_id": "1725",
    "frontend_id": "1621",
    "difficulty": "Medium",
    "problem_slug": "number-of-sets-of-k-non-overlapping-line-segments",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "description": "Given n points on a 1-D plane, where the ith point (from 0 to n-1) is at x = i, find the number of ways we can draw exactly k non-overlapping line segments such that each segment covers two or more points. The endpoints of each segment must have integral coordinates. The k line segments do not have to cover all n points, and they are allowed to share endpoints.\nReturn the number of ways we can draw k non-overlapping line segments. Since this number can be huge, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Fancy Sequence",
    "problem_id": "1728",
    "frontend_id": "1622",
    "difficulty": "Hard",
    "problem_slug": "fancy-sequence",
    "topics": [
      "Math",
      "Design",
      "Segment Tree"
    ],
    "description": "Write an API that generates fancy sequences using the append, addAll, and multAll operations.\nImplement the Fancy class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Largest Substring Between Two Equal Characters",
    "problem_id": "1746",
    "frontend_id": "1624",
    "difficulty": "Easy",
    "problem_slug": "largest-substring-between-two-equal-characters",
    "topics": [
      "Hash Table",
      "String"
    ],
    "description": "Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.\nA substring is a contiguous sequence of characters within a string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Lexicographically Smallest String After Applying Operations",
    "problem_id": "1747",
    "frontend_id": "1625",
    "difficulty": "Medium",
    "problem_slug": "lexicographically-smallest-string-after-applying-operations",
    "topics": [
      "String",
      "Depth-First Search",
      "Breadth-First Search",
      "Enumeration"
    ],
    "description": "You are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.\nYou can apply either of the following two operations any number of times and in any order on s:\nReturn the lexicographically smallest string you can obtain by applying the above operations any number of times on s.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"0158\" is lexicographically smaller than \"0190\" because the first position they differ is at the third letter, and '5' comes before '9'.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Best Team With No Conflicts",
    "problem_id": "1748",
    "frontend_id": "1626",
    "difficulty": "Medium",
    "problem_slug": "best-team-with-no-conflicts",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the sum of scores of all the players in the team.\nHowever, the basketball team is not allowed to have conflicts. A conflict exists if a younger player has a strictly higher score than an older player. A conflict does not occur between players of the same age.\nGiven two lists, scores and ages, where each scores[i] and ages[i] represents the score and age of the ith player, respectively, return the highest overall score of all possible basketball teams.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Graph Connectivity With Threshold",
    "problem_id": "1223",
    "frontend_id": "1627",
    "difficulty": "Hard",
    "problem_slug": "graph-connectivity-with-threshold",
    "topics": [
      "Array",
      "Math",
      "Union Find",
      "Number Theory"
    ],
    "description": "We have n cities labeled from 1 to n. Two different cities with labels x and y are directly connected by a bidirectional road if and only if x and y share a common divisor strictly greater than some threshold. More formally, cities with labels x and y have a road between them if there exists an integer z such that all of the following are true:\nGiven the two integers, n and threshold, and an array of queries, you must determine for each queries[i] = [ai, bi] if cities ai and bi are connected directly or indirectly. (i.e. there is some path between them).\nReturn an array answer, where answer.length == queries.length and answer[i] is true if for the ith query, there is a path between ai and bi, or answer[i] is false if there is no path.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Slowest Key",
    "problem_id": "1751",
    "frontend_id": "1629",
    "difficulty": "Easy",
    "problem_slug": "slowest-key",
    "topics": [
      "Array",
      "String"
    ],
    "description": "A newly designed keypad was tested, where a tester pressed a sequence of n keys, one at a time.\nYou are given a string keysPressed of length n, where keysPressed[i] was the ith key pressed in the testing sequence, and a sorted list releaseTimes, where releaseTimes[i] was the time the ith key was released. Both arrays are 0-indexed. The 0th key was pressed at the time 0, and every subsequent key was pressed at the exact time the previous key was released.\nThe tester wants to know the key of the keypress that had the longest duration. The ith keypress had a duration of releaseTimes[i] - releaseTimes[i - 1], and the 0th keypress had a duration of releaseTimes[0].\nNote that the same key could have been pressed multiple times during the test, and these multiple presses of the same key may not have had the same duration.\nReturn the key of the keypress that had the longest duration. If there are multiple such keypresses, return the lexicographically largest key of the keypresses.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Arithmetic Subarrays",
    "problem_id": "1752",
    "frontend_id": "1630",
    "difficulty": "Medium",
    "problem_slug": "arithmetic-subarrays",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting"
    ],
    "description": "A sequence of numbers is called arithmetic if it consists of at least two elements, and the difference between every two consecutive elements is the same. More formally, a sequence s is arithmetic if and only if s[i+1] - s[i] == s[1] - s[0] for all valid i.\nFor example, these are arithmetic sequences:\nThe following sequence is not arithmetic:\nYou are given an array of n integers, nums, and two arrays of m integers each, l and r, representing the m range queries, where the ith query is the range [l[i], r[i]]. All the arrays are 0-indexed.\nReturn a list of boolean elements answer, where answer[i] is true if the subarray nums[l[i]], nums[l[i]+1], ... , nums[r[i]] can be rearranged to form an arithmetic sequence, and false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Path With Minimum Effort",
    "problem_id": "1753",
    "frontend_id": "1631",
    "difficulty": "Medium",
    "problem_slug": "path-with-minimum-effort",
    "topics": [
      "Array",
      "Binary Search",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Heap (Priority Queue)",
      "Matrix"
    ],
    "description": "You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.\nA route's effort is the maximum absolute difference in heights between two consecutive cells of the route.\nReturn the minimum effort required to travel from the top-left cell to the bottom-right cell.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Rank Transform of a Matrix",
    "problem_id": "1257",
    "frontend_id": "1632",
    "difficulty": "Hard",
    "problem_slug": "rank-transform-of-a-matrix",
    "topics": [
      "Array",
      "Union Find",
      "Graph",
      "Topological Sort",
      "Sorting",
      "Matrix"
    ],
    "description": "Given an m x n matrix, return a new matrix answer where answer[row][col] is the rank of matrix[row][col].\nThe rank is an integer that represents how large an element is compared to other elements. It is calculated using the following rules:\nThe test cases are generated so that answer is unique under the given rules.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Percentage of Users Attended a Contest",
    "problem_id": "1773",
    "frontend_id": "1633",
    "difficulty": "Easy",
    "problem_slug": "percentage-of-users-attended-a-contest",
    "topics": [
      "Database"
    ],
    "description": "Table: Users\nTable: Register\nWrite a solution to find the percentage of the users registered in each contest rounded to two decimals.\nReturn the result table ordered by percentage in descending order. In case of a tie, order it by contest_id in ascending order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Sort Array by Increasing Frequency",
    "problem_id": "1741",
    "frontend_id": "1636",
    "difficulty": "Easy",
    "problem_slug": "sort-array-by-increasing-frequency",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting"
    ],
    "description": "Given an array of integers nums, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.\nReturn the sorted array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Widest Vertical Area Between Two Points Containing No Points",
    "problem_id": "1742",
    "frontend_id": "1637",
    "difficulty": "Easy",
    "problem_slug": "widest-vertical-area-between-two-points-containing-no-points",
    "topics": [
      "Array",
      "Sorting"
    ],
    "description": "Given n points on a 2D plane where points[i] = [xi, yi], Return the widest vertical area between two points such that no points are inside the area.\nA vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The widest vertical area is the one with the maximum width.\nNote that points on the edge of a vertical area are not considered included in the area.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Substrings That Differ by One Character",
    "problem_id": "1743",
    "frontend_id": "1638",
    "difficulty": "Medium",
    "problem_slug": "count-substrings-that-differ-by-one-character",
    "topics": [
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Enumeration"
    ],
    "description": "Given two strings s and t, find the number of ways you can choose a non-empty substring of s and replace a single character by a different character such that the resulting substring is a substring of t. In other words, find the number of substrings in s that differ from some substring in t by exactly one character.\nFor example, the underlined substrings in \"computer\" and \"computation\" only differ by the 'e'/'a', so this is a valid way.\nReturn the number of substrings that satisfy the condition above.\nA substring is a contiguous sequence of characters within a string.\nExample 1:"
  },
  {
    "title": "Number of Ways to Form a Target String Given a Dictionary",
    "problem_id": "1744",
    "frontend_id": "1639",
    "difficulty": "Hard",
    "problem_slug": "number-of-ways-to-form-a-target-string-given-a-dictionary",
    "topics": [
      "Array",
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given a list of strings of the same length words and a string target.\nYour task is to form target using the given words under the following rules:\nNotice that you can use multiple characters from the same string in words provided the conditions above are met.\nReturn the number of ways to form target from words. Since the answer may be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check Array Formation Through Concatenation",
    "problem_id": "1760",
    "frontend_id": "1640",
    "difficulty": "Easy",
    "problem_slug": "check-array-formation-through-concatenation",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "You are given an array of distinct integers arr and an array of integer arrays pieces, where the integers in pieces are distinct. Your goal is to form arr by concatenating the arrays in pieces in any order. However, you are not allowed to reorder the integers in each array pieces[i].\nReturn true if it is possible to form the array arr from pieces. Otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Sorted Vowel Strings",
    "problem_id": "1761",
    "frontend_id": "1641",
    "difficulty": "Medium",
    "problem_slug": "count-sorted-vowel-strings",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "description": "Given an integer n, return the number of strings of length n that consist only of vowels (a, e, i, o, u) and are lexicographically sorted.\nA string s is lexicographically sorted if for all valid i, s[i] is the same as or comes before s[i+1] in the alphabet.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Furthest Building You Can Reach",
    "problem_id": "1762",
    "frontend_id": "1642",
    "difficulty": "Medium",
    "problem_slug": "furthest-building-you-can-reach",
    "topics": [
      "Array",
      "Greedy",
      "Heap (Priority Queue)"
    ],
    "description": "You are given an integer array heights representing the heights of buildings, some bricks, and some ladders.\nYou start your journey from building 0 and move to the next building by possibly using bricks or ladders.\nWhile moving from building i to building i+1 (0-indexed),\nReturn the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Kth Smallest Instructions",
    "problem_id": "489",
    "frontend_id": "1643",
    "difficulty": "Hard",
    "problem_slug": "kth-smallest-instructions",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "description": "Bob is standing at cell (0, 0), and he wants to reach destination: (row, column). He can only travel right and down. You are going to help Bob by providing instructions for him to reach destination.\nThe instructions are represented as a string, where each character is either:\nMultiple instructions will lead Bob to destination. For example, if destination is (2, 3), both \"HHHVV\" and \"HVHVH\" are valid instructions.\nHowever, Bob is very picky. Bob has a lucky number k, and he wants the kth lexicographically smallest instructions that will lead him to destination. k is 1-indexed.\nGiven an integer array destination and an integer k, return the kth lexicographically smallest instructions that will take Bob to destination.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Get Maximum in Generated Array",
    "problem_id": "1769",
    "frontend_id": "1646",
    "difficulty": "Easy",
    "problem_slug": "get-maximum-in-generated-array",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "You are given an integer n. A 0-indexed integer array nums of length n + 1 is generated in the following way:\nReturn the maximum integer in the array nums​​​.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Deletions to Make Character Frequencies Unique",
    "problem_id": "1770",
    "frontend_id": "1647",
    "difficulty": "Medium",
    "problem_slug": "minimum-deletions-to-make-character-frequencies-unique",
    "topics": [
      "Hash Table",
      "String",
      "Greedy",
      "Sorting"
    ],
    "description": "A string s is called good if there are no two different characters in s that have the same frequency.\nGiven a string s, return the minimum number of characters you need to delete to make s good.\nThe frequency of a character in a string is the number of times it appears in the string. For example, in the string \"aab\", the frequency of 'a' is 2, while the frequency of 'b' is 1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sell Diminishing-Valued Colored Balls",
    "problem_id": "1771",
    "frontend_id": "1648",
    "difficulty": "Medium",
    "problem_slug": "sell-diminishing-valued-colored-balls",
    "topics": [
      "Array",
      "Math",
      "Binary Search",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You have an inventory of different colored balls, and there is a customer that wants orders balls of any color.\nThe customer weirdly values the colored balls. Each colored ball's value is the number of balls of that color you currently have in your inventory. For example, if you own 6 yellow balls, the customer would pay 6 for the first yellow ball. After the transaction, there are only 5 yellow balls left, so the next yellow ball is then valued at 5 (i.e., the value of the balls decreases as you sell more to the customer).\nYou are given an integer array, inventory, where inventory[i] represents the number of balls of the ith color that you initially own. You are also given an integer orders, which represents the total number of balls that the customer wants. You can sell the balls in any order.\nReturn the maximum total value that you can attain after selling orders colored balls. As the answer may be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Create Sorted Array through Instructions",
    "problem_id": "1772",
    "frontend_id": "1649",
    "difficulty": "Hard",
    "problem_slug": "create-sorted-array-through-instructions",
    "topics": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set"
    ],
    "description": "Given an integer array instructions, you are asked to create a sorted array from the elements in instructions. You start with an empty container nums. For each element from left to right in instructions, insert it into nums. The cost of each insertion is the minimum of the following:\nFor example, if inserting element 3 into nums = [1,2,3,5], the cost of insertion is min(2, 1) (elements 1 and 2 are less than 3, element 5 is greater than 3) and nums will become [1,2,3,3,5].\nReturn the total cost to insert all elements from instructions into nums. Since the answer may be large, return it modulo 109 + 7\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Defuse the Bomb",
    "problem_id": "1755",
    "frontend_id": "1652",
    "difficulty": "Easy",
    "problem_slug": "defuse-the-bomb",
    "topics": [
      "Array",
      "Sliding Window"
    ],
    "description": "You have a bomb to defuse, and your time is running out! Your informer will provide you with a circular array code of length of n and a key k.\nTo decrypt the code, you must replace every number. All the numbers are replaced simultaneously.\nAs code is circular, the next element of code[n-1] is code[0], and the previous element of code[0] is code[n-1].\nGiven the circular array code and an integer key k, return the decrypted code to defuse the bomb!\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Deletions to Make String Balanced",
    "problem_id": "1756",
    "frontend_id": "1653",
    "difficulty": "Medium",
    "problem_slug": "minimum-deletions-to-make-string-balanced",
    "topics": [
      "String",
      "Dynamic Programming",
      "Stack"
    ],
    "description": "You are given a string s consisting only of characters 'a' and 'b'​​​​.\nYou can delete any number of characters in s to make s balanced. s is balanced if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and s[j]= 'a'.\nReturn the minimum number of deletions needed to make s balanced.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Jumps to Reach Home",
    "problem_id": "1757",
    "frontend_id": "1654",
    "difficulty": "Medium",
    "problem_slug": "minimum-jumps-to-reach-home",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Breadth-First Search"
    ],
    "description": "A certain bug's home is on the x-axis at position x. Help them get there from position 0.\nThe bug jumps according to the following rules:\nThe bug may jump forward beyond its home, but it cannot jump to positions numbered with negative integers.\nGiven an array of integers forbidden, where forbidden[i] means that the bug cannot jump to the position forbidden[i], and integers a, b, and x, return the minimum number of jumps needed for the bug to reach its home. If there is no possible sequence of jumps that lands the bug on position x, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Distribute Repeating Integers",
    "problem_id": "1758",
    "frontend_id": "1655",
    "difficulty": "Hard",
    "problem_slug": "distribute-repeating-integers",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "You are given an array of n integers, nums, where there are at most 50 unique values in the array. You are also given an array of m customer order quantities, quantity, where quantity[i] is the amount of integers the ith customer ordered. Determine if it is possible to distribute nums such that:\nReturn true if it is possible to distribute nums according to the above conditions.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Design an Ordered Stream",
    "problem_id": "1775",
    "frontend_id": "1656",
    "difficulty": "Easy",
    "problem_slug": "design-an-ordered-stream",
    "topics": [
      "Array",
      "Hash Table",
      "Design",
      "Data Stream"
    ],
    "description": "There is a stream of n (idKey, value) pairs arriving in an arbitrary order, where idKey is an integer between 1 and n and value is a string. No two pairs have the same id.\nDesign a stream that returns the values in increasing order of their IDs by returning a chunk (list) of values after each insertion. The concatenation of all the chunks should result in a list of the sorted values.\nImplement the OrderedStream class:\nExample:\nConstraints:"
  },
  {
    "title": "Determine if Two Strings Are Close",
    "problem_id": "1777",
    "frontend_id": "1657",
    "difficulty": "Medium",
    "problem_slug": "determine-if-two-strings-are-close",
    "topics": [
      "Hash Table",
      "String",
      "Sorting",
      "Counting"
    ],
    "description": "Two strings are considered close if you can attain one from the other using the following operations:\nYou can use the operations on either string as many times as necessary.\nGiven two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Reduce X to Zero",
    "problem_id": "1776",
    "frontend_id": "1658",
    "difficulty": "Medium",
    "problem_slug": "minimum-operations-to-reduce-x-to-zero",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "You are given an integer array nums and an integer x. In one operation, you can either remove the leftmost or the rightmost element from the array nums and subtract its value from x. Note that this modifies the array for future operations.\nReturn the minimum number of operations to reduce x to exactly 0 if it is possible, otherwise, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximize Grid Happiness",
    "problem_id": "1778",
    "frontend_id": "1659",
    "difficulty": "Hard",
    "problem_slug": "maximize-grid-happiness",
    "topics": [
      "Dynamic Programming",
      "Bit Manipulation",
      "Memoization",
      "Bitmask"
    ],
    "description": "You are given four integers, m, n, introvertsCount, and extrovertsCount. You have an m x n grid, and there are two types of people: introverts and extroverts. There are introvertsCount introverts and extrovertsCount extroverts.\nYou should decide how many people you want to live in the grid and assign each of them one grid cell. Note that you do not have to have all the people living in the grid.\nThe happiness of each person is calculated as follows:\nNeighbors live in the directly adjacent cells north, east, south, and west of a person's cell.\nThe grid happiness is the sum of each person's happiness. Return the maximum possible grid happiness.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Average Time of Process per Machine",
    "problem_id": "1801",
    "frontend_id": "1661",
    "difficulty": "Easy",
    "problem_slug": "average-time-of-process-per-machine",
    "topics": [
      "Database"
    ],
    "description": "Table: Activity\nThere is a factory website that has several machines each running the same number of processes. Write a solution to find the average time each machine takes to complete a process.\nThe time to complete a process is the 'end' timestamp minus the 'start' timestamp. The average time is calculated by the total time to complete every process on the machine divided by the number of processes that were run.\nThe resulting table should have the machine_id along with the average time as processing_time, which should be rounded to 3 decimal places.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Check If Two String Arrays are Equivalent",
    "problem_id": "1781",
    "frontend_id": "1662",
    "difficulty": "Easy",
    "problem_slug": "check-if-two-string-arrays-are-equivalent",
    "topics": [
      "Array",
      "String"
    ],
    "description": "Given two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise.\nA string is represented by an array if the array elements concatenated in order forms the string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Smallest String With A Given Numeric Value",
    "problem_id": "1782",
    "frontend_id": "1663",
    "difficulty": "Medium",
    "problem_slug": "smallest-string-with-a-given-numeric-value",
    "topics": [
      "String",
      "Greedy"
    ],
    "description": "The numeric value of a lowercase character is defined as its position (1-indexed) in the alphabet, so the numeric value of a is 1, the numeric value of b is 2, the numeric value of c is 3, and so on.\nThe numeric value of a string consisting of lowercase characters is defined as the sum of its characters' numeric values. For example, the numeric value of the string \"abe\" is equal to 1 + 2 + 5 = 8.\nYou are given two integers n and k. Return the lexicographically smallest string with length equal to n and numeric value equal to k.\nNote that a string x is lexicographically smaller than string y if x comes before y in dictionary order, that is, either x is a prefix of y, or if i is the first position such that x[i] != y[i], then x[i] comes before y[i] in alphabetic order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Ways to Make a Fair Array",
    "problem_id": "1783",
    "frontend_id": "1664",
    "difficulty": "Medium",
    "problem_slug": "ways-to-make-a-fair-array",
    "topics": [
      "Array",
      "Prefix Sum"
    ],
    "description": "You are given an integer array nums. You can choose exactly one index (0-indexed) and remove the element. Notice that the index of the elements may change after the removal.\nFor example, if nums = [6,1,7,4,1]:\nAn array is fair if the sum of the odd-indexed values equals the sum of the even-indexed values.\nReturn the number of indices that you could choose such that after the removal, nums is fair.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Initial Energy to Finish Tasks",
    "problem_id": "1784",
    "frontend_id": "1665",
    "difficulty": "Hard",
    "problem_slug": "minimum-initial-energy-to-finish-tasks",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an array tasks where tasks[i] = [actuali, minimumi]:\nFor example, if the task is [10, 12] and your current energy is 11, you cannot start this task. However, if your current energy is 13, you can complete this task, and your energy will be 3 after finishing it.\nYou can finish the tasks in any order you like.\nReturn the minimum initial amount of energy you will need to finish all the tasks.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Fix Names in a Table",
    "problem_id": "1811",
    "frontend_id": "1667",
    "difficulty": "Easy",
    "problem_slug": "fix-names-in-a-table",
    "topics": [
      "Database"
    ],
    "description": "Table: Users\nWrite a solution to fix the names so that only the first character is uppercase and the rest are lowercase.\nReturn the result table ordered by user_id.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Maximum Repeating Substring",
    "problem_id": "1764",
    "frontend_id": "1668",
    "difficulty": "Easy",
    "problem_slug": "maximum-repeating-substring",
    "topics": [
      "String",
      "Dynamic Programming",
      "String Matching"
    ],
    "description": "For a string sequence, a string word is k-repeating if word concatenated k times is a substring of sequence. The word's maximum k-repeating value is the highest value k where word is k-repeating in sequence. If word is not a substring of sequence, word's maximum k-repeating value is 0.\nGiven strings sequence and word, return the maximum k-repeating value of word in sequence.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Merge In Between Linked Lists",
    "problem_id": "1765",
    "frontend_id": "1669",
    "difficulty": "Medium",
    "problem_slug": "merge-in-between-linked-lists",
    "topics": [
      "Linked List"
    ],
    "description": "You are given two linked lists: list1 and list2 of sizes n and m respectively.\nRemove list1's nodes from the ath node to the bth node, and put list2 in their place.\nThe blue edges and nodes in the following figure indicate the result:\nBuild the result list and return its head.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Design Front Middle Back Queue",
    "problem_id": "1767",
    "frontend_id": "1670",
    "difficulty": "Medium",
    "problem_slug": "design-front-middle-back-queue",
    "topics": [
      "Array",
      "Linked List",
      "Design",
      "Queue",
      "Data Stream"
    ],
    "description": "Design a queue that supports push and pop operations in the front, middle, and back.\nImplement the FrontMiddleBack class:\nNotice that when there are two middle position choices, the operation is performed on the frontmost middle position choice. For example:\nExample 1:\nConstraints:"
  },
  {
    "title": "Minimum Number of Removals to Make Mountain Array",
    "problem_id": "1766",
    "frontend_id": "1671",
    "difficulty": "Hard",
    "problem_slug": "minimum-number-of-removals-to-make-mountain-array",
    "topics": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "You may recall that an array arr is a mountain array if and only if:\nGiven an integer array nums​​​, return the minimum number of elements to remove to make nums​​​ a mountain array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Richest Customer Wealth",
    "problem_id": "1791",
    "frontend_id": "1672",
    "difficulty": "Easy",
    "problem_slug": "richest-customer-wealth",
    "topics": [
      "Array",
      "Matrix"
    ],
    "description": "You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank. Return the wealth that the richest customer has.\nA customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Most Competitive Subsequence",
    "problem_id": "1792",
    "frontend_id": "1673",
    "difficulty": "Medium",
    "problem_slug": "find-the-most-competitive-subsequence",
    "topics": [
      "Array",
      "Stack",
      "Greedy",
      "Monotonic Stack"
    ],
    "description": "Given an integer array nums and a positive integer k, return the most competitive subsequence of nums of size k.\nAn array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.\nWe define that a subsequence a is more competitive than a subsequence b (of the same length) if in the first position where a and b differ, subsequence a has a number less than the corresponding number in b. For example, [1,3,4] is more competitive than [1,3,5] because the first position they differ is at the final number, and 4 is less than 5.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Moves to Make Array Complementary",
    "problem_id": "1793",
    "frontend_id": "1674",
    "difficulty": "Medium",
    "problem_slug": "minimum-moves-to-make-array-complementary",
    "topics": [
      "Array",
      "Hash Table",
      "Prefix Sum"
    ],
    "description": "You are given an integer array nums of even length n and an integer limit. In one move, you can replace any integer from nums with another integer between 1 and limit, inclusive.\nThe array nums is complementary if for all indices i (0-indexed), nums[i] + nums[n - 1 - i] equals the same number. For example, the array [1,2,3,4] is complementary because for all indices i, nums[i] + nums[n - 1 - i] = 5.\nReturn the minimum number of moves required to make nums complementary.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimize Deviation in Array",
    "problem_id": "1794",
    "frontend_id": "1675",
    "difficulty": "Hard",
    "problem_slug": "minimize-deviation-in-array",
    "topics": [
      "Array",
      "Greedy",
      "Heap (Priority Queue)",
      "Ordered Set"
    ],
    "description": "You are given an array nums of n positive integers.\nYou can perform two types of operations on any element of the array any number of times:\nThe deviation of the array is the maximum difference between any two elements in the array.\nReturn the minimum deviation the array can have after performing some number of operations.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Goal Parser Interpretation",
    "problem_id": "1797",
    "frontend_id": "1678",
    "difficulty": "Easy",
    "problem_slug": "goal-parser-interpretation",
    "topics": [
      "String"
    ],
    "description": "You own a Goal Parser that can interpret a string command. The command consists of an alphabet of \"G\", \"()\" and/or \"(al)\" in some order. The Goal Parser will interpret \"G\" as the string \"G\", \"()\" as the string \"o\", and \"(al)\" as the string \"al\". The interpreted strings are then concatenated in the original order.\nGiven the string command, return the Goal Parser's interpretation of command.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Max Number of K-Sum Pairs",
    "problem_id": "1798",
    "frontend_id": "1679",
    "difficulty": "Medium",
    "problem_slug": "max-number-of-k-sum-pairs",
    "topics": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Sorting"
    ],
    "description": "You are given an integer array nums and an integer k.\nIn one operation, you can pick two numbers from the array whose sum equals k and remove them from the array.\nReturn the maximum number of operations you can perform on the array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Concatenation of Consecutive Binary Numbers",
    "problem_id": "1800",
    "frontend_id": "1680",
    "difficulty": "Medium",
    "problem_slug": "concatenation-of-consecutive-binary-numbers",
    "topics": [
      "Math",
      "Bit Manipulation",
      "Simulation"
    ],
    "description": "Given an integer n, return the decimal value of the binary string formed by concatenating the binary representations of 1 to n in order, modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Incompatibility",
    "problem_id": "1799",
    "frontend_id": "1681",
    "difficulty": "Hard",
    "problem_slug": "minimum-incompatibility",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "You are given an integer array nums​​​ and an integer k. You are asked to distribute this array into k subsets of equal size such that there are no two equal elements in the same subset.\nA subset's incompatibility is the difference between the maximum and minimum elements in that array.\nReturn the minimum possible sum of incompatibilities of the k subsets after distributing the array optimally, or return -1 if it is not possible.\nA subset is a group integers that appear in the array with no particular order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Invalid Tweets",
    "problem_id": "1827",
    "frontend_id": "1683",
    "difficulty": "Easy",
    "problem_slug": "invalid-tweets",
    "topics": [
      "Database"
    ],
    "description": "Table: Tweets\nWrite a solution to find the IDs of the invalid tweets. The tweet is invalid if the number of characters used in the content of the tweet is strictly greater than 15.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Count the Number of Consistent Strings",
    "problem_id": "1786",
    "frontend_id": "1684",
    "difficulty": "Easy",
    "problem_slug": "count-the-number-of-consistent-strings",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Counting"
    ],
    "description": "You are given a string allowed consisting of distinct characters and an array of strings words. A string is consistent if all characters in the string appear in the string allowed.\nReturn the number of consistent strings in the array words.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sum of Absolute Differences in a Sorted Array",
    "problem_id": "1787",
    "frontend_id": "1685",
    "difficulty": "Medium",
    "problem_slug": "sum-of-absolute-differences-in-a-sorted-array",
    "topics": [
      "Array",
      "Math",
      "Prefix Sum"
    ],
    "description": "You are given an integer array nums sorted in non-decreasing order.\nBuild and return an integer array result with the same length as nums such that result[i] is equal to the summation of absolute differences between nums[i] and all the other elements in the array.\nIn other words, result[i] is equal to sum(|nums[i]-nums[j]|) where 0 <= j < nums.length and j != i (0-indexed).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Stone Game VI",
    "problem_id": "1788",
    "frontend_id": "1686",
    "difficulty": "Medium",
    "problem_slug": "stone-game-vi",
    "topics": [
      "Array",
      "Math",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)",
      "Game Theory"
    ],
    "description": "Alice and Bob take turns playing a game, with Alice starting first.\nThere are n stones in a pile. On each player's turn, they can remove a stone from the pile and receive points based on the stone's value. Alice and Bob may value the stones differently.\nYou are given two integer arrays of length n, aliceValues and bobValues. Each aliceValues[i] and bobValues[i] represents how Alice and Bob, respectively, value the ith stone.\nThe winner is the person with the most points after all the stones are chosen. If both players have the same amount of points, the game results in a draw. Both players will play optimally. Both players know the other's values.\nDetermine the result of the game, and:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Delivering Boxes from Storage to Ports",
    "problem_id": "1789",
    "frontend_id": "1687",
    "difficulty": "Hard",
    "problem_slug": "delivering-boxes-from-storage-to-ports",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Segment Tree",
      "Queue",
      "Heap (Priority Queue)",
      "Prefix Sum",
      "Monotonic Queue"
    ],
    "description": "You have the task of delivering some boxes from storage to their ports using only one ship. However, this ship has a limit on the number of boxes and the total weight that it can carry.\nYou are given an array boxes, where boxes[i] = [ports​​i​, weighti], and three integers portsCount, maxBoxes, and maxWeight.\nThe boxes need to be delivered in the order they are given. The ship will follow these steps:\nThe ship must end at storage after all the boxes have been delivered.\nReturn the minimum number of trips the ship needs to make to deliver all boxes to their respective ports.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count of Matches in Tournament",
    "problem_id": "1806",
    "frontend_id": "1688",
    "difficulty": "Easy",
    "problem_slug": "count-of-matches-in-tournament",
    "topics": [
      "Math",
      "Simulation"
    ],
    "description": "You are given an integer n, the number of teams in a tournament that has strange rules:\nReturn the number of matches played in the tournament until a winner is decided.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Partitioning Into Minimum Number Of Deci-Binary Numbers",
    "problem_id": "1807",
    "frontend_id": "1689",
    "difficulty": "Medium",
    "problem_slug": "partitioning-into-minimum-number-of-deci-binary-numbers",
    "topics": [
      "String",
      "Greedy"
    ],
    "description": "A decimal number is called deci-binary if each of its digits is either 0 or 1 without any leading zeros. For example, 101 and 1100 are deci-binary, while 112 and 3001 are not.\nGiven a string n that represents a positive decimal integer, return the minimum number of positive deci-binary numbers needed so that they sum up to n.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Stone Game VII",
    "problem_id": "1808",
    "frontend_id": "1690",
    "difficulty": "Medium",
    "problem_slug": "stone-game-vii",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Game Theory"
    ],
    "description": "Alice and Bob take turns playing a game, with Alice starting first.\nThere are n stones arranged in a row. On each player's turn, they can remove either the leftmost stone or the rightmost stone from the row and receive points equal to the sum of the remaining stones' values in the row. The winner is the one with the higher score when there are no stones left to remove.\nBob found that he will always lose this game (poor Bob, he always loses), so he decided to minimize the score's difference. Alice's goal is to maximize the difference in the score.\nGiven an array of integers stones where stones[i] represents the value of the ith stone from the left, return the difference in Alice and Bob's score if they both play optimally.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Height by Stacking Cuboids ",
    "problem_id": "1367",
    "frontend_id": "1691",
    "difficulty": "Hard",
    "problem_slug": "maximum-height-by-stacking-cuboids",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "Given n cuboids where the dimensions of the ith cuboid is cuboids[i] = [widthi, lengthi, heighti] (0-indexed). Choose a subset of cuboids and place them on each other.\nYou can place cuboid i on cuboid j if widthi <= widthj and lengthi <= lengthj and heighti <= heightj. You can rearrange any cuboid's dimensions by rotating it to put it on another cuboid.\nReturn the maximum height of the stacked cuboids.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Daily Leads and Partners",
    "problem_id": "1837",
    "frontend_id": "1693",
    "difficulty": "Easy",
    "problem_slug": "daily-leads-and-partners",
    "topics": [
      "Database"
    ],
    "description": "Table: DailySales\nFor each date_id and make_name, find the number of distinct lead_id's and distinct partner_id's.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Reformat Phone Number",
    "problem_id": "1812",
    "frontend_id": "1694",
    "difficulty": "Easy",
    "problem_slug": "reformat-phone-number",
    "topics": [
      "String"
    ],
    "description": "You are given a phone number as a string number. number consists of digits, spaces ' ', and/or dashes '-'.\nYou would like to reformat the phone number in a certain manner. Firstly, remove all spaces and dashes. Then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits. The final digits are then grouped as follows:\nThe blocks are then joined by dashes. Notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2.\nReturn the phone number after formatting.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Erasure Value",
    "problem_id": "1813",
    "frontend_id": "1695",
    "difficulty": "Medium",
    "problem_slug": "maximum-erasure-value",
    "topics": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "description": "You are given an array of positive integers nums and want to erase a subarray containing unique elements. The score you get by erasing the subarray is equal to the sum of its elements.\nReturn the maximum score you can get by erasing exactly one subarray.\nAn array b is called to be a subarray of a if it forms a contiguous subsequence of a, that is, if it is equal to a[l],a[l+1],...,a[r] for some (l,r).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Jump Game VI",
    "problem_id": "1814",
    "frontend_id": "1696",
    "difficulty": "Medium",
    "problem_slug": "jump-game-vi",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Queue",
      "Heap (Priority Queue)",
      "Monotonic Queue"
    ],
    "description": "You are given a 0-indexed integer array nums and an integer k.\nYou are initially standing at index 0. In one move, you can jump at most k steps forward without going outside the boundaries of the array. That is, you can jump from index i to any index in the range [i + 1, min(n - 1, i + k)] inclusive.\nYou want to reach the last index of the array (index n - 1). Your score is the sum of all nums[j] for each index j you visited in the array.\nReturn the maximum score you can get.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Checking Existence of Edge Length Limited Paths",
    "problem_id": "1815",
    "frontend_id": "1697",
    "difficulty": "Hard",
    "problem_slug": "checking-existence-of-edge-length-limited-paths",
    "topics": [
      "Array",
      "Two Pointers",
      "Union Find",
      "Graph",
      "Sorting"
    ],
    "description": "An undirected graph of n nodes is defined by edgeList, where edgeList[i] = [ui, vi, disi] denotes an edge between nodes ui and vi with distance disi. Note that there may be multiple edges between two nodes.\nGiven an array queries, where queries[j] = [pj, qj, limitj], your task is to determine for each queries[j] whether there is a path between pj and qj such that each edge on the path has a distance strictly less than limitj .\nReturn a boolean array answer, where answer.length == queries.length and the jth value of answer is true if there is a path for queries[j] is true, and false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Students Unable to Eat Lunch",
    "problem_id": "1802",
    "frontend_id": "1700",
    "difficulty": "Easy",
    "problem_slug": "number-of-students-unable-to-eat-lunch",
    "topics": [
      "Array",
      "Stack",
      "Queue",
      "Simulation"
    ],
    "description": "The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers 0 and 1 respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.\nThe number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a stack. At each step:\nThis continues until none of the queue students want to take the top sandwich and are thus unable to eat.\nYou are given two integer arrays students and sandwiches where sandwiches[i] is the type of the i​​​​​​th sandwich in the stack (i = 0 is the top of the stack) and students[j] is the preference of the j​​​​​​th student in the initial queue (j = 0 is the front of the queue). Return the number of students that are unable to eat.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Average Waiting Time",
    "problem_id": "1803",
    "frontend_id": "1701",
    "difficulty": "Medium",
    "problem_slug": "average-waiting-time",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "There is a restaurant with a single chef. You are given an array customers, where customers[i] = [arrivali, timei]:\nWhen a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle. The customer waits till the chef finishes preparing his order. The chef does not prepare food for more than one customer at a time. The chef prepares food for customers in the order they were given in the input.\nReturn the average waiting time of all customers. Solutions within 10-5 from the actual answer are considered accepted.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Binary String After Change",
    "problem_id": "1804",
    "frontend_id": "1702",
    "difficulty": "Medium",
    "problem_slug": "maximum-binary-string-after-change",
    "topics": [
      "String",
      "Greedy"
    ],
    "description": "You are given a binary string binary consisting of only 0's or 1's. You can apply each of the following operations any number of times:\nReturn the maximum binary string you can obtain after any number of operations. Binary string x is greater than binary string y if x's decimal representation is greater than y's decimal representation.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Adjacent Swaps for K Consecutive Ones",
    "problem_id": "1805",
    "frontend_id": "1703",
    "difficulty": "Hard",
    "problem_slug": "minimum-adjacent-swaps-for-k-consecutive-ones",
    "topics": [
      "Array",
      "Greedy",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "You are given an integer array, nums, and an integer k. nums comprises of only 0's and 1's. In one move, you can choose two adjacent indices and swap their values.\nReturn the minimum number of moves required so that nums has k consecutive 1's.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Determine if String Halves Are Alike",
    "problem_id": "1823",
    "frontend_id": "1704",
    "difficulty": "Easy",
    "problem_slug": "determine-if-string-halves-are-alike",
    "topics": [
      "String",
      "Counting"
    ],
    "description": "You are given a string s of even length. Split this string into two halves of equal lengths, and let a be the first half and b be the second half.\nTwo strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'). Notice that s contains uppercase and lowercase letters.\nReturn true if a and b are alike. Otherwise, return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Number of Eaten Apples",
    "problem_id": "1824",
    "frontend_id": "1705",
    "difficulty": "Medium",
    "problem_slug": "maximum-number-of-eaten-apples",
    "topics": [
      "Array",
      "Greedy",
      "Heap (Priority Queue)"
    ],
    "description": "There is a special kind of apple tree that grows apples every day for n days. On the ith day, the tree grows apples[i] apples that will rot after days[i] days, that is on day i + days[i] the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by apples[i] == 0 and days[i] == 0.\nYou decided to eat at most one apple a day (to keep the doctors away). Note that you can keep eating after the first n days.\nGiven two integer arrays days and apples of length n, return the maximum number of apples you can eat.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Where Will the Ball Fall",
    "problem_id": "1324",
    "frontend_id": "1706",
    "difficulty": "Medium",
    "problem_slug": "where-will-the-ball-fall",
    "topics": [
      "Array",
      "Matrix",
      "Simulation"
    ],
    "description": "You have a 2-D grid of size m x n representing a box, and you have n balls. The box is open on the top and bottom sides.\nEach cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.\nWe drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a \"V\" shaped pattern between two boards or if a board redirects the ball into either wall of the box.\nReturn an array answer of size n where answer[i] is the column that the ball falls out of at the bottom after dropping the ball from the ith column at the top, or -1 if the ball gets stuck in the box.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum XOR With an Element From Array",
    "problem_id": "1826",
    "frontend_id": "1707",
    "difficulty": "Hard",
    "problem_slug": "maximum-xor-with-an-element-from-array",
    "topics": [
      "Array",
      "Bit Manipulation",
      "Trie"
    ],
    "description": "You are given an array nums consisting of non-negative integers. You are also given a queries array, where queries[i] = [xi, mi].\nThe answer to the ith query is the maximum bitwise XOR value of xi and any element of nums that does not exceed mi. In other words, the answer is max(nums[j] XOR xi) for all j such that nums[j] <= mi. If all elements in nums are larger than mi, then the answer is -1.\nReturn an integer array answer where answer.length == queries.length and answer[i] is the answer to the ith query.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Units on a Truck",
    "problem_id": "1829",
    "frontend_id": "1710",
    "difficulty": "Easy",
    "problem_slug": "maximum-units-on-a-truck",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are assigned to put some amount of boxes onto one truck. You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]:\nYou are also given an integer truckSize, which is the maximum number of boxes that can be put on the truck. You can choose any boxes to put on the truck as long as the number of boxes does not exceed truckSize.\nReturn the maximum total number of units that can be put on the truck.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Good Meals",
    "problem_id": "1830",
    "frontend_id": "1711",
    "difficulty": "Medium",
    "problem_slug": "count-good-meals",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "A good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two.\nYou can pick any two different foods to make a good meal.\nGiven an array of integers deliciousness where deliciousness[i] is the deliciousness of the i​​​​​​th​​​​​​​​ item of food, return the number of different good meals you can make from this list modulo 109 + 7.\nNote that items with different indices are considered different even if they have the same deliciousness value.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Ways to Split Array Into Three Subarrays",
    "problem_id": "1831",
    "frontend_id": "1712",
    "difficulty": "Medium",
    "problem_slug": "ways-to-split-array-into-three-subarrays",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Prefix Sum"
    ],
    "description": "A split of an integer array is good if:\nGiven nums, an array of non-negative integers, return the number of good ways to split nums. As the number may be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Make a Subsequence",
    "problem_id": "1832",
    "frontend_id": "1713",
    "difficulty": "Hard",
    "problem_slug": "minimum-operations-to-make-a-subsequence",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Greedy"
    ],
    "description": "You are given an array target that consists of distinct integers and another integer array arr that can have duplicates.\nIn one operation, you can insert any integer at any position in arr. For example, if arr = [1,4,1,2], you can add 3 in the middle and make it [1,4,3,1,2]. Note that you can insert the integer at the very beginning or end of the array.\nReturn the minimum number of operations needed to make target a subsequence of arr.\nA subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Calculate Money in Leetcode Bank",
    "problem_id": "1817",
    "frontend_id": "1716",
    "difficulty": "Easy",
    "problem_slug": "calculate-money-in-leetcode-bank",
    "topics": [
      "Math"
    ],
    "description": "Hercy wants to save money for his first car. He puts money in the Leetcode bank every day.\nHe starts by putting in $1 on Monday, the first day. Every day from Tuesday to Sunday, he will put in $1 more than the day before. On every subsequent Monday, he will put in $1 more than the previous Monday.\nGiven n, return the total amount of money he will have in the Leetcode bank at the end of the nth day.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Score From Removing Substrings",
    "problem_id": "1818",
    "frontend_id": "1717",
    "difficulty": "Medium",
    "problem_slug": "maximum-score-from-removing-substrings",
    "topics": [
      "String",
      "Stack",
      "Greedy"
    ],
    "description": "You are given a string s and two integers x and y. You can perform two types of operations any number of times.\nReturn the maximum points you can gain after applying the above operations on s.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Construct the Lexicographically Largest Valid Sequence",
    "problem_id": "1819",
    "frontend_id": "1718",
    "difficulty": "Medium",
    "problem_slug": "construct-the-lexicographically-largest-valid-sequence",
    "topics": [
      "Array",
      "Backtracking"
    ],
    "description": "Given an integer n, find a sequence with elements in the range [1, n] that satisfies all of the following:\nThe distance between two numbers on the sequence, a[i] and a[j], is the absolute difference of their indices, |j - i|.\nReturn the lexicographically largest sequence. It is guaranteed that under the given constraints, there is always a solution.\nA sequence a is lexicographically larger than a sequence b (of the same length) if in the first position where a and b differ, sequence a has a number greater than the corresponding number in b. For example, [0,1,9,0] is lexicographically larger than [0,1,5,6] because the first position they differ is at the third number, and 9 is greater than 5.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number Of Ways To Reconstruct A Tree",
    "problem_id": "1820",
    "frontend_id": "1719",
    "difficulty": "Hard",
    "problem_slug": "number-of-ways-to-reconstruct-a-tree",
    "topics": [
      "Tree",
      "Graph"
    ],
    "description": "You are given an array pairs, where pairs[i] = [xi, yi], and:\nLet ways be the number of rooted trees that satisfy the following conditions:\nTwo ways are considered to be different if there is at least one node that has different parents in both ways.\nReturn:\nA rooted tree is a tree that has a single root node, and all edges are oriented to be outgoing from the root.\nAn ancestor of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Decode XORed Array",
    "problem_id": "1839",
    "frontend_id": "1720",
    "difficulty": "Easy",
    "problem_slug": "decode-xored-array",
    "topics": [
      "Array",
      "Bit Manipulation"
    ],
    "description": "There is a hidden integer array arr that consists of n non-negative integers.\nIt was encoded into another integer array encoded of length n - 1, such that encoded[i] = arr[i] XOR arr[i + 1]. For example, if arr = [1,0,2,1], then encoded = [1,2,3].\nYou are given the encoded array. You are also given an integer first, that is the first element of arr, i.e. arr[0].\nReturn the original array arr. It can be proved that the answer exists and is unique.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Swapping Nodes in a Linked List",
    "problem_id": "528",
    "frontend_id": "1721",
    "difficulty": "Medium",
    "problem_slug": "swapping-nodes-in-a-linked-list",
    "topics": [
      "Linked List",
      "Two Pointers"
    ],
    "description": "You are given the head of a linked list, and an integer k.\nReturn the head of the linked list after swapping the values of the kth node from the beginning and the kth node from the end (the list is 1-indexed).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimize Hamming Distance After Swap Operations",
    "problem_id": "1840",
    "frontend_id": "1722",
    "difficulty": "Medium",
    "problem_slug": "minimize-hamming-distance-after-swap-operations",
    "topics": [
      "Array",
      "Depth-First Search",
      "Union Find"
    ],
    "description": "You are given two integer arrays, source and target, both of length n. You are also given an array allowedSwaps where each allowedSwaps[i] = [ai, bi] indicates that you are allowed to swap the elements at index ai and index bi (0-indexed) of array source. Note that you can swap elements at a specific pair of indices multiple times and in any order.\nThe Hamming distance of two arrays of the same length, source and target, is the number of positions where the elements are different. Formally, it is the number of indices i for 0 <= i <= n-1 where source[i] != target[i] (0-indexed).\nReturn the minimum Hamming distance of source and target after performing any amount of swap operations on array source.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Minimum Time to Finish All Jobs",
    "problem_id": "1825",
    "frontend_id": "1723",
    "difficulty": "Hard",
    "problem_slug": "find-minimum-time-to-finish-all-jobs",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "You are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the ith job.\nThere are k workers that you can assign jobs to. Each job should be assigned to exactly one worker. The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.\nReturn the minimum possible maximum working time of any assignment.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number Of Rectangles That Can Form The Largest Square",
    "problem_id": "1843",
    "frontend_id": "1725",
    "difficulty": "Easy",
    "problem_slug": "number-of-rectangles-that-can-form-the-largest-square",
    "topics": [
      "Array"
    ],
    "description": "You are given an array rectangles where rectangles[i] = [li, wi] represents the ith rectangle of length li and width wi.\nYou can cut the ith rectangle to form a square with a side length of k if both k <= li and k <= wi. For example, if you have a rectangle [4,6], you can cut it to get a square with a side length of at most 4.\nLet maxLen be the side length of the largest square you can obtain from any of the given rectangles.\nReturn the number of rectangles that can make a square with a side length of maxLen.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Tuple with Same Product",
    "problem_id": "1364",
    "frontend_id": "1726",
    "difficulty": "Medium",
    "problem_slug": "tuple-with-same-product",
    "topics": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "description": "Given an array nums of distinct positive integers, return the number of tuples (a, b, c, d) such that a * b = c * d where a, b, c, and d are elements of nums, and a != b != c != d.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Largest Submatrix With Rearrangements",
    "problem_id": "1845",
    "frontend_id": "1727",
    "difficulty": "Medium",
    "problem_slug": "largest-submatrix-with-rearrangements",
    "topics": [
      "Array",
      "Greedy",
      "Sorting",
      "Matrix"
    ],
    "description": "You are given a binary matrix matrix of size m x n, and you are allowed to rearrange the columns of the matrix in any order.\nReturn the area of the largest submatrix within matrix where every element of the submatrix is 1 after reordering the columns optimally.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Cat and Mouse II",
    "problem_id": "1727",
    "frontend_id": "1728",
    "difficulty": "Hard",
    "problem_slug": "cat-and-mouse-ii",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Graph",
      "Topological Sort",
      "Memoization",
      "Matrix",
      "Game Theory"
    ],
    "description": "A game is played by a cat and a mouse named Cat and Mouse.\nThe environment is represented by a grid of size rows x cols, where each element is a wall, floor, player (Cat, Mouse), or food.\nMouse and Cat play according to the following rules:\nThe game can end in 4 ways:\nGiven a rows x cols matrix grid and two integers catJump and mouseJump, return true if Mouse can win the game if both Cat and Mouse play optimally, otherwise return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Followers Count",
    "problem_id": "1877",
    "frontend_id": "1729",
    "difficulty": "Easy",
    "problem_slug": "find-followers-count",
    "topics": [
      "Database"
    ],
    "description": "Table: Followers\nWrite a solution that will, for each user, return the number of followers.\nReturn the result table ordered by user_id in ascending order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "The Number of Employees Which Report to Each Employee",
    "problem_id": "1882",
    "frontend_id": "1731",
    "difficulty": "Easy",
    "problem_slug": "the-number-of-employees-which-report-to-each-employee",
    "topics": [
      "Database"
    ],
    "description": "Table: Employees\nFor this problem, we will consider a manager an employee who has at least 1 other employee reporting to them.\nWrite a solution to report the ids and the names of all managers, the number of employees who report directly to them, and the average age of the reports rounded to the nearest integer.\nReturn the result table ordered by employee_id.\nThe result format is in the following example.\nExample 1:\nExample 2:"
  },
  {
    "title": "Find the Highest Altitude",
    "problem_id": "1833",
    "frontend_id": "1732",
    "difficulty": "Easy",
    "problem_slug": "find-the-highest-altitude",
    "topics": [
      "Array",
      "Prefix Sum"
    ],
    "description": "There is a biker going on a road trip. The road trip consists of n + 1 points at different altitudes. The biker starts his trip on point 0 with altitude equal 0.\nYou are given an integer array gain of length n where gain[i] is the net gain in altitude between points i​​​​​​ and i + 1 for all (0 <= i < n). Return the highest altitude of a point.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of People to Teach",
    "problem_id": "1834",
    "frontend_id": "1733",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-people-to-teach",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy"
    ],
    "description": "On a social network consisting of m users and some friendships between users, two users can communicate with each other if they know a common language.\nYou are given an integer n, an array languages, and an array friendships where:\nYou can choose one language and teach it to some users so that all friends can communicate with each other. Return the minimum number of users you need to teach.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Decode XORed Permutation",
    "problem_id": "1835",
    "frontend_id": "1734",
    "difficulty": "Medium",
    "problem_slug": "decode-xored-permutation",
    "topics": [
      "Array",
      "Bit Manipulation"
    ],
    "description": "There is an integer array perm that is a permutation of the first n positive integers, where n is always odd.\nIt was encoded into another integer array encoded of length n - 1, such that encoded[i] = perm[i] XOR perm[i + 1]. For example, if perm = [1,3,2], then encoded = [2,1].\nGiven the encoded array, return the original array perm. It is guaranteed that the answer exists and is unique.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Ways to Make Array With Product",
    "problem_id": "1836",
    "frontend_id": "1735",
    "difficulty": "Hard",
    "problem_slug": "count-ways-to-make-array-with-product",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Combinatorics",
      "Number Theory"
    ],
    "description": "You are given a 2D integer array, queries. For each queries[i], where queries[i] = [ni, ki], find the number of different ways you can place positive integers into an array of size ni such that the product of the integers is ki. As the number of ways may be too large, the answer to the ith query is the number of ways modulo 109 + 7.\nReturn an integer array answer where answer.length == queries.length, and answer[i] is the answer to the ith query.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Latest Time by Replacing Hidden Digits",
    "problem_id": "1858",
    "frontend_id": "1736",
    "difficulty": "Easy",
    "problem_slug": "latest-time-by-replacing-hidden-digits",
    "topics": [
      "String",
      "Greedy"
    ],
    "description": "You are given a string time in the form of  hh:mm, where some of the digits in the string are hidden (represented by ?).\nThe valid times are those inclusively between 00:00 and 23:59.\nReturn the latest valid time you can get from time by replacing the hidden digits.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Change Minimum Characters to Satisfy One of Three Conditions",
    "problem_id": "1859",
    "frontend_id": "1737",
    "difficulty": "Medium",
    "problem_slug": "change-minimum-characters-to-satisfy-one-of-three-conditions",
    "topics": [
      "Hash Table",
      "String",
      "Counting",
      "Prefix Sum"
    ],
    "description": "You are given two strings a and b that consist of lowercase letters. In one operation, you can change any character in a or b to any lowercase letter.\nYour goal is to satisfy one of the following three conditions:\nReturn the minimum number of operations needed to achieve your goal.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Kth Largest XOR Coordinate Value",
    "problem_id": "1860",
    "frontend_id": "1738",
    "difficulty": "Medium",
    "problem_slug": "find-kth-largest-xor-coordinate-value",
    "topics": [
      "Array",
      "Divide and Conquer",
      "Bit Manipulation",
      "Sorting",
      "Heap (Priority Queue)",
      "Matrix",
      "Prefix Sum",
      "Quickselect"
    ],
    "description": "You are given a 2D matrix of size m x n, consisting of non-negative integers. You are also given an integer k.\nThe value of coordinate (a, b) of the matrix is the XOR of all matrix[i][j] where 0 <= i <= a < m and 0 <= j <= b < n (0-indexed).\nFind the kth largest value (1-indexed) of all the coordinates of matrix.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Building Boxes",
    "problem_id": "1861",
    "frontend_id": "1739",
    "difficulty": "Hard",
    "problem_slug": "building-boxes",
    "topics": [
      "Math",
      "Binary Search",
      "Greedy"
    ],
    "description": "You have a cubic storeroom where the width, length, and height of the room are all equal to n units. You are asked to place n boxes in this room where each box is a cube of unit side length. There are however some rules to placing the boxes:\nGiven an integer n, return the minimum possible number of boxes touching the floor.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Total Time Spent by Each Employee",
    "problem_id": "1892",
    "frontend_id": "1741",
    "difficulty": "Easy",
    "problem_slug": "find-total-time-spent-by-each-employee",
    "topics": [
      "Database"
    ],
    "description": "Table: Employees\nWrite a solution to calculate the total time in minutes spent by each employee on each day at the office. Note that within one day, an employee can enter and leave more than once. The time spent in the office for a single entry is out_time - in_time.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Maximum Number of Balls in a Box",
    "problem_id": "1844",
    "frontend_id": "1742",
    "difficulty": "Easy",
    "problem_slug": "maximum-number-of-balls-in-a-box",
    "topics": [
      "Hash Table",
      "Math",
      "Counting"
    ],
    "description": "You are working in a ball factory where you have n balls numbered from lowLimit up to highLimit inclusive (i.e., n == highLimit - lowLimit + 1), and an infinite number of boxes numbered from 1 to infinity.\nYour job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number 321 will be put in the box number 3 + 2 + 1 = 6 and the ball number 10 will be put in the box number 1 + 0 = 1.\nGiven two integers lowLimit and highLimit, return the number of balls in the box with the most balls.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Restore the Array From Adjacent Pairs",
    "problem_id": "1866",
    "frontend_id": "1743",
    "difficulty": "Medium",
    "problem_slug": "restore-the-array-from-adjacent-pairs",
    "topics": [
      "Array",
      "Hash Table",
      "Depth-First Search"
    ],
    "description": "There is an integer array nums that consists of n unique elements, but you have forgotten it. However, you do remember every pair of adjacent elements in nums.\nYou are given a 2D integer array adjacentPairs of size n - 1 where each adjacentPairs[i] = [ui, vi] indicates that the elements ui and vi are adjacent in nums.\nIt is guaranteed that every adjacent pair of elements nums[i] and nums[i+1] will exist in adjacentPairs, either as [nums[i], nums[i+1]] or [nums[i+1], nums[i]]. The pairs can appear in any order.\nReturn the original array nums. If there are multiple solutions, return any of them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Can You Eat Your Favorite Candy on Your Favorite Day?",
    "problem_id": "1872",
    "frontend_id": "1744",
    "difficulty": "Medium",
    "problem_slug": "can-you-eat-your-favorite-candy-on-your-favorite-day",
    "topics": [
      "Array",
      "Prefix Sum"
    ],
    "description": "You are given a (0-indexed) array of positive integers candiesCount where candiesCount[i] represents the number of candies of the ith type you have. You are also given a 2D array queries where queries[i] = [favoriteTypei, favoriteDayi, dailyCapi].\nYou play a game with the following rules:\nConstruct a boolean array answer such that answer.length == queries.length and answer[i] is true if you can eat a candy of type favoriteTypei on day favoriteDayi without eating more than dailyCapi candies on any day, and false otherwise. Note that you can eat different types of candy on the same day, provided that you follow rule 2.\nReturn the constructed array answer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Palindrome Partitioning IV",
    "problem_id": "1871",
    "frontend_id": "1745",
    "difficulty": "Hard",
    "problem_slug": "palindrome-partitioning-iv",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "Given a string s, return true if it is possible to split the string s into three non-empty palindromic substrings. Otherwise, return false.​​​​​\nA string is said to be palindrome if it the same string when reversed.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Unique Elements",
    "problem_id": "1848",
    "frontend_id": "1748",
    "difficulty": "Easy",
    "problem_slug": "sum-of-unique-elements",
    "topics": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "description": "You are given an integer array nums. The unique elements of an array are the elements that appear exactly once in the array.\nReturn the sum of all the unique elements of nums.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Absolute Sum of Any Subarray",
    "problem_id": "1849",
    "frontend_id": "1749",
    "difficulty": "Medium",
    "problem_slug": "maximum-absolute-sum-of-any-subarray",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array nums. The absolute sum of a subarray [numsl, numsl+1, ..., numsr-1, numsr] is abs(numsl + numsl+1 + ... + numsr-1 + numsr).\nReturn the maximum absolute sum of any (possibly empty) subarray of nums.\nNote that abs(x) is defined as follows:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Length of String After Deleting Similar Ends",
    "problem_id": "1850",
    "frontend_id": "1750",
    "difficulty": "Medium",
    "problem_slug": "minimum-length-of-string-after-deleting-similar-ends",
    "topics": [
      "Two Pointers",
      "String"
    ],
    "description": "Given a string s consisting only of characters 'a', 'b', and 'c'. You are asked to apply the following algorithm on the string any number of times:\nReturn the minimum length of s after performing the above operation any number of times (possibly zero times).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Number of Events That Can Be Attended II",
    "problem_id": "1851",
    "frontend_id": "1751",
    "difficulty": "Hard",
    "problem_slug": "maximum-number-of-events-that-can-be-attended-ii",
    "topics": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "You are given an array of events where events[i] = [startDayi, endDayi, valuei]. The ith event starts at startDayi and ends at endDayi, and if you attend this event, you will receive a value of valuei. You are also given an integer k which represents the maximum number of events you can attend.\nYou can only attend one event at a time. If you choose to attend an event, you must attend the entire event. Note that the end day is inclusive: that is, you cannot attend two events where one of them starts and the other ends on the same day.\nReturn the maximum sum of values that you can receive by attending events.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check if Array Is Sorted and Rotated",
    "problem_id": "1878",
    "frontend_id": "1752",
    "difficulty": "Easy",
    "problem_slug": "check-if-array-is-sorted-and-rotated",
    "topics": [
      "Array"
    ],
    "description": "Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false.\nThere may be duplicates in the original array.\nNote: An array A rotated by x positions results in an array B of the same length such that B[i] == A[(i+x) % A.length] for every valid index i.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Score From Removing Stones",
    "problem_id": "1879",
    "frontend_id": "1753",
    "difficulty": "Medium",
    "problem_slug": "maximum-score-from-removing-stones",
    "topics": [
      "Math",
      "Greedy",
      "Heap (Priority Queue)"
    ],
    "description": "You are playing a solitaire game with three piles of stones of sizes a​​​​​​, b,​​​​​​ and c​​​​​​ respectively. Each turn you choose two different non-empty piles, take one stone from each, and add 1 point to your score. The game stops when there are fewer than two non-empty piles (meaning there are no more available moves).\nGiven three integers a​​​​​, b,​​​​​ and c​​​​​, return the maximum score you can get.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Largest Merge Of Two Strings",
    "problem_id": "1880",
    "frontend_id": "1754",
    "difficulty": "Medium",
    "problem_slug": "largest-merge-of-two-strings",
    "topics": [
      "Two Pointers",
      "String",
      "Greedy"
    ],
    "description": "You are given two strings word1 and word2. You want to construct a string merge in the following way: while either word1 or word2 are non-empty, choose one of the following options:\nReturn the lexicographically largest merge you can construct.\nA string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b. For example, \"abcd\" is lexicographically larger than \"abcc\" because the first position they differ is at the fourth character, and d is greater than c.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Closest Subsequence Sum",
    "problem_id": "1881",
    "frontend_id": "1755",
    "difficulty": "Hard",
    "problem_slug": "closest-subsequence-sum",
    "topics": [
      "Array",
      "Two Pointers",
      "Dynamic Programming",
      "Bit Manipulation",
      "Sorting",
      "Bitmask"
    ],
    "description": "You are given an integer array nums and an integer goal.\nYou want to choose a subsequence of nums such that the sum of its elements is the closest possible to goal. That is, if the sum of the subsequence's elements is sum, then you want to minimize the absolute difference abs(sum - goal).\nReturn the minimum possible value of abs(sum - goal).\nNote that a subsequence of an array is an array formed by removing some elements (possibly all or none) of the original array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Recyclable and Low Fat Products",
    "problem_id": "1908",
    "frontend_id": "1757",
    "difficulty": "Easy",
    "problem_slug": "recyclable-and-low-fat-products",
    "topics": [
      "Database"
    ],
    "description": "Table: Products\nWrite a solution to find the ids of products that are both low fat and recyclable.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Minimum Changes To Make Alternating Binary String",
    "problem_id": "1884",
    "frontend_id": "1758",
    "difficulty": "Easy",
    "problem_slug": "minimum-changes-to-make-alternating-binary-string",
    "topics": [
      "String"
    ],
    "description": "You are given a string s consisting only of the characters '0' and '1'. In one operation, you can change any '0' to '1' or vice versa.\nThe string is called alternating if no two adjacent characters are equal. For example, the string \"010\" is alternating, while the string \"0100\" is not.\nReturn the minimum number of operations needed to make s alternating.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Number of Homogenous Substrings",
    "problem_id": "1885",
    "frontend_id": "1759",
    "difficulty": "Medium",
    "problem_slug": "count-number-of-homogenous-substrings",
    "topics": [
      "Math",
      "String"
    ],
    "description": "Given a string s, return the number of homogenous substrings of s. Since the answer may be too large, return it modulo 109 + 7.\nA string is homogenous if all the characters of the string are the same.\nA substring is a contiguous sequence of characters within a string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Limit of Balls in a Bag",
    "problem_id": "1886",
    "frontend_id": "1760",
    "difficulty": "Medium",
    "problem_slug": "minimum-limit-of-balls-in-a-bag",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "You are given an integer array nums where the ith bag contains nums[i] balls. You are also given an integer maxOperations.\nYou can perform the following operation at most maxOperations times:\nYour penalty is the maximum number of balls in a bag. You want to minimize your penalty after the operations.\nReturn the minimum possible penalty after performing the operations.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Degree of a Connected Trio in a Graph",
    "problem_id": "1887",
    "frontend_id": "1761",
    "difficulty": "Hard",
    "problem_slug": "minimum-degree-of-a-connected-trio-in-a-graph",
    "topics": [
      "Graph",
      "Enumeration"
    ],
    "description": "You are given an undirected graph. You are given an integer n which is the number of nodes in the graph and an array edges, where each edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi.\nA connected trio is a set of three nodes where there is an edge between every pair of them.\nThe degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not.\nReturn the minimum degree of a connected trio in the graph, or -1 if the graph has no connected trios.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Nice Substring",
    "problem_id": "1873",
    "frontend_id": "1763",
    "difficulty": "Easy",
    "problem_slug": "longest-nice-substring",
    "topics": [
      "Hash Table",
      "String",
      "Divide and Conquer",
      "Bit Manipulation",
      "Sliding Window"
    ],
    "description": "A string s is nice if, for every letter of the alphabet that s contains, it appears both in uppercase and lowercase. For example, \"abABB\" is nice because 'A' and 'a' appear, and 'B' and 'b' appear. However, \"abA\" is not because 'b' appears, but 'B' does not.\nGiven a string s, return the longest substring of s that is nice. If there are multiple, return the substring of the earliest occurrence. If there are none, return an empty string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Form Array by Concatenating Subarrays of Another Array",
    "problem_id": "1874",
    "frontend_id": "1764",
    "difficulty": "Medium",
    "problem_slug": "form-array-by-concatenating-subarrays-of-another-array",
    "topics": [
      "Array",
      "Two Pointers",
      "Greedy",
      "String Matching"
    ],
    "description": "You are given a 2D integer array groups of length n. You are also given an integer array nums.\nYou are asked if you can choose n disjoint subarrays from the array nums such that the ith subarray is equal to groups[i] (0-indexed), and if i > 0, the (i-1)th subarray appears before the ith subarray in nums (i.e. the subarrays must be in the same order as groups).\nReturn true if you can do this task, and false otherwise.\nNote that the subarrays are disjoint if and only if there is no index k such that nums[k] belongs to more than one subarray. A subarray is a contiguous sequence of elements within an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Map of Highest Peak",
    "problem_id": "1876",
    "frontend_id": "1765",
    "difficulty": "Medium",
    "problem_slug": "map-of-highest-peak",
    "topics": [
      "Array",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "You are given an integer matrix isWater of size m x n that represents a map of land and water cells.\nYou must assign each cell a height in a way that follows these rules:\nFind an assignment of heights such that the maximum height in the matrix is maximized.\nReturn an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height. If there are multiple solutions, return any of them.\nExample 1:\nExample 2:\nConstraints:\nNote: This question is the same as 542: https://leetcode.com/problems/01-matrix/"
  },
  {
    "title": "Tree of Coprimes",
    "problem_id": "1875",
    "frontend_id": "1766",
    "difficulty": "Hard",
    "problem_slug": "tree-of-coprimes",
    "topics": [
      "Array",
      "Math",
      "Tree",
      "Depth-First Search",
      "Number Theory"
    ],
    "description": "There is a tree (i.e., a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. Each node has a value associated with it, and the root of the tree is node 0.\nTo represent this tree, you are given an integer array nums and a 2D array edges. Each nums[i] represents the ith node's value, and each edges[j] = [uj, vj] represents an edge between nodes uj and vj in the tree.\nTwo values x and y are coprime if gcd(x, y) == 1 where gcd(x, y) is the greatest common divisor of x and y.\nAn ancestor of a node i is any other node on the shortest path from node i to the root. A node is not considered an ancestor of itself.\nReturn an array ans of size n, where ans[i] is the closest ancestor to node i such that nums[i] and nums[ans[i]] are coprime, or -1 if there is no such ancestor.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Merge Strings Alternately",
    "problem_id": "1894",
    "frontend_id": "1768",
    "difficulty": "Easy",
    "problem_slug": "merge-strings-alternately",
    "topics": [
      "Two Pointers",
      "String"
    ],
    "description": "You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.\nReturn the merged string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Operations to Move All Balls to Each Box",
    "problem_id": "1895",
    "frontend_id": "1769",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-operations-to-move-all-balls-to-each-box",
    "topics": [
      "Array",
      "String",
      "Prefix Sum"
    ],
    "description": "You have n boxes. You are given a binary string boxes of length n, where boxes[i] is '0' if the ith box is empty, and '1' if it contains one ball.\nIn one operation, you can move one ball from a box to an adjacent box. Box i is adjacent to box j if abs(i - j) == 1. Note that after doing so, there may be more than one ball in some boxes.\nReturn an array answer of size n, where answer[i] is the minimum number of operations needed to move all the balls to the ith box.\nEach answer[i] is calculated considering the initial state of the boxes.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Score from Performing Multiplication Operations",
    "problem_id": "1896",
    "frontend_id": "1770",
    "difficulty": "Hard",
    "problem_slug": "maximum-score-from-performing-multiplication-operations",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given two 0-indexed integer arrays nums and multipliers of size n and m respectively, where n >= m.\nYou begin with a score of 0. You want to perform exactly m operations. On the ith operation (0-indexed) you will:\nReturn the maximum score after performing m operations.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximize Palindrome Length From Subsequences",
    "problem_id": "1897",
    "frontend_id": "1771",
    "difficulty": "Hard",
    "problem_slug": "maximize-palindrome-length-from-subsequences",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given two strings, word1 and word2. You want to construct a string in the following manner:\nReturn the length of the longest palindrome that can be constructed in the described manner. If no palindromes can be constructed, return 0.\nA subsequence of a string s is a string that can be made by deleting some (possibly none) characters from s without changing the order of the remaining characters.\nA palindrome is a string that reads the same forward as well as backward.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Items Matching a Rule",
    "problem_id": "1899",
    "frontend_id": "1773",
    "difficulty": "Easy",
    "problem_slug": "count-items-matching-a-rule",
    "topics": [
      "Array",
      "String"
    ],
    "description": "You are given an array items, where each items[i] = [typei, colori, namei] describes the type, color, and name of the ith item. You are also given a rule represented by two strings, ruleKey and ruleValue.\nThe ith item is said to match the rule if one of the following is true:\nReturn the number of items that match the given rule.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Closest Dessert Cost",
    "problem_id": "1900",
    "frontend_id": "1774",
    "difficulty": "Medium",
    "problem_slug": "closest-dessert-cost",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Backtracking"
    ],
    "description": "You would like to make dessert and are preparing to buy the ingredients. You have n ice cream base flavors and m types of toppings to choose from. You must follow these rules when making your dessert:\nYou are given three inputs:\nYou want to make a dessert with a total cost as close to target as possible.\nReturn the closest possible cost of the dessert to target. If there are multiple, return the lower one.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Equal Sum Arrays With Minimum Number of Operations",
    "problem_id": "1901",
    "frontend_id": "1775",
    "difficulty": "Medium",
    "problem_slug": "equal-sum-arrays-with-minimum-number-of-operations",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Counting"
    ],
    "description": "You are given two arrays of integers nums1 and nums2, possibly of different lengths. The values in the arrays are between 1 and 6, inclusive.\nIn one operation, you can change any integer's value in any of the arrays to any value between 1 and 6, inclusive.\nReturn the minimum number of operations required to make the sum of values in nums1 equal to the sum of values in nums2. Return -1​​​​​ if it is not possible to make the sum of the two arrays equal.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Car Fleet II",
    "problem_id": "1902",
    "frontend_id": "1776",
    "difficulty": "Hard",
    "problem_slug": "car-fleet-ii",
    "topics": [
      "Array",
      "Math",
      "Stack",
      "Heap (Priority Queue)",
      "Monotonic Stack"
    ],
    "description": "There are n cars traveling at different speeds in the same direction along a one-lane road. You are given an array cars of length n, where cars[i] = [positioni, speedi] represents:\nFor simplicity, cars can be considered as points moving along the number line. Two cars collide when they occupy the same position. Once a car collides with another car, they unite and form a single car fleet. The cars in the formed fleet will have the same position and the same speed, which is the initial speed of the slowest car in the fleet.\nReturn an array answer, where answer[i] is the time, in seconds, at which the ith car collides with the next car, or -1 if the car does not collide with the next car. Answers within 10-5 of the actual answers are accepted.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Nearest Point That Has the Same X or Y Coordinate",
    "problem_id": "1888",
    "frontend_id": "1779",
    "difficulty": "Easy",
    "problem_slug": "find-nearest-point-that-has-the-same-x-or-y-coordinate",
    "topics": [
      "Array"
    ],
    "description": "You are given two integers, x and y, which represent your current location on a Cartesian grid: (x, y). You are also given an array points where each points[i] = [ai, bi] represents that a point exists at (ai, bi). A point is valid if it shares the same x-coordinate or the same y-coordinate as your location.\nReturn the index (0-indexed) of the valid point with the smallest Manhattan distance from your current location. If there are multiple, return the valid point with the smallest index. If there are no valid points, return -1.\nThe Manhattan distance between two points (x1, y1) and (x2, y2) is abs(x1 - x2) + abs(y1 - y2).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check if Number is a Sum of Powers of Three",
    "problem_id": "1889",
    "frontend_id": "1780",
    "difficulty": "Medium",
    "problem_slug": "check-if-number-is-a-sum-of-powers-of-three",
    "topics": [
      "Math"
    ],
    "description": "Given an integer n, return true if it is possible to represent n as the sum of distinct powers of three. Otherwise, return false.\nAn integer y is a power of three if there exists an integer x such that y == 3x.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sum of Beauty of All Substrings",
    "problem_id": "1890",
    "frontend_id": "1781",
    "difficulty": "Medium",
    "problem_slug": "sum-of-beauty-of-all-substrings",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "The beauty of a string is the difference in frequencies between the most frequent and least frequent characters.\nGiven a string s, return the sum of beauty of all of its substrings.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Pairs Of Nodes",
    "problem_id": "1891",
    "frontend_id": "1782",
    "difficulty": "Hard",
    "problem_slug": "count-pairs-of-nodes",
    "topics": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search",
      "Graph",
      "Sorting",
      "Counting"
    ],
    "description": "You are given an undirected graph defined by an integer n, the number of nodes, and a 2D integer array edges, the edges in the graph, where edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi. You are also given an integer array queries.\nLet incident(a, b) be defined as the number of edges that are connected to either node a or b.\nThe answer to the jth query is the number of pairs of nodes (a, b) that satisfy both of the following conditions:\nReturn an array answers such that answers.length == queries.length and answers[j] is the answer of the jth query.\nNote that there can be multiple edges between the same two nodes.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check if Binary String Has at Most One Segment of Ones",
    "problem_id": "1910",
    "frontend_id": "1784",
    "difficulty": "Easy",
    "problem_slug": "check-if-binary-string-has-at-most-one-segment-of-ones",
    "topics": [
      "String"
    ],
    "description": "Given a binary string s ​​​​​without leading zeros, return true​​​ if s contains at most one contiguous segment of ones. Otherwise, return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Elements to Add to Form a Given Sum",
    "problem_id": "1911",
    "frontend_id": "1785",
    "difficulty": "Medium",
    "problem_slug": "minimum-elements-to-add-to-form-a-given-sum",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "You are given an integer array nums and two integers limit and goal. The array nums has an interesting property that abs(nums[i]) <= limit.\nReturn the minimum number of elements you need to add to make the sum of the array equal to goal. The array must maintain its property that abs(nums[i]) <= limit.\nNote that abs(x) equals x if x >= 0, and -x otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Restricted Paths From First to Last Node",
    "problem_id": "1912",
    "frontend_id": "1786",
    "difficulty": "Medium",
    "problem_slug": "number-of-restricted-paths-from-first-to-last-node",
    "topics": [
      "Dynamic Programming",
      "Graph",
      "Topological Sort",
      "Heap (Priority Queue)",
      "Shortest Path"
    ],
    "description": "There is an undirected weighted connected graph. You are given a positive integer n which denotes that the graph has n nodes labeled from 1 to n, and an array edges where each edges[i] = [ui, vi, weighti] denotes that there is an edge between nodes ui and vi with weight equal to weighti.\nA path from node start to node end is a sequence of nodes [z0, z1, z2, ..., zk] such that z0 = start and zk = end and there is an edge between zi and zi+1 where 0 <= i <= k-1.\nThe distance of a path is the sum of the weights on the edges of the path. Let distanceToLastNode(x) denote the shortest distance of a path between node n and node x. A restricted path is a path that also satisfies that distanceToLastNode(zi) > distanceToLastNode(zi+1) where 0 <= i <= k-1.\nReturn the number of restricted paths from node 1 to node n. Since that number may be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Make the XOR of All Segments Equal to Zero",
    "problem_id": "1913",
    "frontend_id": "1787",
    "difficulty": "Hard",
    "problem_slug": "make-the-xor-of-all-segments-equal-to-zero",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation"
    ],
    "description": "You are given an array nums​​​ and an integer k​​​​​. The XOR of a segment [left, right] where left <= right is the XOR of all the elements with indices between left and right, inclusive: nums[left] XOR nums[left+1] XOR ... XOR nums[right].\nReturn the minimum number of elements to change in the array such that the XOR of all segments of size k​​​​​​ is equal to zero.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Primary Department for Each Employee",
    "problem_id": "1942",
    "frontend_id": "1789",
    "difficulty": "Easy",
    "problem_slug": "primary-department-for-each-employee",
    "topics": [
      "Database"
    ],
    "description": "Table: Employee\nEmployees can belong to multiple departments. When the employee joins other departments, they need to decide which department is their primary department. Note that when an employee belongs to only one department, their primary column is 'N'.\nWrite a solution to report all the employees with their primary department. For employees who belong to one department, report their only department.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Check if One String Swap Can Make Strings Equal",
    "problem_id": "1915",
    "frontend_id": "1790",
    "difficulty": "Easy",
    "problem_slug": "check-if-one-string-swap-can-make-strings-equal",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "You are given two strings s1 and s2 of equal length. A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.\nReturn true if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. Otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Center of Star Graph",
    "problem_id": "1916",
    "frontend_id": "1791",
    "difficulty": "Easy",
    "problem_slug": "find-center-of-star-graph",
    "topics": [
      "Graph"
    ],
    "description": "There is an undirected star graph consisting of n nodes labeled from 1 to n. A star graph is a graph where there is one center node and exactly n - 1 edges that connect the center node with every other node.\nYou are given a 2D integer array edges where each edges[i] = [ui, vi] indicates that there is an edge between the nodes ui and vi. Return the center of the given star graph.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Average Pass Ratio",
    "problem_id": "1917",
    "frontend_id": "1792",
    "difficulty": "Medium",
    "problem_slug": "maximum-average-pass-ratio",
    "topics": [
      "Array",
      "Greedy",
      "Heap (Priority Queue)"
    ],
    "description": "There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array classes, where classes[i] = [passi, totali]. You know beforehand that in the ith class, there are totali total students, but only passi number of students will pass the exam.\nYou are also given an integer extraStudents. There are another extraStudents brilliant students that are guaranteed to pass the exam of any class they are assigned to. You want to assign each of the extraStudents students to a class in a way that maximizes the average pass ratio across all the classes.\nThe pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes.\nReturn the maximum possible average pass ratio after assigning the extraStudents students. Answers within 10-5 of the actual answer will be accepted.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Score of a Good Subarray",
    "problem_id": "1918",
    "frontend_id": "1793",
    "difficulty": "Hard",
    "problem_slug": "maximum-score-of-a-good-subarray",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Stack",
      "Monotonic Stack"
    ],
    "description": "You are given an array of integers nums (0-indexed) and an integer k.\nThe score of a subarray (i, j) is defined as min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1). A good subarray is a subarray where i <= k <= j.\nReturn the maximum possible score of a good subarray.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Rearrange Products Table",
    "problem_id": "1948",
    "frontend_id": "1795",
    "difficulty": "Easy",
    "problem_slug": "rearrange-products-table",
    "topics": [
      "Database"
    ],
    "description": "Table: Products\nWrite a solution to rearrange the Products table so that each row has (product_id, store, price). If a product is not available in a store, do not include a row with that product_id and store combination in the result table.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Second Largest Digit in a String",
    "problem_id": "1904",
    "frontend_id": "1796",
    "difficulty": "Easy",
    "problem_slug": "second-largest-digit-in-a-string",
    "topics": [
      "Hash Table",
      "String"
    ],
    "description": "Given an alphanumeric string s, return the second largest numerical digit that appears in s, or -1 if it does not exist.\nAn alphanumeric string is a string consisting of lowercase English letters and digits.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Design Authentication Manager",
    "problem_id": "1905",
    "frontend_id": "1797",
    "difficulty": "Medium",
    "problem_slug": "design-authentication-manager",
    "topics": [
      "Hash Table",
      "Linked List",
      "Design",
      "Doubly-Linked List"
    ],
    "description": "There is an authentication system that works with authentication tokens. For each session, the user will receive a new authentication token that will expire timeToLive seconds after the currentTime. If the token is renewed, the expiry time will be extended to expire timeToLive seconds after the (potentially different) currentTime.\nImplement the AuthenticationManager class:\nNote that if a token expires at time t, and another action happens on time t (renew or countUnexpiredTokens), the expiration takes place before the other actions.\nExample 1:\nConstraints:"
  },
  {
    "title": "Maximum Number of Consecutive Values You Can Make",
    "problem_id": "1930",
    "frontend_id": "1798",
    "difficulty": "Medium",
    "problem_slug": "maximum-number-of-consecutive-values-you-can-make",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an integer array coins of length n which represents the n coins that you own. The value of the ith coin is coins[i]. You can make some value x if you can choose some of your n coins such that their values sum up to x.\nReturn the maximum number of consecutive integer values that you can make with your coins starting from and including 0.\nNote that you may have multiple coins of the same value.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximize Score After N Operations",
    "problem_id": "1906",
    "frontend_id": "1799",
    "difficulty": "Hard",
    "problem_slug": "maximize-score-after-n-operations",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Number Theory",
      "Bitmask"
    ],
    "description": "You are given nums, an array of positive integers of size 2 * n. You must perform n operations on this array.\nIn the ith operation (1-indexed), you will:\nReturn the maximum score you can receive after performing n operations.\nThe function gcd(x, y) is the greatest common divisor of x and y.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Ascending Subarray Sum",
    "problem_id": "1927",
    "frontend_id": "1800",
    "difficulty": "Easy",
    "problem_slug": "maximum-ascending-subarray-sum",
    "topics": [
      "Array"
    ],
    "description": "Given an array of positive integers nums, return the maximum possible sum of an strictly increasing subarray in nums.\nA subarray is defined as a contiguous sequence of numbers in an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Orders in the Backlog",
    "problem_id": "1928",
    "frontend_id": "1801",
    "difficulty": "Medium",
    "problem_slug": "number-of-orders-in-the-backlog",
    "topics": [
      "Array",
      "Heap (Priority Queue)",
      "Simulation"
    ],
    "description": "You are given a 2D integer array orders, where each orders[i] = [pricei, amounti, orderTypei] denotes that amounti orders have been placed of type orderTypei at the price pricei. The orderTypei is:\nNote that orders[i] represents a batch of amounti independent orders with the same price and order type. All orders represented by orders[i] will be placed before all orders represented by orders[i+1] for all valid i.\nThere is a backlog that consists of orders that have not been executed. The backlog is initially empty. When an order is placed, the following happens:\nReturn the total amount of orders in the backlog after placing all the orders from the input. Since this number can be large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Value at a Given Index in a Bounded Array",
    "problem_id": "1929",
    "frontend_id": "1802",
    "difficulty": "Medium",
    "problem_slug": "maximum-value-at-a-given-index-in-a-bounded-array",
    "topics": [
      "Math",
      "Binary Search",
      "Greedy"
    ],
    "description": "You are given three positive integers: n, index, and maxSum. You want to construct an array nums (0-indexed) that satisfies the following conditions:\nReturn nums[index] of the constructed array.\nNote that abs(x) equals x if x >= 0, and -x otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Pairs With XOR in a Range",
    "problem_id": "1907",
    "frontend_id": "1803",
    "difficulty": "Hard",
    "problem_slug": "count-pairs-with-xor-in-a-range",
    "topics": [
      "Array",
      "Bit Manipulation",
      "Trie"
    ],
    "description": "Given a (0-indexed) integer array nums and two integers low and high, return the number of nice pairs.\nA nice pair is a pair (i, j) where 0 <= i < j < nums.length and low <= (nums[i] XOR nums[j]) <= high.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Different Integers in a String",
    "problem_id": "1933",
    "frontend_id": "1805",
    "difficulty": "Easy",
    "problem_slug": "number-of-different-integers-in-a-string",
    "topics": [
      "Hash Table",
      "String"
    ],
    "description": "You are given a string word that consists of digits and lowercase English letters.\nYou will replace every non-digit character with a space. For example, \"a123bc34d8ef34\" will become \" 123  34 8  34\". Notice that you are left with some integers that are separated by at least one space: \"123\", \"34\", \"8\", and \"34\".\nReturn the number of different integers after performing the replacement operations on word.\nTwo integers are considered different if their decimal representations without any leading zeros are different.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Operations to Reinitialize a Permutation",
    "problem_id": "1935",
    "frontend_id": "1806",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-operations-to-reinitialize-a-permutation",
    "topics": [
      "Array",
      "Math",
      "Simulation"
    ],
    "description": "You are given an even integer n​​​​​​. You initially have a permutation perm of size n​​ where perm[i] == i​ (0-indexed)​​​​.\nIn one operation, you will create a new array arr, and for each i:\nYou will then assign arr​​​​ to perm.\nReturn the minimum non-zero number of operations you need to perform on perm to return the permutation to its initial value.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Evaluate the Bracket Pairs of a String",
    "problem_id": "1934",
    "frontend_id": "1807",
    "difficulty": "Medium",
    "problem_slug": "evaluate-the-bracket-pairs-of-a-string",
    "topics": [
      "Array",
      "Hash Table",
      "String"
    ],
    "description": "You are given a string s that contains some bracket pairs, with each pair containing a non-empty key.\nYou know the values of a wide range of keys. This is represented by a 2D string array knowledge where each knowledge[i] = [keyi, valuei] indicates that key keyi has a value of valuei.\nYou are tasked to evaluate all of the bracket pairs. When you evaluate a bracket pair that contains some key keyi, you will:\nEach key will appear at most once in your knowledge. There will not be any nested brackets in s.\nReturn the resulting string after evaluating all of the bracket pairs.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximize Number of Nice Divisors",
    "problem_id": "1936",
    "frontend_id": "1808",
    "difficulty": "Hard",
    "problem_slug": "maximize-number-of-nice-divisors",
    "topics": [
      "Math",
      "Recursion",
      "Number Theory"
    ],
    "description": "You are given a positive integer primeFactors. You are asked to construct a positive integer n that satisfies the following conditions:\nReturn the number of nice divisors of n. Since that number can be too large, return it modulo 109 + 7.\nNote that a prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. The prime factors of a number n is a list of prime numbers such that their product equals n.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Determine Color of a Chessboard Square",
    "problem_id": "1920",
    "frontend_id": "1812",
    "difficulty": "Easy",
    "problem_slug": "determine-color-of-a-chessboard-square",
    "topics": [
      "Math",
      "String"
    ],
    "description": "You are given coordinates, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.\nReturn true if the square is white, and false if the square is black.\nThe coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sentence Similarity III",
    "problem_id": "1923",
    "frontend_id": "1813",
    "difficulty": "Medium",
    "problem_slug": "sentence-similarity-iii",
    "topics": [
      "Array",
      "Two Pointers",
      "String"
    ],
    "description": "You are given two strings sentence1 and sentence2, each representing a sentence composed of words. A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of only uppercase and lowercase English characters.\nTwo sentences s1 and s2 are considered similar if it is possible to insert an arbitrary sentence (possibly empty) inside one of these sentences such that the two sentences become equal. Note that the inserted sentence must be separated from existing words by spaces.\nFor example,\nGiven two sentences sentence1 and sentence2, return true if sentence1 and sentence2 are similar. Otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Nice Pairs in an Array",
    "problem_id": "1925",
    "frontend_id": "1814",
    "difficulty": "Medium",
    "problem_slug": "count-nice-pairs-in-an-array",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Counting"
    ],
    "description": "You are given an array nums that consists of non-negative integers. Let us define rev(x) as the reverse of the non-negative integer x. For example, rev(123) = 321, and rev(120) = 21. A pair of indices (i, j) is nice if it satisfies all of the following conditions:\nReturn the number of nice pairs of indices. Since that number can be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Number of Groups Getting Fresh Donuts",
    "problem_id": "1924",
    "frontend_id": "1815",
    "difficulty": "Hard",
    "problem_slug": "maximum-number-of-groups-getting-fresh-donuts",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Memoization",
      "Bitmask"
    ],
    "description": "There is a donuts shop that bakes donuts in batches of batchSize. They have a rule where they must serve all of the donuts of a batch before serving any donuts of the next batch. You are given an integer batchSize and an integer array groups, where groups[i] denotes that there is a group of groups[i] customers that will visit the shop. Each customer will get exactly one donut.\nWhen a group visits the shop, all customers of the group must be served before serving any of the following groups. A group will be happy if they all get fresh donuts. That is, the first customer of the group does not receive a donut that was left over from the previous group.\nYou can freely rearrange the ordering of the groups. Return the maximum possible number of happy groups after rearranging the groups.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Truncate Sentence",
    "problem_id": "1944",
    "frontend_id": "1816",
    "difficulty": "Easy",
    "problem_slug": "truncate-sentence",
    "topics": [
      "Array",
      "String"
    ],
    "description": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of only uppercase and lowercase English letters (no punctuation).\nYou are given a sentence s​​​​​​ and an integer k​​​​​​. You want to truncate s​​​​​​ such that it contains only the first k​​​​​​ words. Return s​​​​​​ after truncating it.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Finding the Users Active Minutes",
    "problem_id": "1945",
    "frontend_id": "1817",
    "difficulty": "Medium",
    "problem_slug": "finding-the-users-active-minutes",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "You are given the logs for users' actions on LeetCode, and an integer k. The logs are represented by a 2D integer array logs where each logs[i] = [IDi, timei] indicates that the user with IDi performed an action at the minute timei.\nMultiple users can perform actions simultaneously, and a single user can perform multiple actions in the same minute.\nThe user active minutes (UAM) for a given user is defined as the number of unique minutes in which the user performed an action on LeetCode. A minute can only be counted once, even if multiple actions occur during it.\nYou are to calculate a 1-indexed array answer of size k such that, for each j (1 <= j <= k), answer[j] is the number of users whose UAM equals j.\nReturn the array answer as described above.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Absolute Sum Difference",
    "problem_id": "1946",
    "frontend_id": "1818",
    "difficulty": "Medium",
    "problem_slug": "minimum-absolute-sum-difference",
    "topics": [
      "Array",
      "Binary Search",
      "Sorting",
      "Ordered Set"
    ],
    "description": "You are given two positive integer arrays nums1 and nums2, both of length n.\nThe absolute sum difference of arrays nums1 and nums2 is defined as the sum of |nums1[i] - nums2[i]| for each 0 <= i < n (0-indexed).\nYou can replace at most one element of nums1 with any other element in nums1 to minimize the absolute sum difference.\nReturn the minimum absolute sum difference after replacing at most one element in the array nums1. Since the answer may be large, return it modulo 109 + 7.\n|x| is defined as:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Different Subsequences GCDs",
    "problem_id": "1947",
    "frontend_id": "1819",
    "difficulty": "Hard",
    "problem_slug": "number-of-different-subsequences-gcds",
    "topics": [
      "Array",
      "Math",
      "Counting",
      "Number Theory"
    ],
    "description": "You are given an array nums that consists of positive integers.\nThe GCD of a sequence of numbers is defined as the greatest integer that divides all the numbers in the sequence evenly.\nA subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\nReturn the number of different GCDs among all non-empty subsequences of nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sign of the Product of an Array",
    "problem_id": "1950",
    "frontend_id": "1822",
    "difficulty": "Easy",
    "problem_slug": "sign-of-the-product-of-an-array",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "Implement a function signFunc(x) that returns:\nYou are given an integer array nums. Let product be the product of all values in the array nums.\nReturn signFunc(product).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Winner of the Circular Game",
    "problem_id": "1951",
    "frontend_id": "1823",
    "difficulty": "Medium",
    "problem_slug": "find-the-winner-of-the-circular-game",
    "topics": [
      "Array",
      "Math",
      "Recursion",
      "Queue",
      "Simulation"
    ],
    "description": "There are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend.\nThe rules of the game are as follows:\nGiven the number of friends, n, and an integer k, return the winner of the game.\nExample 1:\nExample 2:\nConstraints:\nFollow up:\nCould you solve this problem in linear time with constant space?"
  },
  {
    "title": "Minimum Sideway Jumps",
    "problem_id": "1952",
    "frontend_id": "1824",
    "difficulty": "Medium",
    "problem_slug": "minimum-sideway-jumps",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "There is a 3 lane road of length n that consists of n + 1 points labeled from 0 to n. A frog starts at point 0 in the second lane and wants to jump to point n. However, there could be obstacles along the way.\nYou are given an array obstacles of length n + 1 where each obstacles[i] (ranging from 0 to 3) describes an obstacle on the lane obstacles[i] at point i. If obstacles[i] == 0, there are no obstacles at point i. There will be at most one obstacle in the 3 lanes at each point.\nThe frog can only travel from point i to point i + 1 on the same lane if there is not an obstacle on the lane at point i + 1. To avoid obstacles, the frog can also perform a side jump to jump to another lane (even if they are not adjacent) at the same point if there is no obstacle on the new lane.\nReturn the minimum number of side jumps the frog needs to reach any lane at point n starting from lane 2 at point 0.\nNote: There will be no obstacles on points 0 and n.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Finding MK Average",
    "problem_id": "1953",
    "frontend_id": "1825",
    "difficulty": "Hard",
    "problem_slug": "finding-mk-average",
    "topics": [
      "Design",
      "Queue",
      "Heap (Priority Queue)",
      "Data Stream",
      "Ordered Set"
    ],
    "description": "You are given two integers, m and k, and a stream of integers. You are tasked to implement a data structure that calculates the MKAverage for the stream.\nThe MKAverage can be calculated using these steps:\nImplement the MKAverage class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Make the Array Increasing",
    "problem_id": "1938",
    "frontend_id": "1827",
    "difficulty": "Easy",
    "problem_slug": "minimum-operations-to-make-the-array-increasing",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "You are given an integer array nums (0-indexed). In one operation, you can choose an element of the array and increment it by 1.\nReturn the minimum number of operations needed to make nums strictly increasing.\nAn array nums is strictly increasing if nums[i] < nums[i+1] for all 0 <= i < nums.length - 1. An array of length 1 is trivially strictly increasing.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Queries on Number of Points Inside a Circle",
    "problem_id": "1939",
    "frontend_id": "1828",
    "difficulty": "Medium",
    "problem_slug": "queries-on-number-of-points-inside-a-circle",
    "topics": [
      "Array",
      "Math",
      "Geometry"
    ],
    "description": "You are given an array points where points[i] = [xi, yi] is the coordinates of the ith point on a 2D plane. Multiple points can have the same coordinates.\nYou are also given an array queries where queries[j] = [xj, yj, rj] describes a circle centered at (xj, yj) with a radius of rj.\nFor each query queries[j], compute the number of points inside the jth circle. Points on the border of the circle are considered inside.\nReturn an array answer, where answer[j] is the answer to the jth query.\nExample 1:\nExample 2:\nConstraints:\nFollow up: Could you find the answer for each query in better complexity than O(n)?"
  },
  {
    "title": "Maximum XOR for Each Query",
    "problem_id": "1940",
    "frontend_id": "1829",
    "difficulty": "Medium",
    "problem_slug": "maximum-xor-for-each-query",
    "topics": [
      "Array",
      "Bit Manipulation",
      "Prefix Sum"
    ],
    "description": "You are given a sorted array nums of n non-negative integers and an integer maximumBit. You want to perform the following query n times:\nReturn an array answer, where answer[i] is the answer to the ith query.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Operations to Make String Sorted",
    "problem_id": "1941",
    "frontend_id": "1830",
    "difficulty": "Hard",
    "problem_slug": "minimum-number-of-operations-to-make-string-sorted",
    "topics": [
      "Math",
      "String",
      "Combinatorics"
    ],
    "description": "You are given a string s (0-indexed)​​​​​​. You are asked to perform the following operation on s​​​​​​ until you get a sorted string:\nReturn the number of operations needed to make the string sorted. Since the answer can be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check if the Sentence Is Pangram",
    "problem_id": "1960",
    "frontend_id": "1832",
    "difficulty": "Easy",
    "problem_slug": "check-if-the-sentence-is-pangram",
    "topics": [
      "Hash Table",
      "String"
    ],
    "description": "A pangram is a sentence where every letter of the English alphabet appears at least once.\nGiven a string sentence containing only lowercase English letters, return true if sentence is a pangram, or false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Ice Cream Bars",
    "problem_id": "1961",
    "frontend_id": "1833",
    "difficulty": "Medium",
    "problem_slug": "maximum-ice-cream-bars",
    "topics": [
      "Array",
      "Greedy",
      "Sorting",
      "Counting Sort"
    ],
    "description": "It is a sweltering summer day, and a boy wants to buy some ice cream bars.\nAt the store, there are n ice cream bars. You are given an array costs of length n, where costs[i] is the price of the ith ice cream bar in coins. The boy initially has coins coins to spend, and he wants to buy as many ice cream bars as possible.\nNote: The boy can buy the ice cream bars in any order.\nReturn the maximum number of ice cream bars the boy can buy with coins coins.\nYou must solve the problem by counting sort.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Single-Threaded CPU",
    "problem_id": "1962",
    "frontend_id": "1834",
    "difficulty": "Medium",
    "problem_slug": "single-threaded-cpu",
    "topics": [
      "Array",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given n​​​​​​ tasks labeled from 0 to n - 1 represented by a 2D integer array tasks, where tasks[i] = [enqueueTimei, processingTimei] means that the i​​​​​​th​​​​ task will be available to process at enqueueTimei and will take processingTimei to finish processing.\nYou have a single-threaded CPU that can process at most one task at a time and will act in the following way:\nReturn the order in which the CPU will process the tasks.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find XOR Sum of All Pairs Bitwise AND",
    "problem_id": "1963",
    "frontend_id": "1835",
    "difficulty": "Hard",
    "problem_slug": "find-xor-sum-of-all-pairs-bitwise-and",
    "topics": [
      "Array",
      "Math",
      "Bit Manipulation"
    ],
    "description": "The XOR sum of a list is the bitwise XOR of all its elements. If the list only contains one element, then its XOR sum will be equal to this element.\nYou are given two 0-indexed arrays arr1 and arr2 that consist only of non-negative integers.\nConsider the list containing the result of arr1[i] AND arr2[j] (bitwise AND) for every (i, j) pair where 0 <= i < arr1.length and 0 <= j < arr2.length.\nReturn the XOR sum of the aforementioned list.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Digits in Base K",
    "problem_id": "1965",
    "frontend_id": "1837",
    "difficulty": "Easy",
    "problem_slug": "sum-of-digits-in-base-k",
    "topics": [
      "Math"
    ],
    "description": "Given an integer n (in base 10) and a base k, return the sum of the digits of n after converting n from base 10 to base k.\nAfter converting, each digit should be interpreted as a base 10 number, and the sum should be returned in base 10.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Frequency of the Most Frequent Element",
    "problem_id": "1966",
    "frontend_id": "1838",
    "difficulty": "Medium",
    "problem_slug": "frequency-of-the-most-frequent-element",
    "topics": [
      "Array",
      "Binary Search",
      "Greedy",
      "Sliding Window",
      "Sorting",
      "Prefix Sum"
    ],
    "description": "The frequency of an element is the number of times it occurs in an array.\nYou are given an integer array nums and an integer k. In one operation, you can choose an index of nums and increment the element at that index by 1.\nReturn the maximum possible frequency of an element after performing at most k operations.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest Substring Of All Vowels in Order",
    "problem_id": "1967",
    "frontend_id": "1839",
    "difficulty": "Medium",
    "problem_slug": "longest-substring-of-all-vowels-in-order",
    "topics": [
      "String",
      "Sliding Window"
    ],
    "description": "A string is considered beautiful if it satisfies the following conditions:\nFor example, strings \"aeiou\" and \"aaaaaaeiiiioou\" are considered beautiful, but \"uaeio\", \"aeoiu\", and \"aaaeeeooo\" are not beautiful.\nGiven a string word consisting of English vowels, return the length of the longest beautiful substring of word. If no such substring exists, return 0.\nA substring is a contiguous sequence of characters in a string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Building Height",
    "problem_id": "1968",
    "frontend_id": "1840",
    "difficulty": "Hard",
    "problem_slug": "maximum-building-height",
    "topics": [
      "Array",
      "Math",
      "Sorting"
    ],
    "description": "You want to build n new buildings in a city. The new buildings will be built in a line and are labeled from 1 to n.\nHowever, there are city restrictions on the heights of the new buildings:\nAdditionally, there are city restrictions on the maximum height of specific buildings. These restrictions are given as a 2D integer array restrictions where restrictions[i] = [idi, maxHeighti] indicates that building idi must have a height less than or equal to maxHeighti.\nIt is guaranteed that each building will appear at most once in restrictions, and building 1 will not be in restrictions.\nReturn the maximum possible height of the tallest building.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Replace All Digits with Characters",
    "problem_id": "1954",
    "frontend_id": "1844",
    "difficulty": "Easy",
    "problem_slug": "replace-all-digits-with-characters",
    "topics": [
      "String"
    ],
    "description": "You are given a 0-indexed string s that has lowercase English letters in its even indices and digits in its odd indices.\nYou must perform an operation shift(c, x), where c is a character and x is a digit, that returns the xth character after c.\nFor every odd index i, you want to replace the digit s[i] with the result of the shift(s[i-1], s[i]) operation.\nReturn s after replacing all digits. It is guaranteed that shift(s[i-1], s[i]) will never exceed 'z'.\nNote that shift(c, x) is not a preloaded function, but an operation to be implemented as part of the solution.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Seat Reservation Manager",
    "problem_id": "1955",
    "frontend_id": "1845",
    "difficulty": "Medium",
    "problem_slug": "seat-reservation-manager",
    "topics": [
      "Design",
      "Heap (Priority Queue)"
    ],
    "description": "Design a system that manages the reservation state of n seats that are numbered from 1 to n.\nImplement the SeatManager class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Maximum Element After Decreasing and Rearranging",
    "problem_id": "1956",
    "frontend_id": "1846",
    "difficulty": "Medium",
    "problem_slug": "maximum-element-after-decreasing-and-rearranging",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an array of positive integers arr. Perform some operations (possibly none) on arr so that it satisfies these conditions:\nThere are 2 types of operations that you can perform any number of times:\nReturn the maximum possible value of an element in arr after performing the operations to satisfy the conditions.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Closest Room",
    "problem_id": "1957",
    "frontend_id": "1847",
    "difficulty": "Hard",
    "problem_slug": "closest-room",
    "topics": [
      "Array",
      "Binary Search",
      "Sorting",
      "Ordered Set"
    ],
    "description": "There is a hotel with n rooms. The rooms are represented by a 2D integer array rooms where rooms[i] = [roomIdi, sizei] denotes that there is a room with room number roomIdi and size equal to sizei. Each roomIdi is guaranteed to be unique.\nYou are also given k queries in a 2D array queries where queries[j] = [preferredj, minSizej]. The answer to the jth query is the room number id of a room such that:\nIf there is a tie in the absolute difference, then use the room with the smallest such id. If there is no such room, the answer is -1.\nReturn an array answer of length k where answer[j] contains the answer to the jth query.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Distance to the Target Element",
    "problem_id": "1975",
    "frontend_id": "1848",
    "difficulty": "Easy",
    "problem_slug": "minimum-distance-to-the-target-element",
    "topics": [
      "Array"
    ],
    "description": "Given an integer array nums (0-indexed) and two integers target and start, find an index i such that nums[i] == target and abs(i - start) is minimized. Note that abs(x) is the absolute value of x.\nReturn abs(i - start).\nIt is guaranteed that target exists in nums.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Splitting a String Into Descending Consecutive Values",
    "problem_id": "1976",
    "frontend_id": "1849",
    "difficulty": "Medium",
    "problem_slug": "splitting-a-string-into-descending-consecutive-values",
    "topics": [
      "String",
      "Backtracking",
      "Enumeration"
    ],
    "description": "You are given a string s that consists of only digits.\nCheck if we can split s into two or more non-empty substrings such that the numerical values of the substrings are in descending order and the difference between numerical values of every two adjacent substrings is equal to 1.\nReturn true if it is possible to split s​​​​​​ as described above, or false otherwise.\nA substring is a contiguous sequence of characters in a string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Adjacent Swaps to Reach the Kth Smallest Number",
    "problem_id": "1978",
    "frontend_id": "1850",
    "difficulty": "Medium",
    "problem_slug": "minimum-adjacent-swaps-to-reach-the-kth-smallest-number",
    "topics": [
      "Two Pointers",
      "String",
      "Greedy"
    ],
    "description": "You are given a string num, representing a large integer, and an integer k.\nWe call some integer wonderful if it is a permutation of the digits in num and is greater in value than num. There can be many wonderful integers. However, we only care about the smallest-valued ones.\nReturn the minimum number of adjacent digit swaps that needs to be applied to num to reach the kth smallest wonderful integer.\nThe tests are generated in such a way that kth smallest wonderful integer exists.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Interval to Include Each Query",
    "problem_id": "1977",
    "frontend_id": "1851",
    "difficulty": "Hard",
    "problem_slug": "minimum-interval-to-include-each-query",
    "topics": [
      "Array",
      "Binary Search",
      "Line Sweep",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given a 2D integer array intervals, where intervals[i] = [lefti, righti] describes the ith interval starting at lefti and ending at righti (inclusive). The size of an interval is defined as the number of integers it contains, or more formally righti - lefti + 1.\nYou are also given an integer array queries. The answer to the jth query is the size of the smallest interval i such that lefti <= queries[j] <= righti. If no such interval exists, the answer is -1.\nReturn an array containing the answers to the queries.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Population Year",
    "problem_id": "1983",
    "frontend_id": "1854",
    "difficulty": "Easy",
    "problem_slug": "maximum-population-year",
    "topics": [
      "Array",
      "Counting",
      "Prefix Sum"
    ],
    "description": "You are given a 2D integer array logs where each logs[i] = [birthi, deathi] indicates the birth and death years of the ith person.\nThe population of some year x is the number of people alive during that year. The ith person is counted in year x's population if x is in the inclusive range [birthi, deathi - 1]. Note that the person is not counted in the year that they die.\nReturn the earliest year with the maximum population.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Distance Between a Pair of Values",
    "problem_id": "1984",
    "frontend_id": "1855",
    "difficulty": "Medium",
    "problem_slug": "maximum-distance-between-a-pair-of-values",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search"
    ],
    "description": "You are given two non-increasing 0-indexed integer arrays nums1​​​​​​ and nums2​​​​​​.\nA pair of indices (i, j), where 0 <= i < nums1.length and 0 <= j < nums2.length, is valid if both i <= j and nums1[i] <= nums2[j]. The distance of the pair is j - i​​​​.\nReturn the maximum distance of any valid pair (i, j). If there are no valid pairs, return 0.\nAn array arr is non-increasing if arr[i-1] >= arr[i] for every 1 <= i < arr.length.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Subarray Min-Product",
    "problem_id": "1985",
    "frontend_id": "1856",
    "difficulty": "Medium",
    "problem_slug": "maximum-subarray-min-product",
    "topics": [
      "Array",
      "Stack",
      "Monotonic Stack",
      "Prefix Sum"
    ],
    "description": "The min-product of an array is equal to the minimum value in the array multiplied by the array's sum.\nGiven an array of integers nums, return the maximum min-product of any non-empty subarray of nums. Since the answer may be large, return it modulo 109 + 7.\nNote that the min-product should be maximized before performing the modulo operation. Testcases are generated such that the maximum min-product without modulo will fit in a 64-bit signed integer.\nA subarray is a contiguous part of an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Largest Color Value in a Directed Graph",
    "problem_id": "1986",
    "frontend_id": "1857",
    "difficulty": "Hard",
    "problem_slug": "largest-color-value-in-a-directed-graph",
    "topics": [
      "Hash Table",
      "Dynamic Programming",
      "Graph",
      "Topological Sort",
      "Memoization",
      "Counting"
    ],
    "description": "There is a directed graph of n colored nodes and m edges. The nodes are numbered from 0 to n - 1.\nYou are given a string colors where colors[i] is a lowercase English letter representing the color of the ith node in this graph (0-indexed). You are also given a 2D array edges where edges[j] = [aj, bj] indicates that there is a directed edge from node aj to node bj.\nA valid path in the graph is a sequence of nodes x1 -> x2 -> x3 -> ... -> xk such that there is a directed edge from xi to xi+1 for every 1 <= i < k. The color value of the path is the number of nodes that are colored the most frequently occurring color along that path.\nReturn the largest color value of any valid path in the given graph, or -1 if the graph contains a cycle.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sorting the Sentence",
    "problem_id": "1970",
    "frontend_id": "1859",
    "difficulty": "Easy",
    "problem_slug": "sorting-the-sentence",
    "topics": [
      "String",
      "Sorting"
    ],
    "description": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.\nA sentence can be shuffled by appending the 1-indexed word position to each word then rearranging the words in the sentence.\nGiven a shuffled sentence s containing no more than 9 words, reconstruct and return the original sentence.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Incremental Memory Leak",
    "problem_id": "1971",
    "frontend_id": "1860",
    "difficulty": "Medium",
    "problem_slug": "incremental-memory-leak",
    "topics": [
      "Math",
      "Simulation"
    ],
    "description": "You are given two integers memory1 and memory2 representing the available memory in bits on two memory sticks. There is currently a faulty program running that consumes an increasing amount of memory every second.\nAt the ith second (starting from 1), i bits of memory are allocated to the stick with more available memory (or from the first memory stick if both have the same available memory). If neither stick has at least i bits of available memory, the program crashes.\nReturn an array containing [crashTime, memory1crash, memory2crash], where crashTime is the time (in seconds) when the program crashed and memory1crash and memory2crash are the available bits of memory in the first and second sticks respectively.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Rotating the Box",
    "problem_id": "1972",
    "frontend_id": "1861",
    "difficulty": "Medium",
    "problem_slug": "rotating-the-box",
    "topics": [
      "Array",
      "Two Pointers",
      "Matrix"
    ],
    "description": "You are given an m x n matrix of characters boxGrid representing a side-view of a box. Each cell of the box is one of the following:\nThe box is rotated 90 degrees clockwise, causing some of the stones to fall due to gravity. Each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. Gravity does not affect the obstacles' positions, and the inertia from the box's rotation does not affect the stones' horizontal positions.\nIt is guaranteed that each stone in boxGrid rests on an obstacle, another stone, or the bottom of the box.\nReturn an n x m matrix representing the box after the rotation described above.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sum of Floored Pairs",
    "problem_id": "1326",
    "frontend_id": "1862",
    "difficulty": "Hard",
    "problem_slug": "sum-of-floored-pairs",
    "topics": [
      "Array",
      "Math",
      "Binary Search",
      "Prefix Sum"
    ],
    "description": "Given an integer array nums, return the sum of floor(nums[i] / nums[j]) for all pairs of indices 0 <= i, j < nums.length in the array. Since the answer may be too large, return it modulo 109 + 7.\nThe floor() function returns the integer part of the division.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of All Subset XOR Totals",
    "problem_id": "1993",
    "frontend_id": "1863",
    "difficulty": "Easy",
    "problem_slug": "sum-of-all-subset-xor-totals",
    "topics": [
      "Array",
      "Math",
      "Backtracking",
      "Bit Manipulation",
      "Combinatorics",
      "Enumeration"
    ],
    "description": "The XOR total of an array is defined as the bitwise XOR of all its elements, or 0 if the array is empty.\nGiven an array nums, return the sum of all XOR totals for every subset of nums.\nNote: Subsets with the same elements should be counted multiple times.\nAn array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Swaps to Make the Binary String Alternating",
    "problem_id": "1994",
    "frontend_id": "1864",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-swaps-to-make-the-binary-string-alternating",
    "topics": [
      "String",
      "Greedy"
    ],
    "description": "Given a binary string s, return the minimum number of character swaps to make it alternating, or -1 if it is impossible.\nThe string is called alternating if no two adjacent characters are equal. For example, the strings \"010\" and \"1010\" are alternating, while the string \"0100\" is not.\nAny two characters may be swapped, even if they are not adjacent.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Finding Pairs With a Certain Sum",
    "problem_id": "1995",
    "frontend_id": "1865",
    "difficulty": "Medium",
    "problem_slug": "finding-pairs-with-a-certain-sum",
    "topics": [
      "Array",
      "Hash Table",
      "Design"
    ],
    "description": "You are given two integer arrays nums1 and nums2. You are tasked to implement a data structure that supports queries of two types:\nImplement the FindSumPairs class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Number of Ways to Rearrange Sticks With K Sticks Visible",
    "problem_id": "1996",
    "frontend_id": "1866",
    "difficulty": "Hard",
    "problem_slug": "number-of-ways-to-rearrange-sticks-with-k-sticks-visible",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "description": "There are n uniquely-sized sticks whose lengths are integers from 1 to n. You want to arrange the sticks such that exactly k sticks are visible from the left. A stick is visible from the left if there are no longer sticks to the left of it.\nGiven n and k, return the number of such arrangements. Since the answer may be large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longer Contiguous Segments of Ones than Zeros",
    "problem_id": "1999",
    "frontend_id": "1869",
    "difficulty": "Easy",
    "problem_slug": "longer-contiguous-segments-of-ones-than-zeros",
    "topics": [
      "String"
    ],
    "description": "Given a binary string s, return true if the longest contiguous segment of 1's is strictly longer than the longest contiguous segment of 0's in s, or return false otherwise.\nNote that if there are no 0's, then the longest continuous segment of 0's is considered to have a length 0. The same applies if there is no 1's.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Speed to Arrive on Time",
    "problem_id": "2000",
    "frontend_id": "1870",
    "difficulty": "Medium",
    "problem_slug": "minimum-speed-to-arrive-on-time",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "You are given a floating-point number hour, representing the amount of time you have to reach the office. To commute to the office, you must take n trains in sequential order. You are also given an integer array dist of length n, where dist[i] describes the distance (in kilometers) of the ith train ride.\nEach train can only depart at an integer hour, so you may need to wait in between each train ride.\nReturn the minimum positive integer speed (in kilometers per hour) that all the trains must travel at for you to reach the office on time, or -1 if it is impossible to be on time.\nTests are generated such that the answer will not exceed 107 and hour will have at most two digits after the decimal point.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Jump Game VII",
    "problem_id": "2001",
    "frontend_id": "1871",
    "difficulty": "Medium",
    "problem_slug": "jump-game-vii",
    "topics": [
      "String",
      "Dynamic Programming",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed binary string s and two integers minJump and maxJump. In the beginning, you are standing at index 0, which is equal to '0'. You can move from index i to index j if the following conditions are fulfilled:\nReturn true if you can reach index s.length - 1 in s, or false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Stone Game VIII",
    "problem_id": "2002",
    "frontend_id": "1872",
    "difficulty": "Hard",
    "problem_slug": "stone-game-viii",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Prefix Sum",
      "Game Theory"
    ],
    "description": "Alice and Bob take turns playing a game, with Alice starting first.\nThere are n stones arranged in a row. On each player's turn, while the number of stones is more than one, they will do the following:\nThe game stops when only one stone is left in the row.\nThe score difference between Alice and Bob is (Alice's score - Bob's score). Alice's goal is to maximize the score difference, and Bob's goal is the minimize the score difference.\nGiven an integer array stones of length n where stones[i] represents the value of the ith stone from the left, return the score difference between Alice and Bob if they both play optimally.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Calculate Special Bonus",
    "problem_id": "2024",
    "frontend_id": "1873",
    "difficulty": "Easy",
    "problem_slug": "calculate-special-bonus",
    "topics": [
      "Database"
    ],
    "description": "Table: Employees\nWrite a solution to calculate the bonus of each employee. The bonus of an employee is 100% of their salary if the ID of the employee is an odd number and the employee's name does not start with the character 'M'. The bonus of an employee is 0 otherwise.\nReturn the result table ordered by employee_id.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Substrings of Size Three with Distinct Characters",
    "problem_id": "1987",
    "frontend_id": "1876",
    "difficulty": "Easy",
    "problem_slug": "substrings-of-size-three-with-distinct-characters",
    "topics": [
      "Hash Table",
      "String",
      "Sliding Window",
      "Counting"
    ],
    "description": "A string is good if there are no repeated characters.\nGiven a string s​​​​​, return the number of good substrings of length three in s​​​​​​.\nNote that if there are multiple occurrences of the same substring, every occurrence should be counted.\nA substring is a contiguous sequence of characters in a string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimize Maximum Pair Sum in Array",
    "problem_id": "1988",
    "frontend_id": "1877",
    "difficulty": "Medium",
    "problem_slug": "minimize-maximum-pair-sum-in-array",
    "topics": [
      "Array",
      "Two Pointers",
      "Greedy",
      "Sorting"
    ],
    "description": "The pair sum of a pair (a,b) is equal to a + b. The maximum pair sum is the largest pair sum in a list of pairs.\nGiven an array nums of even length n, pair up the elements of nums into n / 2 pairs such that:\nReturn the minimized maximum pair sum after optimally pairing up the elements.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Get Biggest Three Rhombus Sums in a Grid",
    "problem_id": "1990",
    "frontend_id": "1878",
    "difficulty": "Medium",
    "problem_slug": "get-biggest-three-rhombus-sums-in-a-grid",
    "topics": [
      "Array",
      "Math",
      "Sorting",
      "Heap (Priority Queue)",
      "Matrix",
      "Prefix Sum"
    ],
    "description": "You are given an m x n integer matrix grid​​​.\nA rhombus sum is the sum of the elements that form the border of a regular rhombus shape in grid​​​. The rhombus must have the shape of a square rotated 45 degrees with each of the corners centered in a grid cell. Below is an image of four valid rhombus shapes with the corresponding colored cells that should be included in each rhombus sum:\nNote that the rhombus can have an area of 0, which is depicted by the purple rhombus in the bottom right corner.\nReturn the biggest three distinct rhombus sums in the grid in descending order. If there are less than three distinct values, return all of them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum XOR Sum of Two Arrays",
    "problem_id": "1989",
    "frontend_id": "1879",
    "difficulty": "Hard",
    "problem_slug": "minimum-xor-sum-of-two-arrays",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "You are given two integer arrays nums1 and nums2 of length n.\nThe XOR sum of the two integer arrays is (nums1[0] XOR nums2[0]) + (nums1[1] XOR nums2[1]) + ... + (nums1[n - 1] XOR nums2[n - 1]) (0-indexed).\nRearrange the elements of nums2 such that the resulting XOR sum is minimized.\nReturn the XOR sum after the rearrangement.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check if Word Equals Summation of Two Words",
    "problem_id": "2010",
    "frontend_id": "1880",
    "difficulty": "Easy",
    "problem_slug": "check-if-word-equals-summation-of-two-words",
    "topics": [
      "String"
    ],
    "description": "The letter value of a letter is its position in the alphabet starting from 0 (i.e. 'a' -> 0, 'b' -> 1, 'c' -> 2, etc.).\nThe numerical value of some string of lowercase English letters s is the concatenation of the letter values of each letter in s, which is then converted into an integer.\nYou are given three strings firstWord, secondWord, and targetWord, each consisting of lowercase English letters 'a' through 'j' inclusive.\nReturn true if the summation of the numerical values of firstWord and secondWord equals the numerical value of targetWord, or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Value after Insertion",
    "problem_id": "2011",
    "frontend_id": "1881",
    "difficulty": "Medium",
    "problem_slug": "maximum-value-after-insertion",
    "topics": [
      "String",
      "Greedy"
    ],
    "description": "You are given a very large integer n, represented as a string,​​​​​​ and an integer digit x. The digits in n and the digit x are in the inclusive range [1, 9], and n may represent a negative number.\nYou want to maximize n's numerical value by inserting x anywhere in the decimal representation of n​​​​​​. You cannot insert x to the left of the negative sign.\nReturn a string representing the maximum value of n​​​​​​ after the insertion.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Process Tasks Using Servers",
    "problem_id": "2012",
    "frontend_id": "1882",
    "difficulty": "Medium",
    "problem_slug": "process-tasks-using-servers",
    "topics": [
      "Array",
      "Heap (Priority Queue)"
    ],
    "description": "You are given two 0-indexed integer arrays servers and tasks of lengths n​​​​​​ and m​​​​​​ respectively. servers[i] is the weight of the i​​​​​​th​​​​ server, and tasks[j] is the time needed to process the j​​​​​​th​​​​ task in seconds.\nTasks are assigned to the servers using a task queue. Initially, all servers are free, and the queue is empty.\nAt second j, the jth task is inserted into the queue (starting with the 0th task being inserted at second 0). As long as there are free servers and the queue is not empty, the task in the front of the queue will be assigned to a free server with the smallest weight, and in case of a tie, it is assigned to a free server with the smallest index.\nIf there are no free servers and the queue is not empty, we wait until a server becomes free and immediately assign the next task. If multiple servers become free at the same time, then multiple tasks from the queue will be assigned in order of insertion following the weight and index priorities above.\nA server that is assigned task j at second t will be free again at second t + tasks[j].\nBuild an array ans​​​​ of length m, where ans[j] is the index of the server the j​​​​​​th task will be assigned to.\nReturn the array ans​​​​.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Skips to Arrive at Meeting On Time",
    "problem_id": "2013",
    "frontend_id": "1883",
    "difficulty": "Hard",
    "problem_slug": "minimum-skips-to-arrive-at-meeting-on-time",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an integer hoursBefore, the number of hours you have to travel to your meeting. To arrive at your meeting, you have to travel through n roads. The road lengths are given as an integer array dist of length n, where dist[i] describes the length of the ith road in kilometers. In addition, you are given an integer speed, which is the speed (in km/h) you will travel at.\nAfter you travel road i, you must rest and wait for the next integer hour before you can begin traveling on the next road. Note that you do not have to rest after traveling the last road because you are already at the meeting.\nHowever, you are allowed to skip some rests to be able to arrive on time, meaning you do not need to wait for the next integer hour. Note that this means you may finish traveling future roads at different hour marks.\nReturn the minimum number of skips required to arrive at the meeting on time, or -1 if it is impossible.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Egg Drop With 2 Eggs and N Floors",
    "problem_id": "2031",
    "frontend_id": "1884",
    "difficulty": "Medium",
    "problem_slug": "egg-drop-with-2-eggs-and-n-floors",
    "topics": [
      "Math",
      "Dynamic Programming"
    ],
    "description": "You are given two identical eggs and you have access to a building with n floors labeled from 1 to n.\nYou know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.\nIn each move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves.\nReturn the minimum number of moves that you need to determine with certainty what the value of f is.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Determine Whether Matrix Can Be Obtained By Rotation",
    "problem_id": "2015",
    "frontend_id": "1886",
    "difficulty": "Easy",
    "problem_slug": "determine-whether-matrix-can-be-obtained-by-rotation",
    "topics": [
      "Array",
      "Matrix"
    ],
    "description": "Given two n x n binary matrices mat and target, return true if it is possible to make mat equal to target by rotating mat in 90-degree increments, or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Reduction Operations to Make the Array Elements Equal",
    "problem_id": "2016",
    "frontend_id": "1887",
    "difficulty": "Medium",
    "problem_slug": "reduction-operations-to-make-the-array-elements-equal",
    "topics": [
      "Array",
      "Sorting"
    ],
    "description": "Given an integer array nums, your goal is to make all elements in nums equal. To complete one operation, follow these steps:\nReturn the number of operations to make all elements in nums equal.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Flips to Make the Binary String Alternating",
    "problem_id": "2017",
    "frontend_id": "1888",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-flips-to-make-the-binary-string-alternating",
    "topics": [
      "String",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "description": "You are given a binary string s. You are allowed to perform two types of operations on the string in any sequence:\nReturn the minimum number of type-2 operations you need to perform such that s becomes alternating.\nThe string is called alternating if no two adjacent characters are equal.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Space Wasted From Packaging",
    "problem_id": "2018",
    "frontend_id": "1889",
    "difficulty": "Hard",
    "problem_slug": "minimum-space-wasted-from-packaging",
    "topics": [
      "Array",
      "Binary Search",
      "Sorting",
      "Prefix Sum"
    ],
    "description": "You have n packages that you are trying to place in boxes, one package in each box. There are m suppliers that each produce boxes of different sizes (with infinite supply). A package can be placed in a box if the size of the package is less than or equal to the size of the box.\nThe package sizes are given as an integer array packages, where packages[i] is the size of the ith package. The suppliers are given as a 2D integer array boxes, where boxes[j] is an array of box sizes that the jth supplier produces.\nYou want to choose a single supplier and use boxes from them such that the total wasted space is minimized. For each package in a box, we define the space wasted to be size of the box - size of the package. The total wasted space is the sum of the space wasted in all the boxes.\nReturn the minimum total wasted space by choosing the box supplier optimally, or -1 if it is impossible to fit all the packages inside boxes. Since the answer may be large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "The Latest Login in 2020",
    "problem_id": "2041",
    "frontend_id": "1890",
    "difficulty": "Easy",
    "problem_slug": "the-latest-login-in-2020",
    "topics": [
      "Database"
    ],
    "description": "Table: Logins\nWrite a solution to report the latest login for all users in the year 2020. Do not include the users who did not login in 2020.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Check if All the Integers in a Range Are Covered",
    "problem_id": "2005",
    "frontend_id": "1893",
    "difficulty": "Easy",
    "problem_slug": "check-if-all-the-integers-in-a-range-are-covered",
    "topics": [
      "Array",
      "Hash Table",
      "Prefix Sum"
    ],
    "description": "You are given a 2D integer array ranges and two integers left and right. Each ranges[i] = [starti, endi] represents an inclusive interval between starti and endi.\nReturn true if each integer in the inclusive range [left, right] is covered by at least one interval in ranges. Return false otherwise.\nAn integer x is covered by an interval ranges[i] = [starti, endi] if starti <= x <= endi.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Student that Will Replace the Chalk",
    "problem_id": "2006",
    "frontend_id": "1894",
    "difficulty": "Medium",
    "problem_slug": "find-the-student-that-will-replace-the-chalk",
    "topics": [
      "Array",
      "Binary Search",
      "Simulation",
      "Prefix Sum"
    ],
    "description": "There are n students in a class numbered from 0 to n - 1. The teacher will give each student a problem starting with the student number 0, then the student number 1, and so on until the teacher reaches the student number n - 1. After that, the teacher will restart the process, starting with the student number 0 again.\nYou are given a 0-indexed integer array chalk and an integer k. There are initially k pieces of chalk. When the student number i is given a problem to solve, they will use chalk[i] pieces of chalk to solve that problem. However, if the current number of chalk pieces is strictly less than chalk[i], then the student number i will be asked to replace the chalk.\nReturn the index of the student that will replace the chalk pieces.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Largest Magic Square",
    "problem_id": "1311",
    "frontend_id": "1895",
    "difficulty": "Medium",
    "problem_slug": "largest-magic-square",
    "topics": [
      "Array",
      "Matrix",
      "Prefix Sum"
    ],
    "description": "A k x k magic square is a k x k grid filled with integers such that every row sum, every column sum, and both diagonal sums are all equal. The integers in the magic square do not have to be distinct. Every 1 x 1 grid is trivially a magic square.\nGiven an m x n integer grid, return the size (i.e., the side length k) of the largest magic square that can be found within this grid.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Cost to Change the Final Value of Expression",
    "problem_id": "2008",
    "frontend_id": "1896",
    "difficulty": "Hard",
    "problem_slug": "minimum-cost-to-change-the-final-value-of-expression",
    "topics": [
      "Math",
      "String",
      "Dynamic Programming",
      "Stack"
    ],
    "description": "You are given a valid boolean expression as a string expression consisting of the characters '1','0','&' (bitwise AND operator),'|' (bitwise OR operator),'(', and ')'.\nReturn the minimum cost to change the final value of the expression.\nThe cost of changing the final value of an expression is the number of operations performed on the expression. The types of operations are described as follows:\nNote: '&' does not take precedence over '|' in the order of calculation. Evaluate parentheses first, then in left-to-right order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Redistribute Characters to Make All Strings Equal",
    "problem_id": "2025",
    "frontend_id": "1897",
    "difficulty": "Easy",
    "problem_slug": "redistribute-characters-to-make-all-strings-equal",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "You are given an array of strings words (0-indexed).\nIn one operation, pick two distinct indices i and j, where words[i] is a non-empty string, and move any character from words[i] to any position in words[j].\nReturn true if you can make every string in words equal using any number of operations, and false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Number of Removable Characters",
    "problem_id": "2027",
    "frontend_id": "1898",
    "difficulty": "Medium",
    "problem_slug": "maximum-number-of-removable-characters",
    "topics": [
      "Array",
      "Two Pointers",
      "String",
      "Binary Search"
    ],
    "description": "You are given two strings s and p where p is a subsequence of s. You are also given a distinct 0-indexed integer array removable containing a subset of indices of s (s is also 0-indexed).\nYou want to choose an integer k (0 <= k <= removable.length) such that, after removing k characters from s using the first k indices in removable, p is still a subsequence of s. More formally, you will mark the character at s[removable[i]] for each 0 <= i < k, then remove all marked characters and check if p is still a subsequence.\nReturn the maximum k you can choose such that p is still a subsequence of s after the removals.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Merge Triplets to Form Target Triplet",
    "problem_id": "2026",
    "frontend_id": "1899",
    "difficulty": "Medium",
    "problem_slug": "merge-triplets-to-form-target-triplet",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "A triplet is an array of three integers. You are given a 2D integer array triplets, where triplets[i] = [ai, bi, ci] describes the ith triplet. You are also given an integer array target = [x, y, z] that describes the triplet you want to obtain.\nTo obtain target, you may apply the following operation on triplets any number of times (possibly zero):\nReturn true if it is possible to obtain the target triplet [x, y, z] as an element of triplets, or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "The Earliest and Latest Rounds Where Players Compete",
    "problem_id": "2028",
    "frontend_id": "1900",
    "difficulty": "Hard",
    "problem_slug": "the-earliest-and-latest-rounds-where-players-compete",
    "topics": [
      "Dynamic Programming",
      "Memoization"
    ],
    "description": "There is a tournament where n players are participating. The players are standing in a single row and are numbered from 1 to n based on their initial standing position (player 1 is the first player in the row, player 2 is the second player in the row, etc.).\nThe tournament consists of multiple rounds (starting from round number 1). In each round, the ith player from the front of the row competes against the ith player from the end of the row, and the winner advances to the next round. When the number of players is odd for the current round, the player in the middle automatically advances to the next round.\nAfter each round is over, the winners are lined back up in the row based on the original ordering assigned to them initially (ascending order).\nThe players numbered firstPlayer and secondPlayer are the best in the tournament. They can win against any other player before they compete against each other. If any two other players compete against each other, either of them might win, and thus you may choose the outcome of this round.\nGiven the integers n, firstPlayer, and secondPlayer, return an integer array containing two values, the earliest possible round number and the latest possible round number in which these two players will compete against each other, respectively.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find a Peak Element II",
    "problem_id": "2047",
    "frontend_id": "1901",
    "difficulty": "Medium",
    "problem_slug": "find-a-peak-element-ii",
    "topics": [
      "Array",
      "Binary Search",
      "Matrix"
    ],
    "description": "A peak element in a 2D grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom.\nGiven a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j].\nYou may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell.\nYou must write an algorithm that runs in O(m log(n)) or O(n log(m)) time.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Largest Odd Number in String",
    "problem_id": "2032",
    "frontend_id": "1903",
    "difficulty": "Easy",
    "problem_slug": "largest-odd-number-in-string",
    "topics": [
      "Math",
      "String",
      "Greedy"
    ],
    "description": "You are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string \"\" if no odd integer exists.\nA substring is a contiguous sequence of characters within a string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "The Number of Full Rounds You Have Played",
    "problem_id": "2033",
    "frontend_id": "1904",
    "difficulty": "Medium",
    "problem_slug": "the-number-of-full-rounds-you-have-played",
    "topics": [
      "Math",
      "String"
    ],
    "description": "You are participating in an online chess tournament. There is a chess round that starts every 15 minutes. The first round of the day starts at 00:00, and after every 15 minutes, a new round starts.\nYou are given two strings loginTime and logoutTime where:\nIf logoutTime is earlier than loginTime, this means you have played from loginTime to midnight and from midnight to logoutTime.\nReturn the number of full chess rounds you have played in the tournament.\nNote: All the given times follow the 24-hour clock. That means the first round of the day starts at 00:00 and the last round of the day starts at 23:45.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Sub Islands",
    "problem_id": "2035",
    "frontend_id": "1905",
    "difficulty": "Medium",
    "problem_slug": "count-sub-islands",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix"
    ],
    "description": "You are given two m x n binary matrices grid1 and grid2 containing only 0's (representing water) and 1's (representing land). An island is a group of 1's connected 4-directionally (horizontal or vertical). Any cells outside of the grid are considered water cells.\nAn island in grid2 is considered a sub-island if there is an island in grid1 that contains all the cells that make up this island in grid2.\nReturn the number of islands in grid2 that are considered sub-islands.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Absolute Difference Queries",
    "problem_id": "2034",
    "frontend_id": "1906",
    "difficulty": "Medium",
    "problem_slug": "minimum-absolute-difference-queries",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "The minimum absolute difference of an array a is defined as the minimum value of |a[i] - a[j]|, where 0 <= i < j < a.length and a[i] != a[j]. If all elements of a are the same, the minimum absolute difference is -1.\nYou are given an integer array nums and the array queries where queries[i] = [li, ri]. For each query i, compute the minimum absolute difference of the subarray nums[li...ri] containing the elements of nums between the 0-based indices li and ri (inclusive).\nReturn an array ans where ans[i] is the answer to the ith query.\nA subarray is a contiguous sequence of elements in an array.\nThe value of |x| is defined as:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Salary Categories",
    "problem_id": "2057",
    "frontend_id": "1907",
    "difficulty": "Medium",
    "problem_slug": "count-salary-categories",
    "topics": [
      "Database"
    ],
    "description": "Table: Accounts\nWrite a solution to calculate the number of bank accounts for each salary category. The salary categories are:\nThe result table must contain all three categories. If there are no accounts in a category, return 0.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Remove One Element to Make the Array Strictly Increasing",
    "problem_id": "2020",
    "frontend_id": "1909",
    "difficulty": "Easy",
    "problem_slug": "remove-one-element-to-make-the-array-strictly-increasing",
    "topics": [
      "Array"
    ],
    "description": "Given a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise. If the array is already strictly increasing, return true.\nThe array nums is strictly increasing if nums[i - 1] < nums[i] for each index (1 <= i < nums.length).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Remove All Occurrences of a Substring",
    "problem_id": "2021",
    "frontend_id": "1910",
    "difficulty": "Medium",
    "problem_slug": "remove-all-occurrences-of-a-substring",
    "topics": [
      "String",
      "Stack",
      "Simulation"
    ],
    "description": "Given two strings s and part, perform the following operation on s until all occurrences of the substring part are removed:\nReturn s after removing all occurrences of part.\nA substring is a contiguous sequence of characters in a string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Alternating Subsequence Sum",
    "problem_id": "2022",
    "frontend_id": "1911",
    "difficulty": "Medium",
    "problem_slug": "maximum-alternating-subsequence-sum",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "The alternating sum of a 0-indexed array is defined as the sum of the elements at even indices minus the sum of the elements at odd indices.\nGiven an array nums, return the maximum alternating sum of any subsequence of nums (after reindexing the elements of the subsequence).\nA subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Design Movie Rental System",
    "problem_id": "2023",
    "frontend_id": "1912",
    "difficulty": "Hard",
    "problem_slug": "design-movie-rental-system",
    "topics": [
      "Array",
      "Hash Table",
      "Design",
      "Heap (Priority Queue)",
      "Ordered Set"
    ],
    "description": "You have a movie renting company consisting of n shops. You want to implement a renting system that supports searching for, booking, and returning movies. The system should also support generating a report of the currently rented movies.\nEach movie is given as a 2D integer array entries where entries[i] = [shopi, moviei, pricei] indicates that there is a copy of movie moviei at shop shopi with a rental price of pricei. Each shop carries at most one copy of a movie moviei.\nThe system should support the following functions:\nImplement the MovieRentingSystem class:\nNote: The test cases will be generated such that rent will only be called if the shop has an unrented copy of the movie, and drop will only be called if the shop had previously rented out the movie.\nExample 1:\nConstraints:"
  },
  {
    "title": "Maximum Product Difference Between Two Pairs",
    "problem_id": "2042",
    "frontend_id": "1913",
    "difficulty": "Easy",
    "problem_slug": "maximum-product-difference-between-two-pairs",
    "topics": [
      "Array",
      "Sorting"
    ],
    "description": "The product difference between two pairs (a, b) and (c, d) is defined as (a * b) - (c * d).\nGiven an integer array nums, choose four distinct indices w, x, y, and z such that the product difference between pairs (nums[w], nums[x]) and (nums[y], nums[z]) is maximized.\nReturn the maximum such product difference.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Cyclically Rotating a Grid",
    "problem_id": "2043",
    "frontend_id": "1914",
    "difficulty": "Medium",
    "problem_slug": "cyclically-rotating-a-grid",
    "topics": [
      "Array",
      "Matrix",
      "Simulation"
    ],
    "description": "You are given an m x n integer matrix grid​​​, where m and n are both even integers, and an integer k.\nThe matrix is composed of several layers, which is shown in the below image, where each color is its own layer:\nA cyclic rotation of the matrix is done by cyclically rotating each layer in the matrix. To cyclically rotate a layer once, each element in the layer will take the place of the adjacent element in the counter-clockwise direction. An example rotation is shown below:\nReturn the matrix after applying k cyclic rotations to it.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Wonderful Substrings",
    "problem_id": "2044",
    "frontend_id": "1915",
    "difficulty": "Medium",
    "problem_slug": "number-of-wonderful-substrings",
    "topics": [
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Prefix Sum"
    ],
    "description": "A wonderful string is a string where at most one letter appears an odd number of times.\nGiven a string word that consists of the first ten lowercase English letters ('a' through 'j'), return the number of wonderful non-empty substrings in word. If the same substring appears multiple times in word, then count each occurrence separately.\nA substring is a contiguous sequence of characters in a string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Ways to Build Rooms in an Ant Colony",
    "problem_id": "1313",
    "frontend_id": "1916",
    "difficulty": "Hard",
    "problem_slug": "count-ways-to-build-rooms-in-an-ant-colony",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Tree",
      "Graph",
      "Topological Sort",
      "Combinatorics"
    ],
    "description": "You are an ant tasked with adding n new rooms numbered 0 to n-1 to your colony. You are given the expansion plan as a 0-indexed integer array of length n, prevRoom, where prevRoom[i] indicates that you must build room prevRoom[i] before building room i, and these two rooms must be connected directly. Room 0 is already built, so prevRoom[0] = -1. The expansion plan is given such that once all the rooms are built, every room will be reachable from room 0.\nYou can only build one room at a time, and you can travel freely between rooms you have already built only if they are connected. You can choose to build any room as long as its previous room is already built.\nReturn the number of different orders you can build all the rooms in. Since the answer may be large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Build Array from Permutation",
    "problem_id": "2048",
    "frontend_id": "1920",
    "difficulty": "Easy",
    "problem_slug": "build-array-from-permutation",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.\nA zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).\nExample 1:\nExample 2:\nConstraints:\nFollow-up: Can you solve it without using an extra space (i.e., O(1) memory)?"
  },
  {
    "title": "Eliminate Maximum Number of Monsters",
    "problem_id": "2049",
    "frontend_id": "1921",
    "difficulty": "Medium",
    "problem_slug": "eliminate-maximum-number-of-monsters",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are playing a video game where you are defending your city from a group of n monsters. You are given a 0-indexed integer array dist of size n, where dist[i] is the initial distance in kilometers of the ith monster from the city.\nThe monsters walk toward the city at a constant speed. The speed of each monster is given to you in an integer array speed of size n, where speed[i] is the speed of the ith monster in kilometers per minute.\nYou have a weapon that, once fully charged, can eliminate a single monster. However, the weapon takes one minute to charge. The weapon is fully charged at the very start.\nYou lose when any monster reaches your city. If a monster reaches the city at the exact moment the weapon is fully charged, it counts as a loss, and the game ends before you can use your weapon.\nReturn the maximum number of monsters that you can eliminate before you lose, or n if you can eliminate all the monsters before they reach the city.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Good Numbers",
    "problem_id": "2050",
    "frontend_id": "1922",
    "difficulty": "Medium",
    "problem_slug": "count-good-numbers",
    "topics": [
      "Math",
      "Recursion"
    ],
    "description": "A digit string is good if the digits (0-indexed) at even indices are even and the digits at odd indices are prime (2, 3, 5, or 7).\nGiven an integer n, return the total number of good digit strings of length n. Since the answer may be large, return it modulo 109 + 7.\nA digit string is a string consisting of digits 0 through 9 that may contain leading zeros.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest Common Subpath",
    "problem_id": "2051",
    "frontend_id": "1923",
    "difficulty": "Hard",
    "problem_slug": "longest-common-subpath",
    "topics": [
      "Array",
      "Binary Search",
      "Rolling Hash",
      "Suffix Array",
      "Hash Function"
    ],
    "description": "There is a country of n cities numbered from 0 to n - 1. In this country, there is a road connecting every pair of cities.\nThere are m friends numbered from 0 to m - 1 who are traveling through the country. Each one of them will take a path consisting of some cities. Each path is represented by an integer array that contains the visited cities in order. The path may contain a city more than once, but the same city will not be listed consecutively.\nGiven an integer n and a 2D integer array paths where paths[i] is an integer array representing the path of the ith friend, return the length of the longest common subpath that is shared by every friend's path, or 0 if there is no common subpath at all.\nA subpath of a path is a contiguous sequence of cities within that path.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Square Sum Triples",
    "problem_id": "2037",
    "frontend_id": "1925",
    "difficulty": "Easy",
    "problem_slug": "count-square-sum-triples",
    "topics": [
      "Math",
      "Enumeration"
    ],
    "description": "A square triple (a,b,c) is a triple where a, b, and c are integers and a2 + b2 = c2.\nGiven an integer n, return the number of square triples such that 1 <= a, b, c <= n.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Nearest Exit from Entrance in Maze",
    "problem_id": "2038",
    "frontend_id": "1926",
    "difficulty": "Medium",
    "problem_slug": "nearest-exit-from-entrance-in-maze",
    "topics": [
      "Array",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "You are given an m x n matrix maze (0-indexed) with empty cells (represented as '.') and walls (represented as '+'). You are also given the entrance of the maze, where entrance = [entrancerow, entrancecol] denotes the row and column of the cell you are initially standing at.\nIn one step, you can move one cell up, down, left, or right. You cannot step into a cell with a wall, and you cannot step outside the maze. Your goal is to find the nearest exit from the entrance. An exit is defined as an empty cell that is at the border of the maze. The entrance does not count as an exit.\nReturn the number of steps in the shortest path from the entrance to the nearest exit, or -1 if no such path exists.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sum Game",
    "problem_id": "2039",
    "frontend_id": "1927",
    "difficulty": "Medium",
    "problem_slug": "sum-game",
    "topics": [
      "Math",
      "String",
      "Greedy",
      "Game Theory"
    ],
    "description": "Alice and Bob take turns playing a game, with Alice starting first.\nYou are given a string num of even length consisting of digits and '?' characters. On each turn, a player will do the following if there is still at least one '?' in num:\nThe game ends when there are no more '?' characters in num.\nFor Bob to win, the sum of the digits in the first half of num must be equal to the sum of the digits in the second half. For Alice to win, the sums must not be equal.\nAssuming Alice and Bob play optimally, return true if Alice will win and false if Bob will win.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Cost to Reach Destination in Time",
    "problem_id": "2040",
    "frontend_id": "1928",
    "difficulty": "Hard",
    "problem_slug": "minimum-cost-to-reach-destination-in-time",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Graph"
    ],
    "description": "There is a country of n cities numbered from 0 to n - 1 where all the cities are connected by bi-directional roads. The roads are represented as a 2D integer array edges where edges[i] = [xi, yi, timei] denotes a road between cities xi and yi that takes timei minutes to travel. There may be multiple roads of differing travel times connecting the same two cities, but no road connects a city to itself.\nEach time you pass through a city, you must pay a passing fee. This is represented as a 0-indexed integer array passingFees of length n where passingFees[j] is the amount of dollars you must pay when you pass through city j.\nIn the beginning, you are at city 0 and want to reach city n - 1 in maxTime minutes or less. The cost of your journey is the summation of passing fees for each city that you passed through at some moment of your journey (including the source and destination cities).\nGiven maxTime, edges, and passingFees, return the minimum cost to complete your journey, or -1 if you cannot complete it within maxTime minutes.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Concatenation of Array",
    "problem_id": "2058",
    "frontend_id": "1929",
    "difficulty": "Easy",
    "problem_slug": "concatenation-of-array",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "Given an integer array nums of length n, you want to create an array ans of length 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n (0-indexed).\nSpecifically, ans is the concatenation of two nums arrays.\nReturn the array ans.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Unique Length-3 Palindromic Subsequences",
    "problem_id": "2059",
    "frontend_id": "1930",
    "difficulty": "Medium",
    "problem_slug": "unique-length-3-palindromic-subsequences",
    "topics": [
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Prefix Sum"
    ],
    "description": "Given a string s, return the number of unique palindromes of length three that are a subsequence of s.\nNote that even if there are multiple ways to obtain the same subsequence, it is still only counted once.\nA palindrome is a string that reads the same forwards and backwards.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Painting a Grid With Three Different Colors",
    "problem_id": "2061",
    "frontend_id": "1931",
    "difficulty": "Hard",
    "problem_slug": "painting-a-grid-with-three-different-colors",
    "topics": [
      "Dynamic Programming"
    ],
    "description": "You are given two integers m and n. Consider an m x n grid where each cell is initially white. You can paint each cell red, green, or blue. All cells must be painted.\nReturn the number of ways to color the grid with no two adjacent cells having the same color. Since the answer can be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Merge BSTs to Create Single BST",
    "problem_id": "2060",
    "frontend_id": "1932",
    "difficulty": "Hard",
    "problem_slug": "merge-bsts-to-create-single-bst",
    "topics": [
      "Hash Table",
      "Binary Search",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "You are given n BST (binary search tree) root nodes for n separate BSTs stored in an array trees (0-indexed). Each BST in trees has at most 3 nodes, and no two roots have the same value. In one operation, you can:\nReturn the root of the resulting BST if it is possible to form a valid BST after performing n - 1 operations, or null if it is impossible to create a valid BST.\nA BST (binary search tree) is a binary tree where each node satisfies the following property:\nA leaf is a node that has no children.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Confirmation Rate",
    "problem_id": "2087",
    "frontend_id": "1934",
    "difficulty": "Medium",
    "problem_slug": "confirmation-rate",
    "topics": [
      "Database"
    ],
    "description": "Table: Signups\nTable: Confirmations\nThe confirmation rate of a user is the number of 'confirmed' messages divided by the total number of requested confirmation messages. The confirmation rate of a user that did not request any confirmation messages is 0. Round the confirmation rate to two decimal places.\nWrite a solution to find the confirmation rate of each user.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Maximum Number of Words You Can Type",
    "problem_id": "1264",
    "frontend_id": "1935",
    "difficulty": "Easy",
    "problem_slug": "maximum-number-of-words-you-can-type",
    "topics": [
      "Hash Table",
      "String"
    ],
    "description": "There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.\nGiven a string text of words separated by a single space (no leading or trailing spaces) and a string brokenLetters of all distinct letter keys that are broken, return the number of words in text you can fully type using this keyboard.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Add Minimum Number of Rungs",
    "problem_id": "2066",
    "frontend_id": "1936",
    "difficulty": "Medium",
    "problem_slug": "add-minimum-number-of-rungs",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "You are given a strictly increasing integer array rungs that represents the height of rungs on a ladder. You are currently on the floor at height 0, and you want to reach the last rung.\nYou are also given an integer dist. You can only climb to the next highest rung if the distance between where you are currently at (the floor or on a rung) and the next rung is at most dist. You are able to insert rungs at any positive integer height if a rung is not already there.\nReturn the minimum number of rungs that must be added to the ladder in order for you to climb to the last rung.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Number of Points with Cost",
    "problem_id": "2067",
    "frontend_id": "1937",
    "difficulty": "Medium",
    "problem_slug": "maximum-number-of-points-with-cost",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "You are given an m x n integer matrix points (0-indexed). Starting with 0 points, you want to maximize the number of points you can get from the matrix.\nTo gain points, you must pick one cell in each row. Picking the cell at coordinates (r, c) will add points[r][c] to your score.\nHowever, you will lose points if you pick a cell too far from the cell that you picked in the previous row. For every two adjacent rows r and r + 1 (where 0 <= r < m - 1), picking cells at coordinates (r, c1) and (r + 1, c2) will subtract abs(c1 - c2) from your score.\nReturn the maximum number of points you can achieve.\nabs(x) is defined as:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Genetic Difference Query",
    "problem_id": "2068",
    "frontend_id": "1938",
    "difficulty": "Hard",
    "problem_slug": "maximum-genetic-difference-query",
    "topics": [
      "Array",
      "Hash Table",
      "Bit Manipulation",
      "Depth-First Search",
      "Trie"
    ],
    "description": "There is a rooted tree consisting of n nodes numbered 0 to n - 1. Each node's number denotes its unique genetic value (i.e. the genetic value of node x is x). The genetic difference between two genetic values is defined as the bitwise-XOR of their values. You are given the integer array parents, where parents[i] is the parent for node i. If node x is the root of the tree, then parents[x] == -1.\nYou are also given the array queries where queries[i] = [nodei, vali]. For each query i, find the maximum genetic difference between vali and pi, where pi is the genetic value of any node that is on the path between nodei and the root (including nodei and the root). More formally, you want to maximize vali XOR pi.\nReturn an array ans where ans[i] is the answer to the ith query.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check if All Characters Have Equal Number of Occurrences",
    "problem_id": "2053",
    "frontend_id": "1941",
    "difficulty": "Easy",
    "problem_slug": "check-if-all-characters-have-equal-number-of-occurrences",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "Given a string s, return true if s is a good string, or false otherwise.\nA string s is good if all the characters that appear in s have the same number of occurrences (i.e., the same frequency).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "The Number of the Smallest Unoccupied Chair",
    "problem_id": "2054",
    "frontend_id": "1942",
    "difficulty": "Medium",
    "problem_slug": "the-number-of-the-smallest-unoccupied-chair",
    "topics": [
      "Array",
      "Hash Table",
      "Heap (Priority Queue)"
    ],
    "description": "There is a party where n friends numbered from 0 to n - 1 are attending. There is an infinite number of chairs in this party that are numbered from 0 to infinity. When a friend arrives at the party, they sit on the unoccupied chair with the smallest number.\nWhen a friend leaves the party, their chair becomes unoccupied at the moment they leave. If another friend arrives at that same moment, they can sit in that chair.\nYou are given a 0-indexed 2D integer array times where times[i] = [arrivali, leavingi], indicating the arrival and leaving times of the ith friend respectively, and an integer targetFriend. All arrival times are distinct.\nReturn the chair number that the friend numbered targetFriend will sit on.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Describe the Painting",
    "problem_id": "2055",
    "frontend_id": "1943",
    "difficulty": "Medium",
    "problem_slug": "describe-the-painting",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting",
      "Prefix Sum"
    ],
    "description": "There is a long and thin painting that can be represented by a number line. The painting was painted with multiple overlapping segments where each segment was painted with a unique color. You are given a 2D integer array segments, where segments[i] = [starti, endi, colori] represents the half-closed segment [starti, endi) with colori as the color.\nThe colors in the overlapping segments of the painting were mixed when it was painted. When two or more colors mix, they form a new color that can be represented as a set of mixed colors.\nFor the sake of simplicity, you should only output the sum of the elements in the set rather than the full set.\nYou want to describe the painting with the minimum number of non-overlapping half-closed segments of these mixed colors. These segments can be represented by the 2D array painting where painting[j] = [leftj, rightj, mixj] describes a half-closed segment [leftj, rightj) with the mixed color sum of mixj.\nReturn the 2D array painting describing the finished painting (excluding any parts that are not painted). You may return the segments in any order.\nA half-closed segment [a, b) is the section of the number line between points a and b including point a and not including point b.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Visible People in a Queue",
    "problem_id": "1305",
    "frontend_id": "1944",
    "difficulty": "Hard",
    "problem_slug": "number-of-visible-people-in-a-queue",
    "topics": [
      "Array",
      "Stack",
      "Monotonic Stack"
    ],
    "description": "There are n people standing in a queue, and they numbered from 0 to n - 1 in left to right order. You are given an array heights of distinct integers where heights[i] represents the height of the ith person.\nA person can see another person to their right in the queue if everybody in between is shorter than both of them. More formally, the ith person can see the jth person if i < j and min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], ..., heights[j-1]).\nReturn an array answer of length n where answer[i] is the number of people the ith person can see to their right in the queue.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Digits of String After Convert",
    "problem_id": "2076",
    "frontend_id": "1945",
    "difficulty": "Easy",
    "problem_slug": "sum-of-digits-of-string-after-convert",
    "topics": [
      "String",
      "Simulation"
    ],
    "description": "You are given a string s consisting of lowercase English letters, and an integer k. Your task is to convert the string into an integer by a special process, and then transform it by summing its digits repeatedly k times. More specifically, perform the following steps:\nFor example, if s = \"zbax\" and k = 2, then the resulting integer would be 8 by the following operations:\nReturn the resulting integer after performing the operations described above.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Largest Number After Mutating Substring",
    "problem_id": "2077",
    "frontend_id": "1946",
    "difficulty": "Medium",
    "problem_slug": "largest-number-after-mutating-substring",
    "topics": [
      "Array",
      "String",
      "Greedy"
    ],
    "description": "You are given a string num, which represents a large integer. You are also given a 0-indexed integer array change of length 10 that maps each digit 0-9 to another digit. More formally, digit d maps to digit change[d].\nYou may choose to mutate a single substring of num. To mutate a substring, replace each digit num[i] with the digit it maps to in change (i.e. replace num[i] with change[num[i]]).\nReturn a string representing the largest possible integer after mutating (or choosing not to) a single substring of num.\nA substring is a contiguous sequence of characters within the string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Compatibility Score Sum",
    "problem_id": "2078",
    "frontend_id": "1947",
    "difficulty": "Medium",
    "problem_slug": "maximum-compatibility-score-sum",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "There is a survey that consists of n questions where each question's answer is either 0 (no) or 1 (yes).\nThe survey was given to m students numbered from 0 to m - 1 and m mentors numbered from 0 to m - 1. The answers of the students are represented by a 2D integer array students where students[i] is an integer array that contains the answers of the ith student (0-indexed). The answers of the mentors are represented by a 2D integer array mentors where mentors[j] is an integer array that contains the answers of the jth mentor (0-indexed).\nEach student will be assigned to one mentor, and each mentor will have one student assigned to them. The compatibility score of a student-mentor pair is the number of answers that are the same for both the student and the mentor.\nYou are tasked with finding the optimal student-mentor pairings to maximize the sum of the compatibility scores.\nGiven students and mentors, return the maximum compatibility score sum that can be achieved.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Delete Duplicate Folders in System",
    "problem_id": "2079",
    "frontend_id": "1948",
    "difficulty": "Hard",
    "problem_slug": "delete-duplicate-folders-in-system",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Trie",
      "Hash Function"
    ],
    "description": "Due to a bug, there are many duplicate folders in a file system. You are given a 2D array paths, where paths[i] is an array representing an absolute path to the ith folder in the file system.\nTwo folders (not necessarily on the same level) are identical if they contain the same non-empty set of identical subfolders and underlying subfolder structure. The folders do not need to be at the root level to be identical. If two or more folders are identical, then mark the folders as well as all their subfolders.\nOnce all the identical folders and their subfolders have been marked, the file system will delete all of them. The file system only runs the deletion once, so any folders that become identical after the initial deletion are not deleted.\nReturn the 2D array ans containing the paths of the remaining folders after deleting all the marked folders. The paths may be returned in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Three Divisors",
    "problem_id": "2083",
    "frontend_id": "1952",
    "difficulty": "Easy",
    "problem_slug": "three-divisors",
    "topics": [
      "Math",
      "Enumeration",
      "Number Theory"
    ],
    "description": "Given an integer n, return true if n has exactly three positive divisors. Otherwise, return false.\nAn integer m is a divisor of n if there exists an integer k such that n = k * m.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Number of Weeks for Which You Can Work",
    "problem_id": "2084",
    "frontend_id": "1953",
    "difficulty": "Medium",
    "problem_slug": "maximum-number-of-weeks-for-which-you-can-work",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "There are n projects numbered from 0 to n - 1. You are given an integer array milestones where each milestones[i] denotes the number of milestones the ith project has.\nYou can work on the projects following these two rules:\nOnce all the milestones of all the projects are finished, or if the only milestones that you can work on will cause you to violate the above rules, you will stop working. Note that you may not be able to finish every project's milestones due to these constraints.\nReturn the maximum number of weeks you would be able to work on the projects without violating the rules mentioned above.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Garden Perimeter to Collect Enough Apples",
    "problem_id": "1295",
    "frontend_id": "1954",
    "difficulty": "Medium",
    "problem_slug": "minimum-garden-perimeter-to-collect-enough-apples",
    "topics": [
      "Math",
      "Binary Search"
    ],
    "description": "In a garden represented as an infinite 2D grid, there is an apple tree planted at every integer coordinate. The apple tree planted at an integer coordinate (i, j) has |i| + |j| apples growing on it.\nYou will buy an axis-aligned square plot of land that is centered at (0, 0).\nGiven an integer neededApples, return the minimum perimeter of a plot such that at least neededApples apples are inside or on the perimeter of that plot.\nThe value of |x| is defined as:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Number of Special Subsequences",
    "problem_id": "2086",
    "frontend_id": "1955",
    "difficulty": "Hard",
    "problem_slug": "count-number-of-special-subsequences",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "A sequence is special if it consists of a positive number of 0s, followed by a positive number of 1s, then a positive number of 2s.\nGiven an array nums (consisting of only integers 0, 1, and 2), return the number of different subsequences that are special. Since the answer may be very large, return it modulo 109 + 7.\nA subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. Two subsequences are different if the set of indices chosen are different.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Delete Characters to Make Fancy String",
    "problem_id": "1302",
    "frontend_id": "1957",
    "difficulty": "Easy",
    "problem_slug": "delete-characters-to-make-fancy-string",
    "topics": [
      "String"
    ],
    "description": "A fancy string is a string where no three consecutive characters are equal.\nGiven a string s, delete the minimum possible number of characters from s to make it fancy.\nReturn the final string after the deletion. It can be shown that the answer will always be unique.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check if Move is Legal",
    "problem_id": "2080",
    "frontend_id": "1958",
    "difficulty": "Medium",
    "problem_slug": "check-if-move-is-legal",
    "topics": [
      "Array",
      "Matrix",
      "Enumeration"
    ],
    "description": "You are given a 0-indexed 8 x 8 grid board, where board[r][c] represents the cell (r, c) on a game board. On the board, free cells are represented by '.', white cells are represented by 'W', and black cells are represented by 'B'.\nEach move in this game consists of choosing a free cell and changing it to the color you are playing as (either white or black). However, a move is only legal if, after changing it, the cell becomes the endpoint of a good line (horizontal, vertical, or diagonal).\nA good line is a line of three or more cells (including the endpoints) where the endpoints of the line are one color, and the remaining cells in the middle are the opposite color (no cells in the line are free). You can find examples for good lines in the figure below:\nGiven two integers rMove and cMove and a character color representing the color you are playing as (white or black), return true if changing cell (rMove, cMove) to color color is a legal move, or false if it is not legal.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Total Space Wasted With K Resizing Operations",
    "problem_id": "2081",
    "frontend_id": "1959",
    "difficulty": "Medium",
    "problem_slug": "minimum-total-space-wasted-with-k-resizing-operations",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are currently designing a dynamic array. You are given a 0-indexed integer array nums, where nums[i] is the number of elements that will be in the array at time i. In addition, you are given an integer k, the maximum number of times you can resize the array (to any size).\nThe size of the array at time t, sizet, must be at least nums[t] because there needs to be enough space in the array to hold all the elements. The space wasted at time t is defined as sizet - nums[t], and the total space wasted is the sum of the space wasted across every time t where 0 <= t < nums.length.\nReturn the minimum total space wasted if you can resize the array at most k times.\nNote: The array can have any size at the start and does not count towards the number of resizing operations.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Product of the Length of Two Palindromic Substrings",
    "problem_id": "1336",
    "frontend_id": "1960",
    "difficulty": "Hard",
    "problem_slug": "maximum-product-of-the-length-of-two-palindromic-substrings",
    "topics": [
      "String",
      "Rolling Hash",
      "Hash Function"
    ],
    "description": "You are given a 0-indexed string s and are tasked with finding two non-intersecting palindromic substrings of odd length such that the product of their lengths is maximized.\nMore formally, you want to choose four integers i, j, k, l such that 0 <= i <= j < k <= l < s.length and both the substrings s[i...j] and s[k...l] are palindromes and have odd lengths. s[i...j] denotes a substring from index i to index j inclusive.\nReturn the maximum possible product of the lengths of the two non-intersecting palindromic substrings.\nA palindrome is a string that is the same forward and backward. A substring is a contiguous sequence of characters in a string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check If String Is a Prefix of Array",
    "problem_id": "2093",
    "frontend_id": "1961",
    "difficulty": "Easy",
    "problem_slug": "check-if-string-is-a-prefix-of-array",
    "topics": [
      "Array",
      "Two Pointers",
      "String"
    ],
    "description": "Given a string s and an array of strings words, determine whether s is a prefix string of words.\nA string s is a prefix string of words if s can be made by concatenating the first k strings in words for some positive k no larger than words.length.\nReturn true if s is a prefix string of words, or false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Remove Stones to Minimize the Total",
    "problem_id": "2094",
    "frontend_id": "1962",
    "difficulty": "Medium",
    "problem_slug": "remove-stones-to-minimize-the-total",
    "topics": [
      "Array",
      "Greedy",
      "Heap (Priority Queue)"
    ],
    "description": "You are given a 0-indexed integer array piles, where piles[i] represents the number of stones in the ith pile, and an integer k. You should apply the following operation exactly k times:\nNotice that you can apply the operation on the same pile more than once.\nReturn the minimum possible total number of stones remaining after applying the k operations.\nfloor(x) is the largest integer that is smaller than or equal to x (i.e., rounds x down).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of Swaps to Make the String Balanced",
    "problem_id": "2095",
    "frontend_id": "1963",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-swaps-to-make-the-string-balanced",
    "topics": [
      "Two Pointers",
      "String",
      "Stack",
      "Greedy"
    ],
    "description": "You are given a 0-indexed string s of even length n. The string consists of exactly n / 2 opening brackets '[' and n / 2 closing brackets ']'.\nA string is called balanced if and only if:\nYou may swap the brackets at any two indices any number of times.\nReturn the minimum number of swaps to make s balanced.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Longest Valid Obstacle Course at Each Position",
    "problem_id": "2096",
    "frontend_id": "1964",
    "difficulty": "Hard",
    "problem_slug": "find-the-longest-valid-obstacle-course-at-each-position",
    "topics": [
      "Array",
      "Binary Search",
      "Binary Indexed Tree"
    ],
    "description": "You want to build some obstacle courses. You are given a 0-indexed integer array obstacles of length n, where obstacles[i] describes the height of the ith obstacle.\nFor every index i between 0 and n - 1 (inclusive), find the length of the longest obstacle course in obstacles such that:\nReturn an array ans of length n, where ans[i] is the length of the longest obstacle course for index i as described above.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Employees With Missing Information",
    "problem_id": "2110",
    "frontend_id": "1965",
    "difficulty": "Easy",
    "problem_slug": "employees-with-missing-information",
    "topics": [
      "Database"
    ],
    "description": "Table: Employees\nTable: Salaries\nWrite a solution to report the IDs of all the employees with missing information. The information of an employee is missing if:\nReturn the result table ordered by employee_id in ascending order.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Number of Strings That Appear as Substrings in Word",
    "problem_id": "2099",
    "frontend_id": "1967",
    "difficulty": "Easy",
    "problem_slug": "number-of-strings-that-appear-as-substrings-in-word",
    "topics": [
      "Array",
      "String"
    ],
    "description": "Given an array of strings patterns and a string word, return the number of strings in patterns that exist as a substring in word.\nA substring is a contiguous sequence of characters within a string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Array With Elements Not Equal to Average of Neighbors",
    "problem_id": "2085",
    "frontend_id": "1968",
    "difficulty": "Medium",
    "problem_slug": "array-with-elements-not-equal-to-average-of-neighbors",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given a 0-indexed array nums of distinct integers. You want to rearrange the elements in the array such that every element in the rearranged array is not equal to the average of its neighbors.\nMore formally, the rearranged array should have the property such that for every i in the range 1 <= i < nums.length - 1, (nums[i-1] + nums[i+1]) / 2 is not equal to nums[i].\nReturn any rearrangement of nums that meets the requirements.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Non-Zero Product of the Array Elements",
    "problem_id": "2100",
    "frontend_id": "1969",
    "difficulty": "Medium",
    "problem_slug": "minimum-non-zero-product-of-the-array-elements",
    "topics": [
      "Math",
      "Greedy",
      "Recursion"
    ],
    "description": "You are given a positive integer p. Consider an array nums (1-indexed) that consists of the integers in the inclusive range [1, 2p - 1] in their binary representations. You are allowed to do the following operation any number of times:\nFor example, if x = 1101 and y = 0011, after swapping the 2nd bit from the right, we have x = 1111 and y = 0001.\nFind the minimum non-zero product of nums after performing the above operation any number of times. Return this product modulo 109 + 7.\nNote: The answer should be the minimum product before the modulo operation is done.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Last Day Where You Can Still Cross",
    "problem_id": "2101",
    "frontend_id": "1970",
    "difficulty": "Hard",
    "problem_slug": "last-day-where-you-can-still-cross",
    "topics": [
      "Array",
      "Binary Search",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix"
    ],
    "description": "There is a 1-based binary matrix where 0 represents land and 1 represents water. You are given integers row and col representing the number of rows and columns in the matrix, respectively.\nInitially on day 0, the entire matrix is land. However, each day a new cell becomes flooded with water. You are given a 1-based 2D array cells, where cells[i] = [ri, ci] represents that on the ith day, the cell on the rith row and cith column (1-based coordinates) will be covered with water (i.e., changed to 1).\nYou want to find the last day that it is possible to walk from the top to the bottom by only walking on land cells. You can start from any cell in the top row and end at any cell in the bottom row. You can only travel in the four cardinal directions (left, right, up, and down).\nReturn the last day where it is possible to walk from the top to the bottom by only walking on land cells.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find if Path Exists in Graph",
    "problem_id": "2121",
    "frontend_id": "1971",
    "difficulty": "Easy",
    "problem_slug": "find-if-path-exists-in-graph",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "description": "There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\nYou want to determine if there is a valid path that exists from vertex source to vertex destination.\nGiven edges and the integers n, source, and destination, return true if there is a valid path from source to destination, or false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Time to Type Word Using Special Typewriter",
    "problem_id": "2088",
    "frontend_id": "1974",
    "difficulty": "Easy",
    "problem_slug": "minimum-time-to-type-word-using-special-typewriter",
    "topics": [
      "String",
      "Greedy"
    ],
    "description": "There is a special typewriter with lowercase English letters 'a' to 'z' arranged in a circle with a pointer. A character can only be typed if the pointer is pointing to that character. The pointer is initially pointing to the character 'a'.\nEach second, you may perform one of the following operations:\nGiven a string word, return the minimum number of seconds to type out the characters in word.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Matrix Sum",
    "problem_id": "2089",
    "frontend_id": "1975",
    "difficulty": "Medium",
    "problem_slug": "maximum-matrix-sum",
    "topics": [
      "Array",
      "Greedy",
      "Matrix"
    ],
    "description": "You are given an n x n integer matrix. You can do the following operation any number of times:\nTwo elements are considered adjacent if and only if they share a border.\nYour goal is to maximize the summation of the matrix's elements. Return the maximum sum of the matrix's elements using the operation mentioned above.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Ways to Arrive at Destination",
    "problem_id": "2090",
    "frontend_id": "1976",
    "difficulty": "Medium",
    "problem_slug": "number-of-ways-to-arrive-at-destination",
    "topics": [
      "Dynamic Programming",
      "Graph",
      "Topological Sort",
      "Shortest Path"
    ],
    "description": "You are in a city that consists of n intersections numbered from 0 to n - 1 with bi-directional roads between some intersections. The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections.\nYou are given an integer n and a 2D integer array roads where roads[i] = [ui, vi, timei] means that there is a road between intersections ui and vi that takes timei minutes to travel. You want to know in how many ways you can travel from intersection 0 to intersection n - 1 in the shortest amount of time.\nReturn the number of ways you can arrive at your destination in the shortest amount of time. Since the answer may be large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Ways to Separate Numbers",
    "problem_id": "2091",
    "frontend_id": "1977",
    "difficulty": "Hard",
    "problem_slug": "number-of-ways-to-separate-numbers",
    "topics": [
      "String",
      "Dynamic Programming",
      "Suffix Array"
    ],
    "description": "You wrote down many positive integers in a string called num. However, you realized that you forgot to add commas to seperate the different numbers. You remember that the list of integers was non-decreasing and that no integer had leading zeros.\nReturn the number of possible lists of integers that you could have written down to get the string num. Since the answer may be large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Employees Whose Manager Left the Company",
    "problem_id": "2127",
    "frontend_id": "1978",
    "difficulty": "Easy",
    "problem_slug": "employees-whose-manager-left-the-company",
    "topics": [
      "Database"
    ],
    "description": "Table: Employees\nFind the IDs of the employees whose salary is strictly less than $30000 and whose manager left the company. When a manager leaves the company, their information is deleted from the Employees table, but the reports still have their manager_id set to the manager that left.\nReturn the result table ordered by employee_id.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Find Greatest Common Divisor of Array",
    "problem_id": "2106",
    "frontend_id": "1979",
    "difficulty": "Easy",
    "problem_slug": "find-greatest-common-divisor-of-array",
    "topics": [
      "Array",
      "Math",
      "Number Theory"
    ],
    "description": "Given an integer array nums, return the greatest common divisor of the smallest number and largest number in nums.\nThe greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Unique Binary String",
    "problem_id": "2107",
    "frontend_id": "1980",
    "difficulty": "Medium",
    "problem_slug": "find-unique-binary-string",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Backtracking"
    ],
    "description": "Given an array of strings nums containing n unique binary strings each of length n, return a binary string of length n that does not appear in nums. If there are multiple answers, you may return any of them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimize the Difference Between Target and Chosen Elements",
    "problem_id": "2108",
    "frontend_id": "1981",
    "difficulty": "Medium",
    "problem_slug": "minimize-the-difference-between-target-and-chosen-elements",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "You are given an m x n integer matrix mat and an integer target.\nChoose one integer from each row in the matrix such that the absolute difference between target and the sum of the chosen elements is minimized.\nReturn the minimum absolute difference.\nThe absolute difference between two numbers a and b is the absolute value of a - b.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Array Given Subset Sums",
    "problem_id": "2109",
    "frontend_id": "1982",
    "difficulty": "Hard",
    "problem_slug": "find-array-given-subset-sums",
    "topics": [
      "Array",
      "Divide and Conquer"
    ],
    "description": "You are given an integer n representing the length of an unknown array that you are trying to recover. You are also given an array sums containing the values of all 2n subset sums of the unknown array (in no particular order).\nReturn the array ans of length n representing the unknown array. If multiple answers exist, return any of them.\nAn array sub is a subset of an array arr if sub can be obtained from arr by deleting some (possibly zero or all) elements of arr. The sum of the elements in sub is one possible subset sum of arr. The sum of an empty array is considered to be 0.\nNote: Test cases are generated such that there will always be at least one correct answer.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Difference Between Highest and Lowest of K Scores",
    "problem_id": "2112",
    "frontend_id": "1984",
    "difficulty": "Easy",
    "problem_slug": "minimum-difference-between-highest-and-lowest-of-k-scores",
    "topics": [
      "Array",
      "Sliding Window",
      "Sorting"
    ],
    "description": "You are given a 0-indexed integer array nums, where nums[i] represents the score of the ith student. You are also given an integer k.\nPick the scores of any k students from the array so that the difference between the highest and the lowest of the k scores is minimized.\nReturn the minimum possible difference.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Kth Largest Integer in the Array",
    "problem_id": "2113",
    "frontend_id": "1985",
    "difficulty": "Medium",
    "problem_slug": "find-the-kth-largest-integer-in-the-array",
    "topics": [
      "Array",
      "String",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Quickselect"
    ],
    "description": "You are given an array of strings nums and an integer k. Each string in nums represents an integer without leading zeros.\nReturn the string that represents the kth largest integer in nums.\nNote: Duplicate numbers should be counted distinctly. For example, if nums is [\"1\",\"2\",\"2\"], \"2\" is the first largest integer, \"2\" is the second-largest integer, and \"1\" is the third-largest integer.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Work Sessions to Finish the Tasks",
    "problem_id": "2114",
    "frontend_id": "1986",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-work-sessions-to-finish-the-tasks",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "There are n tasks assigned to you. The task times are represented as an integer array tasks of length n, where the ith task takes tasks[i] hours to finish. A work session is when you work for at most sessionTime consecutive hours and then take a break.\nYou should finish the given tasks in a way that satisfies the following conditions:\nGiven tasks and sessionTime, return the minimum number of work sessions needed to finish all the tasks following the conditions above.\nThe tests are generated such that sessionTime is greater than or equal to the maximum element in tasks[i].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Unique Good Subsequences",
    "problem_id": "2115",
    "frontend_id": "1987",
    "difficulty": "Hard",
    "problem_slug": "number-of-unique-good-subsequences",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given a binary string binary. A subsequence of binary is considered good if it is not empty and has no leading zeros (with the exception of \"0\").\nFind the number of unique good subsequences of binary.\nReturn the number of unique good subsequences of binary. Since the answer may be very large, return it modulo 109 + 7.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Middle Index in Array",
    "problem_id": "2102",
    "frontend_id": "1991",
    "difficulty": "Easy",
    "problem_slug": "find-the-middle-index-in-array",
    "topics": [
      "Array",
      "Prefix Sum"
    ],
    "description": "Given a 0-indexed integer array nums, find the leftmost middleIndex (i.e., the smallest amongst all the possible ones).\nA middleIndex is an index where nums[0] + nums[1] + ... + nums[middleIndex-1] == nums[middleIndex+1] + nums[middleIndex+2] + ... + nums[nums.length-1].\nIf middleIndex == 0, the left side sum is considered to be 0. Similarly, if middleIndex == nums.length - 1, the right side sum is considered to be 0.\nReturn the leftmost middleIndex that satisfies the condition, or -1 if there is no such index.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nNote: This question is the same as 724: https://leetcode.com/problems/find-pivot-index/"
  },
  {
    "title": "Find All Groups of Farmland",
    "problem_id": "2103",
    "frontend_id": "1992",
    "difficulty": "Medium",
    "problem_slug": "find-all-groups-of-farmland",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "You are given a 0-indexed m x n binary matrix land where a 0 represents a hectare of forested land and a 1 represents a hectare of farmland.\nTo keep the land organized, there are designated rectangular areas of hectares that consist entirely of farmland. These rectangular areas are called groups. No two groups are adjacent, meaning farmland in one group is not four-directionally adjacent to another farmland in a different group.\nland can be represented by a coordinate system where the top left corner of land is (0, 0) and the bottom right corner of land is (m-1, n-1). Find the coordinates of the top left and bottom right corner of each group of farmland. A group of farmland with a top left corner at (r1, c1) and a bottom right corner at (r2, c2) is represented by the 4-length array [r1, c1, r2, c2].\nReturn a 2D array containing the 4-length arrays described above for each group of farmland in land. If there are no groups of farmland, return an empty array. You may return the answer in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Operations on Tree",
    "problem_id": "2104",
    "frontend_id": "1993",
    "difficulty": "Medium",
    "problem_slug": "operations-on-tree",
    "topics": [
      "Array",
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Design"
    ],
    "description": "You are given a tree with n nodes numbered from 0 to n - 1 in the form of a parent array parent where parent[i] is the parent of the ith node. The root of the tree is node 0, so parent[0] = -1 since it has no parent. You want to design a data structure that allows users to lock, unlock, and upgrade nodes in the tree.\nThe data structure should support the following functions:\nImplement the LockingTree class:\nExample 1:\nConstraints:"
  },
  {
    "title": "The Number of Good Subsets",
    "problem_id": "2105",
    "frontend_id": "1994",
    "difficulty": "Hard",
    "problem_slug": "the-number-of-good-subsets",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Dynamic Programming",
      "Bit Manipulation",
      "Counting",
      "Number Theory",
      "Bitmask"
    ],
    "description": "You are given an integer array nums. We call a subset of nums good if its product can be represented as a product of one or more distinct prime numbers.\nReturn the number of different good subsets in nums modulo 109 + 7.\nA subset of nums is any array that can be obtained by deleting some (possibly none or all) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Special Quadruplets",
    "problem_id": "2122",
    "frontend_id": "1995",
    "difficulty": "Easy",
    "problem_slug": "count-special-quadruplets",
    "topics": [
      "Array",
      "Hash Table",
      "Enumeration"
    ],
    "description": "Given a 0-indexed integer array nums, return the number of distinct quadruplets (a, b, c, d) such that:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "The Number of Weak Characters in the Game",
    "problem_id": "2123",
    "frontend_id": "1996",
    "difficulty": "Medium",
    "problem_slug": "the-number-of-weak-characters-in-the-game",
    "topics": [
      "Array",
      "Stack",
      "Greedy",
      "Sorting",
      "Monotonic Stack"
    ],
    "description": "You are playing a game that contains multiple characters, and each of the characters has two main properties: attack and defense. You are given a 2D integer array properties where properties[i] = [attacki, defensei] represents the properties of the ith character in the game.\nA character is said to be weak if any other character has both attack and defense levels strictly greater than this character's attack and defense levels. More formally, a character i is said to be weak if there exists another character j where attackj > attacki and defensej > defensei.\nReturn the number of weak characters.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "First Day Where You Have Been in All the Rooms",
    "problem_id": "2124",
    "frontend_id": "1997",
    "difficulty": "Medium",
    "problem_slug": "first-day-where-you-have-been-in-all-the-rooms",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "There are n rooms you need to visit, labeled from 0 to n - 1. Each day is labeled, starting from 0. You will go in and visit one room a day.\nInitially on day 0, you visit room 0. The order you visit the rooms for the coming days is determined by the following rules and a given 0-indexed array nextVisit of length n:\nReturn the label of the first day where you have been in all the rooms. It can be shown that such a day exists. Since the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "GCD Sort of an Array",
    "problem_id": "2125",
    "frontend_id": "1998",
    "difficulty": "Hard",
    "problem_slug": "gcd-sort-of-an-array",
    "topics": [
      "Array",
      "Math",
      "Union Find",
      "Sorting",
      "Number Theory"
    ],
    "description": "You are given an integer array nums, and you can perform the following operation any number of times on nums:\nReturn true if it is possible to sort nums in non-decreasing order using the above swap method, or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Reverse Prefix of Word",
    "problem_id": "2128",
    "frontend_id": "2000",
    "difficulty": "Easy",
    "problem_slug": "reverse-prefix-of-word",
    "topics": [
      "Two Pointers",
      "String",
      "Stack"
    ],
    "description": "Given a 0-indexed string word and a character ch, reverse the segment of word that starts at index 0 and ends at the index of the first occurrence of ch (inclusive). If the character ch does not exist in word, do nothing.\nReturn the resulting string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Pairs of Interchangeable Rectangles",
    "problem_id": "2129",
    "frontend_id": "2001",
    "difficulty": "Medium",
    "problem_slug": "number-of-pairs-of-interchangeable-rectangles",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Counting",
      "Number Theory"
    ],
    "description": "You are given n rectangles represented by a 0-indexed 2D integer array rectangles, where rectangles[i] = [widthi, heighti] denotes the width and height of the ith rectangle.\nTwo rectangles i and j (i < j) are considered interchangeable if they have the same width-to-height ratio. More formally, two rectangles are interchangeable if widthi/heighti == widthj/heightj (using decimal division, not integer division).\nReturn the number of pairs of interchangeable rectangles in rectangles.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Product of the Length of Two Palindromic Subsequences",
    "problem_id": "2130",
    "frontend_id": "2002",
    "difficulty": "Medium",
    "problem_slug": "maximum-product-of-the-length-of-two-palindromic-subsequences",
    "topics": [
      "String",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "Given a string s, find two disjoint palindromic subsequences of s such that the product of their lengths is maximized. The two subsequences are disjoint if they do not both pick a character at the same index.\nReturn the maximum possible product of the lengths of the two palindromic subsequences.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. A string is palindromic if it reads the same forward and backward.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Smallest Missing Genetic Value in Each Subtree",
    "problem_id": "2131",
    "frontend_id": "2003",
    "difficulty": "Hard",
    "problem_slug": "smallest-missing-genetic-value-in-each-subtree",
    "topics": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Union Find"
    ],
    "description": "There is a family tree rooted at 0 consisting of n nodes numbered 0 to n - 1. You are given a 0-indexed integer array parents, where parents[i] is the parent for node i. Since node 0 is the root, parents[0] == -1.\nThere are 105 genetic values, each represented by an integer in the inclusive range [1, 105]. You are given a 0-indexed integer array nums, where nums[i] is a distinct genetic value for node i.\nReturn an array ans of length n where ans[i] is the smallest genetic value that is missing from the subtree rooted at node i.\nThe subtree rooted at a node x contains node x and all of its descendant nodes.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Number of Pairs With Absolute Difference K",
    "problem_id": "2116",
    "frontend_id": "2006",
    "difficulty": "Easy",
    "problem_slug": "count-number-of-pairs-with-absolute-difference-k",
    "topics": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "description": "Given an integer array nums and an integer k, return the number of pairs (i, j) where i < j such that |nums[i] - nums[j]| == k.\nThe value of |x| is defined as:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Original Array From Doubled Array",
    "problem_id": "2117",
    "frontend_id": "2007",
    "difficulty": "Medium",
    "problem_slug": "find-original-array-from-doubled-array",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Sorting"
    ],
    "description": "An integer array original is transformed into a doubled array changed by appending twice the value of every element in original, and then randomly shuffling the resulting array.\nGiven an array changed, return original if changed is a doubled array. If changed is not a doubled array, return an empty array. The elements in original may be returned in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Earnings From Taxi",
    "problem_id": "2118",
    "frontend_id": "2008",
    "difficulty": "Medium",
    "problem_slug": "maximum-earnings-from-taxi",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "There are n points on a road you are driving your taxi on. The n points on the road are labeled from 1 to n in the direction you are going, and you want to drive from point 1 to point n to make money by picking up passengers. You cannot change the direction of the taxi.\nThe passengers are represented by a 0-indexed 2D integer array rides, where rides[i] = [starti, endi, tipi] denotes the ith passenger requesting a ride from point starti to point endi who is willing to give a tipi dollar tip.\nFor each passenger i you pick up, you earn endi - starti + tipi dollars. You may only drive at most one passenger at a time.\nGiven n and rides, return the maximum number of dollars you can earn by picking up the passengers optimally.\nNote: You may drop off a passenger and pick up a different passenger at the same point.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of Operations to Make Array Continuous",
    "problem_id": "2119",
    "frontend_id": "2009",
    "difficulty": "Hard",
    "problem_slug": "minimum-number-of-operations-to-make-array-continuous",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Sliding Window"
    ],
    "description": "You are given an integer array nums. In one operation, you can replace any element in nums with any integer.\nnums is considered continuous if both of the following conditions are fulfilled:\nFor example, nums = [4, 2, 5, 3] is continuous, but nums = [1, 2, 3, 5, 6] is not continuous.\nReturn the minimum number of operations to make nums continuous.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Final Value of Variable After Performing Operations",
    "problem_id": "2137",
    "frontend_id": "2011",
    "difficulty": "Easy",
    "problem_slug": "final-value-of-variable-after-performing-operations",
    "topics": [
      "Array",
      "String",
      "Simulation"
    ],
    "description": "There is a programming language with only four operations and one variable X:\nInitially, the value of X is 0.\nGiven an array of strings operations containing a list of operations, return the final value of X after performing all the operations.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sum of Beauty in the Array",
    "problem_id": "2138",
    "frontend_id": "2012",
    "difficulty": "Medium",
    "problem_slug": "sum-of-beauty-in-the-array",
    "topics": [
      "Array"
    ],
    "description": "You are given a 0-indexed integer array nums. For each index i (1 <= i <= nums.length - 2) the beauty of nums[i] equals:\nReturn the sum of beauty of all nums[i] where 1 <= i <= nums.length - 2.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Detect Squares",
    "problem_id": "2139",
    "frontend_id": "2013",
    "difficulty": "Medium",
    "problem_slug": "detect-squares",
    "topics": [
      "Array",
      "Hash Table",
      "Design",
      "Counting"
    ],
    "description": "You are given a stream of points on the X-Y plane. Design an algorithm that:\nAn axis-aligned square is a square whose edges are all the same length and are either parallel or perpendicular to the x-axis and y-axis.\nImplement the DetectSquares class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Longest Subsequence Repeated k Times",
    "problem_id": "2140",
    "frontend_id": "2014",
    "difficulty": "Hard",
    "problem_slug": "longest-subsequence-repeated-k-times",
    "topics": [
      "String",
      "Backtracking",
      "Greedy",
      "Counting",
      "Enumeration"
    ],
    "description": "You are given a string s of length n, and an integer k. You are tasked to find the longest subsequence repeated k times in string s.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\nA subsequence seq is repeated k times in the string s if seq * k is a subsequence of s, where seq * k represents a string constructed by concatenating seq k times.\nReturn the longest subsequence repeated k times in string s. If multiple such subsequences are found, return the lexicographically largest one. If there is no such subsequence, return an empty string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Difference Between Increasing Elements",
    "problem_id": "2144",
    "frontend_id": "2016",
    "difficulty": "Easy",
    "problem_slug": "maximum-difference-between-increasing-elements",
    "topics": [
      "Array"
    ],
    "description": "Given a 0-indexed integer array nums of size n, find the maximum difference between nums[i] and nums[j] (i.e., nums[j] - nums[i]), such that 0 <= i < j < n and nums[i] < nums[j].\nReturn the maximum difference. If no such i and j exists, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Grid Game",
    "problem_id": "2145",
    "frontend_id": "2017",
    "difficulty": "Medium",
    "problem_slug": "grid-game",
    "topics": [
      "Array",
      "Matrix",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed 2D array grid of size 2 x n, where grid[r][c] represents the number of points at position (r, c) on the matrix. Two robots are playing a game on this matrix.\nBoth robots initially start at (0, 0) and want to reach (1, n-1). Each robot may only move to the right ((r, c) to (r, c + 1)) or down ((r, c) to (r + 1, c)).\nAt the start of the game, the first robot moves from (0, 0) to (1, n-1), collecting all the points from the cells on its path. For all cells (r, c) traversed on the path, grid[r][c] is set to 0. Then, the second robot moves from (0, 0) to (1, n-1), collecting the points on its path. Note that their paths may intersect with one another.\nThe first robot wants to minimize the number of points collected by the second robot. In contrast, the second robot wants to maximize the number of points it collects. If both robots play optimally, return the number of points collected by the second robot.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check if Word Can Be Placed In Crossword",
    "problem_id": "2146",
    "frontend_id": "2018",
    "difficulty": "Medium",
    "problem_slug": "check-if-word-can-be-placed-in-crossword",
    "topics": [
      "Array",
      "Matrix",
      "Enumeration"
    ],
    "description": "You are given an m x n matrix board, representing the current state of a crossword puzzle. The crossword contains lowercase English letters (from solved words), ' ' to represent any empty cells, and '#' to represent any blocked cells.\nA word can be placed horizontally (left to right or right to left) or vertically (top to bottom or bottom to top) in the board if:\nGiven a string word, return true if word can be placed in board, or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "The Score of Students Solving Math Expression",
    "problem_id": "2147",
    "frontend_id": "2019",
    "difficulty": "Hard",
    "problem_slug": "the-score-of-students-solving-math-expression",
    "topics": [
      "Array",
      "Math",
      "String",
      "Dynamic Programming",
      "Stack",
      "Memoization"
    ],
    "description": "You are given a string s that contains digits 0-9, addition symbols '+', and multiplication symbols '*' only, representing a valid math expression of single digit numbers (e.g., 3+5*2). This expression was given to n elementary school students. The students were instructed to get the answer of the expression by following this order of operations:\nYou are given an integer array answers of length n, which are the submitted answers of the students in no particular order. You are asked to grade the answers, by following these rules:\nReturn the sum of the points of the students.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Convert 1D Array Into 2D Array",
    "problem_id": "2132",
    "frontend_id": "2022",
    "difficulty": "Easy",
    "problem_slug": "convert-1d-array-into-2d-array",
    "topics": [
      "Array",
      "Matrix",
      "Simulation"
    ],
    "description": "You are given a 0-indexed 1-dimensional (1D) integer array original, and two integers, m and n. You are tasked with creating a 2-dimensional (2D) array with  m rows and n columns using all the elements from original.\nThe elements from indices 0 to n - 1 (inclusive) of original should form the first row of the constructed 2D array, the elements from indices n to 2 * n - 1 (inclusive) should form the second row of the constructed 2D array, and so on.\nReturn an m x n 2D array constructed according to the above procedure, or an empty 2D array if it is impossible.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Pairs of Strings With Concatenation Equal to Target",
    "problem_id": "2133",
    "frontend_id": "2023",
    "difficulty": "Medium",
    "problem_slug": "number-of-pairs-of-strings-with-concatenation-equal-to-target",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "Given an array of digit strings nums and a digit string target, return the number of pairs of indices (i, j) (where i != j) such that the concatenation of nums[i] + nums[j] equals target.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximize the Confusion of an Exam",
    "problem_id": "2134",
    "frontend_id": "2024",
    "difficulty": "Medium",
    "problem_slug": "maximize-the-confusion-of-an-exam",
    "topics": [
      "String",
      "Binary Search",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "A teacher is writing a test with n true/false questions, with 'T' denoting true and 'F' denoting false. He wants to confuse the students by maximizing the number of consecutive questions with the same answer (multiple trues or multiple falses in a row).\nYou are given a string answerKey, where answerKey[i] is the original answer to the ith question. In addition, you are given an integer k, the maximum number of times you may perform the following operation:\nReturn the maximum number of consecutive 'T's or 'F's in the answer key after performing the operation at most k times.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Number of Ways to Partition an Array",
    "problem_id": "2135",
    "frontend_id": "2025",
    "difficulty": "Hard",
    "problem_slug": "maximum-number-of-ways-to-partition-an-array",
    "topics": [
      "Array",
      "Hash Table",
      "Counting",
      "Enumeration",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed integer array nums of length n. The number of ways to partition nums is the number of pivot indices that satisfy both conditions:\nYou are also given an integer k. You can choose to change the value of one element of nums to k, or to leave the array unchanged.\nReturn the maximum possible number of ways to partition nums to satisfy both conditions after changing at most one element.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Moves to Convert String",
    "problem_id": "2154",
    "frontend_id": "2027",
    "difficulty": "Easy",
    "problem_slug": "minimum-moves-to-convert-string",
    "topics": [
      "String",
      "Greedy"
    ],
    "description": "You are given a string s consisting of n characters which are either 'X' or 'O'.\nA move is defined as selecting three consecutive characters of s and converting them to 'O'. Note that if a move is applied to the character 'O', it will stay the same.\nReturn the minimum number of moves required so that all the characters of s are converted to 'O'.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Missing Observations",
    "problem_id": "2155",
    "frontend_id": "2028",
    "difficulty": "Medium",
    "problem_slug": "find-missing-observations",
    "topics": [
      "Array",
      "Math",
      "Simulation"
    ],
    "description": "You have observations of n + m 6-sided dice rolls with each face numbered from 1 to 6. n of the observations went missing, and you only have the observations of m rolls. Fortunately, you have also calculated the average value of the n + m rolls.\nYou are given an integer array rolls of length m where rolls[i] is the value of the ith observation. You are also given the two integers mean and n.\nReturn an array of length n containing the missing observations such that the average value of the n + m rolls is exactly mean. If there are multiple valid answers, return any of them. If no such array exists, return an empty array.\nThe average value of a set of k numbers is the sum of the numbers divided by k.\nNote that mean is an integer, so the sum of the n + m rolls should be divisible by n + m.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Stone Game IX",
    "problem_id": "2156",
    "frontend_id": "2029",
    "difficulty": "Medium",
    "problem_slug": "stone-game-ix",
    "topics": [
      "Array",
      "Math",
      "Greedy",
      "Counting",
      "Game Theory"
    ],
    "description": "Alice and Bob continue their games with stones. There is a row of n stones, and each stone has an associated value. You are given an integer array stones, where stones[i] is the value of the ith stone.\nAlice and Bob take turns, with Alice starting first. On each turn, the player may remove any stone from stones. The player who removes a stone loses if the sum of the values of all removed stones is divisible by 3. Bob will win automatically if there are no remaining stones (even if it is Alice's turn).\nAssuming both players play optimally, return true if Alice wins and false if Bob wins.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Smallest K-Length Subsequence With Occurrences of a Letter",
    "problem_id": "2157",
    "frontend_id": "2030",
    "difficulty": "Hard",
    "problem_slug": "smallest-k-length-subsequence-with-occurrences-of-a-letter",
    "topics": [
      "String",
      "Stack",
      "Greedy",
      "Monotonic Stack"
    ],
    "description": "You are given a string s, an integer k, a letter letter, and an integer repetition.\nReturn the lexicographically smallest subsequence of s of length k that has the letter letter appear at least repetition times. The test cases are generated so that the letter appears in s at least repetition times.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\nA string a is lexicographically smaller than a string b if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Two Out of Three",
    "problem_id": "2159",
    "frontend_id": "2032",
    "difficulty": "Easy",
    "problem_slug": "two-out-of-three",
    "topics": [
      "Array",
      "Hash Table",
      "Bit Manipulation"
    ],
    "description": "Example 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Make a Uni-Value Grid",
    "problem_id": "2160",
    "frontend_id": "2033",
    "difficulty": "Medium",
    "problem_slug": "minimum-operations-to-make-a-uni-value-grid",
    "topics": [
      "Array",
      "Math",
      "Sorting",
      "Matrix"
    ],
    "description": "You are given a 2D integer grid of size m x n and an integer x. In one operation, you can add x to or subtract x from any element in the grid.\nA uni-value grid is a grid where all the elements of it are equal.\nReturn the minimum number of operations to make the grid uni-value. If it is not possible, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Stock Price Fluctuation ",
    "problem_id": "2161",
    "frontend_id": "2034",
    "difficulty": "Medium",
    "problem_slug": "stock-price-fluctuation",
    "topics": [
      "Hash Table",
      "Design",
      "Heap (Priority Queue)",
      "Data Stream",
      "Ordered Set"
    ],
    "description": "You are given a stream of records about a particular stock. Each record contains a timestamp and the corresponding price of the stock at that timestamp.\nUnfortunately due to the volatile nature of the stock market, the records do not come in order. Even worse, some records may be incorrect. Another record with the same timestamp may appear later in the stream correcting the price of the previous wrong record.\nDesign an algorithm that:\nImplement the StockPrice class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Partition Array Into Two Arrays to Minimize Sum Difference",
    "problem_id": "2162",
    "frontend_id": "2035",
    "difficulty": "Hard",
    "problem_slug": "partition-array-into-two-arrays-to-minimize-sum-difference",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Dynamic Programming",
      "Bit Manipulation",
      "Ordered Set",
      "Bitmask"
    ],
    "description": "You are given an integer array nums of 2 * n integers. You need to partition nums into two arrays of length n to minimize the absolute difference of the sums of the arrays. To partition nums, put each element of nums into one of the two arrays.\nReturn the minimum possible absolute difference.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Moves to Seat Everyone",
    "problem_id": "2148",
    "frontend_id": "2037",
    "difficulty": "Easy",
    "problem_slug": "minimum-number-of-moves-to-seat-everyone",
    "topics": [
      "Array",
      "Greedy",
      "Sorting",
      "Counting Sort"
    ],
    "description": "There are n availabe seats and n students standing in a room. You are given an array seats of length n, where seats[i] is the position of the ith seat. You are also given the array students of length n, where students[j] is the position of the jth student.\nYou may perform the following move any number of times:\nReturn the minimum number of moves required to move each student to a seat such that no two students are in the same seat.\nNote that there may be multiple seats or students in the same position at the beginning.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Remove Colored Pieces if Both Neighbors are the Same Color",
    "problem_id": "2149",
    "frontend_id": "2038",
    "difficulty": "Medium",
    "problem_slug": "remove-colored-pieces-if-both-neighbors-are-the-same-color",
    "topics": [
      "Math",
      "String",
      "Greedy",
      "Game Theory"
    ],
    "description": "There are n pieces arranged in a line, and each piece is colored either by 'A' or by 'B'. You are given a string colors of length n where colors[i] is the color of the ith piece.\nAlice and Bob are playing a game where they take alternating turns removing pieces from the line. In this game, Alice moves first.\nAssuming Alice and Bob play optimally, return true if Alice wins, or return false if Bob wins.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "The Time When the Network Becomes Idle",
    "problem_id": "2151",
    "frontend_id": "2039",
    "difficulty": "Medium",
    "problem_slug": "the-time-when-the-network-becomes-idle",
    "topics": [
      "Array",
      "Breadth-First Search",
      "Graph"
    ],
    "description": "There is a network of n servers, labeled from 0 to n - 1. You are given a 2D integer array edges, where edges[i] = [ui, vi] indicates there is a message channel between servers ui and vi, and they can pass any number of messages to each other directly in one second. You are also given a 0-indexed integer array patience of length n.\nAll servers are connected, i.e., a message can be passed from one server to any other server(s) directly or indirectly through the message channels.\nThe server labeled 0 is the master server. The rest are data servers. Each data server needs to send its message to the master server for processing and wait for a reply. Messages move between servers optimally, so every message takes the least amount of time to arrive at the master server. The master server will process all newly arrived messages instantly and send a reply to the originating server via the reversed path the message had gone through.\nAt the beginning of second 0, each data server sends its message to be processed. Starting from second 1, at the beginning of every second, each data server will check if it has received a reply to the message it sent (including any newly arrived replies) from the master server:\nThe network becomes idle when there are no messages passing between servers or arriving at servers.\nReturn the earliest second starting from which the network becomes idle.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Kth Smallest Product of Two Sorted Arrays",
    "problem_id": "2150",
    "frontend_id": "2040",
    "difficulty": "Hard",
    "problem_slug": "kth-smallest-product-of-two-sorted-arrays",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "Example 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check if Numbers Are Ascending in a Sentence",
    "problem_id": "2168",
    "frontend_id": "2042",
    "difficulty": "Easy",
    "problem_slug": "check-if-numbers-are-ascending-in-a-sentence",
    "topics": [
      "String"
    ],
    "description": "A sentence is a list of tokens separated by a single space with no leading or trailing spaces. Every token is either a positive number consisting of digits 0-9 with no leading zeros, or a word consisting of lowercase English letters.\nGiven a string s representing a sentence, you need to check if all the numbers in s are strictly increasing from left to right (i.e., other than the last number, each number is strictly smaller than the number on its right in s).\nReturn true if so, or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Simple Bank System",
    "problem_id": "2169",
    "frontend_id": "2043",
    "difficulty": "Medium",
    "problem_slug": "simple-bank-system",
    "topics": [
      "Array",
      "Hash Table",
      "Design",
      "Simulation"
    ],
    "description": "You have been tasked with writing a program for a popular bank that will automate all its incoming transactions (transfer, deposit, and withdraw). The bank has n accounts numbered from 1 to n. The initial balance of each account is stored in a 0-indexed integer array balance, with the (i + 1)th account having an initial balance of balance[i].\nExecute all the valid transactions. A transaction is valid if:\nImplement the Bank class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Count Number of Maximum Bitwise-OR Subsets",
    "problem_id": "2170",
    "frontend_id": "2044",
    "difficulty": "Medium",
    "problem_slug": "count-number-of-maximum-bitwise-or-subsets",
    "topics": [
      "Array",
      "Backtracking",
      "Bit Manipulation",
      "Enumeration"
    ],
    "description": "Given an integer array nums, find the maximum possible bitwise OR of a subset of nums and return the number of different non-empty subsets with the maximum bitwise OR.\nAn array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b. Two subsets are considered different if the indices of the elements chosen are different.\nThe bitwise OR of an array a is equal to a[0] OR a[1] OR ... OR a[a.length - 1] (0-indexed).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Second Minimum Time to Reach Destination",
    "problem_id": "2171",
    "frontend_id": "2045",
    "difficulty": "Hard",
    "problem_slug": "second-minimum-time-to-reach-destination",
    "topics": [
      "Breadth-First Search",
      "Graph",
      "Shortest Path"
    ],
    "description": "A city is represented as a bi-directional connected graph with n vertices where each vertex is labeled from 1 to n (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself. The time taken to traverse any edge is time minutes.\nEach vertex has a traffic signal which changes its color from green to red and vice versa every change minutes. All signals change at the same time. You can enter a vertex at any time, but can leave a vertex only when the signal is green. You cannot wait at a vertex if the signal is green.\nThe second minimum value is defined as the smallest value strictly larger than the minimum value.\nGiven n, edges, time, and change, return the second minimum time it will take to go from vertex 1 to vertex n.\nNotes:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Valid Words in a Sentence",
    "problem_id": "2173",
    "frontend_id": "2047",
    "difficulty": "Easy",
    "problem_slug": "number-of-valid-words-in-a-sentence",
    "topics": [
      "String"
    ],
    "description": "A sentence consists of lowercase letters ('a' to 'z'), digits ('0' to '9'), hyphens ('-'), punctuation marks ('!', '.', and ','), and spaces (' ') only. Each sentence can be broken down into one or more tokens separated by one or more spaces ' '.\nA token is a valid word if all three of the following are true:\nExamples of valid words include \"a-b.\", \"afad\", \"ba-c\", \"a!\", and \"!\".\nGiven a string sentence, return the number of valid words in sentence.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Next Greater Numerically Balanced Number",
    "problem_id": "2174",
    "frontend_id": "2048",
    "difficulty": "Medium",
    "problem_slug": "next-greater-numerically-balanced-number",
    "topics": [
      "Hash Table",
      "Math",
      "Backtracking",
      "Counting",
      "Enumeration"
    ],
    "description": "An integer x is numerically balanced if for every digit d in the number x, there are exactly d occurrences of that digit in x.\nGiven an integer n, return the smallest numerically balanced number strictly greater than n.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Nodes With the Highest Score",
    "problem_id": "2175",
    "frontend_id": "2049",
    "difficulty": "Medium",
    "problem_slug": "count-nodes-with-the-highest-score",
    "topics": [
      "Array",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "There is a binary tree rooted at 0 consisting of n nodes. The nodes are labeled from 0 to n - 1. You are given a 0-indexed integer array parents representing the tree, where parents[i] is the parent of node i. Since node 0 is the root, parents[0] == -1.\nEach node has a score. To find the score of a node, consider if the node and the edges connected to it were removed. The tree would become one or more non-empty subtrees. The size of a subtree is the number of the nodes in it. The score of the node is the product of the sizes of all those subtrees.\nReturn the number of nodes that have the highest score.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Parallel Courses III",
    "problem_id": "2176",
    "frontend_id": "2050",
    "difficulty": "Hard",
    "problem_slug": "parallel-courses-iii",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Graph",
      "Topological Sort"
    ],
    "description": "You are given an integer n, which indicates that there are n courses labeled from 1 to n. You are also given a 2D integer array relations where relations[j] = [prevCoursej, nextCoursej] denotes that course prevCoursej has to be completed before course nextCoursej (prerequisite relationship). Furthermore, you are given a 0-indexed integer array time where time[i] denotes how many months it takes to complete the (i+1)th course.\nYou must find the minimum number of months needed to complete all the courses following these rules:\nReturn the minimum number of months needed to complete all the courses.\nNote: The test cases are generated such that it is possible to complete every course (i.e., the graph is a directed acyclic graph).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Kth Distinct String in an Array",
    "problem_id": "2163",
    "frontend_id": "2053",
    "difficulty": "Easy",
    "problem_slug": "kth-distinct-string-in-an-array",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "A distinct string is a string that is present only once in an array.\nGiven an array of strings arr, and an integer k, return the kth distinct string present in arr. If there are fewer than k distinct strings, return an empty string \"\".\nNote that the strings are considered in the order in which they appear in the array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Two Best Non-Overlapping Events",
    "problem_id": "2164",
    "frontend_id": "2054",
    "difficulty": "Medium",
    "problem_slug": "two-best-non-overlapping-events",
    "topics": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given a 0-indexed 2D integer array of events where events[i] = [startTimei, endTimei, valuei]. The ith event starts at startTimei and ends at endTimei, and if you attend this event, you will receive a value of valuei. You can choose at most two non-overlapping events to attend such that the sum of their values is maximized.\nReturn this maximum sum.\nNote that the start time and end time is inclusive: that is, you cannot attend two events where one of them starts and the other ends at the same time. More specifically, if you attend an event with end time t, the next event must start at or after t + 1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Plates Between Candles",
    "problem_id": "2165",
    "frontend_id": "2055",
    "difficulty": "Medium",
    "problem_slug": "plates-between-candles",
    "topics": [
      "Array",
      "String",
      "Binary Search",
      "Prefix Sum"
    ],
    "description": "There is a long table with a line of plates and candles arranged on top of it. You are given a 0-indexed string s consisting of characters '*' and '|' only, where a '*' represents a plate and a '|' represents a candle.\nYou are also given a 0-indexed 2D integer array queries where queries[i] = [lefti, righti] denotes the substring s[lefti...righti] (inclusive). For each query, you need to find the number of plates between candles that are in the substring. A plate is considered between candles if there is at least one candle to its left and at least one candle to its right in the substring.\nReturn an integer array answer where answer[i] is the answer to the ith query.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Valid Move Combinations On Chessboard",
    "problem_id": "2166",
    "frontend_id": "2056",
    "difficulty": "Hard",
    "problem_slug": "number-of-valid-move-combinations-on-chessboard",
    "topics": [
      "Array",
      "String",
      "Backtracking",
      "Simulation"
    ],
    "description": "There is an 8 x 8 chessboard containing n pieces (rooks, queens, or bishops). You are given a string array pieces of length n, where pieces[i] describes the type (rook, queen, or bishop) of the ith piece. In addition, you are given a 2D integer array positions also of length n, where positions[i] = [ri, ci] indicates that the ith piece is currently at the 1-based coordinate (ri, ci) on the chessboard.\nWhen making a move for a piece, you choose a destination square that the piece will travel toward and stop on.\nYou must make a move for every piece on the board simultaneously. A move combination consists of all the moves performed on all the given pieces. Every second, each piece will instantaneously travel one square towards their destination if they are not already at it. All pieces start traveling at the 0th second. A move combination is invalid if, at a given time, two or more pieces occupy the same square.\nReturn the number of valid move combinations​​​​​.\nNotes:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Smallest Index With Equal Value",
    "problem_id": "2181",
    "frontend_id": "2057",
    "difficulty": "Easy",
    "problem_slug": "smallest-index-with-equal-value",
    "topics": [
      "Array"
    ],
    "description": "Given a 0-indexed integer array nums, return the smallest index i of nums such that i mod 10 == nums[i], or -1 if such index does not exist.\nx mod y denotes the remainder when x is divided by y.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Minimum and Maximum Number of Nodes Between Critical Points",
    "problem_id": "2182",
    "frontend_id": "2058",
    "difficulty": "Medium",
    "problem_slug": "find-the-minimum-and-maximum-number-of-nodes-between-critical-points",
    "topics": [
      "Linked List"
    ],
    "description": "A critical point in a linked list is defined as either a local maxima or a local minima.\nA node is a local maxima if the current node has a value strictly greater than the previous node and the next node.\nA node is a local minima if the current node has a value strictly smaller than the previous node and the next node.\nNote that a node can only be a local maxima/minima if there exists both a previous node and a next node.\nGiven a linked list head, return an array of length 2 containing [minDistance, maxDistance] where minDistance is the minimum distance between any two distinct critical points and maxDistance is the maximum distance between any two distinct critical points. If there are fewer than two critical points, return [-1, -1].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Convert Number",
    "problem_id": "2183",
    "frontend_id": "2059",
    "difficulty": "Medium",
    "problem_slug": "minimum-operations-to-convert-number",
    "topics": [
      "Array",
      "Breadth-First Search"
    ],
    "description": "You are given a 0-indexed integer array nums containing distinct numbers, an integer start, and an integer goal. There is an integer x that is initially set to start, and you want to perform operations on x such that it is converted to goal. You can perform the following operation repeatedly on the number x:\nIf 0 <= x <= 1000, then for any index i in the array (0 <= i < nums.length), you can set x to any of the following:\nNote that you can use each nums[i] any number of times in any order. Operations that set x to be out of the range 0 <= x <= 1000 are valid, but no more operations can be done afterward.\nReturn the minimum number of operations needed to convert x = start into goal, and -1 if it is not possible.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check if an Original String Exists Given Two Encoded Strings",
    "problem_id": "2184",
    "frontend_id": "2060",
    "difficulty": "Hard",
    "problem_slug": "check-if-an-original-string-exists-given-two-encoded-strings",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "An original string, consisting of lowercase English letters, can be encoded by the following steps:\nFor example, one way to encode an original string \"abcdefghijklmnop\" might be:\nGiven two encoded strings s1 and s2, consisting of lowercase English letters and digits 1-9 (inclusive), return true if there exists an original string that could be encoded as both s1 and s2. Otherwise, return false.\nNote: The test cases are generated such that the number of consecutive digits in s1 and s2 does not exceed 3.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Vowel Substrings of a String",
    "problem_id": "2186",
    "frontend_id": "2062",
    "difficulty": "Easy",
    "problem_slug": "count-vowel-substrings-of-a-string",
    "topics": [
      "Hash Table",
      "String"
    ],
    "description": "A substring is a contiguous (non-empty) sequence of characters within a string.\nA vowel substring is a substring that only consists of vowels ('a', 'e', 'i', 'o', and 'u') and has all five vowels present in it.\nGiven a string word, return the number of vowel substrings in word.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Vowels of All Substrings",
    "problem_id": "2187",
    "frontend_id": "2063",
    "difficulty": "Medium",
    "problem_slug": "vowels-of-all-substrings",
    "topics": [
      "Math",
      "String",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "description": "Given a string word, return the sum of the number of vowels ('a', 'e', 'i', 'o', and 'u') in every substring of word.\nA substring is a contiguous (non-empty) sequence of characters within a string.\nNote: Due to the large constraints, the answer may not fit in a signed 32-bit integer. Please be careful during the calculations.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimized Maximum of Products Distributed to Any Store",
    "problem_id": "2188",
    "frontend_id": "2064",
    "difficulty": "Medium",
    "problem_slug": "minimized-maximum-of-products-distributed-to-any-store",
    "topics": [
      "Array",
      "Binary Search",
      "Greedy"
    ],
    "description": "You are given an integer n indicating there are n specialty retail stores. There are m product types of varying amounts, which are given as a 0-indexed integer array quantities, where quantities[i] represents the number of products of the ith product type.\nYou need to distribute all products to the retail stores following these rules:\nReturn the minimum possible x.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Path Quality of a Graph",
    "problem_id": "2189",
    "frontend_id": "2065",
    "difficulty": "Hard",
    "problem_slug": "maximum-path-quality-of-a-graph",
    "topics": [
      "Array",
      "Backtracking",
      "Graph"
    ],
    "description": "There is an undirected graph with n nodes numbered from 0 to n - 1 (inclusive). You are given a 0-indexed integer array values where values[i] is the value of the ith node. You are also given a 0-indexed 2D integer array edges, where each edges[j] = [uj, vj, timej] indicates that there is an undirected edge between the nodes uj and vj, and it takes timej seconds to travel between the two nodes. Finally, you are given an integer maxTime.\nA valid path in the graph is any path that starts at node 0, ends at node 0, and takes at most maxTime seconds to complete. You may visit the same node multiple times. The quality of a valid path is the sum of the values of the unique nodes visited in the path (each node's value is added at most once to the sum).\nReturn the maximum quality of a valid path.\nNote: There are at most four edges connected to each node.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check Whether Two Strings are Almost Equivalent",
    "problem_id": "2177",
    "frontend_id": "2068",
    "difficulty": "Easy",
    "problem_slug": "check-whether-two-strings-are-almost-equivalent",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "Two strings word1 and word2 are considered almost equivalent if the differences between the frequencies of each letter from 'a' to 'z' between word1 and word2 is at most 3.\nGiven two strings word1 and word2, each of length n, return true if word1 and word2 are almost equivalent, or false otherwise.\nThe frequency of a letter x is the number of times it occurs in the string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Walking Robot Simulation II",
    "problem_id": "2178",
    "frontend_id": "2069",
    "difficulty": "Medium",
    "problem_slug": "walking-robot-simulation-ii",
    "topics": [
      "Design",
      "Simulation"
    ],
    "description": "A width x height grid is on an XY-plane with the bottom-left cell at (0, 0) and the top-right cell at (width - 1, height - 1). The grid is aligned with the four cardinal directions (\"North\", \"East\", \"South\", and \"West\"). A robot is initially at cell (0, 0) facing direction \"East\".\nThe robot can be instructed to move for a specific number of steps. For each step, it does the following.\nAfter the robot finishes moving the number of steps required, it stops and awaits the next instruction.\nImplement the Robot class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Most Beautiful Item for Each Query",
    "problem_id": "2179",
    "frontend_id": "2070",
    "difficulty": "Medium",
    "problem_slug": "most-beautiful-item-for-each-query",
    "topics": [
      "Array",
      "Binary Search",
      "Sorting"
    ],
    "description": "You are given a 2D integer array items where items[i] = [pricei, beautyi] denotes the price and beauty of an item respectively.\nYou are also given a 0-indexed integer array queries. For each queries[j], you want to determine the maximum beauty of an item whose price is less than or equal to queries[j]. If no such item exists, then the answer to this query is 0.\nReturn an array answer of the same length as queries where answer[j] is the answer to the jth query.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Number of Tasks You Can Assign",
    "problem_id": "2180",
    "frontend_id": "2071",
    "difficulty": "Hard",
    "problem_slug": "maximum-number-of-tasks-you-can-assign",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Greedy",
      "Queue",
      "Sorting",
      "Monotonic Queue"
    ],
    "description": "You have n tasks and m workers. Each task has a strength requirement stored in a 0-indexed integer array tasks, with the ith task requiring tasks[i] strength to complete. The strength of each worker is stored in a 0-indexed integer array workers, with the jth worker having workers[j] strength. Each worker can only be assigned to a single task and must have a strength greater than or equal to the task's strength requirement (i.e., workers[j] >= tasks[i]).\nAdditionally, you have pills magical pills that will increase a worker's strength by strength. You can decide which workers receive the magical pills, however, you may only give each worker at most one magical pill.\nGiven the 0-indexed integer arrays tasks and workers and the integers pills and strength, return the maximum number of tasks that can be completed.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Time Needed to Buy Tickets",
    "problem_id": "2195",
    "frontend_id": "2073",
    "difficulty": "Easy",
    "problem_slug": "time-needed-to-buy-tickets",
    "topics": [
      "Array",
      "Queue",
      "Simulation"
    ],
    "description": "There are n people in a line queuing to buy tickets, where the 0th person is at the front of the line and the (n - 1)th person is at the back of the line.\nYou are given a 0-indexed integer array tickets of length n where the number of tickets that the ith person would like to buy is tickets[i].\nEach person takes exactly 1 second to buy a ticket. A person can only buy 1 ticket at a time and has to go back to the end of the line (which happens instantaneously) in order to buy more tickets. If a person does not have any tickets left to buy, the person will leave the line.\nReturn the time taken for the person initially at position k (0-indexed) to finish buying tickets.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Reverse Nodes in Even Length Groups",
    "problem_id": "2196",
    "frontend_id": "2074",
    "difficulty": "Medium",
    "problem_slug": "reverse-nodes-in-even-length-groups",
    "topics": [
      "Linked List"
    ],
    "description": "You are given the head of a linked list.\nThe nodes in the linked list are sequentially assigned to non-empty groups whose lengths form the sequence of the natural numbers (1, 2, 3, 4, ...). The length of a group is the number of nodes assigned to it. In other words,\nNote that the length of the last group may be less than or equal to 1 + the length of the second to last group.\nReverse the nodes in each group with an even length, and return the head of the modified linked list.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Decode the Slanted Ciphertext",
    "problem_id": "2197",
    "frontend_id": "2075",
    "difficulty": "Medium",
    "problem_slug": "decode-the-slanted-ciphertext",
    "topics": [
      "String",
      "Simulation"
    ],
    "description": "A string originalText is encoded using a slanted transposition cipher to a string encodedText with the help of a matrix having a fixed number of rows rows.\noriginalText is placed first in a top-left to bottom-right manner.\nThe blue cells are filled first, followed by the red cells, then the yellow cells, and so on, until we reach the end of originalText. The arrow indicates the order in which the cells are filled. All empty cells are filled with ' '. The number of columns is chosen such that the rightmost column will not be empty after filling in originalText.\nencodedText is then formed by appending all characters of the matrix in a row-wise fashion.\nThe characters in the blue cells are appended first to encodedText, then the red cells, and so on, and finally the yellow cells. The arrow indicates the order in which the cells are accessed.\nFor example, if originalText = \"cipher\" and rows = 3, then we encode it in the following manner:\nThe blue arrows depict how originalText is placed in the matrix, and the red arrows denote the order in which encodedText is formed. In the above example, encodedText = \"ch ie pr\".\nGiven the encoded string encodedText and number of rows rows, return the original string originalText.\nNote: originalText does not have any trailing spaces ' '. The test cases are generated such that there is only one possible originalText.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Process Restricted Friend Requests",
    "problem_id": "2198",
    "frontend_id": "2076",
    "difficulty": "Hard",
    "problem_slug": "process-restricted-friend-requests",
    "topics": [
      "Union Find",
      "Graph"
    ],
    "description": "You are given an integer n indicating the number of people in a network. Each person is labeled from 0 to n - 1.\nYou are also given a 0-indexed 2D integer array restrictions, where restrictions[i] = [xi, yi] means that person xi and person yi cannot become friends, either directly or indirectly through other people.\nInitially, no one is friends with each other. You are given a list of friend requests as a 0-indexed 2D integer array requests, where requests[j] = [uj, vj] is a friend request between person uj and person vj.\nA friend request is successful if uj and vj can be friends. Each friend request is processed in the given order (i.e., requests[j] occurs before requests[j + 1]), and upon a successful request, uj and vj become direct friends for all future friend requests.\nReturn a boolean array result, where each result[j] is true if the jth friend request is successful or false if it is not.\nNote: If uj and vj are already direct friends, the request is still successful.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Two Furthest Houses With Different Colors",
    "problem_id": "2199",
    "frontend_id": "2078",
    "difficulty": "Easy",
    "problem_slug": "two-furthest-houses-with-different-colors",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "There are n houses evenly lined up on the street, and each house is beautifully painted. You are given a 0-indexed integer array colors of length n, where colors[i] represents the color of the ith house.\nReturn the maximum distance between two houses with different colors.\nThe distance between the ith and jth houses is abs(i - j), where abs(x) is the absolute value of x.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Watering Plants",
    "problem_id": "1310",
    "frontend_id": "2079",
    "difficulty": "Medium",
    "problem_slug": "watering-plants",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "You want to water n plants in your garden with a watering can. The plants are arranged in a row and are labeled from 0 to n - 1 from left to right where the ith plant is located at x = i. There is a river at x = -1 that you can refill your watering can at.\nEach plant needs a specific amount of water. You will water the plants in the following way:\nYou are initially at the river (i.e., x = -1). It takes one step to move one unit on the x-axis.\nGiven a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the ith plant needs, and an integer capacity representing the watering can capacity, return the number of steps needed to water all the plants.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Range Frequency Queries",
    "problem_id": "1294",
    "frontend_id": "2080",
    "difficulty": "Medium",
    "problem_slug": "range-frequency-queries",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Design",
      "Segment Tree"
    ],
    "description": "Design a data structure to find the frequency of a given value in a given subarray.\nThe frequency of a value in a subarray is the number of occurrences of that value in the subarray.\nImplement the RangeFreqQuery class:\nA subarray is a contiguous sequence of elements within an array. arr[left...right] denotes the subarray that contains the elements of nums between indices left and right (inclusive).\nExample 1:\nConstraints:"
  },
  {
    "title": "Sum of k-Mirror Numbers",
    "problem_id": "2202",
    "frontend_id": "2081",
    "difficulty": "Hard",
    "problem_slug": "sum-of-k-mirror-numbers",
    "topics": [
      "Math",
      "Enumeration"
    ],
    "description": "A k-mirror number is a positive integer without leading zeros that reads the same both forward and backward in base-10 as well as in base-k.\nGiven the base k and the number n, return the sum of the n smallest k-mirror numbers.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Common Words With One Occurrence",
    "problem_id": "2190",
    "frontend_id": "2085",
    "difficulty": "Easy",
    "problem_slug": "count-common-words-with-one-occurrence",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "Given two string arrays words1 and words2, return the number of strings that appear exactly once in each of the two arrays.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Food Buckets to Feed the Hamsters",
    "problem_id": "2191",
    "frontend_id": "2086",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-food-buckets-to-feed-the-hamsters",
    "topics": [
      "String",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "You are given a 0-indexed string hamsters where hamsters[i] is either:\nYou will add some number of food buckets at the empty indices in order to feed the hamsters. A hamster can be fed if there is at least one food bucket to its left or to its right. More formally, a hamster at index i can be fed if you place a food bucket at index i - 1 and/or at index i + 1.\nReturn the minimum number of food buckets you should place at empty indices to feed all the hamsters or -1 if it is impossible to feed all of them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Cost Homecoming of a Robot in a Grid",
    "problem_id": "2192",
    "frontend_id": "2087",
    "difficulty": "Medium",
    "problem_slug": "minimum-cost-homecoming-of-a-robot-in-a-grid",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "There is an m x n grid, where (0, 0) is the top-left cell and (m - 1, n - 1) is the bottom-right cell. You are given an integer array startPos where startPos = [startrow, startcol] indicates that initially, a robot is at the cell (startrow, startcol). You are also given an integer array homePos where homePos = [homerow, homecol] indicates that its home is at the cell (homerow, homecol).\nThe robot needs to go to its home. It can move one cell in four directions: left, right, up, or down, and it can not move outside the boundary. Every move incurs some cost. You are further given two 0-indexed integer arrays: rowCosts of length m and colCosts of length n.\nReturn the minimum total cost for this robot to return home.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Fertile Pyramids in a Land",
    "problem_id": "2193",
    "frontend_id": "2088",
    "difficulty": "Hard",
    "problem_slug": "count-fertile-pyramids-in-a-land",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "A farmer has a rectangular grid of land with m rows and n columns that can be divided into unit cells. Each cell is either fertile (represented by a 1) or barren (represented by a 0). All cells outside the grid are considered barren.\nA pyramidal plot of land can be defined as a set of cells with the following criteria:\nAn inverse pyramidal plot of land can be defined as a set of cells with similar criteria:\nSome examples of valid and invalid pyramidal (and inverse pyramidal) plots are shown below. Black cells indicate fertile cells.\nGiven a 0-indexed m x n binary matrix grid representing the farmland, return the total number of pyramidal and inverse pyramidal plots that can be found in grid.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Target Indices After Sorting Array",
    "problem_id": "2210",
    "frontend_id": "2089",
    "difficulty": "Easy",
    "problem_slug": "find-target-indices-after-sorting-array",
    "topics": [
      "Array",
      "Binary Search",
      "Sorting"
    ],
    "description": "You are given a 0-indexed integer array nums and a target element target.\nA target index is an index i such that nums[i] == target.\nReturn a list of the target indices of nums after sorting nums in non-decreasing order. If there are no target indices, return an empty list. The returned list must be sorted in increasing order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "K Radius Subarray Averages",
    "problem_id": "2211",
    "frontend_id": "2090",
    "difficulty": "Medium",
    "problem_slug": "k-radius-subarray-averages",
    "topics": [
      "Array",
      "Sliding Window"
    ],
    "description": "You are given a 0-indexed array nums of n integers, and an integer k.\nThe k-radius average for a subarray of nums centered at some index i with the radius k is the average of all elements in nums between the indices i - k and i + k (inclusive). If there are less than k elements before or after the index i, then the k-radius average is -1.\nBuild and return an array avgs of length n where avgs[i] is the k-radius average for the subarray centered at index i.\nThe average of x elements is the sum of the x elements divided by x, using integer division. The integer division truncates toward zero, which means losing its fractional part.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Removing Minimum and Maximum From Array",
    "problem_id": "2212",
    "frontend_id": "2091",
    "difficulty": "Medium",
    "problem_slug": "removing-minimum-and-maximum-from-array",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "You are given a 0-indexed array of distinct integers nums.\nThere is an element in nums that has the lowest value and an element that has the highest value. We call them the minimum and maximum respectively. Your goal is to remove both these elements from the array.\nA deletion is defined as either removing an element from the front of the array or removing an element from the back of the array.\nReturn the minimum number of deletions it would take to remove both the minimum and maximum element from the array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find All People With Secret",
    "problem_id": "2213",
    "frontend_id": "2092",
    "difficulty": "Hard",
    "problem_slug": "find-all-people-with-secret",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph",
      "Sorting"
    ],
    "description": "You are given an integer n indicating there are n people numbered from 0 to n - 1. You are also given a 0-indexed 2D integer array meetings where meetings[i] = [xi, yi, timei] indicates that person xi and person yi have a meeting at timei. A person may attend multiple meetings at the same time. Finally, you are given an integer firstPerson.\nPerson 0 has a secret and initially shares the secret with a person firstPerson at time 0. This secret is then shared every time a meeting takes place with a person that has the secret. More formally, for every meeting, if a person xi has the secret at timei, then they will share the secret with person yi, and vice versa.\nThe secrets are shared instantaneously. That is, a person may receive the secret and share it with people in other meetings within the same time frame.\nReturn a list of all the people that have the secret after all the meetings have taken place. You may return the answer in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Finding 3-Digit Even Numbers",
    "problem_id": "2215",
    "frontend_id": "2094",
    "difficulty": "Easy",
    "problem_slug": "finding-3-digit-even-numbers",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting",
      "Enumeration"
    ],
    "description": "You are given an integer array digits, where each element is a digit. The array may contain duplicates.\nYou need to find all the unique integers that follow the given requirements:\nFor example, if the given digits were [1, 2, 3], integers 132 and 312 follow the requirements.\nReturn a sorted array of the unique integers.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Delete the Middle Node of a Linked List",
    "problem_id": "2216",
    "frontend_id": "2095",
    "difficulty": "Medium",
    "problem_slug": "delete-the-middle-node-of-a-linked-list",
    "topics": [
      "Linked List",
      "Two Pointers"
    ],
    "description": "You are given the head of a linked list. Delete the middle node, and return the head of the modified linked list.\nThe middle node of a linked list of size n is the ⌊n / 2⌋th node from the start using 0-based indexing, where ⌊x⌋ denotes the largest integer less than or equal to x.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Step-By-Step Directions From a Binary Tree Node to Another",
    "problem_id": "2217",
    "frontend_id": "2096",
    "difficulty": "Medium",
    "problem_slug": "step-by-step-directions-from-a-binary-tree-node-to-another",
    "topics": [
      "String",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "You are given the root of a binary tree with n nodes. Each node is uniquely assigned a value from 1 to n. You are also given an integer startValue representing the value of the start node s, and a different integer destValue representing the value of the destination node t.\nFind the shortest path starting from node s and ending at node t. Generate step-by-step directions of such path as a string consisting of only the uppercase letters 'L', 'R', and 'U'. Each letter indicates a specific direction:\nReturn the step-by-step directions of the shortest path from node s to node t.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Valid Arrangement of Pairs",
    "problem_id": "2201",
    "frontend_id": "2097",
    "difficulty": "Hard",
    "problem_slug": "valid-arrangement-of-pairs",
    "topics": [
      "Depth-First Search",
      "Graph",
      "Eulerian Circuit"
    ],
    "description": "You are given a 0-indexed 2D integer array pairs where pairs[i] = [starti, endi]. An arrangement of pairs is valid if for every index i where 1 <= i < pairs.length, we have endi-1 == starti.\nReturn any valid arrangement of pairs.\nNote: The inputs will be generated such that there exists a valid arrangement of pairs.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Subsequence of Length K With the Largest Sum",
    "problem_id": "2204",
    "frontend_id": "2099",
    "difficulty": "Easy",
    "problem_slug": "find-subsequence-of-length-k-with-the-largest-sum",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given an integer array nums and an integer k. You want to find a subsequence of nums of length k that has the largest sum.\nReturn any such subsequence as an integer array of length k.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Good Days to Rob the Bank",
    "problem_id": "2205",
    "frontend_id": "2100",
    "difficulty": "Medium",
    "problem_slug": "find-good-days-to-rob-the-bank",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "description": "You and a gang of thieves are planning on robbing a bank. You are given a 0-indexed integer array security, where security[i] is the number of guards on duty on the ith day. The days are numbered starting from 0. You are also given an integer time.\nThe ith day is a good day to rob the bank if:\nMore formally, this means day i is a good day to rob the bank if and only if security[i - time] >= security[i - time + 1] >= ... >= security[i] <= ... <= security[i + time - 1] <= security[i + time].\nReturn a list of all days (0-indexed) that are good days to rob the bank. The order that the days are returned in does not matter.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Detonate the Maximum Bombs",
    "problem_id": "2206",
    "frontend_id": "2101",
    "difficulty": "Medium",
    "problem_slug": "detonate-the-maximum-bombs",
    "topics": [
      "Array",
      "Math",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Geometry"
    ],
    "description": "You are given a list of bombs. The range of a bomb is defined as the area where its effect can be felt. This area is in the shape of a circle with the center as the location of the bomb.\nThe bombs are represented by a 0-indexed 2D integer array bombs where bombs[i] = [xi, yi, ri]. xi and yi denote the X-coordinate and Y-coordinate of the location of the ith bomb, whereas ri denotes the radius of its range.\nYou may choose to detonate a single bomb. When a bomb is detonated, it will detonate all bombs that lie in its range. These bombs will further detonate the bombs that lie in their ranges.\nGiven the list of bombs, return the maximum number of bombs that can be detonated if you are allowed to detonate only one bomb.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sequentially Ordinal Rank Tracker",
    "problem_id": "2207",
    "frontend_id": "2102",
    "difficulty": "Hard",
    "problem_slug": "sequentially-ordinal-rank-tracker",
    "topics": [
      "Design",
      "Heap (Priority Queue)",
      "Data Stream",
      "Ordered Set"
    ],
    "description": "A scenic location is represented by its name and attractiveness score, where name is a unique string among all locations and score is an integer. Locations can be ranked from the best to the worst. The higher the score, the better the location. If the scores of two locations are equal, then the location with the lexicographically smaller name is better.\nYou are building a system that tracks the ranking of locations with the system initially starting with no locations. It supports:\nNote that the test data are generated so that at any time, the number of queries does not exceed the number of locations added to the system.\nImplement the SORTracker class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Rings and Rods",
    "problem_id": "2226",
    "frontend_id": "2103",
    "difficulty": "Easy",
    "problem_slug": "rings-and-rods",
    "topics": [
      "Hash Table",
      "String"
    ],
    "description": "There are n rings and each ring is either red, green, or blue. The rings are distributed across ten rods labeled from 0 to 9.\nYou are given a string rings of length 2n that describes the n rings that are placed onto the rods. Every two characters in rings forms a color-position pair that is used to describe each ring where:\nFor example, \"R3G2B1\" describes n == 3 rings: a red ring placed onto the rod labeled 3, a green ring placed onto the rod labeled 2, and a blue ring placed onto the rod labeled 1.\nReturn the number of rods that have all three colors of rings on them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sum of Subarray Ranges",
    "problem_id": "2227",
    "frontend_id": "2104",
    "difficulty": "Medium",
    "problem_slug": "sum-of-subarray-ranges",
    "topics": [
      "Array",
      "Stack",
      "Monotonic Stack"
    ],
    "description": "You are given an integer array nums. The range of a subarray of nums is the difference between the largest and smallest element in the subarray.\nReturn the sum of all subarray ranges of nums.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow-up: Could you find a solution with O(n) time complexity?"
  },
  {
    "title": "Watering Plants II",
    "problem_id": "2228",
    "frontend_id": "2105",
    "difficulty": "Medium",
    "problem_slug": "watering-plants-ii",
    "topics": [
      "Array",
      "Two Pointers",
      "Simulation"
    ],
    "description": "Alice and Bob want to water n plants in their garden. The plants are arranged in a row and are labeled from 0 to n - 1 from left to right where the ith plant is located at x = i.\nEach plant needs a specific amount of water. Alice and Bob have a watering can each, initially full. They water the plants in the following way:\nGiven a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the ith plant needs, and two integers capacityA and capacityB representing the capacities of Alice's and Bob's watering cans respectively, return the number of times they have to refill to water all the plants.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Fruits Harvested After at Most K Steps",
    "problem_id": "2229",
    "frontend_id": "2106",
    "difficulty": "Hard",
    "problem_slug": "maximum-fruits-harvested-after-at-most-k-steps",
    "topics": [
      "Array",
      "Binary Search",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "Fruits are available at some positions on an infinite x-axis. You are given a 2D integer array fruits where fruits[i] = [positioni, amounti] depicts amounti fruits at the position positioni. fruits is already sorted by positioni in ascending order, and each positioni is unique.\nYou are also given an integer startPos and an integer k. Initially, you are at the position startPos. From any position, you can either walk to the left or right. It takes one step to move one unit on the x-axis, and you can walk at most k steps in total. For every position you reach, you harvest all the fruits at that position, and the fruits will disappear from that position.\nReturn the maximum total number of fruits you can harvest.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find First Palindromic String in the Array",
    "problem_id": "2231",
    "frontend_id": "2108",
    "difficulty": "Easy",
    "problem_slug": "find-first-palindromic-string-in-the-array",
    "topics": [
      "Array",
      "Two Pointers",
      "String"
    ],
    "description": "Given an array of strings words, return the first palindromic string in the array. If there is no such string, return an empty string \"\".\nA string is palindromic if it reads the same forward and backward.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Adding Spaces to a String",
    "problem_id": "2232",
    "frontend_id": "2109",
    "difficulty": "Medium",
    "problem_slug": "adding-spaces-to-a-string",
    "topics": [
      "Array",
      "Two Pointers",
      "String",
      "Simulation"
    ],
    "description": "You are given a 0-indexed string s and a 0-indexed integer array spaces that describes the indices in the original string where spaces will be added. Each space should be inserted before the character at the given index.\nReturn the modified string after the spaces have been added.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Smooth Descent Periods of a Stock",
    "problem_id": "2233",
    "frontend_id": "2110",
    "difficulty": "Medium",
    "problem_slug": "number-of-smooth-descent-periods-of-a-stock",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array prices representing the daily price history of a stock, where prices[i] is the stock price on the ith day.\nA smooth descent period of a stock consists of one or more contiguous days such that the price on each day is lower than the price on the preceding day by exactly 1. The first day of the period is exempted from this rule.\nReturn the number of smooth descent periods.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Make the Array K-Increasing",
    "problem_id": "2234",
    "frontend_id": "2111",
    "difficulty": "Hard",
    "problem_slug": "minimum-operations-to-make-the-array-k-increasing",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "You are given a 0-indexed array arr consisting of n positive integers, and a positive integer k.\nThe array arr is called K-increasing if arr[i-k] <= arr[i] holds for every index i, where k <= i <= n-1.\nIn one operation, you can choose an index i and change arr[i] into any positive integer.\nReturn the minimum number of operations required to make the array K-increasing for the given k.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Number of Words Found in Sentences",
    "problem_id": "2219",
    "frontend_id": "2114",
    "difficulty": "Easy",
    "problem_slug": "maximum-number-of-words-found-in-sentences",
    "topics": [
      "Array",
      "String"
    ],
    "description": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces.\nYou are given an array of strings sentences, where each sentences[i] represents a single sentence.\nReturn the maximum number of words that appear in a single sentence.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find All Possible Recipes from Given Supplies",
    "problem_id": "2220",
    "frontend_id": "2115",
    "difficulty": "Medium",
    "problem_slug": "find-all-possible-recipes-from-given-supplies",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Graph",
      "Topological Sort"
    ],
    "description": "You have information about n different recipes. You are given a string array recipes and a 2D string array ingredients. The ith recipe has the name recipes[i], and you can create it if you have all the needed ingredients from ingredients[i]. A recipe can also be an ingredient for other recipes, i.e., ingredients[i] may contain a string that is in recipes.\nYou are also given a string array supplies containing all the ingredients that you initially have, and you have an infinite supply of all of them.\nReturn a list of all the recipes that you can create. You may return the answer in any order.\nNote that two recipes may contain each other in their ingredients.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check if a Parentheses String Can Be Valid",
    "problem_id": "2221",
    "frontend_id": "2116",
    "difficulty": "Medium",
    "problem_slug": "check-if-a-parentheses-string-can-be-valid",
    "topics": [
      "String",
      "Stack",
      "Greedy"
    ],
    "description": "A parentheses string is a non-empty string consisting only of '(' and ')'. It is valid if any of the following conditions is true:\nYou are given a parentheses string s and a string locked, both of length n. locked is a binary string consisting only of '0's and '1's. For each index i of locked,\nReturn true if you can make s a valid parentheses string. Otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Abbreviating the Product of a Range",
    "problem_id": "2222",
    "frontend_id": "2117",
    "difficulty": "Hard",
    "problem_slug": "abbreviating-the-product-of-a-range",
    "topics": [
      "Math"
    ],
    "description": "You are given two positive integers left and right with left <= right. Calculate the product of all integers in the inclusive range [left, right].\nSince the product may be very large, you will abbreviate it following these steps:\nReturn a string denoting the abbreviated product of all integers in the inclusive range [left, right].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "A Number After a Double Reversal",
    "problem_id": "2238",
    "frontend_id": "2119",
    "difficulty": "Easy",
    "problem_slug": "a-number-after-a-double-reversal",
    "topics": [
      "Math"
    ],
    "description": "Reversing an integer means to reverse all its digits.\nGiven an integer num, reverse num to get reversed1, then reverse reversed1 to get reversed2. Return true if reversed2 equals num. Otherwise return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Execution of All Suffix Instructions Staying in a Grid",
    "problem_id": "2239",
    "frontend_id": "2120",
    "difficulty": "Medium",
    "problem_slug": "execution-of-all-suffix-instructions-staying-in-a-grid",
    "topics": [
      "String",
      "Simulation"
    ],
    "description": "There is an n x n grid, with the top-left cell at (0, 0) and the bottom-right cell at (n - 1, n - 1). You are given the integer n and an integer array startPos where startPos = [startrow, startcol] indicates that a robot is initially at cell (startrow, startcol).\nYou are also given a 0-indexed string s of length m where s[i] is the ith instruction for the robot: 'L' (move left), 'R' (move right), 'U' (move up), and 'D' (move down).\nThe robot can begin executing from any ith instruction in s. It executes the instructions one by one towards the end of s but it stops if either of these conditions is met:\nReturn an array answer of length m where answer[i] is the number of instructions the robot can execute if the robot begins executing from the ith instruction in s.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Intervals Between Identical Elements",
    "problem_id": "2240",
    "frontend_id": "2121",
    "difficulty": "Medium",
    "problem_slug": "intervals-between-identical-elements",
    "topics": [
      "Array",
      "Hash Table",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed array of n integers arr.\nThe interval between two elements in arr is defined as the absolute difference between their indices. More formally, the interval between arr[i] and arr[j] is |i - j|.\nReturn an array intervals of length n where intervals[i] is the sum of intervals between arr[i] and each element in arr with the same value as arr[i].\nNote: |x| is the absolute value of x.\nExample 1:\nExample 2:\nConstraints:\nNote: This question is the same as  2615: Sum of Distances."
  },
  {
    "title": "Recover the Original Array",
    "problem_id": "2241",
    "frontend_id": "2122",
    "difficulty": "Hard",
    "problem_slug": "recover-the-original-array",
    "topics": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Sorting",
      "Enumeration"
    ],
    "description": "Alice had a 0-indexed array arr consisting of n positive integers. She chose an arbitrary positive integer k and created two new 0-indexed integer arrays lower and higher in the following manner:\nUnfortunately, Alice lost all three arrays. However, she remembers the integers that were present in the arrays lower and higher, but not the array each integer belonged to. Help Alice and recover the original array.\nGiven an array nums consisting of 2n integers, where exactly n of the integers were present in lower and the remaining in higher, return the original array arr. In case the answer is not unique, return any valid array.\nNote: The test cases are generated such that there exists at least one valid array arr.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check if All A's Appears Before All B's",
    "problem_id": "2243",
    "frontend_id": "2124",
    "difficulty": "Easy",
    "problem_slug": "check-if-all-as-appears-before-all-bs",
    "topics": [
      "String"
    ],
    "description": "Given a string s consisting of only the characters 'a' and 'b', return true if every 'a' appears before every 'b' in the string. Otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Laser Beams in a Bank",
    "problem_id": "2244",
    "frontend_id": "2125",
    "difficulty": "Medium",
    "problem_slug": "number-of-laser-beams-in-a-bank",
    "topics": [
      "Array",
      "Math",
      "String",
      "Matrix"
    ],
    "description": "Anti-theft security devices are activated inside a bank. You are given a 0-indexed binary string array bank representing the floor plan of the bank, which is an m x n 2D matrix. bank[i] represents the ith row, consisting of '0's and '1's. '0' means the cell is empty, while'1' means the cell has a security device.\nThere is one laser beam between any two security devices if both conditions are met:\nLaser beams are independent, i.e., one beam does not interfere nor join with another.\nReturn the total number of laser beams in the bank.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Destroying Asteroids",
    "problem_id": "2245",
    "frontend_id": "2126",
    "difficulty": "Medium",
    "problem_slug": "destroying-asteroids",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an integer mass, which represents the original mass of a planet. You are further given an integer array asteroids, where asteroids[i] is the mass of the ith asteroid.\nYou can arrange for the planet to collide with the asteroids in any arbitrary order. If the mass of the planet is greater than or equal to the mass of the asteroid, the asteroid is destroyed and the planet gains the mass of the asteroid. Otherwise, the planet is destroyed.\nReturn true if all asteroids can be destroyed. Otherwise, return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Employees to Be Invited to a Meeting",
    "problem_id": "2246",
    "frontend_id": "2127",
    "difficulty": "Hard",
    "problem_slug": "maximum-employees-to-be-invited-to-a-meeting",
    "topics": [
      "Depth-First Search",
      "Graph",
      "Topological Sort"
    ],
    "description": "A company is organizing a meeting and has a list of n employees, waiting to be invited. They have arranged for a large circular table, capable of seating any number of employees.\nThe employees are numbered from 0 to n - 1. Each employee has a favorite person and they will attend the meeting only if they can sit next to their favorite person at the table. The favorite person of an employee is not themself.\nGiven a 0-indexed integer array favorite, where favorite[i] denotes the favorite person of the ith employee, return the maximum number of employees that can be invited to the meeting.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Capitalize the Title",
    "problem_id": "2235",
    "frontend_id": "2129",
    "difficulty": "Easy",
    "problem_slug": "capitalize-the-title",
    "topics": [
      "String"
    ],
    "description": "You are given a string title consisting of one or more words separated by a single space, where each word consists of English letters. Capitalize the string by changing the capitalization of each word such that:\nReturn the capitalized title.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Twin Sum of a Linked List",
    "problem_id": "2236",
    "frontend_id": "2130",
    "difficulty": "Medium",
    "problem_slug": "maximum-twin-sum-of-a-linked-list",
    "topics": [
      "Linked List",
      "Two Pointers",
      "Stack"
    ],
    "description": "In a linked list of size n, where n is even, the ith node (0-indexed) of the linked list is known as the twin of the (n-1-i)th node, if 0 <= i <= (n / 2) - 1.\nThe twin sum is defined as the sum of a node and its twin.\nGiven the head of a linked list with even length, return the maximum twin sum of the linked list.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest Palindrome by Concatenating Two Letter Words",
    "problem_id": "2237",
    "frontend_id": "2131",
    "difficulty": "Medium",
    "problem_slug": "longest-palindrome-by-concatenating-two-letter-words",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Greedy",
      "Counting"
    ],
    "description": "You are given an array of strings words. Each element of words consists of two lowercase English letters.\nCreate the longest possible palindrome by selecting some elements from words and concatenating them in any order. Each element can be selected at most once.\nReturn the length of the longest palindrome that you can create. If it is impossible to create any palindrome, return 0.\nA palindrome is a string that reads the same forward and backward.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Stamping the Grid",
    "problem_id": "2200",
    "frontend_id": "2132",
    "difficulty": "Hard",
    "problem_slug": "stamping-the-grid",
    "topics": [
      "Array",
      "Greedy",
      "Matrix",
      "Prefix Sum"
    ],
    "description": "You are given an m x n binary matrix grid where each cell is either 0 (empty) or 1 (occupied).\nYou are then given stamps of size stampHeight x stampWidth. We want to fit the stamps such that they follow the given restrictions and requirements:\nReturn true if it is possible to fit the stamps while following the given restrictions and requirements. Otherwise, return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check if Every Row and Column Contains All Numbers",
    "problem_id": "2254",
    "frontend_id": "2133",
    "difficulty": "Easy",
    "problem_slug": "check-if-every-row-and-column-contains-all-numbers",
    "topics": [
      "Array",
      "Hash Table",
      "Matrix"
    ],
    "description": "An n x n matrix is valid if every row and every column contains all the integers from 1 to n (inclusive).\nGiven an n x n integer matrix matrix, return true if the matrix is valid. Otherwise, return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Swaps to Group All 1's Together II",
    "problem_id": "2255",
    "frontend_id": "2134",
    "difficulty": "Medium",
    "problem_slug": "minimum-swaps-to-group-all-1s-together-ii",
    "topics": [
      "Array",
      "Sliding Window"
    ],
    "description": "A swap is defined as taking two distinct positions in an array and swapping the values in them.\nA circular array is defined as an array where we consider the first element and the last element to be adjacent.\nGiven a binary circular array nums, return the minimum number of swaps required to group all 1's present in the array together at any location.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Words Obtained After Adding a Letter",
    "problem_id": "2256",
    "frontend_id": "2135",
    "difficulty": "Medium",
    "problem_slug": "count-words-obtained-after-adding-a-letter",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Sorting"
    ],
    "description": "You are given two 0-indexed arrays of strings startWords and targetWords. Each string consists of lowercase English letters only.\nFor each string in targetWords, check if it is possible to choose a string from startWords and perform a conversion operation on it to be equal to that from targetWords.\nThe conversion operation is described in the following two steps:\nReturn the number of strings in targetWords that can be obtained by performing the operations on any string of startWords.\nNote that you will only be verifying if the string in targetWords can be obtained from a string in startWords by performing the operations. The strings in startWords do not actually change during this process.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Earliest Possible Day of Full Bloom",
    "problem_id": "2257",
    "frontend_id": "2136",
    "difficulty": "Hard",
    "problem_slug": "earliest-possible-day-of-full-bloom",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You have n flower seeds. Every seed must be planted first before it can begin to grow, then bloom. Planting a seed takes time and so does the growth of a seed. You are given two 0-indexed integer arrays plantTime and growTime, of length n each:\nFrom the beginning of day 0, you can plant the seeds in any order.\nReturn the earliest possible day where all seeds are blooming.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Divide a String Into Groups of Size k",
    "problem_id": "2260",
    "frontend_id": "2138",
    "difficulty": "Easy",
    "problem_slug": "divide-a-string-into-groups-of-size-k",
    "topics": [
      "String",
      "Simulation"
    ],
    "description": "A string s can be partitioned into groups of size k using the following procedure:\nNote that the partition is done so that after removing the fill character from the last group (if it exists) and concatenating all the groups in order, the resultant string should be s.\nGiven the string s, the size of each group k and the character fill, return a string array denoting the composition of every group s has been divided into, using the above procedure.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Moves to Reach Target Score",
    "problem_id": "1303",
    "frontend_id": "2139",
    "difficulty": "Medium",
    "problem_slug": "minimum-moves-to-reach-target-score",
    "topics": [
      "Math",
      "Greedy"
    ],
    "description": "You are playing a game with integers. You start with the integer 1 and you want to reach the integer target.\nIn one move, you can either:\nYou can use the increment operation any number of times, however, you can only use the double operation at most maxDoubles times.\nGiven the two integers target and maxDoubles, return the minimum number of moves needed to reach target starting with 1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Solving Questions With Brainpower",
    "problem_id": "2262",
    "frontend_id": "2140",
    "difficulty": "Medium",
    "problem_slug": "solving-questions-with-brainpower",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given a 0-indexed 2D integer array questions where questions[i] = [pointsi, brainpoweri].\nThe array describes the questions of an exam, where you have to process the questions in order (i.e., starting from question 0) and make a decision whether to solve or skip each question. Solving question i will earn you pointsi points but you will be unable to solve each of the next brainpoweri questions. If you skip question i, you get to make the decision on the next question.\nReturn the maximum points you can earn for the exam.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Running Time of N Computers",
    "problem_id": "2263",
    "frontend_id": "2141",
    "difficulty": "Hard",
    "problem_slug": "maximum-running-time-of-n-computers",
    "topics": [
      "Array",
      "Binary Search",
      "Greedy",
      "Sorting"
    ],
    "description": "You have n computers. You are given the integer n and a 0-indexed integer array batteries where the ith battery can run a computer for batteries[i] minutes. You are interested in running all n computers simultaneously using the given batteries.\nInitially, you can insert at most one battery into each computer. After that and at any integer time moment, you can remove a battery from a computer and insert another battery any number of times. The inserted battery can be a totally new battery or a battery from another computer. You may assume that the removing and inserting processes take no time.\nNote that the batteries cannot be recharged.\nReturn the maximum number of minutes you can run all the n computers simultaneously.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Cost of Buying Candies With Discount",
    "problem_id": "2248",
    "frontend_id": "2144",
    "difficulty": "Easy",
    "problem_slug": "minimum-cost-of-buying-candies-with-discount",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "A shop is selling candies at a discount. For every two candies sold, the shop gives a third candy for free.\nThe customer can choose any candy to take away for free as long as the cost of the chosen candy is less than or equal to the minimum cost of the two candies bought.\nGiven a 0-indexed integer array cost, where cost[i] denotes the cost of the ith candy, return the minimum cost of buying all the candies.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count the Hidden Sequences",
    "problem_id": "2249",
    "frontend_id": "2145",
    "difficulty": "Medium",
    "problem_slug": "count-the-hidden-sequences",
    "topics": [
      "Array",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed array of n integers differences, which describes the differences between each pair of consecutive integers of a hidden sequence of length (n + 1). More formally, call the hidden sequence hidden, then we have that differences[i] = hidden[i + 1] - hidden[i].\nYou are further given two integers lower and upper that describe the inclusive range of values [lower, upper] that the hidden sequence can contain.\nReturn the number of possible hidden sequences there are. If there are no possible sequences, return 0.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "K Highest Ranked Items Within a Price Range",
    "problem_id": "2250",
    "frontend_id": "2146",
    "difficulty": "Medium",
    "problem_slug": "k-highest-ranked-items-within-a-price-range",
    "topics": [
      "Array",
      "Breadth-First Search",
      "Sorting",
      "Heap (Priority Queue)",
      "Matrix"
    ],
    "description": "You are given a 0-indexed 2D integer array grid of size m x n that represents a map of the items in a shop. The integers in the grid represent the following:\nIt takes 1 step to travel between adjacent grid cells.\nYou are also given integer arrays pricing and start where pricing = [low, high] and start = [row, col] indicates that you start at the position (row, col) and are interested only in items with a price in the range of [low, high] (inclusive). You are further given an integer k.\nYou are interested in the positions of the k highest-ranked items whose prices are within the given price range. The rank is determined by the first of these criteria that is different:\nReturn the k highest-ranked items within the price range sorted by their rank (highest to lowest). If there are fewer than k reachable items within the price range, return all of them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Ways to Divide a Long Corridor",
    "problem_id": "2251",
    "frontend_id": "2147",
    "difficulty": "Hard",
    "problem_slug": "number-of-ways-to-divide-a-long-corridor",
    "topics": [
      "Math",
      "String",
      "Dynamic Programming"
    ],
    "description": "Along a long library corridor, there is a line of seats and decorative plants. You are given a 0-indexed string corridor of length n consisting of letters 'S' and 'P' where each 'S' represents a seat and each 'P' represents a plant.\nOne room divider has already been installed to the left of index 0, and another to the right of index n - 1. Additional room dividers can be installed. For each position between indices i - 1 and i (1 <= i <= n - 1), at most one divider can be installed.\nDivide the corridor into non-overlapping sections, where each section has exactly two seats with any number of plants. There may be multiple ways to perform the division. Two ways are different if there is a position with a room divider installed in the first way but not in the second way.\nReturn the number of ways to divide the corridor. Since the answer may be very large, return it modulo 109 + 7. If there is no way, return 0.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Elements With Strictly Smaller and Greater Elements ",
    "problem_id": "2269",
    "frontend_id": "2148",
    "difficulty": "Easy",
    "problem_slug": "count-elements-with-strictly-smaller-and-greater-elements",
    "topics": [
      "Array",
      "Sorting",
      "Counting"
    ],
    "description": "Given an integer array nums, return the number of elements that have both a strictly smaller and a strictly greater element appear in nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Rearrange Array Elements by Sign",
    "problem_id": "2271",
    "frontend_id": "2149",
    "difficulty": "Medium",
    "problem_slug": "rearrange-array-elements-by-sign",
    "topics": [
      "Array",
      "Two Pointers",
      "Simulation"
    ],
    "description": "You are given a 0-indexed integer array nums of even length consisting of an equal number of positive and negative integers.\nYou should return the array of nums such that the the array follows the given conditions:\nReturn the modified array after rearranging the elements to satisfy the aforementioned conditions.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find All Lonely Numbers in the Array",
    "problem_id": "2270",
    "frontend_id": "2150",
    "difficulty": "Medium",
    "problem_slug": "find-all-lonely-numbers-in-the-array",
    "topics": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "description": "You are given an integer array nums. A number x is lonely when it appears only once, and no adjacent numbers (i.e. x + 1 and x - 1) appear in the array.\nReturn all lonely numbers in nums. You may return the answer in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Good People Based on Statements",
    "problem_id": "2272",
    "frontend_id": "2151",
    "difficulty": "Hard",
    "problem_slug": "maximum-good-people-based-on-statements",
    "topics": [
      "Array",
      "Backtracking",
      "Bit Manipulation",
      "Enumeration"
    ],
    "description": "There are two types of persons:\nYou are given a 0-indexed 2D integer array statements of size n x n that represents the statements made by n people about each other. More specifically, statements[i][j] could be one of the following:\nAdditionally, no person ever makes a statement about themselves. Formally, we have that statements[i][i] = 2 for all 0 <= i < n.\nReturn the maximum number of people who can be good based on the statements made by the n people.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Keep Multiplying Found Values by Two",
    "problem_id": "2274",
    "frontend_id": "2154",
    "difficulty": "Easy",
    "problem_slug": "keep-multiplying-found-values-by-two",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting",
      "Simulation"
    ],
    "description": "You are given an array of integers nums. You are also given an integer original which is the first number that needs to be searched for in nums.\nYou then do the following steps:\nReturn the final value of original.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "All Divisions With the Highest Score of a Binary Array",
    "problem_id": "2261",
    "frontend_id": "2155",
    "difficulty": "Medium",
    "problem_slug": "all-divisions-with-the-highest-score-of-a-binary-array",
    "topics": [
      "Array"
    ],
    "description": "You are given a 0-indexed binary array nums of length n. nums can be divided at index i (where 0 <= i <= n) into two arrays (possibly empty) numsleft and numsright:\nThe division score of an index i is the sum of the number of 0's in numsleft and the number of 1's in numsright.\nReturn all distinct indices that have the highest possible division score. You may return the answer in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Substring With Given Hash Value",
    "problem_id": "2275",
    "frontend_id": "2156",
    "difficulty": "Hard",
    "problem_slug": "find-substring-with-given-hash-value",
    "topics": [
      "String",
      "Sliding Window",
      "Rolling Hash",
      "Hash Function"
    ],
    "description": "The hash of a 0-indexed string s of length k, given integers p and m, is computed using the following function:\nWhere val(s[i]) represents the index of s[i] in the alphabet from val('a') = 1 to val('z') = 26.\nYou are given a string s and the integers power, modulo, k, and hashValue. Return sub, the first substring of s of length k such that hash(sub, power, modulo) == hashValue.\nThe test cases will be generated such that an answer always exists.\nA substring is a contiguous non-empty sequence of characters within a string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Groups of Strings",
    "problem_id": "2276",
    "frontend_id": "2157",
    "difficulty": "Hard",
    "problem_slug": "groups-of-strings",
    "topics": [
      "String",
      "Bit Manipulation",
      "Union Find"
    ],
    "description": "You are given a 0-indexed array of strings words. Each string consists of lowercase English letters only. No letter occurs more than once in any string of words.\nTwo strings s1 and s2 are said to be connected if the set of letters of s2 can be obtained from the set of letters of s1 by any one of the following operations:\nThe array words can be divided into one or more non-intersecting groups. A string belongs to a group if any one of the following is true:\nNote that the strings in words should be grouped in such a manner that a string belonging to a group cannot be connected to a string present in any other group. It can be proved that such an arrangement is always unique.\nReturn an array ans of size 2 where:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Sum of Four Digit Number After Splitting Digits",
    "problem_id": "2264",
    "frontend_id": "2160",
    "difficulty": "Easy",
    "problem_slug": "minimum-sum-of-four-digit-number-after-splitting-digits",
    "topics": [
      "Math",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given a positive integer num consisting of exactly four digits. Split num into two new integers new1 and new2 by using the digits found in num. Leading zeros are allowed in new1 and new2, and all the digits found in num must be used.\nReturn the minimum possible sum of new1 and new2.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Partition Array According to Given Pivot",
    "problem_id": "2265",
    "frontend_id": "2161",
    "difficulty": "Medium",
    "problem_slug": "partition-array-according-to-given-pivot",
    "topics": [
      "Array",
      "Two Pointers",
      "Simulation"
    ],
    "description": "You are given a 0-indexed integer array nums and an integer pivot. Rearrange nums such that the following conditions are satisfied:\nReturn nums after the rearrangement.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Cost to Set Cooking Time",
    "problem_id": "2266",
    "frontend_id": "2162",
    "difficulty": "Medium",
    "problem_slug": "minimum-cost-to-set-cooking-time",
    "topics": [
      "Math",
      "Enumeration"
    ],
    "description": "A generic microwave supports cooking times for:\nTo set the cooking time, you push at most four digits. The microwave normalizes what you push as four digits by prepending zeroes. It interprets the first two digits as the minutes and the last two digits as the seconds. It then adds them up as the cooking time. For example,\nYou are given integers startAt, moveCost, pushCost, and targetSeconds. Initially, your finger is on the digit startAt. Moving the finger above any specific digit costs moveCost units of fatigue. Pushing the digit below the finger once costs pushCost units of fatigue.\nThere can be multiple ways to set the microwave to cook for targetSeconds seconds but you are interested in the way with the minimum cost.\nReturn the minimum cost to set targetSeconds seconds of cooking time.\nRemember that one minute consists of 60 seconds.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Difference in Sums After Removal of Elements",
    "problem_id": "2267",
    "frontend_id": "2163",
    "difficulty": "Hard",
    "problem_slug": "minimum-difference-in-sums-after-removal-of-elements",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Heap (Priority Queue)"
    ],
    "description": "You are given a 0-indexed integer array nums consisting of 3 * n elements.\nYou are allowed to remove any subsequence of elements of size exactly n from nums. The remaining 2 * n elements will be divided into two equal parts:\nThe difference in sums of the two parts is denoted as sumfirst - sumsecond.\nReturn the minimum difference possible between the sums of the two parts after the removal of n elements.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sort Even and Odd Indices Independently",
    "problem_id": "2283",
    "frontend_id": "2164",
    "difficulty": "Easy",
    "problem_slug": "sort-even-and-odd-indices-independently",
    "topics": [
      "Array",
      "Sorting"
    ],
    "description": "You are given a 0-indexed integer array nums. Rearrange the values of nums according to the following rules:\nReturn the array formed after rearranging the values of nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Smallest Value of the Rearranged Number",
    "problem_id": "2284",
    "frontend_id": "2165",
    "difficulty": "Medium",
    "problem_slug": "smallest-value-of-the-rearranged-number",
    "topics": [
      "Math",
      "Sorting"
    ],
    "description": "You are given an integer num. Rearrange the digits of num such that its value is minimized and it does not contain any leading zeros.\nReturn the rearranged number with minimal value.\nNote that the sign of the number does not change after rearranging the digits.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Design Bitset",
    "problem_id": "2285",
    "frontend_id": "2166",
    "difficulty": "Medium",
    "problem_slug": "design-bitset",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Design"
    ],
    "description": "A Bitset is a data structure that compactly stores bits.\nImplement the Bitset class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Minimum Time to Remove All Cars Containing Illegal Goods",
    "problem_id": "2286",
    "frontend_id": "2167",
    "difficulty": "Hard",
    "problem_slug": "minimum-time-to-remove-all-cars-containing-illegal-goods",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given a 0-indexed binary string s which represents a sequence of train cars. s[i] = '0' denotes that the ith car does not contain illegal goods and s[i] = '1' denotes that the ith car does contain illegal goods.\nAs the train conductor, you would like to get rid of all the cars containing illegal goods. You can do any of the following three operations any number of times:\nReturn the minimum time to remove all the cars containing illegal goods.\nNote that an empty sequence of cars is considered to have no cars containing illegal goods.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Operations to Obtain Zero",
    "problem_id": "2288",
    "frontend_id": "2169",
    "difficulty": "Easy",
    "problem_slug": "count-operations-to-obtain-zero",
    "topics": [
      "Math",
      "Simulation"
    ],
    "description": "You are given two non-negative integers num1 and num2.\nIn one operation, if num1 >= num2, you must subtract num2 from num1, otherwise subtract num1 from num2.\nReturn the number of operations required to make either num1 = 0 or num2 = 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Make the Array Alternating",
    "problem_id": "2289",
    "frontend_id": "2170",
    "difficulty": "Medium",
    "problem_slug": "minimum-operations-to-make-the-array-alternating",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Counting"
    ],
    "description": "You are given a 0-indexed array nums consisting of n positive integers.\nThe array nums is called alternating if:\nIn one operation, you can choose an index i and change nums[i] into any positive integer.\nReturn the minimum number of operations required to make the array alternating.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Removing Minimum Number of Magic Beans",
    "problem_id": "2290",
    "frontend_id": "2171",
    "difficulty": "Medium",
    "problem_slug": "removing-minimum-number-of-magic-beans",
    "topics": [
      "Array",
      "Greedy",
      "Sorting",
      "Enumeration",
      "Prefix Sum"
    ],
    "description": "You are given an array of positive integers beans, where each integer represents the number of magic beans found in a particular magic bag.\nRemove any number of beans (possibly none) from each bag such that the number of beans in each remaining non-empty bag (still containing at least one bean) is equal. Once a bean has been removed from a bag, you are not allowed to return it to any of the bags.\nReturn the minimum number of magic beans that you have to remove.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum AND Sum of Array",
    "problem_id": "2291",
    "frontend_id": "2172",
    "difficulty": "Hard",
    "problem_slug": "maximum-and-sum-of-array",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "You are given an integer array nums of length n and an integer numSlots such that 2 * numSlots >= n. There are numSlots slots numbered from 1 to numSlots.\nYou have to place all n integers into the slots such that each slot contains at most two numbers. The AND sum of a given placement is the sum of the bitwise AND of every number with its respective slot number.\nReturn the maximum possible AND sum of nums given numSlots slots.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Equal and Divisible Pairs in an Array",
    "problem_id": "2277",
    "frontend_id": "2176",
    "difficulty": "Easy",
    "problem_slug": "count-equal-and-divisible-pairs-in-an-array",
    "topics": [
      "Array"
    ],
    "description": "Example 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Three Consecutive Integers That Sum to a Given Number",
    "problem_id": "2278",
    "frontend_id": "2177",
    "difficulty": "Medium",
    "problem_slug": "find-three-consecutive-integers-that-sum-to-a-given-number",
    "topics": [
      "Math",
      "Simulation"
    ],
    "description": "Given an integer num, return three consecutive integers (as a sorted array) that sum to num. If num cannot be expressed as the sum of three consecutive integers, return an empty array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Split of Positive Even Integers",
    "problem_id": "2279",
    "frontend_id": "2178",
    "difficulty": "Medium",
    "problem_slug": "maximum-split-of-positive-even-integers",
    "topics": [
      "Math",
      "Backtracking",
      "Greedy"
    ],
    "description": "You are given an integer finalSum. Split it into a sum of a maximum number of unique positive even integers.\nReturn a list of integers that represent a valid split containing a maximum number of integers. If no valid split exists for finalSum, return an empty list. You may return the integers in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Good Triplets in an Array",
    "problem_id": "2280",
    "frontend_id": "2179",
    "difficulty": "Hard",
    "problem_slug": "count-good-triplets-in-an-array",
    "topics": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set"
    ],
    "description": "You are given two 0-indexed arrays nums1 and nums2 of length n, both of which are permutations of [0, 1, ..., n - 1].\nA good triplet is a set of 3 distinct values which are present in increasing order by position both in nums1 and nums2. In other words, if we consider pos1v as the index of the value v in nums1 and pos2v as the index of the value v in nums2, then a good triplet will be a set (x, y, z) where 0 <= x, y, z <= n - 1, such that pos1x < pos1y < pos1z and pos2x < pos2y < pos2z.\nReturn the total number of good triplets.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Integers With Even Digit Sum",
    "problem_id": "2298",
    "frontend_id": "2180",
    "difficulty": "Easy",
    "problem_slug": "count-integers-with-even-digit-sum",
    "topics": [
      "Math",
      "Simulation"
    ],
    "description": "Given a positive integer num, return the number of positive integers less than or equal to num whose digit sums are even.\nThe digit sum of a positive integer is the sum of all its digits.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Merge Nodes in Between Zeros",
    "problem_id": "2299",
    "frontend_id": "2181",
    "difficulty": "Medium",
    "problem_slug": "merge-nodes-in-between-zeros",
    "topics": [
      "Linked List",
      "Simulation"
    ],
    "description": "You are given the head of a linked list, which contains a series of integers separated by 0's. The beginning and end of the linked list will have Node.val == 0.\nFor every two consecutive 0's, merge all the nodes lying in between them into a single node whose value is the sum of all the merged nodes. The modified list should not contain any 0's.\nReturn the head of the modified linked list.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Construct String With Repeat Limit",
    "problem_id": "2300",
    "frontend_id": "2182",
    "difficulty": "Medium",
    "problem_slug": "construct-string-with-repeat-limit",
    "topics": [
      "Hash Table",
      "String",
      "Greedy",
      "Heap (Priority Queue)",
      "Counting"
    ],
    "description": "You are given a string s and an integer repeatLimit. Construct a new string repeatLimitedString using the characters of s such that no letter appears more than repeatLimit times in a row. You do not have to use all characters from s.\nReturn the lexicographically largest repeatLimitedString possible.\nA string a is lexicographically larger than a string b if in the first position where a and b differ, string a has a letter that appears later in the alphabet than the corresponding letter in b. If the first min(a.length, b.length) characters do not differ, then the longer string is the lexicographically larger one.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Array Pairs Divisible by K",
    "problem_id": "2301",
    "frontend_id": "2183",
    "difficulty": "Hard",
    "problem_slug": "count-array-pairs-divisible-by-k",
    "topics": [
      "Array",
      "Math",
      "Number Theory"
    ],
    "description": "Given a 0-indexed integer array nums of length n and an integer k, return the number of pairs (i, j) such that:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Counting Words With a Given Prefix",
    "problem_id": "2292",
    "frontend_id": "2185",
    "difficulty": "Easy",
    "problem_slug": "counting-words-with-a-given-prefix",
    "topics": [
      "Array",
      "String",
      "String Matching"
    ],
    "description": "You are given an array of strings words and a string pref.\nReturn the number of strings in words that contain pref as a prefix.\nA prefix of a string s is any leading contiguous substring of s.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of Steps to Make Two Strings Anagram II",
    "problem_id": "2293",
    "frontend_id": "2186",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-steps-to-make-two-strings-anagram-ii",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "You are given two strings s and t. In one step, you can append any character to either s or t.\nReturn the minimum number of steps to make s and t anagrams of each other.\nAn anagram of a string is a string that contains the same characters with a different (or the same) ordering.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Time to Complete Trips",
    "problem_id": "2294",
    "frontend_id": "2187",
    "difficulty": "Medium",
    "problem_slug": "minimum-time-to-complete-trips",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "You are given an array time where time[i] denotes the time taken by the ith bus to complete one trip.\nEach bus can make multiple trips successively; that is, the next trip can start immediately after completing the current trip. Also, each bus operates independently; that is, the trips of one bus do not influence the trips of any other bus.\nYou are also given an integer totalTrips, which denotes the number of trips all buses should make in total. Return the minimum time required for all buses to complete at least totalTrips trips.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Time to Finish the Race",
    "problem_id": "2295",
    "frontend_id": "2188",
    "difficulty": "Hard",
    "problem_slug": "minimum-time-to-finish-the-race",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given a 0-indexed 2D integer array tires where tires[i] = [fi, ri] indicates that the ith tire can finish its xth successive lap in fi * ri(x-1) seconds.\nYou are also given an integer changeTime and an integer numLaps.\nThe race consists of numLaps laps and you may start the race with any tire. You have an unlimited supply of each tire and after every lap, you may change to any given tire (including the current tire type) if you wait changeTime seconds.\nReturn the minimum time to finish the race.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Most Frequent Number Following Key In an Array",
    "problem_id": "2312",
    "frontend_id": "2190",
    "difficulty": "Easy",
    "problem_slug": "most-frequent-number-following-key-in-an-array",
    "topics": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "description": "You are given a 0-indexed integer array nums. You are also given an integer key, which is present in nums.\nFor every unique integer target in nums, count the number of times target immediately follows an occurrence of key in nums. In other words, count the number of indices i such that:\nReturn the target with the maximum count. The test cases will be generated such that the target with maximum count is unique.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sort the Jumbled Numbers",
    "problem_id": "1333",
    "frontend_id": "2191",
    "difficulty": "Medium",
    "problem_slug": "sort-the-jumbled-numbers",
    "topics": [
      "Array",
      "Sorting"
    ],
    "description": "You are given a 0-indexed integer array mapping which represents the mapping rule of a shuffled decimal system. mapping[i] = j means digit i should be mapped to digit j in this system.\nThe mapped value of an integer is the new integer obtained by replacing each occurrence of digit i in the integer with mapping[i] for all 0 <= i <= 9.\nYou are also given another integer array nums. Return the array nums sorted in non-decreasing order based on the mapped values of its elements.\nNotes:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "All Ancestors of a Node in a Directed Acyclic Graph",
    "problem_id": "1431",
    "frontend_id": "2192",
    "difficulty": "Medium",
    "problem_slug": "all-ancestors-of-a-node-in-a-directed-acyclic-graph",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort"
    ],
    "description": "You are given a positive integer n representing the number of nodes of a Directed Acyclic Graph (DAG). The nodes are numbered from 0 to n - 1 (inclusive).\nYou are also given a 2D integer array edges, where edges[i] = [fromi, toi] denotes that there is a unidirectional edge from fromi to toi in the graph.\nReturn a list answer, where answer[i] is the list of ancestors of the ith node, sorted in ascending order.\nA node u is an ancestor of another node v if u can reach v via a set of edges.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of Moves to Make Palindrome",
    "problem_id": "1356",
    "frontend_id": "2193",
    "difficulty": "Hard",
    "problem_slug": "minimum-number-of-moves-to-make-palindrome",
    "topics": [
      "Two Pointers",
      "String",
      "Greedy",
      "Binary Indexed Tree"
    ],
    "description": "You are given a string s consisting only of lowercase English letters.\nIn one move, you can select any two adjacent characters of s and swap them.\nReturn the minimum number of moves needed to make s a palindrome.\nNote that the input will be generated such that s can always be converted to a palindrome.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Cells in a Range on an Excel Sheet",
    "problem_id": "2304",
    "frontend_id": "2194",
    "difficulty": "Easy",
    "problem_slug": "cells-in-a-range-on-an-excel-sheet",
    "topics": [
      "String"
    ],
    "description": "A cell (r, c) of an excel sheet is represented as a string \"<col><row>\" where:\nYou are given a string s in the format \"<col1><row1>:<col2><row2>\", where <col1> represents the column c1, <row1> represents the row r1, <col2> represents the column c2, and <row2> represents the row r2, such that r1 <= r2 and c1 <= c2.\nReturn the list of cells (x, y) such that r1 <= x <= r2 and c1 <= y <= c2. The cells should be represented as strings in the format mentioned above and be sorted in non-decreasing order first by columns and then by rows.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Append K Integers With Minimal Sum",
    "problem_id": "2305",
    "frontend_id": "2195",
    "difficulty": "Medium",
    "problem_slug": "append-k-integers-with-minimal-sum",
    "topics": [
      "Array",
      "Math",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an integer array nums and an integer k. Append k unique positive integers that do not appear in nums to nums such that the resulting total sum is minimum.\nReturn the sum of the k integers appended to nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Create Binary Tree From Descriptions",
    "problem_id": "2306",
    "frontend_id": "2196",
    "difficulty": "Medium",
    "problem_slug": "create-binary-tree-from-descriptions",
    "topics": [
      "Array",
      "Hash Table",
      "Tree",
      "Binary Tree"
    ],
    "description": "You are given a 2D integer array descriptions where descriptions[i] = [parenti, childi, isLefti] indicates that parenti is the parent of childi in a binary tree of unique values. Furthermore,\nConstruct the binary tree described by descriptions and return its root.\nThe test cases will be generated such that the binary tree is valid.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Replace Non-Coprime Numbers in Array",
    "problem_id": "2307",
    "frontend_id": "2197",
    "difficulty": "Hard",
    "problem_slug": "replace-non-coprime-numbers-in-array",
    "topics": [
      "Array",
      "Math",
      "Stack",
      "Number Theory"
    ],
    "description": "You are given an array of integers nums. Perform the following steps:\nReturn the final modified array. It can be shown that replacing adjacent non-coprime numbers in any arbitrary order will lead to the same result.\nThe test cases are generated such that the values in the final array are less than or equal to 108.\nTwo values x and y are non-coprime if GCD(x, y) > 1 where GCD(x, y) is the Greatest Common Divisor of x and y.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find All K-Distant Indices in an Array",
    "problem_id": "2320",
    "frontend_id": "2200",
    "difficulty": "Easy",
    "problem_slug": "find-all-k-distant-indices-in-an-array",
    "topics": [
      "Array",
      "Two Pointers"
    ],
    "description": "You are given a 0-indexed integer array nums and two integers key and k. A k-distant index is an index i of nums for which there exists at least one index j such that |i - j| <= k and nums[j] == key.\nReturn a list of all k-distant indices sorted in increasing order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Artifacts That Can Be Extracted",
    "problem_id": "1312",
    "frontend_id": "2201",
    "difficulty": "Medium",
    "problem_slug": "count-artifacts-that-can-be-extracted",
    "topics": [
      "Array",
      "Hash Table",
      "Simulation"
    ],
    "description": "There is an n x n 0-indexed grid with some artifacts buried in it. You are given the integer n and a 0-indexed 2D integer array artifacts describing the positions of the rectangular artifacts where artifacts[i] = [r1i, c1i, r2i, c2i] denotes that the ith artifact is buried in the subgrid where:\nYou will excavate some cells of the grid and remove all the mud from them. If the cell has a part of an artifact buried underneath, it will be uncovered. If all the parts of an artifact are uncovered, you can extract it.\nGiven a 0-indexed 2D integer array dig where dig[i] = [ri, ci] indicates that you will excavate the cell (ri, ci), return the number of artifacts that you can extract.\nThe test cases are generated such that:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximize the Topmost Element After K Moves",
    "problem_id": "1346",
    "frontend_id": "2202",
    "difficulty": "Medium",
    "problem_slug": "maximize-the-topmost-element-after-k-moves",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "You are given a 0-indexed integer array nums representing the contents of a pile, where nums[0] is the topmost element of the pile.\nIn one move, you can perform either of the following:\nYou are also given an integer k, which denotes the total number of moves to be made.\nReturn the maximum value of the topmost element of the pile possible after exactly k moves. In case it is not possible to obtain a non-empty pile after k moves, return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Weighted Subgraph With the Required Paths",
    "problem_id": "2321",
    "frontend_id": "2203",
    "difficulty": "Hard",
    "problem_slug": "minimum-weighted-subgraph-with-the-required-paths",
    "topics": [
      "Graph",
      "Shortest Path"
    ],
    "description": "You are given an integer n denoting the number of nodes of a weighted directed graph. The nodes are numbered from 0 to n - 1.\nYou are also given a 2D integer array edges where edges[i] = [fromi, toi, weighti] denotes that there exists a directed edge from fromi to toi with weight weighti.\nLastly, you are given three distinct integers src1, src2, and dest denoting three distinct nodes of the graph.\nReturn the minimum weight of a subgraph of the graph such that it is possible to reach dest from both src1 and src2 via a set of edges of this subgraph. In case such a subgraph does not exist, return -1.\nA subgraph is a graph whose vertices and edges are subsets of the original graph. The weight of a subgraph is the sum of weights of its constituent edges.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Divide Array Into Equal Pairs",
    "problem_id": "2308",
    "frontend_id": "2206",
    "difficulty": "Easy",
    "problem_slug": "divide-array-into-equal-pairs",
    "topics": [
      "Array",
      "Hash Table",
      "Bit Manipulation",
      "Counting"
    ],
    "description": "You are given an integer array nums consisting of 2 * n integers.\nYou need to divide nums into n pairs such that:\nReturn true if nums can be divided into n pairs, otherwise return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximize Number of Subsequences in a String",
    "problem_id": "2309",
    "frontend_id": "2207",
    "difficulty": "Medium",
    "problem_slug": "maximize-number-of-subsequences-in-a-string",
    "topics": [
      "String",
      "Greedy",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed string text and another 0-indexed string pattern of length 2, both of which consist of only lowercase English letters.\nYou can add either pattern[0] or pattern[1] anywhere in text exactly once. Note that the character can be added even at the beginning or at the end of text.\nReturn the maximum number of times pattern can occur as a subsequence of the modified text.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Halve Array Sum",
    "problem_id": "2310",
    "frontend_id": "2208",
    "difficulty": "Medium",
    "problem_slug": "minimum-operations-to-halve-array-sum",
    "topics": [
      "Array",
      "Greedy",
      "Heap (Priority Queue)"
    ],
    "description": "You are given an array nums of positive integers. In one operation, you can choose any number from nums and reduce it to exactly half the number. (Note that you may choose this reduced number in future operations.)\nReturn the minimum number of operations to reduce the sum of nums by at least half.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum White Tiles After Covering With Carpets",
    "problem_id": "2311",
    "frontend_id": "2209",
    "difficulty": "Hard",
    "problem_slug": "minimum-white-tiles-after-covering-with-carpets",
    "topics": [
      "String",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed binary string floor, which represents the colors of tiles on a floor:\nYou are also given numCarpets and carpetLen. You have numCarpets black carpets, each of length carpetLen tiles. Cover the tiles with the given carpets such that the number of white tiles still visible is minimum. Carpets may overlap one another.\nReturn the minimum number of white tiles still visible.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Hills and Valleys in an Array",
    "problem_id": "2316",
    "frontend_id": "2210",
    "difficulty": "Easy",
    "problem_slug": "count-hills-and-valleys-in-an-array",
    "topics": [
      "Array"
    ],
    "description": "You are given a 0-indexed integer array nums. An index i is part of a hill in nums if the closest non-equal neighbors of i are smaller than nums[i]. Similarly, an index i is part of a valley in nums if the closest non-equal neighbors of i are larger than nums[i]. Adjacent indices i and j are part of the same hill or valley if nums[i] == nums[j].\nNote that for an index to be part of a hill or valley, it must have a non-equal neighbor on both the left and right of the index.\nReturn the number of hills and valleys in nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Collisions on a Road",
    "problem_id": "2317",
    "frontend_id": "2211",
    "difficulty": "Medium",
    "problem_slug": "count-collisions-on-a-road",
    "topics": [
      "String",
      "Stack",
      "Simulation"
    ],
    "description": "There are n cars on an infinitely long road. The cars are numbered from 0 to n - 1 from left to right and each car is present at a unique point.\nYou are given a 0-indexed string directions of length n. directions[i] can be either 'L', 'R', or 'S' denoting whether the ith car is moving towards the left, towards the right, or staying at its current point respectively. Each moving car has the same speed.\nThe number of collisions can be calculated as follows:\nAfter a collision, the cars involved can no longer move and will stay at the point where they collided. Other than that, cars cannot change their state or direction of motion.\nReturn the total number of collisions that will happen on the road.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Points in an Archery Competition",
    "problem_id": "2318",
    "frontend_id": "2212",
    "difficulty": "Medium",
    "problem_slug": "maximum-points-in-an-archery-competition",
    "topics": [
      "Array",
      "Backtracking",
      "Bit Manipulation",
      "Enumeration"
    ],
    "description": "Alice and Bob are opponents in an archery competition. The competition has set the following rules:\nYou are given the integer numArrows and an integer array aliceArrows of size 12, which represents the number of arrows Alice shot on each scoring section from 0 to 11. Now, Bob wants to maximize the total number of points he can obtain.\nReturn the array bobArrows which represents the number of arrows Bob shot on each scoring section from 0 to 11. The sum of the values in bobArrows should equal numArrows.\nIf there are multiple ways for Bob to earn the maximum total points, return any one of them.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Substring of One Repeating Character",
    "problem_id": "2319",
    "frontend_id": "2213",
    "difficulty": "Hard",
    "problem_slug": "longest-substring-of-one-repeating-character",
    "topics": [
      "Array",
      "String",
      "Segment Tree",
      "Ordered Set"
    ],
    "description": "You are given a 0-indexed string s. You are also given a 0-indexed string queryCharacters of length k and a 0-indexed array of integer indices queryIndices of length k, both of which are used to describe k queries.\nThe ith query updates the character in s at index queryIndices[i] to the character queryCharacters[i].\nReturn an array lengths of length k where lengths[i] is the length of the longest substring of s consisting of only one repeating character after the ith query is performed.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Difference of Two Arrays",
    "problem_id": "1392",
    "frontend_id": "2215",
    "difficulty": "Easy",
    "problem_slug": "find-the-difference-of-two-arrays",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "Given two 0-indexed integer arrays nums1 and nums2, return a list answer of size 2 where:\nNote that the integers in the lists may be returned in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Deletions to Make Array Beautiful",
    "problem_id": "1355",
    "frontend_id": "2216",
    "difficulty": "Medium",
    "problem_slug": "minimum-deletions-to-make-array-beautiful",
    "topics": [
      "Array",
      "Stack",
      "Greedy"
    ],
    "description": "You are given a 0-indexed integer array nums. The array nums is beautiful if:\nNote that an empty array is considered beautiful.\nYou can delete any number of elements from nums. When you delete an element, all the elements to the right of the deleted element will be shifted one unit to the left to fill the gap created and all the elements to the left of the deleted element will remain unchanged.\nReturn the minimum number of elements to delete from nums to make it beautiful.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Palindrome With Fixed Length",
    "problem_id": "1375",
    "frontend_id": "2217",
    "difficulty": "Medium",
    "problem_slug": "find-palindrome-with-fixed-length",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "Given an integer array queries and a positive integer intLength, return an array answer where answer[i] is either the queries[i]th smallest positive palindrome of length intLength or -1 if no such palindrome exists.\nA palindrome is a number that reads the same backwards and forwards. Palindromes cannot have leading zeros.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Value of K Coins From Piles",
    "problem_id": "1393",
    "frontend_id": "2218",
    "difficulty": "Hard",
    "problem_slug": "maximum-value-of-k-coins-from-piles",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "description": "There are n piles of coins on a table. Each pile consists of a positive number of coins of assorted denominations.\nIn one move, you can choose any coin on top of any pile, remove it, and add it to your wallet.\nGiven a list piles, where piles[i] is a list of integers denoting the composition of the ith pile from top to bottom, and a positive integer k, return the maximum total value of coins you can have in your wallet if you choose exactly k coins optimally.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Bit Flips to Convert Number",
    "problem_id": "2323",
    "frontend_id": "2220",
    "difficulty": "Easy",
    "problem_slug": "minimum-bit-flips-to-convert-number",
    "topics": [
      "Bit Manipulation"
    ],
    "description": "A bit flip of a number x is choosing a bit in the binary representation of x and flipping it from either 0 to 1 or 1 to 0.\nGiven two integers start and goal, return the minimum number of bit flips to convert start to goal.\nExample 1:\nExample 2:\nConstraints:\nNote: This question is the same as 461: Hamming Distance."
  },
  {
    "title": "Find Triangular Sum of an Array",
    "problem_id": "2324",
    "frontend_id": "2221",
    "difficulty": "Medium",
    "problem_slug": "find-triangular-sum-of-an-array",
    "topics": [
      "Array",
      "Math",
      "Simulation",
      "Combinatorics"
    ],
    "description": "You are given a 0-indexed integer array nums, where nums[i] is a digit between 0 and 9 (inclusive).\nThe triangular sum of nums is the value of the only element present in nums after the following process terminates:\nReturn the triangular sum of nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Ways to Select Buildings",
    "problem_id": "2325",
    "frontend_id": "2222",
    "difficulty": "Medium",
    "problem_slug": "number-of-ways-to-select-buildings",
    "topics": [
      "String",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed binary string s which represents the types of buildings along a street where:\nAs a city official, you would like to select 3 buildings for random inspection. However, to ensure variety, no two consecutive buildings out of the selected buildings can be of the same type.\nReturn the number of valid ways to select 3 buildings.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Scores of Built Strings",
    "problem_id": "2326",
    "frontend_id": "2223",
    "difficulty": "Hard",
    "problem_slug": "sum-of-scores-of-built-strings",
    "topics": [
      "String",
      "Binary Search",
      "Rolling Hash",
      "Suffix Array",
      "String Matching",
      "Hash Function"
    ],
    "description": "You are building a string s of length n one character at a time, prepending each new character to the front of the string. The strings are labeled from 1 to n, where the string with length i is labeled si.\nThe score of si is the length of the longest common prefix between si and sn (Note that s == sn).\nGiven the final string s, return the sum of the score of every si.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of Operations to Convert Time",
    "problem_id": "2345",
    "frontend_id": "2224",
    "difficulty": "Easy",
    "problem_slug": "minimum-number-of-operations-to-convert-time",
    "topics": [
      "String",
      "Greedy"
    ],
    "description": "You are given two strings current and correct representing two 24-hour times.\n24-hour times are formatted as \"HH:MM\", where HH is between 00 and 23, and MM is between 00 and 59. The earliest 24-hour time is 00:00, and the latest is 23:59.\nIn one operation you can increase the time current by 1, 5, 15, or 60 minutes. You can perform this operation any number of times.\nReturn the minimum number of operations needed to convert current to correct.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Players With Zero or One Losses",
    "problem_id": "1354",
    "frontend_id": "2225",
    "difficulty": "Medium",
    "problem_slug": "find-players-with-zero-or-one-losses",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting",
      "Counting"
    ],
    "description": "You are given an integer array matches where matches[i] = [winneri, loseri] indicates that the player winneri defeated player loseri in a match.\nReturn a list answer of size 2 where:\nThe values in the two lists should be returned in increasing order.\nNote:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Candies Allocated to K Children",
    "problem_id": "1335",
    "frontend_id": "2226",
    "difficulty": "Medium",
    "problem_slug": "maximum-candies-allocated-to-k-children",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "You are given a 0-indexed integer array candies. Each element in the array denotes a pile of candies of size candies[i]. You can divide each pile into any number of sub piles, but you cannot merge two piles together.\nYou are also given an integer k. You should allocate piles of candies to k children such that each child gets the same number of candies. Each child can be allocated candies from only one pile of candies and some piles of candies may go unused.\nReturn the maximum number of candies each child can get.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Encrypt and Decrypt Strings",
    "problem_id": "1433",
    "frontend_id": "2227",
    "difficulty": "Hard",
    "problem_slug": "encrypt-and-decrypt-strings",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Design",
      "Trie"
    ],
    "description": "You are given a character array keys containing unique characters and a string array values containing strings of length 2. You are also given another string array dictionary that contains all permitted original strings after decryption. You should implement a data structure that can encrypt or decrypt a 0-indexed string.\nA string is encrypted with the following process:\nNote that in case a character of the string is not present in keys, the encryption process cannot be carried out, and an empty string \"\" is returned.\nA string is decrypted with the following process:\nImplement the Encrypter class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Largest Number After Digit Swaps by Parity",
    "problem_id": "2327",
    "frontend_id": "2231",
    "difficulty": "Easy",
    "problem_slug": "largest-number-after-digit-swaps-by-parity",
    "topics": [
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given a positive integer num. You may swap any two digits of num that have the same parity (i.e. both odd digits or both even digits).\nReturn the largest possible value of num after any number of swaps.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimize Result by Adding Parentheses to Expression",
    "problem_id": "2328",
    "frontend_id": "2232",
    "difficulty": "Medium",
    "problem_slug": "minimize-result-by-adding-parentheses-to-expression",
    "topics": [
      "String",
      "Enumeration"
    ],
    "description": "You are given a 0-indexed string expression of the form \"<num1>+<num2>\" where <num1> and <num2> represent positive integers.\nAdd a pair of parentheses to expression such that after the addition of parentheses, expression is a valid mathematical expression and evaluates to the smallest possible value. The left parenthesis must be added to the left of '+' and the right parenthesis must be added to the right of '+'.\nReturn expression after adding a pair of parentheses such that expression evaluates to the smallest possible value. If there are multiple answers that yield the same result, return any of them.\nThe input has been generated such that the original value of expression, and the value of expression after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Product After K Increments",
    "problem_id": "2329",
    "frontend_id": "2233",
    "difficulty": "Medium",
    "problem_slug": "maximum-product-after-k-increments",
    "topics": [
      "Array",
      "Greedy",
      "Heap (Priority Queue)"
    ],
    "description": "You are given an array of non-negative integers nums and an integer k. In one operation, you may choose any element from nums and increment it by 1.\nReturn the maximum product of nums after at most k operations. Since the answer may be very large, return it modulo 109 + 7. Note that you should maximize the product before taking the modulo.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Total Beauty of the Gardens",
    "problem_id": "2330",
    "frontend_id": "2234",
    "difficulty": "Hard",
    "problem_slug": "maximum-total-beauty-of-the-gardens",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Greedy",
      "Sorting",
      "Enumeration",
      "Prefix Sum"
    ],
    "description": "Alice is a caretaker of n gardens and she wants to plant flowers to maximize the total beauty of all her gardens.\nYou are given a 0-indexed integer array flowers of size n, where flowers[i] is the number of flowers already planted in the ith garden. Flowers that are already planted cannot be removed. You are then given another integer newFlowers, which is the maximum number of flowers that Alice can additionally plant. You are also given the integers target, full, and partial.\nA garden is considered complete if it has at least target flowers. The total beauty of the gardens is then determined as the sum of the following:\nReturn the maximum total beauty that Alice can obtain after planting at most newFlowers flowers.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Add Two Integers",
    "problem_id": "2383",
    "frontend_id": "2235",
    "difficulty": "Easy",
    "problem_slug": "add-two-integers",
    "topics": [
      "Math"
    ],
    "description": "Example 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Root Equals Sum of Children",
    "problem_id": "2384",
    "frontend_id": "2236",
    "difficulty": "Easy",
    "problem_slug": "root-equals-sum-of-children",
    "topics": [
      "Tree",
      "Binary Tree"
    ],
    "description": "You are given the root of a binary tree that consists of exactly 3 nodes: the root, its left child, and its right child.\nReturn true if the value of the root is equal to the sum of the values of its two children, or false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Closest Number to Zero",
    "problem_id": "2350",
    "frontend_id": "2239",
    "difficulty": "Easy",
    "problem_slug": "find-closest-number-to-zero",
    "topics": [
      "Array"
    ],
    "description": "Given an integer array nums of size n, return the number with the value closest to 0 in nums. If there are multiple answers, return the number with the largest value.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Ways to Buy Pens and Pencils",
    "problem_id": "2351",
    "frontend_id": "2240",
    "difficulty": "Medium",
    "problem_slug": "number-of-ways-to-buy-pens-and-pencils",
    "topics": [
      "Math",
      "Enumeration"
    ],
    "description": "You are given an integer total indicating the amount of money you have. You are also given two integers cost1 and cost2 indicating the price of a pen and pencil respectively. You can spend part or all of your money to buy multiple quantities (or none) of each kind of writing utensil.\nReturn the number of distinct ways you can buy some number of pens and pencils.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Design an ATM Machine",
    "problem_id": "2352",
    "frontend_id": "2241",
    "difficulty": "Medium",
    "problem_slug": "design-an-atm-machine",
    "topics": [
      "Array",
      "Greedy",
      "Design"
    ],
    "description": "There is an ATM machine that stores banknotes of 5 denominations: 20, 50, 100, 200, and 500 dollars. Initially the ATM is empty. The user can use the machine to deposit or withdraw any amount of money.\nWhen withdrawing, the machine prioritizes using banknotes of larger values.\nImplement the ATM class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Maximum Score of a Node Sequence",
    "problem_id": "2353",
    "frontend_id": "2242",
    "difficulty": "Hard",
    "problem_slug": "maximum-score-of-a-node-sequence",
    "topics": [
      "Array",
      "Graph",
      "Sorting",
      "Enumeration"
    ],
    "description": "There is an undirected graph with n nodes, numbered from 0 to n - 1.\nYou are given a 0-indexed integer array scores of length n where scores[i] denotes the score of node i. You are also given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.\nA node sequence is valid if it meets the following conditions:\nThe score of a node sequence is defined as the sum of the scores of the nodes in the sequence.\nReturn the maximum score of a valid node sequence with a length of 4. If no such sequence exists, return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Calculate Digit Sum of a String",
    "problem_id": "2361",
    "frontend_id": "2243",
    "difficulty": "Easy",
    "problem_slug": "calculate-digit-sum-of-a-string",
    "topics": [
      "String",
      "Simulation"
    ],
    "description": "You are given a string s consisting of digits and an integer k.\nA round can be completed if the length of s is greater than k. In one round, do the following:\nReturn s after all rounds have been completed.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Rounds to Complete All Tasks",
    "problem_id": "2362",
    "frontend_id": "2244",
    "difficulty": "Medium",
    "problem_slug": "minimum-rounds-to-complete-all-tasks",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Counting"
    ],
    "description": "You are given a 0-indexed integer array tasks, where tasks[i] represents the difficulty level of a task. In each round, you can complete either 2 or 3 tasks of the same difficulty level.\nReturn the minimum rounds required to complete all the tasks, or -1 if it is not possible to complete all the tasks.\nExample 1:\nExample 2:\nConstraints:\nNote: This question is the same as 2870: Minimum Number of Operations to Make Array Empty."
  },
  {
    "title": "Maximum Trailing Zeros in a Cornered Path",
    "problem_id": "2363",
    "frontend_id": "2245",
    "difficulty": "Medium",
    "problem_slug": "maximum-trailing-zeros-in-a-cornered-path",
    "topics": [
      "Array",
      "Matrix",
      "Prefix Sum"
    ],
    "description": "You are given a 2D integer array grid of size m x n, where each cell contains a positive integer.\nA cornered path is defined as a set of adjacent cells with at most one turn. More specifically, the path should exclusively move either horizontally or vertically up to the turn (if there is one), without returning to a previously visited cell. After the turn, the path will then move exclusively in the alternate direction: move vertically if it moved horizontally, and vice versa, also without returning to a previously visited cell.\nThe product of a path is defined as the product of all the values in the path.\nReturn the maximum number of trailing zeros in the product of a cornered path found in grid.\nNote:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Path With Different Adjacent Characters",
    "problem_id": "2364",
    "frontend_id": "2246",
    "difficulty": "Hard",
    "problem_slug": "longest-path-with-different-adjacent-characters",
    "topics": [
      "Array",
      "String",
      "Tree",
      "Depth-First Search",
      "Graph",
      "Topological Sort"
    ],
    "description": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to node i.\nReturn the length of the longest path in the tree such that no pair of adjacent nodes on the path have the same character assigned to them.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Intersection of Multiple Arrays",
    "problem_id": "2331",
    "frontend_id": "2248",
    "difficulty": "Easy",
    "problem_slug": "intersection-of-multiple-arrays",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting",
      "Counting"
    ],
    "description": "Example 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Lattice Points Inside a Circle",
    "problem_id": "2332",
    "frontend_id": "2249",
    "difficulty": "Medium",
    "problem_slug": "count-lattice-points-inside-a-circle",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Geometry",
      "Enumeration"
    ],
    "description": "Given a 2D integer array circles where circles[i] = [xi, yi, ri] represents the center (xi, yi) and radius ri of the ith circle drawn on a grid, return the number of lattice points that are present inside at least one circle.\nNote:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Number of Rectangles Containing Each Point",
    "problem_id": "2333",
    "frontend_id": "2250",
    "difficulty": "Medium",
    "problem_slug": "count-number-of-rectangles-containing-each-point",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Binary Indexed Tree",
      "Sorting"
    ],
    "description": "You are given a 2D integer array rectangles where rectangles[i] = [li, hi] indicates that ith rectangle has a length of li and a height of hi. You are also given a 2D integer array points where points[j] = [xj, yj] is a point with coordinates (xj, yj).\nThe ith rectangle has its bottom-left corner point at the coordinates (0, 0) and its top-right corner point at (li, hi).\nReturn an integer array count of length points.length where count[j] is the number of rectangles that contain the jth point.\nThe ith rectangle contains the jth point if 0 <= xj <= li and 0 <= yj <= hi. Note that points that lie on the edges of a rectangle are also considered to be contained by that rectangle.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Flowers in Full Bloom",
    "problem_id": "2334",
    "frontend_id": "2251",
    "difficulty": "Hard",
    "problem_slug": "number-of-flowers-in-full-bloom",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Sorting",
      "Prefix Sum",
      "Ordered Set"
    ],
    "description": "You are given a 0-indexed 2D integer array flowers, where flowers[i] = [starti, endi] means the ith flower will be in full bloom from starti to endi (inclusive). You are also given a 0-indexed integer array people of size n, where people[i] is the time that the ith person will arrive to see the flowers.\nReturn an integer array answer of size n, where answer[i] is the number of flowers that are in full bloom when the ith person arrives.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Prefixes of a Given String",
    "problem_id": "2341",
    "frontend_id": "2255",
    "difficulty": "Easy",
    "problem_slug": "count-prefixes-of-a-given-string",
    "topics": [
      "Array",
      "String"
    ],
    "description": "You are given a string array words and a string s, where words[i] and s comprise only of lowercase English letters.\nReturn the number of strings in words that are a prefix of s.\nA prefix of a string is a substring that occurs at the beginning of the string. A substring is a contiguous sequence of characters within a string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Average Difference",
    "problem_id": "2342",
    "frontend_id": "2256",
    "difficulty": "Medium",
    "problem_slug": "minimum-average-difference",
    "topics": [
      "Array",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed integer array nums of length n.\nThe average difference of the index i is the absolute difference between the average of the first i + 1 elements of nums and the average of the last n - i - 1 elements. Both averages should be rounded down to the nearest integer.\nReturn the index with the minimum average difference. If there are multiple such indices, return the smallest one.\nNote:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Unguarded Cells in the Grid",
    "problem_id": "2343",
    "frontend_id": "2257",
    "difficulty": "Medium",
    "problem_slug": "count-unguarded-cells-in-the-grid",
    "topics": [
      "Array",
      "Matrix",
      "Simulation"
    ],
    "description": "You are given two integers m and n representing a 0-indexed m x n grid. You are also given two 2D integer arrays guards and walls where guards[i] = [rowi, coli] and walls[j] = [rowj, colj] represent the positions of the ith guard and jth wall respectively.\nA guard can see every cell in the four cardinal directions (north, east, south, or west) starting from their position unless obstructed by a wall or another guard. A cell is guarded if there is at least one guard that can see it.\nReturn the number of unoccupied cells that are not guarded.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Escape the Spreading Fire",
    "problem_id": "2344",
    "frontend_id": "2258",
    "difficulty": "Hard",
    "problem_slug": "escape-the-spreading-fire",
    "topics": [
      "Array",
      "Binary Search",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "You are given a 0-indexed 2D integer array grid of size m x n which represents a field. Each cell has one of three values:\nYou are situated in the top-left cell, (0, 0), and you want to travel to the safehouse at the bottom-right cell, (m - 1, n - 1). Every minute, you may move to an adjacent grass cell. After your move, every fire cell will spread to all adjacent cells that are not walls.\nReturn the maximum number of minutes that you can stay in your initial position before moving while still safely reaching the safehouse. If this is impossible, return -1. If you can always reach the safehouse regardless of the minutes stayed, return 109.\nNote that even if the fire spreads to the safehouse immediately after you have reached it, it will be counted as safely reaching the safehouse.\nA cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Remove Digit From Number to Maximize Result",
    "problem_id": "2337",
    "frontend_id": "2259",
    "difficulty": "Easy",
    "problem_slug": "remove-digit-from-number-to-maximize-result",
    "topics": [
      "String",
      "Greedy",
      "Enumeration"
    ],
    "description": "You are given a string number representing a positive integer and a character digit.\nReturn the resulting string after removing exactly one occurrence of digit from number such that the value of the resulting string in decimal form is maximized. The test cases are generated such that digit occurs at least once in number.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Consecutive Cards to Pick Up",
    "problem_id": "2338",
    "frontend_id": "2260",
    "difficulty": "Medium",
    "problem_slug": "minimum-consecutive-cards-to-pick-up",
    "topics": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "description": "You are given an integer array cards where cards[i] represents the value of the ith card. A pair of cards are matching if the cards have the same value.\nReturn the minimum number of consecutive cards you have to pick up to have a pair of matching cards among the picked cards. If it is impossible to have matching cards, return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "K Divisible Elements Subarrays",
    "problem_id": "2339",
    "frontend_id": "2261",
    "difficulty": "Medium",
    "problem_slug": "k-divisible-elements-subarrays",
    "topics": [
      "Array",
      "Hash Table",
      "Trie",
      "Rolling Hash",
      "Hash Function",
      "Enumeration"
    ],
    "description": "Given an integer array nums and two integers k and p, return the number of distinct subarrays, which have at most k elements that are divisible by p.\nTwo arrays nums1 and nums2 are said to be distinct if:\nA subarray is defined as a non-empty contiguous sequence of elements in an array.\nExample 1:\nExample 2:\nConstraints:\nFollow up:\nCan you solve this problem in O(n2) time complexity?"
  },
  {
    "title": "Total Appeal of A String",
    "problem_id": "2340",
    "frontend_id": "2262",
    "difficulty": "Hard",
    "problem_slug": "total-appeal-of-a-string",
    "topics": [
      "Hash Table",
      "String",
      "Dynamic Programming"
    ],
    "description": "The appeal of a string is the number of distinct characters found in the string.\nGiven a string s, return the total appeal of all of its substrings.\nA substring is a contiguous sequence of characters within a string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Largest 3-Same-Digit Number in String",
    "problem_id": "2346",
    "frontend_id": "2264",
    "difficulty": "Easy",
    "problem_slug": "largest-3-same-digit-number-in-string",
    "topics": [
      "String"
    ],
    "description": "You are given a string num representing a large integer. An integer is good if it meets the following conditions:\nReturn the maximum good integer as a string or an empty string \"\" if no such integer exists.\nNote:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Nodes Equal to Average of Subtree",
    "problem_id": "2347",
    "frontend_id": "2265",
    "difficulty": "Medium",
    "problem_slug": "count-nodes-equal-to-average-of-subtree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, return the number of nodes where the value of the node is equal to the average of the values in its subtree.\nNote:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Number of Texts",
    "problem_id": "2348",
    "frontend_id": "2266",
    "difficulty": "Medium",
    "problem_slug": "count-number-of-texts",
    "topics": [
      "Hash Table",
      "Math",
      "String",
      "Dynamic Programming"
    ],
    "description": "Alice is texting Bob using her phone. The mapping of digits to letters is shown in the figure below.\nIn order to add a letter, Alice has to press the key of the corresponding digit i times, where i is the position of the letter in the key.\nHowever, due to an error in transmission, Bob did not receive Alice's text message but received a string of pressed keys instead.\nGiven a string pressedKeys representing the string received by Bob, return the total number of possible text messages Alice could have sent.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": " Check if There Is a Valid Parentheses String Path",
    "problem_id": "2349",
    "frontend_id": "2267",
    "difficulty": "Hard",
    "problem_slug": "check-if-there-is-a-valid-parentheses-string-path",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "A parentheses string is a non-empty string consisting only of '(' and ')'. It is valid if any of the following conditions is true:\nYou are given an m x n matrix of parentheses grid. A valid parentheses string path in the grid is a path satisfying all of the following conditions:\nReturn true if there exists a valid parentheses string path in the grid. Otherwise, return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the K-Beauty of a Number",
    "problem_id": "1430",
    "frontend_id": "2269",
    "difficulty": "Easy",
    "problem_slug": "find-the-k-beauty-of-a-number",
    "topics": [
      "Math",
      "String",
      "Sliding Window"
    ],
    "description": "The k-beauty of an integer num is defined as the number of substrings of num when it is read as a string that meet the following conditions:\nGiven integers num and k, return the k-beauty of num.\nNote:\nA substring is a contiguous sequence of characters in a string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Ways to Split Array",
    "problem_id": "2358",
    "frontend_id": "2270",
    "difficulty": "Medium",
    "problem_slug": "number-of-ways-to-split-array",
    "topics": [
      "Array",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed integer array nums of length n.\nnums contains a valid split at index i if the following are true:\nReturn the number of valid splits in nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum White Tiles Covered by a Carpet",
    "problem_id": "2359",
    "frontend_id": "2271",
    "difficulty": "Medium",
    "problem_slug": "maximum-white-tiles-covered-by-a-carpet",
    "topics": [
      "Array",
      "Binary Search",
      "Greedy",
      "Sliding Window",
      "Sorting",
      "Prefix Sum"
    ],
    "description": "You are given a 2D integer array tiles where tiles[i] = [li, ri] represents that every tile j in the range li <= j <= ri is colored white.\nYou are also given an integer carpetLen, the length of a single carpet that can be placed anywhere.\nReturn the maximum number of white tiles that can be covered by the carpet.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Substring With Largest Variance",
    "problem_id": "2360",
    "frontend_id": "2272",
    "difficulty": "Hard",
    "problem_slug": "substring-with-largest-variance",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "The variance of a string is defined as the largest difference between the number of occurrences of any 2 characters present in the string. Note the two characters may or may not be the same.\nGiven a string s consisting of lowercase English letters only, return the largest variance possible among all substrings of s.\nA substring is a contiguous sequence of characters within a string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Resultant Array After Removing Anagrams",
    "problem_id": "1353",
    "frontend_id": "2273",
    "difficulty": "Easy",
    "problem_slug": "find-resultant-array-after-removing-anagrams",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Sorting"
    ],
    "description": "You are given a 0-indexed string array words, where words[i] consists of lowercase English letters.\nIn one operation, select any index i such that 0 < i < words.length and words[i - 1] and words[i] are anagrams, and delete words[i] from words. Keep performing this operation as long as you can select an index that satisfies the conditions.\nReturn words after performing all operations. It can be shown that selecting the indices for each operation in any arbitrary order will lead to the same result.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase using all the original letters exactly once. For example, \"dacb\" is an anagram of \"abdc\".\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Consecutive Floors Without Special Floors",
    "problem_id": "2355",
    "frontend_id": "2274",
    "difficulty": "Medium",
    "problem_slug": "maximum-consecutive-floors-without-special-floors",
    "topics": [
      "Array",
      "Sorting"
    ],
    "description": "Alice manages a company and has rented some floors of a building as office space. Alice has decided some of these floors should be special floors, used for relaxation only.\nYou are given two integers bottom and top, which denote that Alice has rented all the floors from bottom to top (inclusive). You are also given the integer array special, where special[i] denotes a special floor that Alice has designated for relaxation.\nReturn the maximum number of consecutive floors without a special floor.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Largest Combination With Bitwise AND Greater Than Zero",
    "problem_id": "2356",
    "frontend_id": "2275",
    "difficulty": "Medium",
    "problem_slug": "largest-combination-with-bitwise-and-greater-than-zero",
    "topics": [
      "Array",
      "Hash Table",
      "Bit Manipulation",
      "Counting"
    ],
    "description": "The bitwise AND of an array nums is the bitwise AND of all integers in nums.\nYou are given an array of positive integers candidates. Compute the bitwise AND for all possible combinations of elements in the candidates array.\nReturn the size of the largest combination of candidates with a bitwise AND greater than 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Integers in Intervals",
    "problem_id": "2357",
    "frontend_id": "2276",
    "difficulty": "Hard",
    "problem_slug": "count-integers-in-intervals",
    "topics": [
      "Design",
      "Segment Tree",
      "Ordered Set"
    ],
    "description": "Given an empty set of intervals, implement a data structure that can:\nImplement the CountIntervals class:\nNote that an interval [left, right] denotes all the integers x where left <= x <= right.\nExample 1:\nConstraints:"
  },
  {
    "title": "Percentage of Letter in String",
    "problem_id": "2365",
    "frontend_id": "2278",
    "difficulty": "Easy",
    "problem_slug": "percentage-of-letter-in-string",
    "topics": [
      "String"
    ],
    "description": "Given a string s and a character letter, return the percentage of characters in s that equal letter rounded down to the nearest whole percent.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Bags With Full Capacity of Rocks",
    "problem_id": "2366",
    "frontend_id": "2279",
    "difficulty": "Medium",
    "problem_slug": "maximum-bags-with-full-capacity-of-rocks",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You have n bags numbered from 0 to n - 1. You are given two 0-indexed integer arrays capacity and rocks. The ith bag can hold a maximum of capacity[i] rocks and currently contains rocks[i] rocks. You are also given an integer additionalRocks, the number of additional rocks you can place in any of the bags.\nReturn the maximum number of bags that could have full capacity after placing the additional rocks in some bags.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Lines to Represent a Line Chart",
    "problem_id": "2367",
    "frontend_id": "2280",
    "difficulty": "Medium",
    "problem_slug": "minimum-lines-to-represent-a-line-chart",
    "topics": [
      "Array",
      "Math",
      "Geometry",
      "Sorting",
      "Number Theory"
    ],
    "description": "You are given a 2D integer array stockPrices where stockPrices[i] = [dayi, pricei] indicates the price of the stock on day dayi is pricei. A line chart is created from the array by plotting the points on an XY plane with the X-axis representing the day and the Y-axis representing the price and connecting adjacent points. One such example is shown below:\nReturn the minimum number of lines needed to represent the line chart.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Total Strength of Wizards",
    "problem_id": "2368",
    "frontend_id": "2281",
    "difficulty": "Hard",
    "problem_slug": "sum-of-total-strength-of-wizards",
    "topics": [
      "Array",
      "Stack",
      "Monotonic Stack",
      "Prefix Sum"
    ],
    "description": "As the ruler of a kingdom, you have an army of wizards at your command.\nYou are given a 0-indexed integer array strength, where strength[i] denotes the strength of the ith wizard. For a contiguous group of wizards (i.e. the wizards' strengths form a subarray of strength), the total strength is defined as the product of the following two values:\nReturn the sum of the total strengths of all contiguous groups of wizards. Since the answer may be very large, return it modulo 109 + 7.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check if Number Has Equal Digit Count and Digit Value",
    "problem_id": "2377",
    "frontend_id": "2283",
    "difficulty": "Easy",
    "problem_slug": "check-if-number-has-equal-digit-count-and-digit-value",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "You are given a 0-indexed string num of length n consisting of digits.\nReturn true if for every index i in the range 0 <= i < n, the digit i occurs num[i] times in num, otherwise return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sender With Largest Word Count",
    "problem_id": "2378",
    "frontend_id": "2284",
    "difficulty": "Medium",
    "problem_slug": "sender-with-largest-word-count",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "You have a chat log of n messages. You are given two string arrays messages and senders where messages[i] is a message sent by senders[i].\nA message is list of words that are separated by a single space with no leading or trailing spaces. The word count of a sender is the total number of words sent by the sender. Note that a sender may send more than one message.\nReturn the sender with the largest word count. If there is more than one sender with the largest word count, return the one with the lexicographically largest name.\nNote:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Total Importance of Roads",
    "problem_id": "2379",
    "frontend_id": "2285",
    "difficulty": "Medium",
    "problem_slug": "maximum-total-importance-of-roads",
    "topics": [
      "Greedy",
      "Graph",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given an integer n denoting the number of cities in a country. The cities are numbered from 0 to n - 1.\nYou are also given a 2D integer array roads where roads[i] = [ai, bi] denotes that there exists a bidirectional road connecting cities ai and bi.\nYou need to assign each city with an integer value from 1 to n, where each value can only be used once. The importance of a road is then defined as the sum of the values of the two cities it connects.\nReturn the maximum total importance of all roads possible after assigning the values optimally.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Booking Concert Tickets in Groups",
    "problem_id": "2380",
    "frontend_id": "2286",
    "difficulty": "Hard",
    "problem_slug": "booking-concert-tickets-in-groups",
    "topics": [
      "Binary Search",
      "Design",
      "Binary Indexed Tree",
      "Segment Tree"
    ],
    "description": "A concert hall has n rows numbered from 0 to n - 1, each with m seats, numbered from 0 to m - 1. You need to design a ticketing system that can allocate seats in the following cases:\nNote that the spectators are very picky. Hence:\nImplement the BookMyShow class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Rearrange Characters to Make Target String",
    "problem_id": "2372",
    "frontend_id": "2287",
    "difficulty": "Easy",
    "problem_slug": "rearrange-characters-to-make-target-string",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "You are given two 0-indexed strings s and target. You can take some letters from s and rearrange them to form new strings.\nReturn the maximum number of copies of target that can be formed by taking letters from s and rearranging them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nNote: This question is the same as  1189: Maximum Number of Balloons."
  },
  {
    "title": "Apply Discount to Prices",
    "problem_id": "2373",
    "frontend_id": "2288",
    "difficulty": "Medium",
    "problem_slug": "apply-discount-to-prices",
    "topics": [
      "String"
    ],
    "description": "A sentence is a string of single-space separated words where each word can contain digits, lowercase letters, and the dollar sign '$'. A word represents a price if it is a sequence of digits preceded by a dollar sign.\nYou are given a string sentence representing a sentence and an integer discount. For each word representing a price, apply a discount of discount% on the price and update the word in the sentence. All updated prices should be represented with exactly two decimal places.\nReturn a string representing the modified sentence.\nNote that all prices will contain at most 10 digits.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Steps to Make Array Non-decreasing",
    "problem_id": "2374",
    "frontend_id": "2289",
    "difficulty": "Medium",
    "problem_slug": "steps-to-make-array-non-decreasing",
    "topics": [
      "Array",
      "Linked List",
      "Stack",
      "Monotonic Stack"
    ],
    "description": "You are given a 0-indexed integer array nums. In one step, remove all elements nums[i] where nums[i - 1] > nums[i] for all 0 < i < nums.length.\nReturn the number of steps performed until nums becomes a non-decreasing array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Obstacle Removal to Reach Corner",
    "problem_id": "2375",
    "frontend_id": "2290",
    "difficulty": "Hard",
    "problem_slug": "minimum-obstacle-removal-to-reach-corner",
    "topics": [
      "Array",
      "Breadth-First Search",
      "Graph",
      "Heap (Priority Queue)",
      "Matrix",
      "Shortest Path"
    ],
    "description": "You are given a 0-indexed 2D integer array grid of size m x n. Each cell has one of two values:\nYou can move up, down, left, or right from and to an empty cell.\nReturn the minimum number of obstacles to remove so you can move from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Min Max Game",
    "problem_id": "2386",
    "frontend_id": "2293",
    "difficulty": "Easy",
    "problem_slug": "min-max-game",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "You are given a 0-indexed integer array nums whose length is a power of 2.\nApply the following algorithm on nums:\nReturn the last number that remains in nums after applying the algorithm.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Partition Array Such That Maximum Difference Is K",
    "problem_id": "2387",
    "frontend_id": "2294",
    "difficulty": "Medium",
    "problem_slug": "partition-array-such-that-maximum-difference-is-k",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an integer array nums and an integer k. You may partition nums into one or more subsequences such that each element in nums appears in exactly one of the subsequences.\nReturn the minimum number of subsequences needed such that the difference between the maximum and minimum values in each subsequence is at most k.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Replace Elements in an Array",
    "problem_id": "2388",
    "frontend_id": "2295",
    "difficulty": "Medium",
    "problem_slug": "replace-elements-in-an-array",
    "topics": [
      "Array",
      "Hash Table",
      "Simulation"
    ],
    "description": "You are given a 0-indexed array nums that consists of n distinct positive integers. Apply m operations to this array, where in the ith operation you replace the number operations[i][0] with operations[i][1].\nIt is guaranteed that in the ith operation:\nReturn the array obtained after applying all the operations.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Design a Text Editor",
    "problem_id": "2389",
    "frontend_id": "2296",
    "difficulty": "Hard",
    "problem_slug": "design-a-text-editor",
    "topics": [
      "Linked List",
      "String",
      "Stack",
      "Design",
      "Simulation",
      "Doubly-Linked List"
    ],
    "description": "Design a text editor with a cursor that can do the following:\nWhen deleting text, only characters to the left of the cursor will be deleted. The cursor will also remain within the actual text and cannot be moved beyond it. More formally, we have that 0 <= cursor.position <= currentText.length always holds.\nImplement the TextEditor class:\nExample 1:\nConstraints:\nFollow-up: Could you find a solution with time complexity of O(k) per call?"
  },
  {
    "title": "Strong Password Checker II",
    "problem_id": "2391",
    "frontend_id": "2299",
    "difficulty": "Easy",
    "problem_slug": "strong-password-checker-ii",
    "topics": [
      "String"
    ],
    "description": "A password is said to be strong if it satisfies all the following criteria:\nGiven a string password, return true if it is a strong password. Otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Successful Pairs of Spells and Potions",
    "problem_id": "2392",
    "frontend_id": "2300",
    "difficulty": "Medium",
    "problem_slug": "successful-pairs-of-spells-and-potions",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "description": "You are given two positive integer arrays spells and potions, of length n and m respectively, where spells[i] represents the strength of the ith spell and potions[j] represents the strength of the jth potion.\nYou are also given an integer success. A spell and potion pair is considered successful if the product of their strengths is at least success.\nReturn an integer array pairs of length n where pairs[i] is the number of potions that will form a successful pair with the ith spell.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Match Substring After Replacement",
    "problem_id": "2393",
    "frontend_id": "2301",
    "difficulty": "Hard",
    "problem_slug": "match-substring-after-replacement",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "String Matching"
    ],
    "description": "You are given two strings s and sub. You are also given a 2D character array mappings where mappings[i] = [oldi, newi] indicates that you may perform the following operation any number of times:\nEach character in sub cannot be replaced more than once.\nReturn true if it is possible to make sub a substring of s by replacing zero or more characters according to mappings. Otherwise, return false.\nA substring is a contiguous non-empty sequence of characters within a string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Subarrays With Score Less Than K",
    "problem_id": "2394",
    "frontend_id": "2302",
    "difficulty": "Hard",
    "problem_slug": "count-subarrays-with-score-less-than-k",
    "topics": [
      "Array",
      "Binary Search",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "The score of an array is defined as the product of its sum and its length.\nGiven a positive integer array nums and an integer k, return the number of non-empty subarrays of nums whose score is strictly less than k.\nA subarray is a contiguous sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Calculate Amount Paid in Taxes",
    "problem_id": "1382",
    "frontend_id": "2303",
    "difficulty": "Easy",
    "problem_slug": "calculate-amount-paid-in-taxes",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "You are given a 0-indexed 2D integer array brackets where brackets[i] = [upperi, percenti] means that the ith tax bracket has an upper bound of upperi and is taxed at a rate of percenti. The brackets are sorted by upper bound (i.e. upperi-1 < upperi for 0 < i < brackets.length).\nTax is calculated as follows:\nYou are given an integer income representing the amount of money you earned. Return the amount of money that you have to pay in taxes. Answers within 10-5 of the actual answer will be accepted.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Path Cost in a Grid",
    "problem_id": "1394",
    "frontend_id": "2304",
    "difficulty": "Medium",
    "problem_slug": "minimum-path-cost-in-a-grid",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "You are given a 0-indexed m x n integer matrix grid consisting of distinct integers from 0 to m * n - 1. You can move in this matrix from a cell to any other cell in the next row. That is, if you are in cell (x, y) such that x < m - 1, you can move to any of the cells (x + 1, 0), (x + 1, 1), ..., (x + 1, n - 1). Note that it is not possible to move from cells in the last row.\nEach possible move has a cost given by a 0-indexed 2D array moveCost of size (m * n) x n, where moveCost[i][j] is the cost of moving from a cell with value i to a cell in column j of the next row. The cost of moving from cells in the last row of grid can be ignored.\nThe cost of a path in grid is the sum of all values of cells visited plus the sum of costs of all the moves made. Return the minimum cost of a path that starts from any cell in the first row and ends at any cell in the last row.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Fair Distribution of Cookies",
    "problem_id": "1418",
    "frontend_id": "2305",
    "difficulty": "Medium",
    "problem_slug": "fair-distribution-of-cookies",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "You are given an integer array cookies, where cookies[i] denotes the number of cookies in the ith bag. You are also given an integer k that denotes the number of children to distribute all the bags of cookies to. All the cookies in the same bag must go to the same child and cannot be split up.\nThe unfairness of a distribution is defined as the maximum total cookies obtained by a single child in the distribution.\nReturn the minimum unfairness of all distributions.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Naming a Company",
    "problem_id": "2390",
    "frontend_id": "2306",
    "difficulty": "Hard",
    "problem_slug": "naming-a-company",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Enumeration"
    ],
    "description": "You are given an array of strings ideas that represents a list of names to be used in the process of naming a company. The process of naming a company is as follows:\nReturn the number of distinct valid names for the company.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Greatest English Letter in Upper and Lower Case",
    "problem_id": "1363",
    "frontend_id": "2309",
    "difficulty": "Easy",
    "problem_slug": "greatest-english-letter-in-upper-and-lower-case",
    "topics": [
      "Hash Table",
      "String",
      "Enumeration"
    ],
    "description": "Given a string of English letters s, return the greatest English letter which occurs as both a lowercase and uppercase letter in s. The returned letter should be in uppercase. If no such letter exists, return an empty string.\nAn English letter b is greater than another letter a if b appears after a in the English alphabet.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sum of Numbers With Units Digit K",
    "problem_id": "1334",
    "frontend_id": "2310",
    "difficulty": "Medium",
    "problem_slug": "sum-of-numbers-with-units-digit-k",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Greedy",
      "Enumeration"
    ],
    "description": "Given two integers num and k, consider a set of positive integers with the following properties:\nReturn the minimum possible size of such a set, or -1 if no such set exists.\nNote:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest Binary Subsequence Less Than or Equal to K",
    "problem_id": "2395",
    "frontend_id": "2311",
    "difficulty": "Medium",
    "problem_slug": "longest-binary-subsequence-less-than-or-equal-to-k",
    "topics": [
      "String",
      "Dynamic Programming",
      "Greedy",
      "Memoization"
    ],
    "description": "You are given a binary string s and a positive integer k.\nReturn the length of the longest subsequence of s that makes up a binary number less than or equal to k.\nNote:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Selling Pieces of Wood",
    "problem_id": "1376",
    "frontend_id": "2312",
    "difficulty": "Hard",
    "problem_slug": "selling-pieces-of-wood",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Memoization"
    ],
    "description": "You are given two integers m and n that represent the height and width of a rectangular piece of wood. You are also given a 2D integer array prices, where prices[i] = [hi, wi, pricei] indicates you can sell a rectangular piece of wood of height hi and width wi for pricei dollars.\nTo cut a piece of wood, you must make a vertical or horizontal cut across the entire height or width of the piece to split it into two smaller pieces. After cutting a piece of wood into some number of smaller pieces, you can sell pieces according to prices. You may sell multiple pieces of the same shape, and you do not have to sell all the shapes. The grain of the wood makes a difference, so you cannot rotate a piece to swap its height and width.\nReturn the maximum money you can earn after cutting an m x n piece of wood.\nNote that you can cut the piece of wood as many times as you want.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Asterisks",
    "problem_id": "2401",
    "frontend_id": "2315",
    "difficulty": "Easy",
    "problem_slug": "count-asterisks",
    "topics": [
      "String"
    ],
    "description": "You are given a string s, where every two consecutive vertical bars '|' are grouped into a pair. In other words, the 1st and 2nd '|' make a pair, the 3rd and 4th '|' make a pair, and so forth.\nReturn the number of '*' in s, excluding the '*' between each pair of '|'.\nNote that each '|' will belong to exactly one pair.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Unreachable Pairs of Nodes in an Undirected Graph",
    "problem_id": "2403",
    "frontend_id": "2316",
    "difficulty": "Medium",
    "problem_slug": "count-unreachable-pairs-of-nodes-in-an-undirected-graph",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "description": "You are given an integer n. There is an undirected graph with n nodes, numbered from 0 to n - 1. You are given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.\nReturn the number of pairs of different nodes that are unreachable from each other.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum XOR After Operations ",
    "problem_id": "2402",
    "frontend_id": "2317",
    "difficulty": "Medium",
    "problem_slug": "maximum-xor-after-operations",
    "topics": [
      "Array",
      "Math",
      "Bit Manipulation"
    ],
    "description": "You are given a 0-indexed integer array nums. In one operation, select any non-negative integer x and an index i, then update nums[i] to be equal to nums[i] AND (nums[i] XOR x).\nNote that AND is the bitwise AND operation and XOR is the bitwise XOR operation.\nReturn the maximum possible bitwise XOR of all elements of nums after applying the operation any number of times.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Distinct Roll Sequences",
    "problem_id": "2404",
    "frontend_id": "2318",
    "difficulty": "Hard",
    "problem_slug": "number-of-distinct-roll-sequences",
    "topics": [
      "Dynamic Programming",
      "Memoization"
    ],
    "description": "You are given an integer n. You roll a fair 6-sided dice n times. Determine the total number of distinct sequences of rolls possible such that the following conditions are satisfied:\nReturn the total number of distinct sequences possible. Since the answer may be very large, return it modulo 109 + 7.\nTwo sequences are considered distinct if at least one element is different.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check if Matrix Is X-Matrix",
    "problem_id": "2398",
    "frontend_id": "2319",
    "difficulty": "Easy",
    "problem_slug": "check-if-matrix-is-x-matrix",
    "topics": [
      "Array",
      "Matrix"
    ],
    "description": "A square matrix is said to be an X-Matrix if both of the following conditions hold:\nGiven a 2D integer array grid of size n x n representing a square matrix, return true if grid is an X-Matrix. Otherwise, return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Number of Ways to Place Houses",
    "problem_id": "2397",
    "frontend_id": "2320",
    "difficulty": "Medium",
    "problem_slug": "count-number-of-ways-to-place-houses",
    "topics": [
      "Dynamic Programming"
    ],
    "description": "There is a street with n * 2 plots, where there are n plots on each side of the street. The plots on each side are numbered from 1 to n. On each plot, a house can be placed.\nReturn the number of ways houses can be placed such that no two houses are adjacent to each other on the same side of the street. Since the answer may be very large, return it modulo 109 + 7.\nNote that if a house is placed on the ith plot on one side of the street, a house can also be placed on the ith plot on the other side of the street.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Score Of Spliced Array",
    "problem_id": "1348",
    "frontend_id": "2321",
    "difficulty": "Hard",
    "problem_slug": "maximum-score-of-spliced-array",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given two 0-indexed integer arrays nums1 and nums2, both of length n.\nYou can choose two integers left and right where 0 <= left <= right < n and swap the subarray nums1[left...right] with the subarray nums2[left...right].\nYou may choose to apply the mentioned operation once or not do anything.\nThe score of the arrays is the maximum of sum(nums1) and sum(nums2), where sum(arr) is the sum of all the elements in the array arr.\nReturn the maximum possible score.\nA subarray is a contiguous sequence of elements within an array. arr[left...right] denotes the subarray that contains the elements of nums between indices left and right (inclusive).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Score After Removals on a Tree",
    "problem_id": "2400",
    "frontend_id": "2322",
    "difficulty": "Hard",
    "problem_slug": "minimum-score-after-removals-on-a-tree",
    "topics": [
      "Array",
      "Bit Manipulation",
      "Tree",
      "Depth-First Search"
    ],
    "description": "There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\nYou are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nRemove two distinct edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined:\nReturn the minimum score of any possible pair of edge removals on the given tree.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Decode the Message",
    "problem_id": "2406",
    "frontend_id": "2325",
    "difficulty": "Easy",
    "problem_slug": "decode-the-message",
    "topics": [
      "Hash Table",
      "String"
    ],
    "description": "You are given the strings key and message, which represent a cipher key and a secret message, respectively. The steps to decode message are as follows:\nReturn the decoded message.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Spiral Matrix IV",
    "problem_id": "2411",
    "frontend_id": "2326",
    "difficulty": "Medium",
    "problem_slug": "spiral-matrix-iv",
    "topics": [
      "Array",
      "Linked List",
      "Matrix",
      "Simulation"
    ],
    "description": "You are given two integers m and n, which represent the dimensions of a matrix.\nYou are also given the head of a linked list of integers.\nGenerate an m x n matrix that contains the integers in the linked list presented in spiral order (clockwise), starting from the top-left of the matrix. If there are remaining empty spaces, fill them with -1.\nReturn the generated matrix.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of People Aware of a Secret",
    "problem_id": "2408",
    "frontend_id": "2327",
    "difficulty": "Medium",
    "problem_slug": "number-of-people-aware-of-a-secret",
    "topics": [
      "Dynamic Programming",
      "Queue",
      "Simulation"
    ],
    "description": "On day 1, one person discovers a secret.\nYou are given an integer delay, which means that each person will share the secret with a new person every day, starting from delay days after discovering the secret. You are also given an integer forget, which means that each person will forget the secret forget days after discovering it. A person cannot share the secret on the same day they forgot it, or on any day afterwards.\nGiven an integer n, return the number of people who know the secret at the end of day n. Since the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Increasing Paths in a Grid",
    "problem_id": "2409",
    "frontend_id": "2328",
    "difficulty": "Hard",
    "problem_slug": "number-of-increasing-paths-in-a-grid",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort",
      "Memoization",
      "Matrix"
    ],
    "description": "You are given an m x n integer matrix grid, where you can move from a cell to any adjacent cell in all 4 directions.\nReturn the number of strictly increasing paths in the grid such that you can start from any cell and end at any cell. Since the answer may be very large, return it modulo 109 + 7.\nTwo paths are considered different if they do not have exactly the same sequence of visited cells.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Evaluate Boolean Binary Tree",
    "problem_id": "2416",
    "frontend_id": "2331",
    "difficulty": "Easy",
    "problem_slug": "evaluate-boolean-binary-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "description": "You are given the root of a full binary tree with the following properties:\nThe evaluation of a node is as follows:\nReturn the boolean result of evaluating the root node.\nA full binary tree is a binary tree where each node has either 0 or 2 children.\nA leaf node is a node that has zero children.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "The Latest Time to Catch a Bus",
    "problem_id": "2417",
    "frontend_id": "2332",
    "difficulty": "Medium",
    "problem_slug": "the-latest-time-to-catch-a-bus",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "description": "You are given a 0-indexed integer array buses of length n, where buses[i] represents the departure time of the ith bus. You are also given a 0-indexed integer array passengers of length m, where passengers[j] represents the arrival time of the jth passenger. All bus departure times are unique. All passenger arrival times are unique.\nYou are given an integer capacity, which represents the maximum number of passengers that can get on each bus.\nWhen a passenger arrives, they will wait in line for the next available bus. You can get on a bus that departs at x minutes if you arrive at y minutes where y <= x, and the bus is not full. Passengers with the earliest arrival times get on the bus first.\nMore formally when a bus arrives, either:\nReturn the latest time you may arrive at the bus station to catch a bus. You cannot arrive at the same time as another passenger.\nNote: The arrays buses and passengers are not necessarily sorted.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Sum of Squared Difference",
    "problem_id": "2418",
    "frontend_id": "2333",
    "difficulty": "Medium",
    "problem_slug": "minimum-sum-of-squared-difference",
    "topics": [
      "Array",
      "Binary Search",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given two positive 0-indexed integer arrays nums1 and nums2, both of length n.\nThe sum of squared difference of arrays nums1 and nums2 is defined as the sum of (nums1[i] - nums2[i])2 for each 0 <= i < n.\nYou are also given two positive integers k1 and k2. You can modify any of the elements of nums1 by +1 or -1 at most k1 times. Similarly, you can modify any of the elements of nums2 by +1 or -1 at most k2 times.\nReturn the minimum sum of squared difference after modifying array nums1 at most k1 times and modifying array nums2 at most k2 times.\nNote: You are allowed to modify the array elements to become negative integers.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Subarray With Elements Greater Than Varying Threshold",
    "problem_id": "2419",
    "frontend_id": "2334",
    "difficulty": "Hard",
    "problem_slug": "subarray-with-elements-greater-than-varying-threshold",
    "topics": [
      "Array",
      "Stack",
      "Union Find",
      "Monotonic Stack"
    ],
    "description": "You are given an integer array nums and an integer threshold.\nFind any subarray of nums of length k such that every element in the subarray is greater than threshold / k.\nReturn the size of any such subarray. If there is no such subarray, return -1.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Amount of Time to Fill Cups",
    "problem_id": "2412",
    "frontend_id": "2335",
    "difficulty": "Easy",
    "problem_slug": "minimum-amount-of-time-to-fill-cups",
    "topics": [
      "Array",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You have a water dispenser that can dispense cold, warm, and hot water. Every second, you can either fill up 2 cups with different types of water, or 1 cup of any type of water.\nYou are given a 0-indexed integer array amount of length 3 where amount[0], amount[1], and amount[2] denote the number of cold, warm, and hot water cups you need to fill respectively. Return the minimum number of seconds needed to fill up all the cups.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Smallest Number in Infinite Set",
    "problem_id": "2413",
    "frontend_id": "2336",
    "difficulty": "Medium",
    "problem_slug": "smallest-number-in-infinite-set",
    "topics": [
      "Hash Table",
      "Design",
      "Heap (Priority Queue)",
      "Ordered Set"
    ],
    "description": "You have a set which contains all positive integers [1, 2, 3, 4, 5, ...].\nImplement the SmallestInfiniteSet class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Move Pieces to Obtain a String",
    "problem_id": "2414",
    "frontend_id": "2337",
    "difficulty": "Medium",
    "problem_slug": "move-pieces-to-obtain-a-string",
    "topics": [
      "Two Pointers",
      "String"
    ],
    "description": "You are given two strings start and target, both of length n. Each string consists only of the characters 'L', 'R', and '_' where:\nReturn true if it is possible to obtain the string target by moving the pieces of the string start any number of times. Otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count the Number of Ideal Arrays",
    "problem_id": "2415",
    "frontend_id": "2338",
    "difficulty": "Hard",
    "problem_slug": "count-the-number-of-ideal-arrays",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Combinatorics",
      "Number Theory"
    ],
    "description": "You are given two integers n and maxValue, which are used to describe an ideal array.\nA 0-indexed integer array arr of length n is considered ideal if the following conditions hold:\nReturn the number of distinct ideal arrays of length n. Since the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Number of Pairs in Array",
    "problem_id": "2421",
    "frontend_id": "2341",
    "difficulty": "Easy",
    "problem_slug": "maximum-number-of-pairs-in-array",
    "topics": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "description": "You are given a 0-indexed integer array nums. In one operation, you may do the following:\nThe operation is done on nums as many times as possible.\nReturn a 0-indexed integer array answer of size 2 where answer[0] is the number of pairs that are formed and answer[1] is the number of leftover integers in nums after doing the operation as many times as possible.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Max Sum of a Pair With Equal Sum of Digits",
    "problem_id": "2473",
    "frontend_id": "2342",
    "difficulty": "Medium",
    "problem_slug": "max-sum-of-a-pair-with-equal-sum-of-digits",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given a 0-indexed array nums consisting of positive integers. You can choose two indices i and j, such that i != j, and the sum of digits of the number nums[i] is equal to that of nums[j].\nReturn the maximum value of nums[i] + nums[j] that you can obtain over all possible indices i and j that satisfy the conditions. If no such pair of indices exists, return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Query Kth Smallest Trimmed Number",
    "problem_id": "2422",
    "frontend_id": "2343",
    "difficulty": "Medium",
    "problem_slug": "query-kth-smallest-trimmed-number",
    "topics": [
      "Array",
      "String",
      "Divide and Conquer",
      "Sorting",
      "Heap (Priority Queue)",
      "Radix Sort",
      "Quickselect"
    ],
    "description": "You are given a 0-indexed array of strings nums, where each string is of equal length and consists of only digits.\nYou are also given a 0-indexed 2D integer array queries where queries[i] = [ki, trimi]. For each queries[i], you need to:\nReturn an array answer of the same length as queries, where answer[i] is the answer to the ith query.\nNote:\nExample 1:\nExample 2:\nConstraints:\nFollow up: Could you use the Radix Sort Algorithm to solve this problem? What will be the complexity of that solution?"
  },
  {
    "title": "Minimum Deletions to Make Array Divisible",
    "problem_id": "2423",
    "frontend_id": "2344",
    "difficulty": "Hard",
    "problem_slug": "minimum-deletions-to-make-array-divisible",
    "topics": [
      "Array",
      "Math",
      "Sorting",
      "Heap (Priority Queue)",
      "Number Theory"
    ],
    "description": "You are given two positive integer arrays nums and numsDivide. You can delete any number of elements from nums.\nReturn the minimum number of deletions such that the smallest element in nums divides all the elements of numsDivide. If this is not possible, return -1.\nNote that an integer x divides y if y % x == 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Best Poker Hand",
    "problem_id": "2433",
    "frontend_id": "2347",
    "difficulty": "Easy",
    "problem_slug": "best-poker-hand",
    "topics": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "description": "You are given an integer array ranks and a character array suits. You have 5 cards where the ith card has a rank of ranks[i] and a suit of suits[i].\nThe following are the types of poker hands you can make from best to worst:\nReturn a string representing the best type of poker hand you can make with the given cards.\nNote that the return values are case-sensitive.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Zero-Filled Subarrays",
    "problem_id": "2432",
    "frontend_id": "2348",
    "difficulty": "Medium",
    "problem_slug": "number-of-zero-filled-subarrays",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "Given an integer array nums, return the number of subarrays filled with 0.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Design a Number Container System",
    "problem_id": "2434",
    "frontend_id": "2349",
    "difficulty": "Medium",
    "problem_slug": "design-a-number-container-system",
    "topics": [
      "Hash Table",
      "Design",
      "Heap (Priority Queue)",
      "Ordered Set"
    ],
    "description": "Design a number container system that can do the following:\nImplement the NumberContainers class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Shortest Impossible Sequence of Rolls",
    "problem_id": "2435",
    "frontend_id": "2350",
    "difficulty": "Hard",
    "problem_slug": "shortest-impossible-sequence-of-rolls",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy"
    ],
    "description": "You are given an integer array rolls of length n and an integer k. You roll a k sided dice numbered from 1 to k, n times, where the result of the ith roll is rolls[i].\nReturn the length of the shortest sequence of rolls so that there's no such subsequence in rolls.\nA sequence of rolls of length len is the result of rolling a k sided dice len times.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "First Letter to Appear Twice",
    "problem_id": "2427",
    "frontend_id": "2351",
    "difficulty": "Easy",
    "problem_slug": "first-letter-to-appear-twice",
    "topics": [
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Counting"
    ],
    "description": "Given a string s consisting of lowercase English letters, return the first letter to appear twice.\nNote:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Equal Row and Column Pairs",
    "problem_id": "2428",
    "frontend_id": "2352",
    "difficulty": "Medium",
    "problem_slug": "equal-row-and-column-pairs",
    "topics": [
      "Array",
      "Hash Table",
      "Matrix",
      "Simulation"
    ],
    "description": "Given a 0-indexed n x n integer matrix grid, return the number of pairs (ri, cj) such that row ri and column cj are equal.\nA row and column pair is considered equal if they contain the same elements in the same order (i.e., an equal array).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Design a Food Rating System",
    "problem_id": "2429",
    "frontend_id": "2353",
    "difficulty": "Medium",
    "problem_slug": "design-a-food-rating-system",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Design",
      "Heap (Priority Queue)",
      "Ordered Set"
    ],
    "description": "Design a food rating system that can do the following:\nImplement the FoodRatings class:\nNote that a string x is lexicographically smaller than string y if x comes before y in dictionary order, that is, either x is a prefix of y, or if i is the first position such that x[i] != y[i], then x[i] comes before y[i] in alphabetic order.\nExample 1:\nConstraints:"
  },
  {
    "title": "Number of Excellent Pairs",
    "problem_id": "2430",
    "frontend_id": "2354",
    "difficulty": "Hard",
    "problem_slug": "number-of-excellent-pairs",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Bit Manipulation"
    ],
    "description": "You are given a 0-indexed positive integer array nums and a positive integer k.\nA pair of numbers (num1, num2) is called excellent if the following conditions are satisfied:\nReturn the number of distinct excellent pairs.\nTwo pairs (a, b) and (c, d) are considered distinct if either a != c or b != d. For example, (1, 2) and (2, 1) are distinct.\nNote that a pair (num1, num2) such that num1 == num2 can also be excellent if you have at least one occurrence of num1 in the array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Unique Subjects Taught by Each Teacher",
    "problem_id": "2495",
    "frontend_id": "2356",
    "difficulty": "Easy",
    "problem_slug": "number-of-unique-subjects-taught-by-each-teacher",
    "topics": [
      "Database"
    ],
    "description": "Table: Teacher\nWrite a solution to calculate the number of unique subjects each teacher teaches in the university.\nReturn the result table in any order.\nThe result format is shown in the following example.\nExample 1:"
  },
  {
    "title": "Make Array Zero by Subtracting Equal Amounts",
    "problem_id": "2436",
    "frontend_id": "2357",
    "difficulty": "Easy",
    "problem_slug": "make-array-zero-by-subtracting-equal-amounts",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)",
      "Simulation"
    ],
    "description": "You are given a non-negative integer array nums. In one operation, you must:\nReturn the minimum number of operations to make every element in nums equal to 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Number of Groups Entering a Competition",
    "problem_id": "2437",
    "frontend_id": "2358",
    "difficulty": "Medium",
    "problem_slug": "maximum-number-of-groups-entering-a-competition",
    "topics": [
      "Array",
      "Math",
      "Binary Search",
      "Greedy"
    ],
    "description": "You are given a positive integer array grades which represents the grades of students in a university. You would like to enter all these students into a competition in ordered non-empty groups, such that the ordering meets the following conditions:\nReturn the maximum number of groups that can be formed.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Closest Node to Given Two Nodes",
    "problem_id": "2438",
    "frontend_id": "2359",
    "difficulty": "Medium",
    "problem_slug": "find-closest-node-to-given-two-nodes",
    "topics": [
      "Depth-First Search",
      "Graph"
    ],
    "description": "You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.\nThe graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. If there is no outgoing edge from i, then edges[i] == -1.\nYou are also given two integers node1 and node2.\nReturn the index of the node that can be reached from both node1 and node2, such that the maximum between the distance from node1 to that node, and from node2 to that node is minimized. If there are multiple answers, return the node with the smallest index, and if no possible answer exists, return -1.\nNote that edges may contain cycles.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Cycle in a Graph",
    "problem_id": "2439",
    "frontend_id": "2360",
    "difficulty": "Hard",
    "problem_slug": "longest-cycle-in-a-graph",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort"
    ],
    "description": "You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.\nThe graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. If there is no outgoing edge from node i, then edges[i] == -1.\nReturn the length of the longest cycle in the graph. If no cycle exists, return -1.\nA cycle is a path that starts and ends at the same node.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Merge Similar Items",
    "problem_id": "2447",
    "frontend_id": "2363",
    "difficulty": "Easy",
    "problem_slug": "merge-similar-items",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting",
      "Ordered Set"
    ],
    "description": "You are given two 2D integer arrays, items1 and items2, representing two sets of items. Each array items has the following properties:\nReturn a 2D integer array ret where ret[i] = [valuei, weighti], with weighti being the sum of weights of all items with value valuei.\nNote: ret should be returned in ascending order by value.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Number of Bad Pairs",
    "problem_id": "2448",
    "frontend_id": "2364",
    "difficulty": "Medium",
    "problem_slug": "count-number-of-bad-pairs",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Counting"
    ],
    "description": "You are given a 0-indexed integer array nums. A pair of indices (i, j) is a bad pair if i < j and j - i != nums[j] - nums[i].\nReturn the total number of bad pairs in nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Task Scheduler II",
    "problem_id": "2483",
    "frontend_id": "2365",
    "difficulty": "Medium",
    "problem_slug": "task-scheduler-ii",
    "topics": [
      "Array",
      "Hash Table",
      "Simulation"
    ],
    "description": "You are given a 0-indexed array of positive integers tasks, representing tasks that need to be completed in order, where tasks[i] represents the type of the ith task.\nYou are also given a positive integer space, which represents the minimum number of days that must pass after the completion of a task before another task of the same type can be performed.\nEach day, until all tasks have been completed, you must either:\nReturn the minimum number of days needed to complete all tasks.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Replacements to Sort the Array",
    "problem_id": "2450",
    "frontend_id": "2366",
    "difficulty": "Hard",
    "problem_slug": "minimum-replacements-to-sort-the-array",
    "topics": [
      "Array",
      "Math",
      "Greedy"
    ],
    "description": "You are given a 0-indexed integer array nums. In one operation you can replace any element of the array with any two elements that sum to it.\nReturn the minimum number of operations to make an array that is sorted in non-decreasing order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Arithmetic Triplets",
    "problem_id": "2442",
    "frontend_id": "2367",
    "difficulty": "Easy",
    "problem_slug": "number-of-arithmetic-triplets",
    "topics": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Enumeration"
    ],
    "description": "You are given a 0-indexed, strictly increasing integer array nums and a positive integer diff. A triplet (i, j, k) is an arithmetic triplet if the following conditions are met:\nReturn the number of unique arithmetic triplets.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Reachable Nodes With Restrictions",
    "problem_id": "2445",
    "frontend_id": "2368",
    "difficulty": "Medium",
    "problem_slug": "reachable-nodes-with-restrictions",
    "topics": [
      "Array",
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "description": "There is an undirected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\nYou are given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given an integer array restricted which represents restricted nodes.\nReturn the maximum number of nodes you can reach from node 0 without visiting a restricted node.\nNote that node 0 will not be a restricted node.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check if There is a Valid Partition For The Array",
    "problem_id": "2443",
    "frontend_id": "2369",
    "difficulty": "Medium",
    "problem_slug": "check-if-there-is-a-valid-partition-for-the-array",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given a 0-indexed integer array nums. You have to partition the array into one or more contiguous subarrays.\nWe call a partition of the array valid if each of the obtained subarrays satisfies one of the following conditions:\nReturn true if the array has at least one valid partition. Otherwise, return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Ideal Subsequence",
    "problem_id": "2444",
    "frontend_id": "2370",
    "difficulty": "Medium",
    "problem_slug": "longest-ideal-subsequence",
    "topics": [
      "Hash Table",
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given a string s consisting of lowercase letters and an integer k. We call a string t ideal if the following conditions are satisfied:\nReturn the length of the longest ideal string.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\nNote that the alphabet order is not cyclic. For example, the absolute difference in the alphabet order of 'a' and 'z' is 25, not 1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Largest Local Values in a Matrix",
    "problem_id": "2454",
    "frontend_id": "2373",
    "difficulty": "Easy",
    "problem_slug": "largest-local-values-in-a-matrix",
    "topics": [
      "Array",
      "Matrix"
    ],
    "description": "You are given an n x n integer matrix grid.\nGenerate an integer matrix maxLocal of size (n - 2) x (n - 2) such that:\nIn other words, we want to find the largest value in every contiguous 3 x 3 matrix in grid.\nReturn the generated matrix.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Node With Highest Edge Score",
    "problem_id": "2455",
    "frontend_id": "2374",
    "difficulty": "Medium",
    "problem_slug": "node-with-highest-edge-score",
    "topics": [
      "Hash Table",
      "Graph"
    ],
    "description": "You are given a directed graph with n nodes labeled from 0 to n - 1, where each node has exactly one outgoing edge.\nThe graph is represented by a given 0-indexed integer array edges of length n, where edges[i] indicates that there is a directed edge from node i to node edges[i].\nThe edge score of a node i is defined as the sum of the labels of all the nodes that have an edge pointing to i.\nReturn the node with the highest edge score. If multiple nodes have the same edge score, return the node with the smallest index.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Construct Smallest Number From DI String",
    "problem_id": "2456",
    "frontend_id": "2375",
    "difficulty": "Medium",
    "problem_slug": "construct-smallest-number-from-di-string",
    "topics": [
      "String",
      "Backtracking",
      "Stack",
      "Greedy"
    ],
    "description": "You are given a 0-indexed string pattern of length n consisting of the characters 'I' meaning increasing and 'D' meaning decreasing.\nA 0-indexed string num of length n + 1 is created using the following conditions:\nReturn the lexicographically smallest possible string num that meets the conditions.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Special Integers",
    "problem_id": "2457",
    "frontend_id": "2376",
    "difficulty": "Hard",
    "problem_slug": "count-special-integers",
    "topics": [
      "Math",
      "Dynamic Programming"
    ],
    "description": "We call a positive integer special if all of its digits are distinct.\nGiven a positive integer n, return the number of special integers that belong to the interval [1, n].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Recolors to Get K Consecutive Black Blocks",
    "problem_id": "2463",
    "frontend_id": "2379",
    "difficulty": "Easy",
    "problem_slug": "minimum-recolors-to-get-k-consecutive-black-blocks",
    "topics": [
      "String",
      "Sliding Window"
    ],
    "description": "You are given a 0-indexed string blocks of length n, where blocks[i] is either 'W' or 'B', representing the color of the ith block. The characters 'W' and 'B' denote the colors white and black, respectively.\nYou are also given an integer k, which is the desired number of consecutive black blocks.\nIn one operation, you can recolor a white block such that it becomes a black block.\nReturn the minimum number of operations needed such that there is at least one occurrence of k consecutive black blocks.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Time Needed to Rearrange a Binary String",
    "problem_id": "2464",
    "frontend_id": "2380",
    "difficulty": "Medium",
    "problem_slug": "time-needed-to-rearrange-a-binary-string",
    "topics": [
      "String",
      "Dynamic Programming",
      "Simulation"
    ],
    "description": "You are given a binary string s. In one second, all occurrences of \"01\" are simultaneously replaced with \"10\". This process repeats until no occurrences of \"01\" exist.\nReturn the number of seconds needed to complete this process.\nExample 1:\nExample 2:\nConstraints:\nFollow up:\nCan you solve this problem in O(n) time complexity?"
  },
  {
    "title": "Shifting Letters II",
    "problem_id": "2465",
    "frontend_id": "2381",
    "difficulty": "Medium",
    "problem_slug": "shifting-letters-ii",
    "topics": [
      "Array",
      "String",
      "Prefix Sum"
    ],
    "description": "You are given a string s of lowercase English letters and a 2D integer array shifts where shifts[i] = [starti, endi, directioni]. For every i, shift the characters in s from the index starti to the index endi (inclusive) forward if directioni = 1, or shift the characters backward if directioni = 0.\nShifting a character forward means replacing it with the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). Similarly, shifting a character backward means replacing it with the previous letter in the alphabet (wrapping around so that 'a' becomes 'z').\nReturn the final string after all such shifts to s are applied.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Segment Sum After Removals",
    "problem_id": "2466",
    "frontend_id": "2382",
    "difficulty": "Hard",
    "problem_slug": "maximum-segment-sum-after-removals",
    "topics": [
      "Array",
      "Union Find",
      "Prefix Sum",
      "Ordered Set"
    ],
    "description": "You are given two 0-indexed integer arrays nums and removeQueries, both of length n. For the ith query, the element in nums at the index removeQueries[i] is removed, splitting nums into different segments.\nA segment is a contiguous sequence of positive integers in nums. A segment sum is the sum of every element in a segment.\nReturn an integer array answer, of length n, where answer[i] is the maximum segment sum after applying the ith removal.\nNote: The same index will not be removed more than once.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Hours of Training to Win a Competition",
    "problem_id": "2459",
    "frontend_id": "2383",
    "difficulty": "Easy",
    "problem_slug": "minimum-hours-of-training-to-win-a-competition",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "You are entering a competition, and are given two positive integers initialEnergy and initialExperience denoting your initial energy and initial experience respectively.\nYou are also given two 0-indexed integer arrays energy and experience, both of length n.\nYou will face n opponents in order. The energy and experience of the ith opponent is denoted by energy[i] and experience[i] respectively. When you face an opponent, you need to have both strictly greater experience and energy to defeat them and move to the next opponent if available.\nDefeating the ith opponent increases your experience by experience[i], but decreases your energy by energy[i].\nBefore starting the competition, you can train for some number of hours. After each hour of training, you can either choose to increase your initial experience by one, or increase your initial energy by one.\nReturn the minimum number of training hours required to defeat all n opponents.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Largest Palindromic Number",
    "problem_id": "2475",
    "frontend_id": "2384",
    "difficulty": "Medium",
    "problem_slug": "largest-palindromic-number",
    "topics": [
      "Hash Table",
      "String",
      "Greedy",
      "Counting"
    ],
    "description": "You are given a string num consisting of digits only.\nReturn the largest palindromic integer (in the form of a string) that can be formed using digits taken from num. It should not contain leading zeroes.\nNotes:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Amount of Time for Binary Tree to Be Infected",
    "problem_id": "2461",
    "frontend_id": "2385",
    "difficulty": "Medium",
    "problem_slug": "amount-of-time-for-binary-tree-to-be-infected",
    "topics": [
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "You are given the root of a binary tree with unique values, and an integer start. At minute 0, an infection starts from the node with value start.\nEach minute, a node becomes infected if:\nReturn the number of minutes needed for the entire tree to be infected.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the K-Sum of an Array",
    "problem_id": "2462",
    "frontend_id": "2386",
    "difficulty": "Hard",
    "problem_slug": "find-the-k-sum-of-an-array",
    "topics": [
      "Array",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given an integer array nums and a positive integer k. You can choose any subsequence of the array and sum all of its elements together.\nWe define the K-Sum of the array as the kth largest subsequence sum that can be obtained (not necessarily distinct).\nReturn the K-Sum of the array.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\nNote that the empty subsequence is considered to have a sum of 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Subsequence With Limited Sum",
    "problem_id": "2469",
    "frontend_id": "2389",
    "difficulty": "Easy",
    "problem_slug": "longest-subsequence-with-limited-sum",
    "topics": [
      "Array",
      "Binary Search",
      "Greedy",
      "Sorting",
      "Prefix Sum"
    ],
    "description": "You are given an integer array nums of length n, and an integer array queries of length m.\nReturn an array answer of length m where answer[i] is the maximum size of a subsequence that you can take from nums such that the sum of its elements is less than or equal to queries[i].\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Removing Stars From a String",
    "problem_id": "2470",
    "frontend_id": "2390",
    "difficulty": "Medium",
    "problem_slug": "removing-stars-from-a-string",
    "topics": [
      "String",
      "Stack",
      "Simulation"
    ],
    "description": "You are given a string s, which contains stars *.\nIn one operation, you can:\nReturn the string after all stars have been removed.\nNote:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Amount of Time to Collect Garbage",
    "problem_id": "2471",
    "frontend_id": "2391",
    "difficulty": "Medium",
    "problem_slug": "minimum-amount-of-time-to-collect-garbage",
    "topics": [
      "Array",
      "String",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed array of strings garbage where garbage[i] represents the assortment of garbage at the ith house. garbage[i] consists only of the characters 'M', 'P' and 'G' representing one unit of metal, paper and glass garbage respectively. Picking up one unit of any type of garbage takes 1 minute.\nYou are also given a 0-indexed integer array travel where travel[i] is the number of minutes needed to go from house i to house i + 1.\nThere are three garbage trucks in the city, each responsible for picking up one type of garbage. Each garbage truck starts at house 0 and must visit each house in order; however, they do not need to visit every house.\nOnly one garbage truck may be used at any given moment. While one truck is driving or picking up garbage, the other two trucks cannot do anything.\nReturn the minimum number of minutes needed to pick up all the garbage.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Build a Matrix With Conditions",
    "problem_id": "2472",
    "frontend_id": "2392",
    "difficulty": "Hard",
    "problem_slug": "build-a-matrix-with-conditions",
    "topics": [
      "Array",
      "Graph",
      "Topological Sort",
      "Matrix"
    ],
    "description": "You are given a positive integer k. You are also given:\nThe two arrays contain integers from 1 to k.\nYou have to build a k x k matrix that contains each of the numbers from 1 to k exactly once. The remaining cells should have the value 0.\nThe matrix should also satisfy the following conditions:\nReturn any matrix that satisfies the conditions. If no answer exists, return an empty matrix.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Subarrays With Equal Sum",
    "problem_id": "2480",
    "frontend_id": "2395",
    "difficulty": "Easy",
    "problem_slug": "find-subarrays-with-equal-sum",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "Given a 0-indexed integer array nums, determine whether there exist two subarrays of length 2 with equal sum. Note that the two subarrays must begin at different indices.\nReturn true if these subarrays exist, and false otherwise.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Strictly Palindromic Number",
    "problem_id": "2481",
    "frontend_id": "2396",
    "difficulty": "Medium",
    "problem_slug": "strictly-palindromic-number",
    "topics": [
      "Math",
      "Two Pointers",
      "Brainteaser"
    ],
    "description": "An integer n is strictly palindromic if, for every base b between 2 and n - 2 (inclusive), the string representation of the integer n in base b is palindromic.\nGiven an integer n, return true if n is strictly palindromic and false otherwise.\nA string is palindromic if it reads the same forward and backward.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Rows Covered by Columns",
    "problem_id": "2482",
    "frontend_id": "2397",
    "difficulty": "Medium",
    "problem_slug": "maximum-rows-covered-by-columns",
    "topics": [
      "Array",
      "Backtracking",
      "Bit Manipulation",
      "Matrix",
      "Enumeration"
    ],
    "description": "You are given an m x n binary matrix matrix and an integer numSelect.\nYour goal is to select exactly numSelect distinct columns from matrix such that you cover as many rows as possible.\nA row is considered covered if all the 1's in that row are also part of a column that you have selected. If a row does not have any 1s, it is also considered covered.\nMore formally, let us consider selected = {c1, c2, ...., cnumSelect} as the set of columns selected by you. A row i is covered by selected if:\nReturn the maximum number of rows that can be covered by a set of numSelect columns.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Number of Robots Within Budget",
    "problem_id": "2449",
    "frontend_id": "2398",
    "difficulty": "Hard",
    "problem_slug": "maximum-number-of-robots-within-budget",
    "topics": [
      "Array",
      "Binary Search",
      "Queue",
      "Sliding Window",
      "Heap (Priority Queue)",
      "Prefix Sum",
      "Monotonic Queue"
    ],
    "description": "You have n robots. You are given two 0-indexed integer arrays, chargeTimes and runningCosts, both of length n. The ith robot costs chargeTimes[i] units to charge and costs runningCosts[i] units to run. You are also given an integer budget.\nThe total cost of running k chosen robots is equal to max(chargeTimes) + k * sum(runningCosts), where max(chargeTimes) is the largest charge cost among the k robots and sum(runningCosts) is the sum of running costs among the k robots.\nReturn the maximum number of consecutive robots you can run such that the total cost does not exceed budget.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check Distances Between Same Letters",
    "problem_id": "2476",
    "frontend_id": "2399",
    "difficulty": "Easy",
    "problem_slug": "check-distances-between-same-letters",
    "topics": [
      "Array",
      "Hash Table",
      "String"
    ],
    "description": "You are given a 0-indexed string s consisting of only lowercase English letters, where each letter in s appears exactly twice. You are also given a 0-indexed integer array distance of length 26.\nEach letter in the alphabet is numbered from 0 to 25 (i.e. 'a' -> 0, 'b' -> 1, 'c' -> 2, ... , 'z' -> 25).\nIn a well-spaced string, the number of letters between the two occurrences of the ith letter is distance[i]. If the ith letter does not appear in s, then distance[i] can be ignored.\nReturn true if s is a well-spaced string, otherwise return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Ways to Reach a Position After Exactly k Steps",
    "problem_id": "2477",
    "frontend_id": "2400",
    "difficulty": "Medium",
    "problem_slug": "number-of-ways-to-reach-a-position-after-exactly-k-steps",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "description": "You are given two positive integers startPos and endPos. Initially, you are standing at position startPos on an infinite number line. With one step, you can move either one position to the left, or one position to the right.\nGiven a positive integer k, return the number of different ways to reach the position endPos starting from startPos, such that you perform exactly k steps. Since the answer may be very large, return it modulo 109 + 7.\nTwo ways are considered different if the order of the steps made is not exactly the same.\nNote that the number line includes negative integers.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Nice Subarray",
    "problem_id": "2478",
    "frontend_id": "2401",
    "difficulty": "Medium",
    "problem_slug": "longest-nice-subarray",
    "topics": [
      "Array",
      "Bit Manipulation",
      "Sliding Window"
    ],
    "description": "You are given an array nums consisting of positive integers.\nWe call a subarray of nums nice if the bitwise AND of every pair of elements that are in different positions in the subarray is equal to 0.\nReturn the length of the longest nice subarray.\nA subarray is a contiguous part of an array.\nNote that subarrays of length 1 are always considered nice.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Meeting Rooms III",
    "problem_id": "2479",
    "frontend_id": "2402",
    "difficulty": "Hard",
    "problem_slug": "meeting-rooms-iii",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting",
      "Heap (Priority Queue)",
      "Simulation"
    ],
    "description": "You are given an integer n. There are n rooms numbered from 0 to n - 1.\nYou are given a 2D integer array meetings where meetings[i] = [starti, endi] means that a meeting will be held during the half-closed time interval [starti, endi). All the values of starti are unique.\nMeetings are allocated to rooms in the following manner:\nReturn the number of the room that held the most meetings. If there are multiple rooms, return the room with the lowest number.\nA half-closed interval [a, b) is the interval between a and b including a and not including b.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Most Frequent Even Element",
    "problem_id": "2486",
    "frontend_id": "2404",
    "difficulty": "Easy",
    "problem_slug": "most-frequent-even-element",
    "topics": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "description": "Given an integer array nums, return the most frequent even element.\nIf there is a tie, return the smallest one. If there is no such element, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Optimal Partition of String",
    "problem_id": "2487",
    "frontend_id": "2405",
    "difficulty": "Medium",
    "problem_slug": "optimal-partition-of-string",
    "topics": [
      "Hash Table",
      "String",
      "Greedy"
    ],
    "description": "Given a string s, partition the string into one or more substrings such that the characters in each substring are unique. That is, no letter appears in a single substring more than once.\nReturn the minimum number of substrings in such a partition.\nNote that each character should belong to exactly one substring in a partition.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Divide Intervals Into Minimum Number of Groups",
    "problem_id": "2488",
    "frontend_id": "2406",
    "difficulty": "Medium",
    "problem_slug": "divide-intervals-into-minimum-number-of-groups",
    "topics": [
      "Array",
      "Two Pointers",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)",
      "Prefix Sum"
    ],
    "description": "You are given a 2D integer array intervals where intervals[i] = [lefti, righti] represents the inclusive interval [lefti, righti].\nYou have to divide the intervals into one or more groups such that each interval is in exactly one group, and no two intervals that are in the same group intersect each other.\nReturn the minimum number of groups you need to make.\nTwo intervals intersect if there is at least one common number between them. For example, the intervals [1, 5] and [5, 8] intersect.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Increasing Subsequence II",
    "problem_id": "2526",
    "frontend_id": "2407",
    "difficulty": "Hard",
    "problem_slug": "longest-increasing-subsequence-ii",
    "topics": [
      "Array",
      "Divide and Conquer",
      "Dynamic Programming",
      "Binary Indexed Tree",
      "Segment Tree",
      "Queue",
      "Monotonic Queue"
    ],
    "description": "You are given an integer array nums and an integer k.\nFind the longest subsequence of nums that meets the following requirements:\nReturn the length of the longest subsequence that meets the requirements.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Days Spent Together",
    "problem_id": "2496",
    "frontend_id": "2409",
    "difficulty": "Easy",
    "problem_slug": "count-days-spent-together",
    "topics": [
      "Math",
      "String"
    ],
    "description": "Alice and Bob are traveling to Rome for separate business meetings.\nYou are given 4 strings arriveAlice, leaveAlice, arriveBob, and leaveBob. Alice will be in the city from the dates arriveAlice to leaveAlice (inclusive), while Bob will be in the city from the dates arriveBob to leaveBob (inclusive). Each will be a 5-character string in the format \"MM-DD\", corresponding to the month and day of the date.\nReturn the total number of days that Alice and Bob are in Rome together.\nYou can assume that all dates occur in the same calendar year, which is not a leap year. Note that the number of days per month can be represented as: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Matching of Players With Trainers",
    "problem_id": "2497",
    "frontend_id": "2410",
    "difficulty": "Medium",
    "problem_slug": "maximum-matching-of-players-with-trainers",
    "topics": [
      "Array",
      "Two Pointers",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given a 0-indexed integer array players, where players[i] represents the ability of the ith player. You are also given a 0-indexed integer array trainers, where trainers[j] represents the training capacity of the jth trainer.\nThe ith player can match with the jth trainer if the player's ability is less than or equal to the trainer's training capacity. Additionally, the ith player can be matched with at most one trainer, and the jth trainer can be matched with at most one player.\nReturn the maximum number of matchings between players and trainers that satisfy these conditions.\nExample 1:\nExample 2:\nConstraints:\nNote: This question is the same as  445: Assign Cookies."
  },
  {
    "title": "Smallest Subarrays With Maximum Bitwise OR",
    "problem_id": "2498",
    "frontend_id": "2411",
    "difficulty": "Medium",
    "problem_slug": "smallest-subarrays-with-maximum-bitwise-or",
    "topics": [
      "Array",
      "Binary Search",
      "Bit Manipulation",
      "Sliding Window"
    ],
    "description": "You are given a 0-indexed array nums of length n, consisting of non-negative integers. For each index i from 0 to n - 1, you must determine the size of the minimum sized non-empty subarray of nums starting at i (inclusive) that has the maximum possible bitwise OR.\nThe bitwise OR of an array is the bitwise OR of all the numbers in it.\nReturn an integer array answer of size n where answer[i] is the length of the minimum sized subarray starting at i with maximum bitwise OR.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Money Required Before Transactions",
    "problem_id": "2499",
    "frontend_id": "2412",
    "difficulty": "Hard",
    "problem_slug": "minimum-money-required-before-transactions",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given a 0-indexed 2D integer array transactions, where transactions[i] = [costi, cashbacki].\nThe array describes transactions, where each transaction must be completed exactly once in some order. At any given moment, you have a certain amount of money. In order to complete transaction i, money >= costi must hold true. After performing a transaction, money becomes money - costi + cashbacki.\nReturn the minimum amount of money required before any transaction so that all of the transactions can be completed regardless of the order of the transactions.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Smallest Even Multiple",
    "problem_id": "2491",
    "frontend_id": "2413",
    "difficulty": "Easy",
    "problem_slug": "smallest-even-multiple",
    "topics": [
      "Math",
      "Number Theory"
    ],
    "description": "Example 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Length of the Longest Alphabetical Continuous Substring",
    "problem_id": "2492",
    "frontend_id": "2414",
    "difficulty": "Medium",
    "problem_slug": "length-of-the-longest-alphabetical-continuous-substring",
    "topics": [
      "String"
    ],
    "description": "An alphabetical continuous string is a string consisting of consecutive letters in the alphabet. In other words, it is any substring of the string \"abcdefghijklmnopqrstuvwxyz\".\nGiven a string s consisting of lowercase letters only, return the length of the longest alphabetical continuous substring.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Reverse Odd Levels of Binary Tree",
    "problem_id": "2493",
    "frontend_id": "2415",
    "difficulty": "Medium",
    "problem_slug": "reverse-odd-levels-of-binary-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a perfect binary tree, reverse the node values at each odd level of the tree.\nReturn the root of the reversed tree.\nA binary tree is perfect if all parent nodes have two children and all leaves are on the same level.\nThe level of a node is the number of edges along the path between it and the root node.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sum of Prefix Scores of Strings",
    "problem_id": "2494",
    "frontend_id": "2416",
    "difficulty": "Hard",
    "problem_slug": "sum-of-prefix-scores-of-strings",
    "topics": [
      "Array",
      "String",
      "Trie",
      "Counting"
    ],
    "description": "You are given an array words of size n consisting of non-empty strings.\nWe define the score of a string term as the number of strings words[i] such that term is a prefix of words[i].\nReturn an array answer of size n where answer[i] is the sum of scores of every non-empty prefix of words[i].\nNote that a string is considered as a prefix of itself.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sort the People",
    "problem_id": "2502",
    "frontend_id": "2418",
    "difficulty": "Easy",
    "problem_slug": "sort-the-people",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Sorting"
    ],
    "description": "You are given an array of strings names, and an array heights that consists of distinct positive integers. Both arrays are of length n.\nFor each index i, names[i] and heights[i] denote the name and height of the ith person.\nReturn names sorted in descending order by the people's heights.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Subarray With Maximum Bitwise AND",
    "problem_id": "2503",
    "frontend_id": "2419",
    "difficulty": "Medium",
    "problem_slug": "longest-subarray-with-maximum-bitwise-and",
    "topics": [
      "Array",
      "Bit Manipulation",
      "Brainteaser"
    ],
    "description": "You are given an integer array nums of size n.\nConsider a non-empty subarray from nums that has the maximum possible bitwise AND.\nReturn the length of the longest such subarray.\nThe bitwise AND of an array is the bitwise AND of all the numbers in it.\nA subarray is a contiguous sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find All Good Indices",
    "problem_id": "2504",
    "frontend_id": "2420",
    "difficulty": "Medium",
    "problem_slug": "find-all-good-indices",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed integer array nums of size n and a positive integer k.\nWe call an index i in the range k <= i < n - k good if the following conditions are satisfied:\nReturn an array of all good indices sorted in increasing order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Good Paths",
    "problem_id": "2505",
    "frontend_id": "2421",
    "difficulty": "Hard",
    "problem_slug": "number-of-good-paths",
    "topics": [
      "Array",
      "Hash Table",
      "Tree",
      "Union Find",
      "Graph",
      "Sorting"
    ],
    "description": "There is a tree (i.e. a connected, undirected graph with no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges.\nYou are given a 0-indexed integer array vals of length n where vals[i] denotes the value of the ith node. You are also given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.\nA good path is a simple path that satisfies the following conditions:\nReturn the number of distinct good paths.\nNote that a path and its reverse are counted as the same path. For example, 0 -> 1 is considered to be the same as 1 -> 0. A single node is also considered as a valid path.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Remove Letter To Equalize Frequency",
    "problem_id": "2532",
    "frontend_id": "2423",
    "difficulty": "Easy",
    "problem_slug": "remove-letter-to-equalize-frequency",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "You are given a 0-indexed string word, consisting of lowercase English letters. You need to select one index and remove the letter at that index from word so that the frequency of every letter present in word is equal.\nReturn true if it is possible to remove one letter so that the frequency of all letters in word are equal, and false otherwise.\nNote:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Uploaded Prefix",
    "problem_id": "2512",
    "frontend_id": "2424",
    "difficulty": "Medium",
    "problem_slug": "longest-uploaded-prefix",
    "topics": [
      "Hash Table",
      "Binary Search",
      "Union Find",
      "Design",
      "Binary Indexed Tree",
      "Segment Tree",
      "Heap (Priority Queue)",
      "Ordered Set"
    ],
    "description": "You are given a stream of n videos, each represented by a distinct number from 1 to n that you need to \"upload\" to a server. You need to implement a data structure that calculates the length of the longest uploaded prefix at various points in the upload process.\nWe consider i to be an uploaded prefix if all videos in the range 1 to i (inclusive) have been uploaded to the server. The longest uploaded prefix is the maximum value of i that satisfies this definition.\n\nImplement the LUPrefix class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Bitwise XOR of All Pairings",
    "problem_id": "2533",
    "frontend_id": "2425",
    "difficulty": "Medium",
    "problem_slug": "bitwise-xor-of-all-pairings",
    "topics": [
      "Array",
      "Bit Manipulation",
      "Brainteaser"
    ],
    "description": "You are given two 0-indexed arrays, nums1 and nums2, consisting of non-negative integers. Let there be another array, nums3, which contains the bitwise XOR of all pairings of integers between nums1 and nums2 (every integer in nums1 is paired with every integer in nums2 exactly once).\nReturn the bitwise XOR of all integers in nums3.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Pairs Satisfying Inequality",
    "problem_id": "2513",
    "frontend_id": "2426",
    "difficulty": "Hard",
    "problem_slug": "number-of-pairs-satisfying-inequality",
    "topics": [
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Binary Indexed Tree",
      "Segment Tree",
      "Merge Sort",
      "Ordered Set"
    ],
    "description": "You are given two 0-indexed integer arrays nums1 and nums2, each of size n, and an integer diff. Find the number of pairs (i, j) such that:\nReturn the number of pairs that satisfy the conditions.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Common Factors",
    "problem_id": "2507",
    "frontend_id": "2427",
    "difficulty": "Easy",
    "problem_slug": "number-of-common-factors",
    "topics": [
      "Math",
      "Enumeration",
      "Number Theory"
    ],
    "description": "Given two positive integers a and b, return the number of common factors of a and b.\nAn integer x is a common factor of a and b if x divides both a and b.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Sum of an Hourglass",
    "problem_id": "2508",
    "frontend_id": "2428",
    "difficulty": "Medium",
    "problem_slug": "maximum-sum-of-an-hourglass",
    "topics": [
      "Array",
      "Matrix",
      "Prefix Sum"
    ],
    "description": "You are given an m x n integer matrix grid.\nWe define an hourglass as a part of the matrix with the following form:\nReturn the maximum sum of the elements of an hourglass.\nNote that an hourglass cannot be rotated and must be entirely contained within the matrix.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimize XOR",
    "problem_id": "2509",
    "frontend_id": "2429",
    "difficulty": "Medium",
    "problem_slug": "minimize-xor",
    "topics": [
      "Greedy",
      "Bit Manipulation"
    ],
    "description": "Given two positive integers num1 and num2, find the positive integer x such that:\nNote that XOR is the bitwise XOR operation.\nReturn the integer x. The test cases are generated such that x is uniquely determined.\nThe number of set bits of an integer is the number of 1's in its binary representation.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Deletions on a String",
    "problem_id": "2510",
    "frontend_id": "2430",
    "difficulty": "Hard",
    "problem_slug": "maximum-deletions-on-a-string",
    "topics": [
      "String",
      "Dynamic Programming",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "description": "You are given a string s consisting of only lowercase English letters. In one operation, you can:\nFor example, if s = \"ababc\", then in one operation, you could delete the first two letters of s to get \"abc\", since the first two letters of s and the following two letters of s are both equal to \"ab\".\nReturn the maximum number of operations needed to delete all of s.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "The Employee That Worked on the Longest Task",
    "problem_id": "2518",
    "frontend_id": "2432",
    "difficulty": "Easy",
    "problem_slug": "the-employee-that-worked-on-the-longest-task",
    "topics": [
      "Array"
    ],
    "description": "There are n employees, each with a unique id from 0 to n - 1.\nYou are given a 2D integer array logs where logs[i] = [idi, leaveTimei] where:\nNote that the ith task starts the moment right after the (i - 1)th task ends, and the 0th task starts at time 0.\nReturn the id of the employee that worked the task with the longest time. If there is a tie between two or more employees, return the smallest id among them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find The Original Array of Prefix Xor",
    "problem_id": "2519",
    "frontend_id": "2433",
    "difficulty": "Medium",
    "problem_slug": "find-the-original-array-of-prefix-xor",
    "topics": [
      "Array",
      "Bit Manipulation"
    ],
    "description": "You are given an integer array pref of size n. Find and return the array arr of size n that satisfies:\nNote that ^ denotes the bitwise-xor operation.\nIt can be proven that the answer is unique.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Using a Robot to Print the Lexicographically Smallest String",
    "problem_id": "2520",
    "frontend_id": "2434",
    "difficulty": "Medium",
    "problem_slug": "using-a-robot-to-print-the-lexicographically-smallest-string",
    "topics": [
      "Hash Table",
      "String",
      "Stack",
      "Greedy"
    ],
    "description": "You are given a string s and a robot that currently holds an empty string t. Apply one of the following operations until s and t are both empty:\nReturn the lexicographically smallest string that can be written on the paper.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Paths in Matrix Whose Sum Is Divisible by K",
    "problem_id": "2521",
    "frontend_id": "2435",
    "difficulty": "Hard",
    "problem_slug": "paths-in-matrix-whose-sum-is-divisible-by-k",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "You are given a 0-indexed m x n integer matrix grid and an integer k. You are currently at position (0, 0) and you want to reach position (m - 1, n - 1) moving only down or right.\nReturn the number of paths where the sum of the elements on the path is divisible by k. Since the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Valid Clock Times",
    "problem_id": "2528",
    "frontend_id": "2437",
    "difficulty": "Easy",
    "problem_slug": "number-of-valid-clock-times",
    "topics": [
      "String",
      "Enumeration"
    ],
    "description": "You are given a string of length 5 called time, representing the current time on a digital clock in the format \"hh:mm\". The earliest possible time is \"00:00\" and the latest possible time is \"23:59\".\nIn the string time, the digits represented by the ? symbol are unknown, and must be replaced with a digit from 0 to 9.\nReturn an integer answer, the number of valid clock times that can be created by replacing every ? with a digit from 0 to 9.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Range Product Queries of Powers",
    "problem_id": "2529",
    "frontend_id": "2438",
    "difficulty": "Medium",
    "problem_slug": "range-product-queries-of-powers",
    "topics": [
      "Array",
      "Bit Manipulation",
      "Prefix Sum"
    ],
    "description": "Given a positive integer n, there exists a 0-indexed array called powers, composed of the minimum number of powers of 2 that sum to n. The array is sorted in non-decreasing order, and there is only one way to form the array.\nYou are also given a 0-indexed 2D integer array queries, where queries[i] = [lefti, righti]. Each queries[i] represents a query where you have to find the product of all powers[j] with lefti <= j <= righti.\nReturn an array answers, equal in length to queries, where answers[i] is the answer to the ith query. Since the answer to the ith query may be too large, each answers[i] should be returned modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimize Maximum of Array",
    "problem_id": "2530",
    "frontend_id": "2439",
    "difficulty": "Medium",
    "problem_slug": "minimize-maximum-of-array",
    "topics": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Greedy",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed array nums comprising of n non-negative integers.\nIn one operation, you must:\nReturn the minimum possible value of the maximum integer of nums after performing any number of operations.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Create Components With Same Value",
    "problem_id": "2531",
    "frontend_id": "2440",
    "difficulty": "Hard",
    "problem_slug": "create-components-with-same-value",
    "topics": [
      "Array",
      "Math",
      "Tree",
      "Depth-First Search",
      "Enumeration"
    ],
    "description": "There is an undirected tree with n nodes labeled from 0 to n - 1.\nYou are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nYou are allowed to delete some edges, splitting the tree into multiple connected components. Let the value of a component be the sum of all nums[i] for which node i is in the component.\nReturn the maximum number of edges you can delete, such that every connected component in the tree has the same value.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Largest Positive Integer That Exists With Its Negative",
    "problem_id": "2524",
    "frontend_id": "2441",
    "difficulty": "Easy",
    "problem_slug": "largest-positive-integer-that-exists-with-its-negative",
    "topics": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Sorting"
    ],
    "description": "Given an integer array nums that does not contain any zeros, find the largest positive integer k such that -k also exists in the array.\nReturn the positive integer k. If there is no such integer, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Number of Distinct Integers After Reverse Operations",
    "problem_id": "2525",
    "frontend_id": "2442",
    "difficulty": "Medium",
    "problem_slug": "count-number-of-distinct-integers-after-reverse-operations",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Counting"
    ],
    "description": "You are given an array nums consisting of positive integers.\nYou have to take each integer in the array, reverse its digits, and add it to the end of the array. You should apply this operation to the original integers in nums.\nReturn the number of distinct integers in the final array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Number and Its Reverse",
    "problem_id": "2541",
    "frontend_id": "2443",
    "difficulty": "Medium",
    "problem_slug": "sum-of-number-and-its-reverse",
    "topics": [
      "Math",
      "Enumeration"
    ],
    "description": "Given a non-negative integer num, return true if num can be expressed as the sum of any non-negative integer and its reverse, or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Subarrays With Fixed Bounds",
    "problem_id": "2527",
    "frontend_id": "2444",
    "difficulty": "Hard",
    "problem_slug": "count-subarrays-with-fixed-bounds",
    "topics": [
      "Array",
      "Queue",
      "Sliding Window",
      "Monotonic Queue"
    ],
    "description": "You are given an integer array nums and two integers minK and maxK.\nA fixed-bound subarray of nums is a subarray that satisfies the following conditions:\nReturn the number of fixed-bound subarrays.\nA subarray is a contiguous part of an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Determine if Two Events Have Conflict",
    "problem_id": "2536",
    "frontend_id": "2446",
    "difficulty": "Easy",
    "problem_slug": "determine-if-two-events-have-conflict",
    "topics": [
      "Array",
      "String"
    ],
    "description": "You are given two arrays of strings that represent two inclusive events that happened on the same day, event1 and event2, where:\nEvent times are valid 24 hours format in the form of HH:MM.\nA conflict happens when two events have some non-empty intersection (i.e., some moment is common to both events).\nReturn true if there is a conflict between two events. Otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Subarrays With GCD Equal to K",
    "problem_id": "2546",
    "frontend_id": "2447",
    "difficulty": "Medium",
    "problem_slug": "number-of-subarrays-with-gcd-equal-to-k",
    "topics": [
      "Array",
      "Math",
      "Number Theory"
    ],
    "description": "Given an integer array nums and an integer k, return the number of subarrays of nums where the greatest common divisor of the subarray's elements is k.\nA subarray is a contiguous non-empty sequence of elements within an array.\nThe greatest common divisor of an array is the largest integer that evenly divides all the array elements.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Cost to Make Array Equal",
    "problem_id": "2538",
    "frontend_id": "2448",
    "difficulty": "Hard",
    "problem_slug": "minimum-cost-to-make-array-equal",
    "topics": [
      "Array",
      "Binary Search",
      "Greedy",
      "Sorting",
      "Prefix Sum"
    ],
    "description": "You are given two 0-indexed arrays nums and cost consisting each of n positive integers.\nYou can do the following operation any number of times:\nThe cost of doing one operation on the ith element is cost[i].\nReturn the minimum total cost such that all the elements of the array nums become equal.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of Operations to Make Arrays Similar",
    "problem_id": "2539",
    "frontend_id": "2449",
    "difficulty": "Hard",
    "problem_slug": "minimum-number-of-operations-to-make-arrays-similar",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given two positive integer arrays nums and target, of the same length.\nIn one operation, you can choose any two distinct indices i and j where 0 <= i, j < nums.length and:\nTwo arrays are considered to be similar if the frequency of each element is the same.\nReturn the minimum number of operations required to make nums similar to target. The test cases are generated such that nums can always be similar to target.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Odd String Difference",
    "problem_id": "2547",
    "frontend_id": "2451",
    "difficulty": "Easy",
    "problem_slug": "odd-string-difference",
    "topics": [
      "Array",
      "Hash Table",
      "String"
    ],
    "description": "You are given an array of equal-length strings words. Assume that the length of each string is n.\nEach string words[i] can be converted into a difference integer array difference[i] of length n - 1 where difference[i][j] = words[i][j+1] - words[i][j] where 0 <= j <= n - 2. Note that the difference between two letters is the difference between their positions in the alphabet i.e. the position of 'a' is 0, 'b' is 1, and 'z' is 25.\nAll the strings in words have the same difference integer array, except one. You should find that string.\nReturn the string in words that has different difference integer array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Words Within Two Edits of Dictionary",
    "problem_id": "2550",
    "frontend_id": "2452",
    "difficulty": "Medium",
    "problem_slug": "words-within-two-edits-of-dictionary",
    "topics": [
      "Array",
      "String",
      "Trie"
    ],
    "description": "You are given two string arrays, queries and dictionary. All words in each array comprise of lowercase English letters and have the same length.\nIn one edit you can take a word from queries, and change any letter in it to any other letter. Find all words from queries that, after a maximum of two edits, equal some word from dictionary.\nReturn a list of all words from queries, that match with some word from dictionary after a maximum of two edits. Return the words in the same order they appear in queries.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Destroy Sequential Targets",
    "problem_id": "2548",
    "frontend_id": "2453",
    "difficulty": "Medium",
    "problem_slug": "destroy-sequential-targets",
    "topics": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "description": "You are given a 0-indexed array nums consisting of positive integers, representing targets on a number line. You are also given an integer space.\nYou have a machine which can destroy targets. Seeding the machine with some nums[i] allows it to destroy all targets with values that can be represented as nums[i] + c * space, where c is any non-negative integer. You want to destroy the maximum number of targets in nums.\nReturn the minimum value of nums[i] you can seed the machine with to destroy the maximum number of targets.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Next Greater Element IV",
    "problem_id": "2549",
    "frontend_id": "2454",
    "difficulty": "Hard",
    "problem_slug": "next-greater-element-iv",
    "topics": [
      "Array",
      "Binary Search",
      "Stack",
      "Sorting",
      "Heap (Priority Queue)",
      "Monotonic Stack"
    ],
    "description": "You are given a 0-indexed array of non-negative integers nums. For each integer in nums, you must find its respective second greater integer.\nThe second greater integer of nums[i] is nums[j] such that:\nIf there is no such nums[j], the second greater integer is considered to be -1.\nReturn an integer array answer, where answer[i] is the second greater integer of nums[i].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Average Value of Even Numbers That Are Divisible by Three",
    "problem_id": "2542",
    "frontend_id": "2455",
    "difficulty": "Easy",
    "problem_slug": "average-value-of-even-numbers-that-are-divisible-by-three",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "Given an integer array nums of positive integers, return the average value of all even integers that are divisible by 3.\nNote that the average of n elements is the sum of the n elements divided by n and rounded down to the nearest integer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Most Popular Video Creator",
    "problem_id": "2543",
    "frontend_id": "2456",
    "difficulty": "Medium",
    "problem_slug": "most-popular-video-creator",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given two string arrays creators and ids, and an integer array views, all of length n. The ith video on a platform was created by creators[i], has an id of ids[i], and has views[i] views.\nThe popularity of a creator is the sum of the number of views on all of the creator's videos. Find the creator with the highest popularity and the id of their most viewed video.\nNote: It is possible for different videos to have the same id, meaning that ids do not uniquely identify a video. For example, two videos with the same ID are considered as distinct videos with their own viewcount.\nReturn a 2D array of strings answer where answer[i] = [creatorsi, idi] means that creatorsi has the highest popularity and idi is the id of their most popular video. The answer can be returned in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Addition to Make Integer Beautiful",
    "problem_id": "2544",
    "frontend_id": "2457",
    "difficulty": "Medium",
    "problem_slug": "minimum-addition-to-make-integer-beautiful",
    "topics": [
      "Math",
      "Greedy"
    ],
    "description": "You are given two positive integers n and target.\nAn integer is considered beautiful if the sum of its digits is less than or equal to target.\nReturn the minimum non-negative integer x such that n + x is beautiful. The input will be generated such that it is always possible to make n beautiful.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Height of Binary Tree After Subtree Removal Queries",
    "problem_id": "2545",
    "frontend_id": "2458",
    "difficulty": "Hard",
    "problem_slug": "height-of-binary-tree-after-subtree-removal-queries",
    "topics": [
      "Array",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "You are given the root of a binary tree with n nodes. Each node is assigned a unique value from 1 to n. You are also given an array queries of size m.\nYou have to perform m independent queries on the tree where in the ith query you do the following:\nReturn an array answer of size m where answer[i] is the height of the tree after performing the ith query.\nNote:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Apply Operations to an Array",
    "problem_id": "2551",
    "frontend_id": "2460",
    "difficulty": "Easy",
    "problem_slug": "apply-operations-to-an-array",
    "topics": [
      "Array",
      "Two Pointers",
      "Simulation"
    ],
    "description": "You are given a 0-indexed array nums of size n consisting of non-negative integers.\nYou need to apply n - 1 operations to this array where, in the ith operation (0-indexed), you will apply the following on the ith element of nums:\nAfter performing all the operations, shift all the 0's to the end of the array.\nReturn the resulting array.\nNote that the operations are applied sequentially, not all at once.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Sum of Distinct Subarrays With Length K",
    "problem_id": "2552",
    "frontend_id": "2461",
    "difficulty": "Medium",
    "problem_slug": "maximum-sum-of-distinct-subarrays-with-length-k",
    "topics": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "description": "You are given an integer array nums and an integer k. Find the maximum subarray sum of all the subarrays of nums that meet the following conditions:\nReturn the maximum subarray sum of all the subarrays that meet the conditions. If no subarray meets the conditions, return 0.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Total Cost to Hire K Workers",
    "problem_id": "2553",
    "frontend_id": "2462",
    "difficulty": "Medium",
    "problem_slug": "total-cost-to-hire-k-workers",
    "topics": [
      "Array",
      "Two Pointers",
      "Heap (Priority Queue)",
      "Simulation"
    ],
    "description": "You are given a 0-indexed integer array costs where costs[i] is the cost of hiring the ith worker.\nYou are also given two integers k and candidates. We want to hire exactly k workers according to the following rules:\nReturn the total cost to hire exactly k workers.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Total Distance Traveled",
    "problem_id": "2554",
    "frontend_id": "2463",
    "difficulty": "Hard",
    "problem_slug": "minimum-total-distance-traveled",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "There are some robots and factories on the X-axis. You are given an integer array robot where robot[i] is the position of the ith robot. You are also given a 2D integer array factory where factory[j] = [positionj, limitj] indicates that positionj is the position of the jth factory and that the jth factory can repair at most limitj robots.\nThe positions of each robot are unique. The positions of each factory are also unique. Note that a robot can be in the same position as a factory initially.\nAll the robots are initially broken; they keep moving in one direction. The direction could be the negative or the positive direction of the X-axis. When a robot reaches a factory that did not reach its limit, the factory repairs the robot, and it stops moving.\nAt any moment, you can set the initial direction of moving for some robot. Your target is to minimize the total distance traveled by all the robots.\nReturn the minimum total distance traveled by all the robots. The test cases are generated such that all the robots can be repaired.\nNote that\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Distinct Averages",
    "problem_id": "2561",
    "frontend_id": "2465",
    "difficulty": "Easy",
    "problem_slug": "number-of-distinct-averages",
    "topics": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Sorting"
    ],
    "description": "You are given a 0-indexed integer array nums of even length.\nAs long as nums is not empty, you must repetitively:\nThe average of two numbers a and b is (a + b) / 2.\nReturn the number of distinct averages calculated using the above process.\nNote that when there is a tie for a minimum or maximum number, any can be removed.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Ways To Build Good Strings",
    "problem_id": "2562",
    "frontend_id": "2466",
    "difficulty": "Medium",
    "problem_slug": "count-ways-to-build-good-strings",
    "topics": [
      "Dynamic Programming"
    ],
    "description": "Given the integers zero, one, low, and high, we can construct a string by starting with an empty string, and then at each step perform either of the following:\nThis can be performed any number of times.\nA good string is a string constructed by the above process having a length between low and high (inclusive).\nReturn the number of different good strings that can be constructed satisfying these properties. Since the answer can be large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Most Profitable Path in a Tree",
    "problem_id": "2564",
    "frontend_id": "2467",
    "difficulty": "Medium",
    "problem_slug": "most-profitable-path-in-a-tree",
    "topics": [
      "Array",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph"
    ],
    "description": "There is an undirected tree with n nodes labeled from 0 to n - 1, rooted at node 0. You are given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nAt every node i, there is a gate. You are also given an array of even integers amount, where amount[i] represents:\nThe game goes on as follows:\nReturn the maximum net income Alice can have if she travels towards the optimal leaf node.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Split Message Based on Limit",
    "problem_id": "2563",
    "frontend_id": "2468",
    "difficulty": "Hard",
    "problem_slug": "split-message-based-on-limit",
    "topics": [
      "String",
      "Binary Search",
      "Enumeration"
    ],
    "description": "You are given a string, message, and a positive integer, limit.\nYou must split message into one or more parts based on limit. Each resulting part should have the suffix \"<a/b>\", where \"b\" is to be replaced with the total number of parts and \"a\" is to be replaced with the index of the part, starting from 1 and going up to b. Additionally, the length of each resulting part (including its suffix) should be equal to limit, except for the last part whose length can be at most limit.\nThe resulting parts should be formed such that when their suffixes are removed and they are all concatenated in order, they should be equal to message. Also, the result should contain as few parts as possible.\nReturn the parts message would be split into as an array of strings. If it is impossible to split message as required, return an empty array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Convert the Temperature",
    "problem_id": "2556",
    "frontend_id": "2469",
    "difficulty": "Easy",
    "problem_slug": "convert-the-temperature",
    "topics": [
      "Math"
    ],
    "description": "You are given a non-negative floating point number rounded to two decimal places celsius, that denotes the temperature in Celsius.\nYou should convert Celsius into Kelvin and Fahrenheit and return it as an array ans = [kelvin, fahrenheit].\nReturn the array ans. Answers within 10-5 of the actual answer will be accepted.\nNote that:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Subarrays With LCM Equal to K",
    "problem_id": "2557",
    "frontend_id": "2470",
    "difficulty": "Medium",
    "problem_slug": "number-of-subarrays-with-lcm-equal-to-k",
    "topics": [
      "Array",
      "Math",
      "Number Theory"
    ],
    "description": "Given an integer array nums and an integer k, return the number of subarrays of nums where the least common multiple of the subarray's elements is k.\nA subarray is a contiguous non-empty sequence of elements within an array.\nThe least common multiple of an array is the smallest positive integer that is divisible by all the array elements.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of Operations to Sort a Binary Tree by Level",
    "problem_id": "2558",
    "frontend_id": "2471",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-operations-to-sort-a-binary-tree-by-level",
    "topics": [
      "Tree",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "You are given the root of a binary tree with unique values.\nIn one operation, you can choose any two nodes at the same level and swap their values.\nReturn the minimum number of operations needed to make the values at each level sorted in a strictly increasing order.\nThe level of a node is the number of edges along the path between it and the root node.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Number of Non-overlapping Palindrome Substrings",
    "problem_id": "2559",
    "frontend_id": "2472",
    "difficulty": "Hard",
    "problem_slug": "maximum-number-of-non-overlapping-palindrome-substrings",
    "topics": [
      "Two Pointers",
      "String",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "You are given a string s and a positive integer k.\nSelect a set of non-overlapping substrings from the string s that satisfy the following conditions:\nReturn the maximum number of substrings in an optimal selection.\nA substring is a contiguous sequence of characters within a string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Unequal Triplets in Array",
    "problem_id": "2566",
    "frontend_id": "2475",
    "difficulty": "Easy",
    "problem_slug": "number-of-unequal-triplets-in-array",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting"
    ],
    "description": "You are given a 0-indexed array of positive integers nums. Find the number of triplets (i, j, k) that meet the following conditions:\nReturn the number of triplets that meet the conditions.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Closest Nodes Queries in a Binary Search Tree",
    "problem_id": "2567",
    "frontend_id": "2476",
    "difficulty": "Medium",
    "problem_slug": "closest-nodes-queries-in-a-binary-search-tree",
    "topics": [
      "Array",
      "Binary Search",
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "description": "You are given the root of a binary search tree and an array queries of size n consisting of positive integers.\nFind a 2D array answer of size n where answer[i] = [mini, maxi]:\nReturn the array answer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Fuel Cost to Report to the Capital",
    "problem_id": "2568",
    "frontend_id": "2477",
    "difficulty": "Medium",
    "problem_slug": "minimum-fuel-cost-to-report-to-the-capital",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph"
    ],
    "description": "There is a tree (i.e., a connected, undirected graph with no cycles) structure country network consisting of n cities numbered from 0 to n - 1 and exactly n - 1 roads. The capital city is city 0. You are given a 2D integer array roads where roads[i] = [ai, bi] denotes that there exists a bidirectional road connecting cities ai and bi.\nThere is a meeting for the representatives of each city. The meeting is in the capital city.\nThere is a car in each city. You are given an integer seats that indicates the number of seats in each car.\nA representative can use the car in their city to travel or change the car and ride with another representative. The cost of traveling between two cities is one liter of fuel.\nReturn the minimum number of liters of fuel to reach the capital city.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Beautiful Partitions",
    "problem_id": "2569",
    "frontend_id": "2478",
    "difficulty": "Hard",
    "problem_slug": "number-of-beautiful-partitions",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given a string s that consists of the digits '1' to '9' and two integers k and minLength.\nA partition of s is called beautiful if:\nReturn the number of beautiful partitions of s. Since the answer may be very large, return it modulo 109 + 7.\nA substring is a contiguous sequence of characters within a string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Cuts to Divide a Circle",
    "problem_id": "2575",
    "frontend_id": "2481",
    "difficulty": "Easy",
    "problem_slug": "minimum-cuts-to-divide-a-circle",
    "topics": [
      "Math",
      "Geometry"
    ],
    "description": "A valid cut in a circle can be:\nSome valid and invalid cuts are shown in the figures below.\nGiven the integer n, return the minimum number of cuts needed to divide a circle into n equal slices.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Difference Between Ones and Zeros in Row and Column",
    "problem_id": "2606",
    "frontend_id": "2482",
    "difficulty": "Medium",
    "problem_slug": "difference-between-ones-and-zeros-in-row-and-column",
    "topics": [
      "Array",
      "Matrix",
      "Simulation"
    ],
    "description": "You are given a 0-indexed m x n binary matrix grid.\nA 0-indexed m x n difference matrix diff is created with the following procedure:\nReturn the difference matrix diff.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Penalty for a Shop",
    "problem_id": "2576",
    "frontend_id": "2483",
    "difficulty": "Medium",
    "problem_slug": "minimum-penalty-for-a-shop",
    "topics": [
      "String",
      "Prefix Sum"
    ],
    "description": "You are given the customer visit log of a shop represented by a 0-indexed string customers consisting only of characters 'N' and 'Y':\nIf the shop closes at the jth hour (0 <= j <= n), the penalty is calculated as follows:\nReturn the earliest hour at which the shop must be closed to incur a minimum penalty.\nNote that if a shop closes at the jth hour, it means the shop is closed at the hour j.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Palindromic Subsequences",
    "problem_id": "2577",
    "frontend_id": "2484",
    "difficulty": "Hard",
    "problem_slug": "count-palindromic-subsequences",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "Given a string of digits s, return the number of palindromic subsequences of s having length 5. Since the answer may be very large, return it modulo 109 + 7.\nNote:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Pivot Integer",
    "problem_id": "2571",
    "frontend_id": "2485",
    "difficulty": "Easy",
    "problem_slug": "find-the-pivot-integer",
    "topics": [
      "Math",
      "Prefix Sum"
    ],
    "description": "Given a positive integer n, find the pivot integer x such that:\nReturn the pivot integer x. If no such integer exists, return -1. It is guaranteed that there will be at most one pivot index for the given input.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Append Characters to String to Make Subsequence",
    "problem_id": "2572",
    "frontend_id": "2486",
    "difficulty": "Medium",
    "problem_slug": "append-characters-to-string-to-make-subsequence",
    "topics": [
      "Two Pointers",
      "String",
      "Greedy"
    ],
    "description": "You are given two strings s and t consisting of only lowercase English letters.\nReturn the minimum number of characters that need to be appended to the end of s so that t becomes a subsequence of s.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Remove Nodes From Linked List",
    "problem_id": "2573",
    "frontend_id": "2487",
    "difficulty": "Medium",
    "problem_slug": "remove-nodes-from-linked-list",
    "topics": [
      "Linked List",
      "Stack",
      "Recursion",
      "Monotonic Stack"
    ],
    "description": "You are given the head of a linked list.\nRemove every node which has a node with a greater value anywhere to the right side of it.\nReturn the head of the modified linked list.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Subarrays With Median K",
    "problem_id": "2574",
    "frontend_id": "2488",
    "difficulty": "Hard",
    "problem_slug": "count-subarrays-with-median-k",
    "topics": [
      "Array",
      "Hash Table",
      "Prefix Sum"
    ],
    "description": "You are given an array nums of size n consisting of distinct integers from 1 to n and a positive integer k.\nReturn the number of non-empty subarrays in nums that have a median equal to k.\nNote:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Circular Sentence",
    "problem_id": "2580",
    "frontend_id": "2490",
    "difficulty": "Easy",
    "problem_slug": "circular-sentence",
    "topics": [
      "String"
    ],
    "description": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces.\nWords consist of only uppercase and lowercase English letters. Uppercase and lowercase English letters are considered different.\nA sentence is circular if:\nFor example, \"leetcode exercises sound delightful\", \"eetcode\", \"leetcode eats soul\" are all circular sentences. However, \"Leetcode is cool\", \"happy Leetcode\", \"Leetcode\" and \"I like Leetcode\" are not circular sentences.\nGiven a string sentence, return true if it is circular. Otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Divide Players Into Teams of Equal Skill",
    "problem_id": "2581",
    "frontend_id": "2491",
    "difficulty": "Medium",
    "problem_slug": "divide-players-into-teams-of-equal-skill",
    "topics": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Sorting"
    ],
    "description": "You are given a positive integer array skill of even length n where skill[i] denotes the skill of the ith player. Divide the players into n / 2 teams of size 2 such that the total skill of each team is equal.\nThe chemistry of a team is equal to the product of the skills of the players on that team.\nReturn the sum of the chemistry of all the teams, or return -1 if there is no way to divide the players into teams such that the total skill of each team is equal.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Score of a Path Between Two Cities",
    "problem_id": "2582",
    "frontend_id": "2492",
    "difficulty": "Medium",
    "problem_slug": "minimum-score-of-a-path-between-two-cities",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "description": "You are given a positive integer n representing n cities numbered from 1 to n. You are also given a 2D array roads where roads[i] = [ai, bi, distancei] indicates that there is a bidirectional road between cities ai and bi with a distance equal to distancei. The cities graph is not necessarily connected.\nThe score of a path between two cities is defined as the minimum distance of a road in this path.\nReturn the minimum possible score of a path between cities 1 and n.\nNote:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Divide Nodes Into the Maximum Number of Groups",
    "problem_id": "2583",
    "frontend_id": "2493",
    "difficulty": "Hard",
    "problem_slug": "divide-nodes-into-the-maximum-number-of-groups",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "description": "You are given a positive integer n representing the number of nodes in an undirected graph. The nodes are labeled from 1 to n.\nYou are also given a 2D integer array edges, where edges[i] = [ai, bi] indicates that there is a bidirectional edge between nodes ai and bi. Notice that the given graph may be disconnected.\nDivide the nodes of the graph into m groups (1-indexed) such that:\nReturn the maximum number of groups (i.e., maximum m) into which you can divide the nodes. Return -1 if it is impossible to group the nodes with the given conditions.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Value of a String in an Array",
    "problem_id": "2589",
    "frontend_id": "2496",
    "difficulty": "Easy",
    "problem_slug": "maximum-value-of-a-string-in-an-array",
    "topics": [
      "Array",
      "String"
    ],
    "description": "The value of an alphanumeric string can be defined as:\nGiven an array strs of alphanumeric strings, return the maximum value of any string in strs.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Star Sum of a Graph",
    "problem_id": "2590",
    "frontend_id": "2497",
    "difficulty": "Medium",
    "problem_slug": "maximum-star-sum-of-a-graph",
    "topics": [
      "Array",
      "Greedy",
      "Graph",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "There is an undirected graph consisting of n nodes numbered from 0 to n - 1. You are given a 0-indexed integer array vals of length n where vals[i] denotes the value of the ith node.\nYou are also given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.\nA star graph is a subgraph of the given graph having a center node containing 0 or more neighbors. In other words, it is a subset of edges of the given graph such that there exists a common node for all edges.\nThe image below shows star graphs with 3 and 4 neighbors respectively, centered at the blue node.\nThe star sum is the sum of the values of all the nodes present in the star graph.\nGiven an integer k, return the maximum star sum of a star graph containing at most k edges.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Frog Jump II",
    "problem_id": "2591",
    "frontend_id": "2498",
    "difficulty": "Medium",
    "problem_slug": "frog-jump-ii",
    "topics": [
      "Array",
      "Binary Search",
      "Greedy"
    ],
    "description": "You are given a 0-indexed integer array stones sorted in strictly increasing order representing the positions of stones in a river.\nA frog, initially on the first stone, wants to travel to the last stone and then return to the first stone. However, it can jump to any stone at most once.\nThe length of a jump is the absolute difference between the position of the stone the frog is currently on and the position of the stone to which the frog jumps.\nThe cost of a path is the maximum length of a jump among all jumps in the path.\nReturn the minimum cost of a path for the frog.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Total Cost to Make Arrays Unequal",
    "problem_id": "2592",
    "frontend_id": "2499",
    "difficulty": "Hard",
    "problem_slug": "minimum-total-cost-to-make-arrays-unequal",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Counting"
    ],
    "description": "You are given two 0-indexed integer arrays nums1 and nums2, of equal length n.\nIn one operation, you can swap the values of any two indices of nums1. The cost of this operation is the sum of the indices.\nFind the minimum total cost of performing the given operation any number of times such that nums1[i] != nums2[i] for all 0 <= i <= n - 1 after performing all the operations.\nReturn the minimum total cost such that nums1 and nums2 satisfy the above condition. In case it is not possible, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Delete Greatest Value in Each Row",
    "problem_id": "2585",
    "frontend_id": "2500",
    "difficulty": "Easy",
    "problem_slug": "delete-greatest-value-in-each-row",
    "topics": [
      "Array",
      "Sorting",
      "Heap (Priority Queue)",
      "Matrix",
      "Simulation"
    ],
    "description": "You are given an m x n matrix grid consisting of positive integers.\nPerform the following operation until grid becomes empty:\nNote that the number of columns decreases by one after each operation.\nReturn the answer after performing the operations described above.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Square Streak in an Array",
    "problem_id": "2586",
    "frontend_id": "2501",
    "difficulty": "Medium",
    "problem_slug": "longest-square-streak-in-an-array",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "You are given an integer array nums. A subsequence of nums is called a square streak if:\nReturn the length of the longest square streak in nums, or return -1 if there is no square streak.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Design Memory Allocator",
    "problem_id": "2587",
    "frontend_id": "2502",
    "difficulty": "Medium",
    "problem_slug": "design-memory-allocator",
    "topics": [
      "Array",
      "Hash Table",
      "Design",
      "Simulation"
    ],
    "description": "You are given an integer n representing the size of a 0-indexed memory array. All memory units are initially free.\nYou have a memory allocator with the following functionalities:\nNote that:\nImplement the Allocator class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Maximum Number of Points From Grid Queries",
    "problem_id": "2588",
    "frontend_id": "2503",
    "difficulty": "Hard",
    "problem_slug": "maximum-number-of-points-from-grid-queries",
    "topics": [
      "Array",
      "Two Pointers",
      "Breadth-First Search",
      "Union Find",
      "Sorting",
      "Heap (Priority Queue)",
      "Matrix"
    ],
    "description": "You are given an m x n integer matrix grid and an array queries of size k.\nFind an array answer of size k such that for each integer queries[i] you start in the top left cell of the matrix and repeat the following process:\nAfter the process, answer[i] is the maximum number of points you can get. Note that for each query you are allowed to visit the same cell multiple times.\nReturn the resulting array answer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Pairs Of Similar Strings",
    "problem_id": "2594",
    "frontend_id": "2506",
    "difficulty": "Easy",
    "problem_slug": "count-pairs-of-similar-strings",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Bit Manipulation",
      "Counting"
    ],
    "description": "You are given a 0-indexed string array words.\nTwo strings are similar if they consist of the same characters.\nReturn the number of pairs (i, j) such that 0 <= i < j <= word.length - 1 and the two strings words[i] and words[j] are similar.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Smallest Value After Replacing With Sum of Prime Factors",
    "problem_id": "2595",
    "frontend_id": "2507",
    "difficulty": "Medium",
    "problem_slug": "smallest-value-after-replacing-with-sum-of-prime-factors",
    "topics": [
      "Math",
      "Simulation",
      "Number Theory"
    ],
    "description": "You are given a positive integer n.\nContinuously replace n with the sum of its prime factors.\nReturn the smallest value n will take on.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Add Edges to Make Degrees of All Nodes Even",
    "problem_id": "2596",
    "frontend_id": "2508",
    "difficulty": "Hard",
    "problem_slug": "add-edges-to-make-degrees-of-all-nodes-even",
    "topics": [
      "Hash Table",
      "Graph"
    ],
    "description": "There is an undirected graph consisting of n nodes numbered from 1 to n. You are given the integer n and a 2D array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi. The graph can be disconnected.\nYou can add at most two additional edges (possibly none) to this graph so that there are no repeated edges and no self-loops.\nReturn true if it is possible to make the degree of each node in the graph even, otherwise return false.\nThe degree of a node is the number of edges connected to it.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Cycle Length Queries in a Tree",
    "problem_id": "2597",
    "frontend_id": "2509",
    "difficulty": "Hard",
    "problem_slug": "cycle-length-queries-in-a-tree",
    "topics": [
      "Array",
      "Tree",
      "Binary Tree"
    ],
    "description": "You are given an integer n. There is a complete binary tree with 2n - 1 nodes. The root of that tree is the node with the value 1, and every node with a value val in the range [1, 2n - 1 - 1] has two children where:\nYou are also given a 2D integer array queries of length m, where queries[i] = [ai, bi]. For each query, solve the following problem:\nNote that:\nReturn an array answer of length m where answer[i] is the answer to the ith query.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Enemy Forts That Can Be Captured",
    "problem_id": "2602",
    "frontend_id": "2511",
    "difficulty": "Easy",
    "problem_slug": "maximum-enemy-forts-that-can-be-captured",
    "topics": [
      "Array",
      "Two Pointers"
    ],
    "description": "You are given a 0-indexed integer array forts of length n representing the positions of several forts. forts[i] can be -1, 0, or 1 where:\nNow you have decided to move your army from one of your forts at position i to an empty position j such that:\nWhile moving the army, all the enemy forts that come in the way are captured.\nReturn the maximum number of enemy forts that can be captured. In case it is impossible to move your army, or you do not have any fort under your command, return 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Reward Top K Students",
    "problem_id": "2603",
    "frontend_id": "2512",
    "difficulty": "Medium",
    "problem_slug": "reward-top-k-students",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given two string arrays positive_feedback and negative_feedback, containing the words denoting positive and negative feedback, respectively. Note that no word is both positive and negative.\nInitially every student has 0 points. Each positive word in a feedback report increases the points of a student by 3, whereas each negative word decreases the points by 1.\nYou are given n feedback reports, represented by a 0-indexed string array report and a 0-indexed integer array student_id, where student_id[i] represents the ID of the student who has received the feedback report report[i]. The ID of each student is unique.\nGiven an integer k, return the top k students after ranking them in non-increasing order by their points. In case more than one student has the same points, the one with the lower ID ranks higher.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimize the Maximum of Two Arrays",
    "problem_id": "2628",
    "frontend_id": "2513",
    "difficulty": "Medium",
    "problem_slug": "minimize-the-maximum-of-two-arrays",
    "topics": [
      "Math",
      "Binary Search",
      "Number Theory"
    ],
    "description": "We have two arrays arr1 and arr2 which are initially empty. You need to add positive integers to them such that they satisfy all the following conditions:\nGiven divisor1, divisor2, uniqueCnt1, and uniqueCnt2, return the minimum possible maximum integer that can be present in either array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Anagrams",
    "problem_id": "2605",
    "frontend_id": "2514",
    "difficulty": "Hard",
    "problem_slug": "count-anagrams",
    "topics": [
      "Hash Table",
      "Math",
      "String",
      "Combinatorics",
      "Counting"
    ],
    "description": "You are given a string s containing one or more words. Every consecutive pair of words is separated by a single space ' '.\nA string t is an anagram of string s if the ith word of t is a permutation of the ith word of s.\nReturn the number of distinct anagrams of s. Since the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Shortest Distance to Target String in a Circular Array",
    "problem_id": "2598",
    "frontend_id": "2515",
    "difficulty": "Easy",
    "problem_slug": "shortest-distance-to-target-string-in-a-circular-array",
    "topics": [
      "Array",
      "String"
    ],
    "description": "You are given a 0-indexed circular string array words and a string target. A circular array means that the array's end connects to the array's beginning.\nStarting from startIndex, you can move to either the next word or the previous word with 1 step at a time.\nReturn the shortest distance needed to reach the string target. If the string target does not exist in words, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Take K of Each Character From Left and Right",
    "problem_id": "2599",
    "frontend_id": "2516",
    "difficulty": "Medium",
    "problem_slug": "take-k-of-each-character-from-left-and-right",
    "topics": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "You are given a string s consisting of the characters 'a', 'b', and 'c' and a non-negative integer k. Each minute, you may take either the leftmost character of s, or the rightmost character of s.\nReturn the minimum number of minutes needed for you to take at least k of each character, or return -1 if it is not possible to take k of each character.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Tastiness of Candy Basket",
    "problem_id": "2600",
    "frontend_id": "2517",
    "difficulty": "Medium",
    "problem_slug": "maximum-tastiness-of-candy-basket",
    "topics": [
      "Array",
      "Binary Search",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an array of positive integers price where price[i] denotes the price of the ith candy and a positive integer k.\nThe store sells baskets of k distinct candies. The tastiness of a candy basket is the smallest absolute difference of the prices of any two candies in the basket.\nReturn the maximum tastiness of a candy basket.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Great Partitions",
    "problem_id": "2601",
    "frontend_id": "2518",
    "difficulty": "Hard",
    "problem_slug": "number-of-great-partitions",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an array nums consisting of positive integers and an integer k.\nPartition the array into two ordered groups such that each element is in exactly one group. A partition is called great if the sum of elements of each group is greater than or equal to k.\nReturn the number of distinct great partitions. Since the answer may be too large, return it modulo 109 + 7.\nTwo partitions are considered distinct if some element nums[i] is in different groups in the two partitions.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count the Digits That Divide a Number",
    "problem_id": "2608",
    "frontend_id": "2520",
    "difficulty": "Easy",
    "problem_slug": "count-the-digits-that-divide-a-number",
    "topics": [
      "Math"
    ],
    "description": "Given an integer num, return the number of digits in num that divide num.\nAn integer val divides nums if nums % val == 0.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Distinct Prime Factors of Product of Array",
    "problem_id": "2609",
    "frontend_id": "2521",
    "difficulty": "Medium",
    "problem_slug": "distinct-prime-factors-of-product-of-array",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Number Theory"
    ],
    "description": "Given an array of positive integers nums, return the number of distinct prime factors in the product of the elements of nums.\nNote that:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Partition String Into Substrings With Values at Most K",
    "problem_id": "2511",
    "frontend_id": "2522",
    "difficulty": "Medium",
    "problem_slug": "partition-string-into-substrings-with-values-at-most-k",
    "topics": [
      "String",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "You are given a string s consisting of digits from 1 to 9 and an integer k.\nA partition of a string s is called good if:\nReturn the minimum number of substrings in a good partition of s. If no good partition of s exists, return -1.\nNote that:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Closest Prime Numbers in Range",
    "problem_id": "2610",
    "frontend_id": "2523",
    "difficulty": "Medium",
    "problem_slug": "closest-prime-numbers-in-range",
    "topics": [
      "Math",
      "Number Theory"
    ],
    "description": "Given two positive integers left and right, find the two integers num1 and num2 such that:\nReturn the positive integer array ans = [num1, num2]. If there are multiple pairs satisfying these conditions, return the one with the smallest num1 value. If no such numbers exist, return [-1, -1].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Categorize Box According to Criteria",
    "problem_id": "2619",
    "frontend_id": "2525",
    "difficulty": "Easy",
    "problem_slug": "categorize-box-according-to-criteria",
    "topics": [
      "Math"
    ],
    "description": "Given four integers length, width, height, and mass, representing the dimensions and mass of a box, respectively, return a string representing the category of the box.\nNote that the volume of the box is the product of its length, width and height.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Consecutive Integers from a Data Stream",
    "problem_id": "2620",
    "frontend_id": "2526",
    "difficulty": "Medium",
    "problem_slug": "find-consecutive-integers-from-a-data-stream",
    "topics": [
      "Hash Table",
      "Design",
      "Queue",
      "Counting",
      "Data Stream"
    ],
    "description": "For a stream of integers, implement a data structure that checks if the last k integers parsed in the stream are equal to value.\nImplement the DataStream class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Find Xor-Beauty of Array",
    "problem_id": "2621",
    "frontend_id": "2527",
    "difficulty": "Medium",
    "problem_slug": "find-xor-beauty-of-array",
    "topics": [
      "Array",
      "Math",
      "Bit Manipulation"
    ],
    "description": "You are given a 0-indexed integer array nums.\nThe effective value of three indices i, j, and k is defined as ((nums[i] | nums[j]) & nums[k]).\nThe xor-beauty of the array is the XORing of the effective values of all the possible triplets of indices (i, j, k) where 0 <= i, j, k < n.\nReturn the xor-beauty of nums.\nNote that:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximize the Minimum Powered City",
    "problem_id": "2618",
    "frontend_id": "2528",
    "difficulty": "Hard",
    "problem_slug": "maximize-the-minimum-powered-city",
    "topics": [
      "Array",
      "Binary Search",
      "Greedy",
      "Queue",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed integer array stations of length n, where stations[i] represents the number of power stations in the ith city.\nEach power station can provide power to every city in a fixed range. In other words, if the range is denoted by r, then a power station at city i can provide power to all cities j such that |i - j| <= r and 0 <= i, j <= n - 1.\nThe power of a city is the total number of power stations it is being provided power from.\nThe government has sanctioned building k more power stations, each of which can be built in any city, and have the same range as the pre-existing ones.\nGiven the two integers r and k, return the maximum possible minimum power of a city, if the additional power stations are built optimally.\nNote that you can build the k power stations in multiple cities.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Count of Positive Integer and Negative Integer",
    "problem_id": "2614",
    "frontend_id": "2529",
    "difficulty": "Easy",
    "problem_slug": "maximum-count-of-positive-integer-and-negative-integer",
    "topics": [
      "Array",
      "Binary Search",
      "Counting"
    ],
    "description": "Given an array nums sorted in non-decreasing order, return the maximum between the number of positive integers and the number of negative integers.\nNote that 0 is neither positive nor negative.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Can you solve the problem in O(log(n)) time complexity?"
  },
  {
    "title": "Maximal Score After Applying K Operations",
    "problem_id": "2616",
    "frontend_id": "2530",
    "difficulty": "Medium",
    "problem_slug": "maximal-score-after-applying-k-operations",
    "topics": [
      "Array",
      "Greedy",
      "Heap (Priority Queue)"
    ],
    "description": "You are given a 0-indexed integer array nums and an integer k. You have a starting score of 0.\nIn one operation:\nReturn the maximum possible score you can attain after applying exactly k operations.\nThe ceiling function ceil(val) is the least integer greater than or equal to val.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Make Number of Distinct Characters Equal",
    "problem_id": "2615",
    "frontend_id": "2531",
    "difficulty": "Medium",
    "problem_slug": "make-number-of-distinct-characters-equal",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "You are given two 0-indexed strings word1 and word2.\nA move consists of choosing two indices i and j such that 0 <= i < word1.length and 0 <= j < word2.length and swapping word1[i] with word2[j].\nReturn true if it is possible to get the number of distinct characters in word1 and word2 to be equal with exactly one move. Return false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Time to Cross a Bridge",
    "problem_id": "2642",
    "frontend_id": "2532",
    "difficulty": "Hard",
    "problem_slug": "time-to-cross-a-bridge",
    "topics": [
      "Array",
      "Heap (Priority Queue)",
      "Simulation"
    ],
    "description": "There are k workers who want to move n boxes from the right (old) warehouse to the left (new) warehouse. You are given the two integers n and k, and a 2D integer array time of size k x 4 where time[i] = [righti, picki, lefti, puti].\nThe warehouses are separated by a river and connected by a bridge. Initially, all k workers are waiting on the left side of the bridge. To move the boxes, the ith worker can do the following:\nThe ith worker is less efficient than the jth worker if either condition is met:\nThe following rules regulate the movement of the workers through the bridge:\nReturn the elapsed minutes at which the last box reaches the left side of the bridge.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Difference Between Element Sum and Digit Sum of an Array",
    "problem_id": "2624",
    "frontend_id": "2535",
    "difficulty": "Easy",
    "problem_slug": "difference-between-element-sum-and-digit-sum-of-an-array",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "You are given a positive integer array nums.\nReturn the absolute difference between the element sum and digit sum of nums.\nNote that the absolute difference between two integers x and y is defined as |x - y|.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Increment Submatrices by One",
    "problem_id": "2625",
    "frontend_id": "2536",
    "difficulty": "Medium",
    "problem_slug": "increment-submatrices-by-one",
    "topics": [
      "Array",
      "Matrix",
      "Prefix Sum"
    ],
    "description": "You are given a positive integer n, indicating that we initially have an n x n 0-indexed integer matrix mat filled with zeroes.\nYou are also given a 2D integer array query. For each query[i] = [row1i, col1i, row2i, col2i], you should do the following operation:\nReturn the matrix mat after performing every query.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count the Number of Good Subarrays",
    "problem_id": "2626",
    "frontend_id": "2537",
    "difficulty": "Medium",
    "problem_slug": "count-the-number-of-good-subarrays",
    "topics": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "description": "Given an integer array nums and an integer k, return the number of good subarrays of nums.\nA subarray arr is good if there are at least k pairs of indices (i, j) such that i < j and arr[i] == arr[j].\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Difference Between Maximum and Minimum Price Sum",
    "problem_id": "2627",
    "frontend_id": "2538",
    "difficulty": "Hard",
    "problem_slug": "difference-between-maximum-and-minimum-price-sum",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Tree",
      "Depth-First Search"
    ],
    "description": "There exists an undirected and initially unrooted tree with n nodes indexed from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nEach node has an associated price. You are given an integer array price, where price[i] is the price of the ith node.\nThe price sum of a given path is the sum of the prices of all nodes lying on that path.\nThe tree can be rooted at any node root of your choice. The incurred cost after choosing root is the difference between the maximum and minimum price sum amongst all paths starting at root.\nReturn the maximum possible cost amongst all possible root choices.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Common Value",
    "problem_id": "2634",
    "frontend_id": "2540",
    "difficulty": "Easy",
    "problem_slug": "minimum-common-value",
    "topics": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search"
    ],
    "description": "Given two integer arrays nums1 and nums2, sorted in non-decreasing order, return the minimum integer common to both arrays. If there is no common integer amongst nums1 and nums2, return -1.\nNote that an integer is said to be common to nums1 and nums2 if both arrays have at least one occurrence of that integer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Make Array Equal II",
    "problem_id": "2604",
    "frontend_id": "2541",
    "difficulty": "Medium",
    "problem_slug": "minimum-operations-to-make-array-equal-ii",
    "topics": [
      "Array",
      "Math",
      "Greedy"
    ],
    "description": "You are given two integer arrays nums1 and nums2 of equal length n and an integer k. You can perform the following operation on nums1:\nnums1 is said to be equal to nums2 if for all indices i such that 0 <= i < n, nums1[i] == nums2[i].\nReturn the minimum number of operations required to make nums1 equal to nums2. If it is impossible to make them equal, return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Subsequence Score",
    "problem_id": "2636",
    "frontend_id": "2542",
    "difficulty": "Medium",
    "problem_slug": "maximum-subsequence-score",
    "topics": [
      "Array",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given two 0-indexed integer arrays nums1 and nums2 of equal length n and a positive integer k. You must choose a subsequence of indices from nums1 of length k.\nFor chosen indices i0, i1, ..., ik - 1, your score is defined as:\nReturn the maximum possible score.\nA subsequence of indices of an array is a set that can be derived from the set {0, 1, ..., n-1} by deleting some or no elements.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check if Point Is Reachable",
    "problem_id": "2635",
    "frontend_id": "2543",
    "difficulty": "Hard",
    "problem_slug": "check-if-point-is-reachable",
    "topics": [
      "Math",
      "Number Theory"
    ],
    "description": "There exists an infinitely large grid. You are currently at point (1, 1), and you need to reach the point (targetX, targetY) using a finite number of steps.\nIn one step, you can move from point (x, y) to any one of the following points:\nGiven two integers targetX and targetY representing the X-coordinate and Y-coordinate of your final position, return true if you can reach the point from (1, 1) using some number of steps, and false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Alternating Digit Sum",
    "problem_id": "2630",
    "frontend_id": "2544",
    "difficulty": "Easy",
    "problem_slug": "alternating-digit-sum",
    "topics": [
      "Math"
    ],
    "description": "You are given a positive integer n. Each digit of n has a sign according to the following rules:\nReturn the sum of all digits with their corresponding sign.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sort the Students by Their Kth Score",
    "problem_id": "2631",
    "frontend_id": "2545",
    "difficulty": "Medium",
    "problem_slug": "sort-the-students-by-their-kth-score",
    "topics": [
      "Array",
      "Sorting",
      "Matrix"
    ],
    "description": "There is a class with m students and n exams. You are given a 0-indexed m x n integer matrix score, where each row represents one student and score[i][j] denotes the score the ith student got in the jth exam. The matrix score contains distinct integers only.\nYou are also given an integer k. Sort the students (i.e., the rows of the matrix) by their scores in the kth (0-indexed) exam from the highest to the lowest.\nReturn the matrix after sorting it.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Apply Bitwise Operations to Make Strings Equal",
    "problem_id": "2632",
    "frontend_id": "2546",
    "difficulty": "Medium",
    "problem_slug": "apply-bitwise-operations-to-make-strings-equal",
    "topics": [
      "String",
      "Bit Manipulation"
    ],
    "description": "You are given two 0-indexed binary strings s and target of the same length n. You can do the following operation on s any number of times:\nFor example, if s = \"0110\", you can choose i = 0 and j = 2, then simultaneously replace s[0] with (s[0] OR s[2] = 0 OR 1 = 1), and s[2] with (s[0] XOR s[2] = 0 XOR 1 = 1), so we will have s = \"1110\".\nReturn true if you can make the string s equal to target, or false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Cost to Split an Array",
    "problem_id": "2633",
    "frontend_id": "2547",
    "difficulty": "Hard",
    "problem_slug": "minimum-cost-to-split-an-array",
    "topics": [
      "Array",
      "Hash Table",
      "Dynamic Programming",
      "Counting"
    ],
    "description": "You are given an integer array nums and an integer k.\nSplit the array into some number of non-empty subarrays. The cost of a split is the sum of the importance value of each subarray in the split.\nLet trimmed(subarray) be the version of the subarray where all numbers which appear only once are removed.\nThe importance value of a subarray is k + trimmed(subarray).length.\nReturn the minimum possible cost of a split of nums.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Distinct Numbers on Board",
    "problem_id": "2679",
    "frontend_id": "2549",
    "difficulty": "Easy",
    "problem_slug": "count-distinct-numbers-on-board",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Simulation"
    ],
    "description": "You are given a positive integer n, that is initially placed on a board. Every day, for 109 days, you perform the following procedure:\nReturn the number of distinct integers present on the board after 109 days have elapsed.\nNote:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Collisions of Monkeys on a Polygon",
    "problem_id": "2680",
    "frontend_id": "2550",
    "difficulty": "Medium",
    "problem_slug": "count-collisions-of-monkeys-on-a-polygon",
    "topics": [
      "Math",
      "Recursion"
    ],
    "description": "There is a regular convex polygon with n vertices. The vertices are labeled from 0 to n - 1 in a clockwise direction, and each vertex has exactly one monkey. The following figure shows a convex polygon of 6 vertices.\nSimultaneously, each monkey moves to a neighboring vertex. A collision happens if at least two monkeys reside on the same vertex after the movement or intersect on an edge.\nReturn the number of ways the monkeys can move so that at least one collision happens. Since the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Put Marbles in Bags",
    "problem_id": "2681",
    "frontend_id": "2551",
    "difficulty": "Hard",
    "problem_slug": "put-marbles-in-bags",
    "topics": [
      "Array",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You have k bags. You are given a 0-indexed integer array weights where weights[i] is the weight of the ith marble. You are also given the integer k.\nDivide the marbles into the k bags according to the following rules:\nThe score after distributing the marbles is the sum of the costs of all the k bags.\nReturn the difference between the maximum and minimum scores among marble distributions.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Increasing Quadruplets",
    "problem_id": "2682",
    "frontend_id": "2552",
    "difficulty": "Hard",
    "problem_slug": "count-increasing-quadruplets",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Binary Indexed Tree",
      "Enumeration",
      "Prefix Sum"
    ],
    "description": "Given a 0-indexed integer array nums of size n containing all numbers from 1 to n, return the number of increasing quadruplets.\nA quadruplet (i, j, k, l) is increasing if:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Separate the Digits in an Array",
    "problem_id": "2639",
    "frontend_id": "2553",
    "difficulty": "Easy",
    "problem_slug": "separate-the-digits-in-an-array",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "Given an array of positive integers nums, return an array answer that consists of the digits of each integer in nums after separating them in the same order they appear in nums.\nTo separate the digits of an integer is to get all the digits it has in the same order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Number of Integers to Choose From a Range I",
    "problem_id": "2640",
    "frontend_id": "2554",
    "difficulty": "Medium",
    "problem_slug": "maximum-number-of-integers-to-choose-from-a-range-i",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an integer array banned and two integers n and maxSum. You are choosing some number of integers following the below rules:\nReturn the maximum number of integers you can choose following the mentioned rules.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximize Win From Two Segments",
    "problem_id": "2673",
    "frontend_id": "2555",
    "difficulty": "Medium",
    "problem_slug": "maximize-win-from-two-segments",
    "topics": [
      "Array",
      "Binary Search",
      "Sliding Window"
    ],
    "description": "There are some prizes on the X-axis. You are given an integer array prizePositions that is sorted in non-decreasing order, where prizePositions[i] is the position of the ith prize. There could be different prizes at the same position on the line. You are also given an integer k.\nYou are allowed to select two segments with integer endpoints. The length of each segment must be k. You will collect all prizes whose position falls within at least one of the two selected segments (including the endpoints of the segments). The two selected segments may intersect.\nReturn the maximum number of prizes you can win if you choose the two segments optimally.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Disconnect Path in a Binary Matrix by at Most One Flip",
    "problem_id": "2641",
    "frontend_id": "2556",
    "difficulty": "Medium",
    "problem_slug": "disconnect-path-in-a-binary-matrix-by-at-most-one-flip",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Depth-First Search",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "You are given a 0-indexed m x n binary matrix grid. You can move from a cell (row, col) to any of the cells (row + 1, col) or (row, col + 1) that has the value 1. The matrix is disconnected if there is no path from (0, 0) to (m - 1, n - 1).\nYou can flip the value of at most one (possibly none) cell. You cannot flip the cells (0, 0) and (m - 1, n - 1).\nReturn true if it is possible to make the matrix disconnect or false otherwise.\nNote that flipping a cell changes its value from 0 to 1 or from 1 to 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Take Gifts From the Richest Pile",
    "problem_id": "2692",
    "frontend_id": "2558",
    "difficulty": "Easy",
    "problem_slug": "take-gifts-from-the-richest-pile",
    "topics": [
      "Array",
      "Heap (Priority Queue)",
      "Simulation"
    ],
    "description": "You are given an integer array gifts denoting the number of gifts in various piles. Every second, you do the following:\nReturn the number of gifts remaining after k seconds.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Vowel Strings in Ranges",
    "problem_id": "2691",
    "frontend_id": "2559",
    "difficulty": "Medium",
    "problem_slug": "count-vowel-strings-in-ranges",
    "topics": [
      "Array",
      "String",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed array of strings words and a 2D array of integers queries.\nEach query queries[i] = [li, ri] asks us to find the number of strings present at the indices ranging from li to ri (both inclusive) of words that start and end with a vowel.\nReturn an array ans of size queries.length, where ans[i] is the answer to the ith query.\nNote that the vowel letters are 'a', 'e', 'i', 'o', and 'u'.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "House Robber IV",
    "problem_id": "2690",
    "frontend_id": "2560",
    "difficulty": "Medium",
    "problem_slug": "house-robber-iv",
    "topics": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "There are several consecutive houses along a street, each of which has some money inside. There is also a robber, who wants to steal money from the homes, but he refuses to steal from adjacent homes.\nThe capability of the robber is the maximum amount of money he steals from one house of all the houses he robbed.\nYou are given an integer array nums representing how much money is stashed in each house. More formally, the ith house from the left has nums[i] dollars.\nYou are also given an integer k, representing the minimum number of houses the robber will steal from. It is always possible to steal at least k houses.\nReturn the minimum capability of the robber out of all the possible ways to steal at least k houses.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Rearranging Fruits",
    "problem_id": "2689",
    "frontend_id": "2561",
    "difficulty": "Hard",
    "problem_slug": "rearranging-fruits",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Sort"
    ],
    "description": "You have two fruit baskets containing n fruits each. You are given two 0-indexed integer arrays basket1 and basket2 representing the cost of fruit in each basket. You want to make both baskets equal. To do so, you can use the following operation as many times as you want:\nTwo baskets are considered equal if sorting them according to the fruit cost makes them exactly the same baskets.\nReturn the minimum cost to make both the baskets equal or -1 if impossible.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Array Concatenation Value",
    "problem_id": "2698",
    "frontend_id": "2562",
    "difficulty": "Easy",
    "problem_slug": "find-the-array-concatenation-value",
    "topics": [
      "Array",
      "Two Pointers",
      "Simulation"
    ],
    "description": "You are given a 0-indexed integer array nums.\nThe concatenation of two numbers is the number formed by concatenating their numerals.\nThe concatenation value of nums is initially equal to 0. Perform this operation until nums becomes empty:\nReturn the concatenation value of nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count the Number of Fair Pairs",
    "problem_id": "2699",
    "frontend_id": "2563",
    "difficulty": "Medium",
    "problem_slug": "count-the-number-of-fair-pairs",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "description": "Given a 0-indexed integer array nums of size n and two integers lower and upper, return the number of fair pairs.\nA pair (i, j) is fair if:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Substring XOR Queries",
    "problem_id": "2700",
    "frontend_id": "2564",
    "difficulty": "Medium",
    "problem_slug": "substring-xor-queries",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Bit Manipulation"
    ],
    "description": "You are given a binary string s, and a 2D integer array queries where queries[i] = [firsti, secondi].\nFor the ith query, find the shortest substring of s whose decimal value, val, yields secondi when bitwise XORed with firsti. In other words, val ^ firsti == secondi.\nThe answer to the ith query is the endpoints (0-indexed) of the substring [lefti, righti] or [-1, -1] if no such substring exists. If there are multiple answers, choose the one with the minimum lefti.\nReturn an array ans where ans[i] = [lefti, righti] is the answer to the ith query.\nA substring is a contiguous non-empty sequence of characters within a string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Subsequence With the Minimum Score",
    "problem_id": "2701",
    "frontend_id": "2565",
    "difficulty": "Hard",
    "problem_slug": "subsequence-with-the-minimum-score",
    "topics": [
      "Two Pointers",
      "String",
      "Binary Search"
    ],
    "description": "You are given two strings s and t.\nYou are allowed to remove any number of characters from the string t.\nThe score of the string is 0 if no characters are removed from the string t, otherwise:\nThen the score of the string is right - left + 1.\nReturn the minimum possible score to make t a subsequence of s.\nA subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Difference by Remapping a Digit",
    "problem_id": "2704",
    "frontend_id": "2566",
    "difficulty": "Easy",
    "problem_slug": "maximum-difference-by-remapping-a-digit",
    "topics": [
      "Math",
      "Greedy"
    ],
    "description": "You are given an integer num. You know that Bob will sneakily remap one of the 10 possible digits (0 to 9) to another digit.\nReturn the difference between the maximum and minimum values Bob can make by remapping exactly one digit in num.\nNotes:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Score by Changing Two Elements",
    "problem_id": "2706",
    "frontend_id": "2567",
    "difficulty": "Medium",
    "problem_slug": "minimum-score-by-changing-two-elements",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an integer array nums.\nReturn the minimum score after changing two elements of nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Impossible OR",
    "problem_id": "2705",
    "frontend_id": "2568",
    "difficulty": "Medium",
    "problem_slug": "minimum-impossible-or",
    "topics": [
      "Array",
      "Bit Manipulation",
      "Brainteaser"
    ],
    "description": "You are given a 0-indexed integer array nums.\nWe say that an integer x is expressible from nums if there exist some integers 0 <= index1 < index2 < ... < indexk < nums.length for which nums[index1] | nums[index2] | ... | nums[indexk] = x. In other words, an integer is expressible if it can be written as the bitwise OR of some subsequence of nums.\nReturn the minimum positive non-zero integer that is not expressible from nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Handling Sum Queries After Update",
    "problem_id": "2703",
    "frontend_id": "2569",
    "difficulty": "Hard",
    "problem_slug": "handling-sum-queries-after-update",
    "topics": [
      "Array",
      "Segment Tree"
    ],
    "description": "You are given two 0-indexed arrays nums1 and nums2 and a 2D array queries of queries. There are three types of queries:\nReturn an array containing all the answers to the third type queries.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Merge Two 2D Arrays by Summing Values",
    "problem_id": "2707",
    "frontend_id": "2570",
    "difficulty": "Easy",
    "problem_slug": "merge-two-2d-arrays-by-summing-values",
    "topics": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "description": "You are given two 2D integer arrays nums1 and nums2.\nEach array contains unique ids and is sorted in ascending order by id.\nMerge the two arrays into one array that is sorted in ascending order by id, respecting the following conditions:\nReturn the resulting array. The returned array must be sorted in ascending order by id.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Reduce an Integer to 0",
    "problem_id": "2710",
    "frontend_id": "2571",
    "difficulty": "Medium",
    "problem_slug": "minimum-operations-to-reduce-an-integer-to-0",
    "topics": [
      "Dynamic Programming",
      "Greedy",
      "Bit Manipulation"
    ],
    "description": "You are given a positive integer n, you can do the following operation any number of times:\nReturn the minimum number of operations to make n equal to 0.\nA number x is power of 2 if x == 2i where i >= 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count the Number of Square-Free Subsets",
    "problem_id": "2709",
    "frontend_id": "2572",
    "difficulty": "Medium",
    "problem_slug": "count-the-number-of-square-free-subsets",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "You are given a positive integer 0-indexed array nums.\nA subset of the array nums is square-free if the product of its elements is a square-free integer.\nA square-free integer is an integer that is divisible by no square number other than 1.\nReturn the number of square-free non-empty subsets of the array nums. Since the answer may be too large, return it modulo 109 + 7.\nA non-empty subset of nums is an array that can be obtained by deleting some (possibly none but not all) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the String with LCP",
    "problem_id": "2708",
    "frontend_id": "2573",
    "difficulty": "Hard",
    "problem_slug": "find-the-string-with-lcp",
    "topics": [
      "Array",
      "String",
      "Dynamic Programming",
      "Greedy",
      "Union Find",
      "Matrix"
    ],
    "description": "We define the lcp matrix of any 0-indexed string word of n lowercase English letters as an n x n grid such that:\nGiven an n x n matrix lcp, return the alphabetically smallest string word that corresponds to lcp. If there is no such string, return an empty string.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"aabd\" is lexicographically smaller than \"aaca\" because the first position they differ is at the third letter, and 'b' comes before 'c'.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Left and Right Sum Differences",
    "problem_id": "2714",
    "frontend_id": "2574",
    "difficulty": "Easy",
    "problem_slug": "left-and-right-sum-differences",
    "topics": [
      "Array",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed integer array nums of size n.\nDefine two arrays leftSum and rightSum where:\nReturn an integer array answer of size n where answer[i] = |leftSum[i] - rightSum[i]|.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Divisibility Array of a String",
    "problem_id": "2713",
    "frontend_id": "2575",
    "difficulty": "Medium",
    "problem_slug": "find-the-divisibility-array-of-a-string",
    "topics": [
      "Array",
      "Math",
      "String"
    ],
    "description": "You are given a 0-indexed string word of length n consisting of digits, and a positive integer m.\nThe divisibility array div of word is an integer array of length n such that:\nReturn the divisibility array of word.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Maximum Number of Marked Indices",
    "problem_id": "2712",
    "frontend_id": "2576",
    "difficulty": "Medium",
    "problem_slug": "find-the-maximum-number-of-marked-indices",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given a 0-indexed integer array nums.\nInitially, all of the indices are unmarked. You are allowed to make this operation any number of times:\nReturn the maximum possible number of marked indices in nums using the above operation any number of times.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Time to Visit a Cell In a Grid",
    "problem_id": "2711",
    "frontend_id": "2577",
    "difficulty": "Hard",
    "problem_slug": "minimum-time-to-visit-a-cell-in-a-grid",
    "topics": [
      "Array",
      "Breadth-First Search",
      "Graph",
      "Heap (Priority Queue)",
      "Matrix",
      "Shortest Path"
    ],
    "description": "You are given a m x n matrix grid consisting of non-negative integers where grid[row][col] represents the minimum time required to be able to visit the cell (row, col), which means you can visit the cell (row, col) only when the time you visit it is greater than or equal to grid[row][col].\nYou are standing in the top-left cell of the matrix in the 0th second, and you must move to any adjacent cell in the four directions: up, down, left, and right. Each move you make takes 1 second.\nReturn the minimum time required in which you can visit the bottom-right cell of the matrix. If you cannot visit the bottom-right cell, then return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Split With Minimum Sum",
    "problem_id": "2650",
    "frontend_id": "2578",
    "difficulty": "Easy",
    "problem_slug": "split-with-minimum-sum",
    "topics": [
      "Math",
      "Greedy",
      "Sorting"
    ],
    "description": "Given a positive integer num, split it into two non-negative integers num1 and num2 such that:\nReturn the minimum possible sum of num1 and num2.\nNotes:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Total Number of Colored Cells",
    "problem_id": "2649",
    "frontend_id": "2579",
    "difficulty": "Medium",
    "problem_slug": "count-total-number-of-colored-cells",
    "topics": [
      "Math"
    ],
    "description": "There exists an infinitely large two-dimensional grid of uncolored unit cells. You are given a positive integer n, indicating that you must do the following routine for n minutes:\nBelow is a pictorial representation of the state of the grid after minutes 1, 2, and 3.\nReturn the number of colored cells at the end of n minutes.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Ways to Group Overlapping Ranges",
    "problem_id": "2651",
    "frontend_id": "2580",
    "difficulty": "Medium",
    "problem_slug": "count-ways-to-group-overlapping-ranges",
    "topics": [
      "Array",
      "Sorting"
    ],
    "description": "You are given a 2D integer array ranges where ranges[i] = [starti, endi] denotes that all integers between starti and endi (both inclusive) are contained in the ith range.\nYou are to split ranges into two (possibly empty) groups such that:\nTwo ranges are said to be overlapping if there exists at least one integer that is present in both ranges.\nReturn the total number of ways to split ranges into two groups. Since the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Number of Possible Root Nodes",
    "problem_id": "2652",
    "frontend_id": "2581",
    "difficulty": "Hard",
    "problem_slug": "count-number-of-possible-root-nodes",
    "topics": [
      "Array",
      "Hash Table",
      "Dynamic Programming",
      "Tree",
      "Depth-First Search"
    ],
    "description": "Alice has an undirected tree with n nodes labeled from 0 to n - 1. The tree is represented as a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nAlice wants Bob to find the root of the tree. She allows Bob to make several guesses about her tree. In one guess, he does the following:\nBob's guesses are represented by a 2D integer array guesses where guesses[j] = [uj, vj] indicates Bob guessed uj to be the parent of vj.\nAlice being lazy, does not reply to each of Bob's guesses, but just says that at least k of his guesses are true.\nGiven the 2D integer arrays edges, guesses and the integer k, return the number of possible nodes that can be the root of Alice's tree. If there is no such tree, return 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Pass the Pillow",
    "problem_id": "2645",
    "frontend_id": "2582",
    "difficulty": "Easy",
    "problem_slug": "pass-the-pillow",
    "topics": [
      "Math",
      "Simulation"
    ],
    "description": "There are n people standing in a line labeled from 1 to n. The first person in the line is holding a pillow initially. Every second, the person holding the pillow passes it to the next person standing in the line. Once the pillow reaches the end of the line, the direction changes, and people continue passing the pillow in the opposite direction.\nGiven the two positive integers n and time, return the index of the person holding the pillow after time seconds.\nExample 1:\nExample 2:\nConstraints:\nNote: This question is the same as  3178: Find the Child Who Has the Ball After K Seconds."
  },
  {
    "title": "Kth Largest Sum in a Binary Tree",
    "problem_id": "2646",
    "frontend_id": "2583",
    "difficulty": "Medium",
    "problem_slug": "kth-largest-sum-in-a-binary-tree",
    "topics": [
      "Tree",
      "Breadth-First Search",
      "Sorting",
      "Binary Tree"
    ],
    "description": "You are given the root of a binary tree and a positive integer k.\nThe level sum in the tree is the sum of the values of the nodes that are on the same level.\nReturn the kth largest level sum in the tree (not necessarily distinct). If there are fewer than k levels in the tree, return -1.\nNote that two nodes are on the same level if they have the same distance from the root.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Split the Array to Make Coprime Products",
    "problem_id": "2647",
    "frontend_id": "2584",
    "difficulty": "Hard",
    "problem_slug": "split-the-array-to-make-coprime-products",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Number Theory"
    ],
    "description": "You are given a 0-indexed integer array nums of length n.\nA split at an index i where 0 <= i <= n - 2 is called valid if the product of the first i + 1 elements and the product of the remaining elements are coprime.\nReturn the smallest index i at which the array can be split validly or -1 if there is no such split.\nTwo values val1 and val2 are coprime if gcd(val1, val2) == 1 where gcd(val1, val2) is the greatest common divisor of val1 and val2.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Ways to Earn Points",
    "problem_id": "2648",
    "frontend_id": "2585",
    "difficulty": "Hard",
    "problem_slug": "number-of-ways-to-earn-points",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "There is a test that has n types of questions. You are given an integer target and a 0-indexed 2D integer array types where types[i] = [counti, marksi] indicates that there are counti questions of the ith type, and each one of them is worth marksi points.\nReturn the number of ways you can earn exactly target points in the exam. Since the answer may be too large, return it modulo 109 + 7.\nNote that questions of the same type are indistinguishable.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count the Number of Vowel Strings in Range",
    "problem_id": "2654",
    "frontend_id": "2586",
    "difficulty": "Easy",
    "problem_slug": "count-the-number-of-vowel-strings-in-range",
    "topics": [
      "Array",
      "String",
      "Counting"
    ],
    "description": "You are given a 0-indexed array of string words and two integers left and right.\nA string is called a vowel string if it starts with a vowel character and ends with a vowel character where vowel characters are 'a', 'e', 'i', 'o', and 'u'.\nReturn the number of vowel strings words[i] where i belongs to the inclusive range [left, right].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Rearrange Array to Maximize Prefix Score",
    "problem_id": "2655",
    "frontend_id": "2587",
    "difficulty": "Medium",
    "problem_slug": "rearrange-array-to-maximize-prefix-score",
    "topics": [
      "Array",
      "Greedy",
      "Sorting",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed integer array nums. You can rearrange the elements of nums to any order (including the given order).\nLet prefix be the array containing the prefix sums of nums after rearranging it. In other words, prefix[i] is the sum of the elements from 0 to i in nums after rearranging it. The score of nums is the number of positive integers in the array prefix.\nReturn the maximum score you can achieve.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count the Number of Beautiful Subarrays",
    "problem_id": "2656",
    "frontend_id": "2588",
    "difficulty": "Medium",
    "problem_slug": "count-the-number-of-beautiful-subarrays",
    "topics": [
      "Array",
      "Hash Table",
      "Bit Manipulation",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed integer array nums. In one operation, you can:\nA subarray is beautiful if it is possible to make all of its elements equal to 0 after applying the above operation any number of times (including zero).\nReturn the number of beautiful subarrays in the array nums.\nA subarray is a contiguous non-empty sequence of elements within an array.\nNote: Subarrays where all elements are initially 0 are considered beautiful, as no operation is needed.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Time to Complete All Tasks",
    "problem_id": "2657",
    "frontend_id": "2589",
    "difficulty": "Hard",
    "problem_slug": "minimum-time-to-complete-all-tasks",
    "topics": [
      "Array",
      "Binary Search",
      "Stack",
      "Greedy",
      "Sorting"
    ],
    "description": "There is a computer that can run an unlimited number of tasks at the same time. You are given a 2D integer array tasks where tasks[i] = [starti, endi, durationi] indicates that the ith task should run for a total of durationi seconds (not necessarily continuous) within the inclusive time range [starti, endi].\nYou may turn on the computer only when it needs to run a task. You can also turn it off if it is idle.\nReturn the minimum time during which the computer should be turned on to complete all tasks.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Distribute Money to Maximum Children",
    "problem_id": "2663",
    "frontend_id": "2591",
    "difficulty": "Easy",
    "problem_slug": "distribute-money-to-maximum-children",
    "topics": [
      "Math",
      "Greedy"
    ],
    "description": "You are given an integer money denoting the amount of money (in dollars) that you have and another integer children denoting the number of children that you must distribute the money to.\nYou have to distribute the money according to the following rules:\nReturn the maximum number of children who may receive exactly 8 dollars if you distribute the money according to the aforementioned rules. If there is no way to distribute the money, return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximize Greatness of an Array",
    "problem_id": "2664",
    "frontend_id": "2592",
    "difficulty": "Medium",
    "problem_slug": "maximize-greatness-of-an-array",
    "topics": [
      "Array",
      "Two Pointers",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given a 0-indexed integer array nums. You are allowed to permute nums into a new array perm of your choosing.\nWe define the greatness of nums be the number of indices 0 <= i < nums.length for which perm[i] > nums[i].\nReturn the maximum possible greatness you can achieve after permuting nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Score of an Array After Marking All Elements",
    "problem_id": "2695",
    "frontend_id": "2593",
    "difficulty": "Medium",
    "problem_slug": "find-score-of-an-array-after-marking-all-elements",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting",
      "Heap (Priority Queue)",
      "Simulation"
    ],
    "description": "You are given an array nums consisting of positive integers.\nStarting with score = 0, apply the following algorithm:\nReturn the score you get after applying the above algorithm.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Time to Repair Cars",
    "problem_id": "2665",
    "frontend_id": "2594",
    "difficulty": "Medium",
    "problem_slug": "minimum-time-to-repair-cars",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "You are given an integer array ranks representing the ranks of some mechanics. ranksi is the rank of the ith mechanic. A mechanic with a rank r can repair n cars in r * n2 minutes.\nYou are also given an integer cars representing the total number of cars waiting in the garage to be repaired.\nReturn the minimum time taken to repair all the cars.\nNote: All the mechanics can repair the cars simultaneously.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Even and Odd Bits",
    "problem_id": "2659",
    "frontend_id": "2595",
    "difficulty": "Easy",
    "problem_slug": "number-of-even-and-odd-bits",
    "topics": [
      "Bit Manipulation"
    ],
    "description": "You are given a positive integer n.\nLet even denote the number of even indices in the binary representation of n with value 1.\nLet odd denote the number of odd indices in the binary representation of n with value 1.\nNote that bits are indexed from right to left in the binary representation of a number.\nReturn the array [even, odd].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check Knight Tour Configuration",
    "problem_id": "2662",
    "frontend_id": "2596",
    "difficulty": "Medium",
    "problem_slug": "check-knight-tour-configuration",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Matrix",
      "Simulation"
    ],
    "description": "There is a knight on an n x n chessboard. In a valid configuration, the knight starts at the top-left cell of the board and visits every cell on the board exactly once.\nYou are given an n x n integer matrix grid consisting of distinct integers from the range [0, n * n - 1] where grid[row][col] indicates that the cell (row, col) is the grid[row][col]th cell that the knight visited. The moves are 0-indexed.\nReturn true if grid represents a valid configuration of the knight's movements or false otherwise.\nNote that a valid knight move consists of moving two squares vertically and one square horizontally, or two squares horizontally and one square vertically. The figure below illustrates all the possible eight moves of a knight from some cell.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "The Number of Beautiful Subsets",
    "problem_id": "2696",
    "frontend_id": "2597",
    "difficulty": "Medium",
    "problem_slug": "the-number-of-beautiful-subsets",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Dynamic Programming",
      "Backtracking",
      "Sorting",
      "Combinatorics"
    ],
    "description": "You are given an array nums of positive integers and a positive integer k.\nA subset of nums is beautiful if it does not contain two integers with an absolute difference equal to k.\nReturn the number of non-empty beautiful subsets of the array nums.\nA subset of nums is an array that can be obtained by deleting some (possibly none) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Smallest Missing Non-negative Integer After Operations",
    "problem_id": "2661",
    "frontend_id": "2598",
    "difficulty": "Medium",
    "problem_slug": "smallest-missing-non-negative-integer-after-operations",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Greedy"
    ],
    "description": "You are given a 0-indexed integer array nums and an integer value.\nIn one operation, you can add or subtract value from any element of nums.\nThe MEX (minimum excluded) of an array is the smallest missing non-negative integer in it.\nReturn the maximum MEX of nums after applying the mentioned operation any number of times.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "K Items With the Maximum Sum",
    "problem_id": "2715",
    "frontend_id": "2600",
    "difficulty": "Easy",
    "problem_slug": "k-items-with-the-maximum-sum",
    "topics": [
      "Math",
      "Greedy"
    ],
    "description": "There is a bag that consists of items, each item has a number 1, 0, or -1 written on it.\nYou are given four non-negative integers numOnes, numZeros, numNegOnes, and k.\nThe bag initially contains:\nWe want to pick exactly k items among the available items. Return the maximum possible sum of numbers written on the items.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Prime Subtraction Operation",
    "problem_id": "2716",
    "frontend_id": "2601",
    "difficulty": "Medium",
    "problem_slug": "prime-subtraction-operation",
    "topics": [
      "Array",
      "Math",
      "Binary Search",
      "Greedy",
      "Number Theory"
    ],
    "description": "You are given a 0-indexed integer array nums of length n.\nYou can perform the following operation as many times as you want:\nReturn true if you can make nums a strictly increasing array using the above operation and false otherwise.\nA strictly increasing array is an array whose each element is strictly greater than its preceding element.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Make All Array Elements Equal",
    "problem_id": "2718",
    "frontend_id": "2602",
    "difficulty": "Medium",
    "problem_slug": "minimum-operations-to-make-all-array-elements-equal",
    "topics": [
      "Array",
      "Binary Search",
      "Sorting",
      "Prefix Sum"
    ],
    "description": "You are given an array nums consisting of positive integers.\nYou are also given an integer array queries of size m. For the ith query, you want to make all of the elements of nums equal to queries[i]. You can perform the following operation on the array any number of times:\nReturn an array answer of size m where answer[i] is the minimum number of operations to make all elements of nums equal to queries[i].\nNote that after each query the array is reset to its original state.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Collect Coins in a Tree",
    "problem_id": "2717",
    "frontend_id": "2603",
    "difficulty": "Hard",
    "problem_slug": "collect-coins-in-a-tree",
    "topics": [
      "Array",
      "Tree",
      "Graph",
      "Topological Sort"
    ],
    "description": "There exists an undirected and unrooted tree with n nodes indexed from 0 to n - 1. You are given an integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given an array coins of size n where coins[i] can be either 0 or 1, where 1 indicates the presence of a coin in the vertex i.\nInitially, you choose to start at any vertex in the tree. Then, you can perform the following operations any number of times:\nFind the minimum number of edges you need to go through to collect all the coins and go back to the initial vertex.\nNote that if you pass an edge several times, you need to count it into the answer several times.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Form Smallest Number From Two Digit Arrays",
    "problem_id": "2668",
    "frontend_id": "2605",
    "difficulty": "Easy",
    "problem_slug": "form-smallest-number-from-two-digit-arrays",
    "topics": [
      "Array",
      "Hash Table",
      "Enumeration"
    ],
    "description": "Example 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Substring With Maximum Cost",
    "problem_id": "2669",
    "frontend_id": "2606",
    "difficulty": "Medium",
    "problem_slug": "find-the-substring-with-maximum-cost",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given a string s, a string chars of distinct characters and an integer array vals of the same length as chars.\nThe cost of the substring is the sum of the values of each character in the substring. The cost of an empty string is considered 0.\nThe value of the character is defined in the following way:\nReturn the maximum cost among all substrings of the string s.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Make K-Subarray Sums Equal",
    "problem_id": "2670",
    "frontend_id": "2607",
    "difficulty": "Medium",
    "problem_slug": "make-k-subarray-sums-equal",
    "topics": [
      "Array",
      "Math",
      "Greedy",
      "Sorting",
      "Number Theory"
    ],
    "description": "You are given a 0-indexed integer array arr and an integer k. The array arr is circular. In other words, the first element of the array is the next element of the last element, and the last element of the array is the previous element of the first element.\nYou can do the following operation any number of times:\nReturn the minimum number of operations such that the sum of each subarray of length k is equal.\nA subarray is a contiguous part of the array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Shortest Cycle in a Graph",
    "problem_id": "2671",
    "frontend_id": "2608",
    "difficulty": "Hard",
    "problem_slug": "shortest-cycle-in-a-graph",
    "topics": [
      "Breadth-First Search",
      "Graph"
    ],
    "description": "There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1. The edges in the graph are represented by a given 2D integer array edges, where edges[i] = [ui, vi] denotes an edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\nReturn the length of the shortest cycle in the graph. If no cycle exists, return -1.\nA cycle is a path that starts and ends at the same node, and each edge in the path is used only once.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Longest Balanced Substring of a Binary String",
    "problem_id": "2723",
    "frontend_id": "2609",
    "difficulty": "Easy",
    "problem_slug": "find-the-longest-balanced-substring-of-a-binary-string",
    "topics": [
      "String"
    ],
    "description": "You are given a binary string s consisting only of zeroes and ones.\nA substring of s is considered balanced if all zeroes are before ones and the number of zeroes is equal to the number of ones inside the substring. Notice that the empty substring is considered a balanced substring.\nReturn the length of the longest balanced substring of s.\nA substring is a contiguous sequence of characters within a string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Convert an Array Into a 2D Array With Conditions",
    "problem_id": "2724",
    "frontend_id": "2610",
    "difficulty": "Medium",
    "problem_slug": "convert-an-array-into-a-2d-array-with-conditions",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "You are given an integer array nums. You need to create a 2D array from nums satisfying the following conditions:\nReturn the resulting array. If there are multiple answers, return any of them.\nNote that the 2D array can have a different number of elements on each row.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Mice and Cheese",
    "problem_id": "2725",
    "frontend_id": "2611",
    "difficulty": "Medium",
    "problem_slug": "mice-and-cheese",
    "topics": [
      "Array",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "There are two mice and n different types of cheese, each type of cheese should be eaten by exactly one mouse.\nA point of the cheese with index i (0-indexed) is:\nYou are given a positive integer array reward1, a positive integer array reward2, and a non-negative integer k.\nReturn the maximum points the mice can achieve if the first mouse eats exactly k types of cheese.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Reverse Operations",
    "problem_id": "2726",
    "frontend_id": "2612",
    "difficulty": "Hard",
    "problem_slug": "minimum-reverse-operations",
    "topics": [
      "Array",
      "Breadth-First Search",
      "Ordered Set"
    ],
    "description": "You are given an integer n and an integer p representing an array arr of length n where all elements are set to 0's, except position p which is set to 1. You are also given an integer array banned containing restricted positions. Perform the following operation on arr:\nReturn an integer array answer with n results where the ith result is the minimum number of operations needed to bring the single 1 to position i in arr, or -1 if it is impossible.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Prime In Diagonal",
    "problem_id": "2722",
    "frontend_id": "2614",
    "difficulty": "Easy",
    "problem_slug": "prime-in-diagonal",
    "topics": [
      "Array",
      "Math",
      "Matrix",
      "Number Theory"
    ],
    "description": "You are given a 0-indexed two-dimensional integer array nums.\nReturn the largest prime number that lies on at least one of the diagonals of nums. In case, no prime is present on any of the diagonals, return 0.\nNote that:\nIn the above diagram, one diagonal is [1,5,9] and another diagonal is [3,5,7].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Distances",
    "problem_id": "2721",
    "frontend_id": "2615",
    "difficulty": "Medium",
    "problem_slug": "sum-of-distances",
    "topics": [
      "Array",
      "Hash Table",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed integer array nums. There exists an array arr of length nums.length, where arr[i] is the sum of |i - j| over all j such that nums[j] == nums[i] and j != i. If there is no such j, set arr[i] to be 0.\nReturn the array arr.\nExample 1:\nExample 2:\nConstraints:\nNote: This question is the same as  2121: Intervals Between Identical Elements."
  },
  {
    "title": "Minimize the Maximum Difference of Pairs",
    "problem_id": "2720",
    "frontend_id": "2616",
    "difficulty": "Medium",
    "problem_slug": "minimize-the-maximum-difference-of-pairs",
    "topics": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given a 0-indexed integer array nums and an integer p. Find p pairs of indices of nums such that the maximum difference amongst all the pairs is minimized. Also, ensure no index appears more than once amongst the p pairs.\nNote that for a pair of elements at the index i and j, the difference of this pair is |nums[i] - nums[j]|, where |x| represents the absolute value of x.\nReturn the minimum maximum difference among all p pairs. We define the maximum of an empty set to be zero.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of Visited Cells in a Grid",
    "problem_id": "2697",
    "frontend_id": "2617",
    "difficulty": "Hard",
    "problem_slug": "minimum-number-of-visited-cells-in-a-grid",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Breadth-First Search",
      "Union Find",
      "Heap (Priority Queue)",
      "Matrix",
      "Monotonic Stack"
    ],
    "description": "You are given a 0-indexed m x n integer matrix grid. Your initial position is at the top-left cell (0, 0).\nStarting from the cell (i, j), you can move to one of the following cells:\nReturn the minimum number of cells you need to visit to reach the bottom-right cell (m - 1, n - 1). If there is no valid path, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check if Object Instance of Class",
    "problem_id": "2758",
    "frontend_id": "2618",
    "difficulty": "Medium",
    "problem_slug": "check-if-object-instance-of-class",
    "topics": [],
    "description": "Write a function that checks if a given value is an instance of a given class or superclass. For this problem, an object is considered an instance of a given class if that object has access to that class's methods.\nThere are no constraints on the data types that can be passed to the function. For example, the value or the class could be undefined.\nExample 1:\nExample 2:\nExample 3:\nExample 4:"
  },
  {
    "title": "Array Prototype Last",
    "problem_id": "2734",
    "frontend_id": "2619",
    "difficulty": "Easy",
    "problem_slug": "array-prototype-last",
    "topics": [],
    "description": "Write code that enhances all arrays such that you can call the array.last() method on any array and it will return the last element. If there are no elements in the array, it should return -1.\nYou may assume the array is the output of JSON.parse.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Counter",
    "problem_id": "2732",
    "frontend_id": "2620",
    "difficulty": "Easy",
    "problem_slug": "counter",
    "topics": [],
    "description": "Given an integer n, return a counter function. This counter function initially returns n and then returns 1 more than the previous value every subsequent time it is called (n, n + 1, n + 2, etc).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sleep",
    "problem_id": "2733",
    "frontend_id": "2621",
    "difficulty": "Easy",
    "problem_slug": "sleep",
    "topics": [],
    "description": "Given a positive integer millis, write an asynchronous function that sleeps for millis milliseconds. It can resolve any value.\nNote that minor deviation from millis in the actual sleep duration is acceptable.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Cache With Time Limit",
    "problem_id": "2762",
    "frontend_id": "2622",
    "difficulty": "Medium",
    "problem_slug": "cache-with-time-limit",
    "topics": [],
    "description": "Write a class that allows getting and setting key-value pairs, however a time until expiration is associated with each key.\nThe class has three public methods:\nset(key, value, duration): accepts an integer key, an integer value, and a duration in milliseconds. Once the duration has elapsed, the key should be inaccessible. The method should return true if the same un-expired key already exists and false otherwise. Both the value and duration should be overwritten if the key already exists.\nget(key): if an un-expired key exists, it should return the associated value. Otherwise it should return -1.\ncount(): returns the count of un-expired keys.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Memoize",
    "problem_id": "2731",
    "frontend_id": "2623",
    "difficulty": "Medium",
    "problem_slug": "memoize",
    "topics": [],
    "description": "Given a function fn, return a memoized version of that function.\nA memoized function is a function that will never be called twice with the same inputs. Instead it will return a cached value.\nYou can assume there are 3 possible input functions: sum, fib, and factorial.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Snail Traversal",
    "problem_id": "2760",
    "frontend_id": "2624",
    "difficulty": "Medium",
    "problem_slug": "snail-traversal",
    "topics": [],
    "description": "Write code that enhances all arrays such that you can call the snail(rowsCount, colsCount) method that transforms the 1D array into a 2D array organised in the pattern known as snail traversal order. Invalid input values should output an empty array. If rowsCount * colsCount !== nums.length, the input is considered invalid.\nSnail traversal order starts at the top left cell with the first value of the current array. It then moves through the entire first column from top to bottom, followed by moving to the next column on the right and traversing it from bottom to top. This pattern continues, alternating the direction of traversal with each column, until the entire current array is covered. For example, when given the input array [19, 10, 3, 7, 9, 8, 5, 2, 1, 17, 16, 14, 12, 18, 6, 13, 11, 20, 4, 15] with rowsCount = 5 and colsCount = 4, the desired output matrix is shown below. Note that iterating the matrix following the arrows corresponds to the order of numbers in the original array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Flatten Deeply Nested Array",
    "problem_id": "2759",
    "frontend_id": "2625",
    "difficulty": "Medium",
    "problem_slug": "flatten-deeply-nested-array",
    "topics": [],
    "description": "Given a multi-dimensional array arr and a depth n, return a flattened version of that array.\nA multi-dimensional array is a recursive data structure that contains integers or other multi-dimensional arrays.\nA flattened array is a version of that array with some or all of the sub-arrays removed and replaced with the actual elements in that sub-array. This flattening operation should only be done if the current depth of nesting is less than n. The depth of the elements in the first array are considered to be 0.\nPlease solve it without the built-in Array.flat method.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Array Reduce Transformation",
    "problem_id": "2761",
    "frontend_id": "2626",
    "difficulty": "Easy",
    "problem_slug": "array-reduce-transformation",
    "topics": [],
    "description": "Given an integer array nums, a reducer function fn, and an initial value init, return the final result obtained by executing the fn function on each element of the array, sequentially, passing in the return value from the calculation on the preceding element.\nThis result is achieved through the following operations: val = fn(init, nums[0]), val = fn(val, nums[1]), val = fn(val, nums[2]), ... until every element in the array has been processed. The ultimate value of val is then returned.\nIf the length of the array is 0, the function should return init.\nPlease solve it without using the built-in Array.reduce method.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Debounce",
    "problem_id": "2743",
    "frontend_id": "2627",
    "difficulty": "Medium",
    "problem_slug": "debounce",
    "topics": [],
    "description": "Given a function fn and a time in milliseconds t, return a debounced version of that function.\nA debounced function is a function whose execution is delayed by t milliseconds and whose execution is cancelled if it is called again within that window of time. The debounced function should also receive the passed parameters.\nFor example, let's say t = 50ms, and the function was called at 30ms, 60ms, and 100ms.\nThe first 2 function calls would be cancelled, and the 3rd function call would be executed at 150ms.\nIf instead t = 35ms, The 1st call would be cancelled, the 2nd would be executed at 95ms, and the 3rd would be executed at 135ms.\nThe above diagram shows how debounce will transform events. Each rectangle represents 100ms and the debounce time is 400ms. Each color represents a different set of inputs.\nPlease solve it without using lodash's _.debounce() function.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Function Composition",
    "problem_id": "2741",
    "frontend_id": "2629",
    "difficulty": "Easy",
    "problem_slug": "function-composition",
    "topics": [],
    "description": "Given an array of functions [f1, f2, f3, ..., fn], return a new function fn that is the function composition of the array of functions.\nThe function composition of [f(x), g(x), h(x)] is fn(x) = f(g(h(x))).\nThe function composition of an empty list of functions is the identity function f(x) = x.\nYou may assume each function in the array accepts one integer as input and returns one integer as output.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Memoize II",
    "problem_id": "2744",
    "frontend_id": "2630",
    "difficulty": "Hard",
    "problem_slug": "memoize-ii",
    "topics": [],
    "description": "Given a function fn, return a memoized version of that function.\nA memoized function is a function that will never be called twice with the same inputs. Instead it will return a cached value.\nfn can be any function and there are no constraints on what type of values it accepts. Inputs are considered identical if they are === to each other.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Group By",
    "problem_id": "2742",
    "frontend_id": "2631",
    "difficulty": "Medium",
    "problem_slug": "group-by",
    "topics": [],
    "description": "Write code that enhances all arrays such that you can call the array.groupBy(fn) method on any array and it will return a grouped version of the array.\nA grouped array is an object where each key is the output of fn(arr[i]) and each value is an array containing all items in the original array which generate that key.\nThe provided callback fn will accept an item in the array and return a string key.\nThe order of each value list should be the order the items appear in the array. Any order of keys is acceptable.\nPlease solve it without lodash's _.groupBy function.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Filter Elements from Array",
    "problem_id": "2746",
    "frontend_id": "2634",
    "difficulty": "Easy",
    "problem_slug": "filter-elements-from-array",
    "topics": [],
    "description": "Given an integer array arr and a filtering function fn, return a filtered array filteredArr.\nThe fn function takes one or two arguments:\nfilteredArr should only contain the elements from the arr for which the expression fn(arr[i], i) evaluates to a truthy value. A truthy value is a value where Boolean(value) returns true.\nPlease solve it without the built-in Array.filter method.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Apply Transform Over Each Element in Array",
    "problem_id": "2747",
    "frontend_id": "2635",
    "difficulty": "Easy",
    "problem_slug": "apply-transform-over-each-element-in-array",
    "topics": [],
    "description": "Given an integer array arr and a mapping function fn, return a new array with a transformation applied to each element.\nThe returned array should be created such that returnedArray[i] = fn(arr[i], i).\nPlease solve it without the built-in Array.map method.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Promise Time Limit",
    "problem_id": "2749",
    "frontend_id": "2637",
    "difficulty": "Medium",
    "problem_slug": "promise-time-limit",
    "topics": [],
    "description": "Given an asynchronous function fn and a time t in milliseconds, return a new time limited version of the input function. fn takes arguments provided to the time limited function.\nThe time limited function should follow these rules:\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Find the Width of Columns of a Grid",
    "problem_id": "2675",
    "frontend_id": "2639",
    "difficulty": "Easy",
    "problem_slug": "find-the-width-of-columns-of-a-grid",
    "topics": [
      "Array",
      "Matrix"
    ],
    "description": "You are given a 0-indexed m x n integer matrix grid. The width of a column is the maximum length of its integers.\nReturn an integer array ans of size n where ans[i] is the width of the ith column.\nThe length of an integer x with len digits is equal to len if x is non-negative, and len + 1 otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Score of All Prefixes of an Array",
    "problem_id": "2676",
    "frontend_id": "2640",
    "difficulty": "Medium",
    "problem_slug": "find-the-score-of-all-prefixes-of-an-array",
    "topics": [
      "Array",
      "Prefix Sum"
    ],
    "description": "We define the conversion array conver of an array arr as follows:\nWe also define the score of an array arr as the sum of the values of the conversion array of arr.\nGiven a 0-indexed integer array nums of length n, return an array ans of length n where ans[i] is the score of the prefix nums[0..i].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Cousins in Binary Tree II",
    "problem_id": "2677",
    "frontend_id": "2641",
    "difficulty": "Medium",
    "problem_slug": "cousins-in-binary-tree-ii",
    "topics": [
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "description": "Given the root of a binary tree, replace the value of each node in the tree with the sum of all its cousins' values.\nTwo nodes of a binary tree are cousins if they have the same depth with different parents.\nReturn the root of the modified tree.\nNote that the depth of a node is the number of edges in the path from the root node to it.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Design Graph With Shortest Path Calculator",
    "problem_id": "2678",
    "frontend_id": "2642",
    "difficulty": "Hard",
    "problem_slug": "design-graph-with-shortest-path-calculator",
    "topics": [
      "Graph",
      "Design",
      "Heap (Priority Queue)",
      "Shortest Path"
    ],
    "description": "There is a directed weighted graph that consists of n nodes numbered from 0 to n - 1. The edges of the graph are initially represented by the given array edges where edges[i] = [fromi, toi, edgeCosti] meaning that there is an edge from fromi to toi with the cost edgeCosti.\nImplement the Graph class:\nExample 1:\nConstraints:"
  },
  {
    "title": "Row With Maximum Ones",
    "problem_id": "2737",
    "frontend_id": "2643",
    "difficulty": "Easy",
    "problem_slug": "row-with-maximum-ones",
    "topics": [
      "Array",
      "Matrix"
    ],
    "description": "Given a m x n binary matrix mat, find the 0-indexed position of the row that contains the maximum count of ones, and the number of ones in that row.\nIn case there are multiple rows that have the maximum count of ones, the row with the smallest row number should be selected.\nReturn an array containing the index of the row, and the number of ones in it.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Maximum Divisibility Score",
    "problem_id": "2694",
    "frontend_id": "2644",
    "difficulty": "Easy",
    "problem_slug": "find-the-maximum-divisibility-score",
    "topics": [
      "Array"
    ],
    "description": "You are given two integer arrays nums and divisors.\nThe divisibility score of divisors[i] is the number of indices j such that nums[j] is divisible by divisors[i].\nReturn the integer divisors[i] with the maximum divisibility score. If multiple integers have the maximum score, return the smallest one.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Additions to Make Valid String",
    "problem_id": "2736",
    "frontend_id": "2645",
    "difficulty": "Medium",
    "problem_slug": "minimum-additions-to-make-valid-string",
    "topics": [
      "String",
      "Dynamic Programming",
      "Stack",
      "Greedy"
    ],
    "description": "Given a string word to which you can insert letters \"a\", \"b\" or \"c\" anywhere and any number of times, return the minimum number of letters that must be inserted so that word becomes valid.\nA string is called valid if it can be formed by concatenating the string \"abc\" several times.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimize the Total Price of the Trips",
    "problem_id": "2739",
    "frontend_id": "2646",
    "difficulty": "Hard",
    "problem_slug": "minimize-the-total-price-of-the-trips",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Graph"
    ],
    "description": "There exists an undirected and unrooted tree with n nodes indexed from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nEach node has an associated price. You are given an integer array price, where price[i] is the price of the ith node.\nThe price sum of a given path is the sum of the prices of all nodes lying on that path.\nAdditionally, you are given a 2D integer array trips, where trips[i] = [starti, endi] indicates that you start the ith trip from the node starti and travel to the node endi by any path you like.\nBefore performing your first trip, you can choose some non-adjacent nodes and halve the prices.\nReturn the minimum total price sum to perform all the given trips.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Generate Fibonacci Sequence",
    "problem_id": "2775",
    "frontend_id": "2648",
    "difficulty": "Easy",
    "problem_slug": "generate-fibonacci-sequence",
    "topics": [],
    "description": "Write a generator function that returns a generator object which yields the fibonacci sequence.\nThe fibonacci sequence is defined by the relation Xn = Xn-1 + Xn-2.\nThe first few numbers of the series are 0, 1, 1, 2, 3, 5, 8, 13.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Nested Array Generator",
    "problem_id": "2783",
    "frontend_id": "2649",
    "difficulty": "Medium",
    "problem_slug": "nested-array-generator",
    "topics": [],
    "description": "Given a multi-dimensional array of integers, return a generator object which yields integers in the same order as inorder traversal.\nA multi-dimensional array is a recursive data structure that contains both integers and other multi-dimensional arrays.\ninorder traversal iterates over each array from left to right, yielding any integers it encounters or applying inorder traversal to any arrays it encounters.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Design Cancellable Function",
    "problem_id": "2788",
    "frontend_id": "2650",
    "difficulty": "Hard",
    "problem_slug": "design-cancellable-function",
    "topics": [],
    "description": "Sometimes you have a long running task, and you may wish to cancel it before it completes. To help with this goal, write a function cancellable that accepts a generator object and returns an array of two values: a cancel function and a promise.\nYou may assume the generator function will only yield promises. It is your function's responsibility to pass the values resolved by the promise back to the generator. If the promise rejects, your function should throw that error back to the generator.\nIf the cancel callback is called before the generator is done, your function should throw an error back to the generator. That error should be the string \"Cancelled\" (Not an Error object). If the error was caught, the returned promise should resolve with the next value that was yielded or returned. Otherwise, the promise should reject with the thrown error. No more code should be executed.\nWhen the generator is done, the promise your function returned should resolve the value the generator returned. If, however, the generator throws an error, the returned promise should reject with the error.\nAn example of how your code would be used:\nIf instead cancel() was not called or was called after t=100ms, the promise would have resolved 5.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nExample 5:\nExample 6:\nConstraints:"
  },
  {
    "title": "Calculate Delayed Arrival Time",
    "problem_id": "2748",
    "frontend_id": "2651",
    "difficulty": "Easy",
    "problem_slug": "calculate-delayed-arrival-time",
    "topics": [
      "Math"
    ],
    "description": "You are given a positive integer arrivalTime denoting the arrival time of a train in hours, and another positive integer delayedTime denoting the amount of delay in hours.\nReturn the time when the train will arrive at the station.\nNote that the time in this problem is in 24-hours format.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum Multiples",
    "problem_id": "2752",
    "frontend_id": "2652",
    "difficulty": "Easy",
    "problem_slug": "sum-multiples",
    "topics": [
      "Math"
    ],
    "description": "Given a positive integer n, find the sum of all integers in the range [1, n] inclusive that are divisible by 3, 5, or 7.\nReturn an integer denoting the sum of all numbers in the given range satisfying the constraint.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sliding Subarray Beauty",
    "problem_id": "2751",
    "frontend_id": "2653",
    "difficulty": "Medium",
    "problem_slug": "sliding-subarray-beauty",
    "topics": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "description": "Given an integer array nums containing n integers, find the beauty of each subarray of size k.\nThe beauty of a subarray is the xth smallest integer in the subarray if it is negative, or 0 if there are fewer than x negative integers.\nReturn an integer array containing n - k + 1 integers, which denote the beauty of the subarrays in order from the first index in the array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Operations to Make All Array Elements Equal to 1",
    "problem_id": "2753",
    "frontend_id": "2654",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-operations-to-make-all-array-elements-equal-to-1",
    "topics": [
      "Array",
      "Math",
      "Number Theory"
    ],
    "description": "You are given a 0-indexed array nums consisiting of positive integers. You can do the following operation on the array any number of times:\nReturn the minimum number of operations to make all elements of nums equal to 1. If it is impossible, return -1.\nThe gcd of two integers is the greatest common divisor of the two integers.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Sum With Exactly K Elements ",
    "problem_id": "2767",
    "frontend_id": "2656",
    "difficulty": "Easy",
    "problem_slug": "maximum-sum-with-exactly-k-elements",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "You are given a 0-indexed integer array nums and an integer k. Your task is to perform the following operation exactly k times in order to maximize your score:\nReturn the maximum score you can achieve after performing the operation exactly k times.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Prefix Common Array of Two Arrays",
    "problem_id": "2766",
    "frontend_id": "2657",
    "difficulty": "Medium",
    "problem_slug": "find-the-prefix-common-array-of-two-arrays",
    "topics": [
      "Array",
      "Hash Table",
      "Bit Manipulation"
    ],
    "description": "You are given two 0-indexed integer permutations A and B of length n.\nA prefix common array of A and B is an array C such that C[i] is equal to the count of numbers that are present at or before the index i in both A and B.\nReturn the prefix common array of A and B.\nA sequence of n integers is called a permutation if it contains all integers from 1 to n exactly once.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Number of Fish in a Grid",
    "problem_id": "2764",
    "frontend_id": "2658",
    "difficulty": "Medium",
    "problem_slug": "maximum-number-of-fish-in-a-grid",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix"
    ],
    "description": "You are given a 0-indexed 2D matrix grid of size m x n, where (r, c) represents:\nA fisher can start at any water cell (r, c) and can do the following operations any number of times:\nReturn the maximum number of fish the fisher can catch if he chooses his starting cell optimally, or 0 if no water cell exists.\nAn adjacent cell of the cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) or (r - 1, c) if it exists.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Make Array Empty",
    "problem_id": "2765",
    "frontend_id": "2659",
    "difficulty": "Hard",
    "problem_slug": "make-array-empty",
    "topics": [
      "Array",
      "Binary Search",
      "Greedy",
      "Binary Indexed Tree",
      "Segment Tree",
      "Sorting",
      "Ordered Set"
    ],
    "description": "You are given an integer array nums containing distinct numbers, and you can perform the following operations until the array is empty:\nReturn an integer denoting the number of operations it takes to make nums empty.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Determine the Winner of a Bowling Game",
    "problem_id": "2684",
    "frontend_id": "2660",
    "difficulty": "Easy",
    "problem_slug": "determine-the-winner-of-a-bowling-game",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "You are given two 0-indexed integer arrays player1 and player2, representing the number of pins that player 1 and player 2 hit in a bowling game, respectively.\nThe bowling game consists of n turns, and the number of pins in each turn is exactly 10.\nAssume a player hits xi pins in the ith turn. The value of the ith turn for the player is:\nThe score of the player is the sum of the values of their n turns.\nReturn\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "First Completely Painted Row or Column",
    "problem_id": "2685",
    "frontend_id": "2661",
    "difficulty": "Medium",
    "problem_slug": "first-completely-painted-row-or-column",
    "topics": [
      "Array",
      "Hash Table",
      "Matrix"
    ],
    "description": "You are given a 0-indexed integer array arr, and an m x n integer matrix mat. arr and mat both contain all the integers in the range [1, m * n].\nGo through each index i in arr starting from index 0 and paint the cell in mat containing the integer arr[i].\nReturn the smallest index i at which either a row or a column will be completely painted in mat.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Cost of a Path With Special Roads",
    "problem_id": "2686",
    "frontend_id": "2662",
    "difficulty": "Medium",
    "problem_slug": "minimum-cost-of-a-path-with-special-roads",
    "topics": [
      "Array",
      "Graph",
      "Heap (Priority Queue)",
      "Shortest Path"
    ],
    "description": "You are given an array start where start = [startX, startY] represents your initial position (startX, startY) in a 2D space. You are also given the array target where target = [targetX, targetY] represents your target position (targetX, targetY).\nThe cost of going from a position (x1, y1) to any other position in the space (x2, y2) is |x2 - x1| + |y2 - y1|.\nThere are also some special roads. You are given a 2D array specialRoads where specialRoads[i] = [x1i, y1i, x2i, y2i, costi] indicates that the ith special road goes in one direction from (x1i, y1i) to (x2i, y2i) with a cost equal to costi. You can use each special road any number of times.\nReturn the minimum cost required to go from (startX, startY) to (targetX, targetY).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Lexicographically Smallest Beautiful String",
    "problem_id": "2687",
    "frontend_id": "2663",
    "difficulty": "Hard",
    "problem_slug": "lexicographically-smallest-beautiful-string",
    "topics": [
      "String",
      "Greedy"
    ],
    "description": "A string is beautiful if:\nYou are given a beautiful string s of length n and a positive integer k.\nReturn the lexicographically smallest string of length n, which is larger than s and is beautiful. If there is no such string, return an empty string.\nA string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Counter II",
    "problem_id": "2789",
    "frontend_id": "2665",
    "difficulty": "Easy",
    "problem_slug": "counter-ii",
    "topics": [],
    "description": "Write a function createCounter. It should accept an initial integer init. It should return an object with three functions.\nThe three functions are:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Allow One Function Call",
    "problem_id": "2796",
    "frontend_id": "2666",
    "difficulty": "Easy",
    "problem_slug": "allow-one-function-call",
    "topics": [],
    "description": "Given a function fn, return a new function that is identical to the original function except that it ensures fn is called at most once.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Create Hello World Function",
    "problem_id": "2809",
    "frontend_id": "2667",
    "difficulty": "Easy",
    "problem_slug": "create-hello-world-function",
    "topics": [],
    "description": "Example 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Distinct Difference Array",
    "problem_id": "2777",
    "frontend_id": "2670",
    "difficulty": "Easy",
    "problem_slug": "find-the-distinct-difference-array",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "You are given a 0-indexed array nums of length n.\nThe distinct difference array of nums is an array diff of length n such that diff[i] is equal to the number of distinct elements in the suffix nums[i + 1, ..., n - 1] subtracted from the number of distinct elements in the prefix nums[0, ..., i].\nReturn the distinct difference array of nums.\nNote that nums[i, ..., j] denotes the subarray of nums starting at index i and ending at index j inclusive. Particularly, if i > j then nums[i, ..., j] denotes an empty subarray.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Frequency Tracker",
    "problem_id": "2778",
    "frontend_id": "2671",
    "difficulty": "Medium",
    "problem_slug": "frequency-tracker",
    "topics": [
      "Hash Table",
      "Design"
    ],
    "description": "Design a data structure that keeps track of the values in it and answers some queries regarding their frequencies.\nImplement the FrequencyTracker class.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Adjacent Elements With the Same Color",
    "problem_id": "2779",
    "frontend_id": "2672",
    "difficulty": "Medium",
    "problem_slug": "number-of-adjacent-elements-with-the-same-color",
    "topics": [
      "Array"
    ],
    "description": "You are given an integer n representing an array colors of length n where all elements are set to 0's meaning uncolored. You are also given a 2D integer array queries where queries[i] = [indexi, colori]. For the ith query:\nReturn an array answer of the same length as queries where answer[i] is the answer to the ith query.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Make Costs of Paths Equal in a Binary Tree",
    "problem_id": "2780",
    "frontend_id": "2673",
    "difficulty": "Medium",
    "problem_slug": "make-costs-of-paths-equal-in-a-binary-tree",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Greedy",
      "Tree",
      "Binary Tree"
    ],
    "description": "You are given an integer n representing the number of nodes in a perfect binary tree consisting of nodes numbered from 1 to n. The root of the tree is node 1 and each node i in the tree has two children where the left child is the node 2 * i and the right child is 2 * i + 1.\nEach node in the tree also has a cost represented by a given 0-indexed integer array cost of size n where cost[i] is the cost of node i + 1. You are allowed to increment the cost of any node by 1 any number of times.\nReturn the minimum number of increments you need to make the cost of paths from the root to each leaf node equal.\nNote:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Chunk Array",
    "problem_id": "2798",
    "frontend_id": "2677",
    "difficulty": "Easy",
    "problem_slug": "chunk-array",
    "topics": [],
    "description": "Given an array arr and a chunk size size, return a chunked array.\nA chunked array contains the original elements in arr, but consists of subarrays each of length size. The length of the last subarray may be less than size if arr.length is not evenly divisible by size.\nPlease solve it without using lodash's _.chunk function.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Number of Senior Citizens",
    "problem_id": "2727",
    "frontend_id": "2678",
    "difficulty": "Easy",
    "problem_slug": "number-of-senior-citizens",
    "topics": [
      "Array",
      "String"
    ],
    "description": "You are given a 0-indexed array of strings details. Each element of details provides information about a given passenger compressed into a string of length 15. The system is such that:\nReturn the number of passengers who are strictly more than 60 years old.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum in a Matrix",
    "problem_id": "2728",
    "frontend_id": "2679",
    "difficulty": "Medium",
    "problem_slug": "sum-in-a-matrix",
    "topics": [
      "Array",
      "Sorting",
      "Heap (Priority Queue)",
      "Matrix",
      "Simulation"
    ],
    "description": "You are given a 0-indexed 2D integer array nums. Initially, your score is 0. Perform the following operations until the matrix becomes empty:\nReturn the final score.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum OR",
    "problem_id": "2730",
    "frontend_id": "2680",
    "difficulty": "Medium",
    "problem_slug": "maximum-or",
    "topics": [
      "Array",
      "Greedy",
      "Bit Manipulation",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed integer array nums of length n and an integer k. In an operation, you can choose an element and multiply it by 2.\nReturn the maximum possible value of nums[0] | nums[1] | ... | nums[n - 1] that can be obtained after applying the operation on nums at most k times.\nNote that a | b denotes the bitwise or between two integers a and b.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Power of Heroes",
    "problem_id": "2784",
    "frontend_id": "2681",
    "difficulty": "Hard",
    "problem_slug": "power-of-heroes",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Sorting",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed integer array nums representing the strength of some heroes. The power of a group of heroes is defined as follows:\nReturn the sum of the power of all non-empty groups of heroes possible. Since the sum could be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Losers of the Circular Game",
    "problem_id": "2791",
    "frontend_id": "2682",
    "difficulty": "Easy",
    "problem_slug": "find-the-losers-of-the-circular-game",
    "topics": [
      "Array",
      "Hash Table",
      "Simulation"
    ],
    "description": "There are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend.\nThe rules of the game are as follows:\n1st friend receives the ball.\nIn other words, on the ith turn, the friend holding the ball should pass it to the friend who is i * k steps away from them in the clockwise direction.\nThe game is finished when some friend receives the ball for the second time.\nThe losers of the game are friends who did not receive the ball in the entire game.\nGiven the number of friends, n, and an integer k, return the array answer, which contains the losers of the game in the ascending order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Neighboring Bitwise XOR",
    "problem_id": "2792",
    "frontend_id": "2683",
    "difficulty": "Medium",
    "problem_slug": "neighboring-bitwise-xor",
    "topics": [
      "Array",
      "Bit Manipulation"
    ],
    "description": "A 0-indexed array derived with length n is derived by computing the bitwise XOR (⊕) of adjacent values in a binary array original of length n.\nSpecifically, for each index i in the range [0, n - 1]:\nGiven an array derived, your task is to determine whether there exists a valid binary array original that could have formed derived.\nReturn true if such an array exists or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Number of Moves in a Grid",
    "problem_id": "2794",
    "frontend_id": "2684",
    "difficulty": "Medium",
    "problem_slug": "maximum-number-of-moves-in-a-grid",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "You are given a 0-indexed m x n matrix grid consisting of positive integers.\nYou can start at any cell in the first column of the matrix, and traverse the grid in the following way:\nReturn the maximum number of moves that you can perform.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count the Number of Complete Components",
    "problem_id": "2793",
    "frontend_id": "2685",
    "difficulty": "Medium",
    "problem_slug": "count-the-number-of-complete-components",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "description": "You are given an integer n. There is an undirected graph with n vertices, numbered from 0 to n - 1. You are given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting vertices ai and bi.\nReturn the number of complete connected components of the graph.\nA connected component is a subgraph of a graph in which there exists a path between any two vertices, and no vertex of the subgraph shares an edge with a vertex outside of the subgraph.\nA connected component is said to be complete if there exists an edge between every pair of its vertices.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Call Function with Custom Context",
    "problem_id": "2790",
    "frontend_id": "2693",
    "difficulty": "Medium",
    "problem_slug": "call-function-with-custom-context",
    "topics": [],
    "description": "Enhance all functions to have the callPolyfill method. The method accepts an object obj as its first parameter and any number of additional arguments. The obj becomes the this context for the function. The additional arguments are passed to the function (that the callPolyfill method belongs on).\nFor example if you had the function:\nCalling this function like tax(10, 0.1) will log \"The cost of undefined is 11\". This is because the this context was not defined.\nHowever, calling the function like tax.callPolyfill({item: \"salad\"}, 10, 0.1) will log \"The cost of salad is 11\". The this context was appropriately set, and the function logged an appropriate output.\nPlease solve this without using the built-in Function.call method.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Event Emitter",
    "problem_id": "2797",
    "frontend_id": "2694",
    "difficulty": "Medium",
    "problem_slug": "event-emitter",
    "topics": [],
    "description": "Design an EventEmitter class. This interface is similar (but with some differences) to the one found in Node.js or the Event Target interface of the DOM. The EventEmitter should allow for subscribing to events and emitting them.\nYour EventEmitter class should have the following two methods:\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Array Wrapper",
    "problem_id": "2805",
    "frontend_id": "2695",
    "difficulty": "Easy",
    "problem_slug": "array-wrapper",
    "topics": [],
    "description": "Create a class ArrayWrapper that accepts an array of integers in its constructor. This class should have two features:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum String Length After Removing Substrings",
    "problem_id": "2800",
    "frontend_id": "2696",
    "difficulty": "Easy",
    "problem_slug": "minimum-string-length-after-removing-substrings",
    "topics": [
      "String",
      "Stack",
      "Simulation"
    ],
    "description": "You are given a string s consisting only of uppercase English letters.\nYou can apply some operations to this string where, in one operation, you can remove any occurrence of one of the substrings \"AB\" or \"CD\" from s.\nReturn the minimum possible length of the resulting string that you can obtain.\nNote that the string concatenates after removing the substring and could produce new \"AB\" or \"CD\" substrings.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Lexicographically Smallest Palindrome",
    "problem_id": "2816",
    "frontend_id": "2697",
    "difficulty": "Easy",
    "problem_slug": "lexicographically-smallest-palindrome",
    "topics": [
      "Two Pointers",
      "String",
      "Greedy"
    ],
    "description": "You are given a string s consisting of lowercase English letters, and you are allowed to perform operations on it. In one operation, you can replace a character in s with another lowercase English letter.\nYour task is to make s a palindrome with the minimum number of operations possible. If there are multiple palindromes that can be made using the minimum number of operations, make the lexicographically smallest one.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\nReturn the resulting palindrome string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Punishment Number of an Integer",
    "problem_id": "2802",
    "frontend_id": "2698",
    "difficulty": "Medium",
    "problem_slug": "find-the-punishment-number-of-an-integer",
    "topics": [
      "Math",
      "Backtracking"
    ],
    "description": "Given a positive integer n, return the punishment number of n.\nThe punishment number of n is defined as the sum of the squares of all integers i such that:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Modify Graph Edge Weights",
    "problem_id": "2803",
    "frontend_id": "2699",
    "difficulty": "Hard",
    "problem_slug": "modify-graph-edge-weights",
    "topics": [
      "Graph",
      "Heap (Priority Queue)",
      "Shortest Path"
    ],
    "description": "You are given an undirected weighted connected graph containing n nodes labeled from 0 to n - 1, and an integer array edges where edges[i] = [ai, bi, wi] indicates that there is an edge between nodes ai and bi with weight wi.\nSome edges have a weight of -1 (wi = -1), while others have a positive weight (wi > 0).\nYour task is to modify all edges with a weight of -1 by assigning them positive integer values in the range [1, 2 * 109] so that the shortest distance between the nodes source and destination becomes equal to an integer target. If there are multiple modifications that make the shortest distance between source and destination equal to target, any of them will be considered correct.\nReturn an array containing all edges (even unmodified ones) in any order if it is possible to make the shortest distance from source to destination equal to target, or an empty array if it's impossible.\nNote: You are not allowed to modify the weights of edges with initial positive weights.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Return Length of Arguments Passed",
    "problem_id": "2820",
    "frontend_id": "2703",
    "difficulty": "Easy",
    "problem_slug": "return-length-of-arguments-passed",
    "topics": [],
    "description": "Example 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "To Be Or Not To Be",
    "problem_id": "2813",
    "frontend_id": "2704",
    "difficulty": "Easy",
    "problem_slug": "to-be-or-not-to-be",
    "topics": [],
    "description": "Write a function expect that helps developers test their code. It should take in any value val and return an object with the following two functions.\nExample 1:\nExample 2:\nExample 3:"
  },
  {
    "title": "Compact Object",
    "problem_id": "2804",
    "frontend_id": "2705",
    "difficulty": "Medium",
    "problem_slug": "compact-object",
    "topics": [],
    "description": "Given an object or array obj, return a compact object.\nA compact object is the same as the original object, except with keys containing falsy values removed. This operation applies to the object and any nested objects. Arrays are considered objects where the indices are keys. A value is considered falsy when Boolean(value) returns false.\nYou may assume the obj is the output of JSON.parse. In other words, it is valid JSON.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Buy Two Chocolates",
    "problem_id": "2756",
    "frontend_id": "2706",
    "difficulty": "Easy",
    "problem_slug": "buy-two-chocolates",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an integer array prices representing the prices of various chocolates in a store. You are also given a single integer money, which represents your initial amount of money.\nYou must buy exactly two chocolates in such a way that you still have some non-negative leftover money. You would like to minimize the sum of the prices of the two chocolates you buy.\nReturn the amount of money you will have leftover after buying the two chocolates. If there is no way for you to buy two chocolates without ending up in debt, return money. Note that the leftover must be non-negative.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Extra Characters in a String",
    "problem_id": "2755",
    "frontend_id": "2707",
    "difficulty": "Medium",
    "problem_slug": "extra-characters-in-a-string",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Trie"
    ],
    "description": "You are given a 0-indexed string s and a dictionary of words dictionary. You have to break s into one or more non-overlapping substrings such that each substring is present in dictionary. There may be some extra characters in s which are not present in any of the substrings.\nReturn the minimum number of extra characters left over if you break up s optimally.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Strength of a Group",
    "problem_id": "2754",
    "frontend_id": "2708",
    "difficulty": "Medium",
    "problem_slug": "maximum-strength-of-a-group",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Greedy",
      "Bit Manipulation",
      "Sorting",
      "Enumeration"
    ],
    "description": "You are given a 0-indexed integer array nums representing the score of students in an exam. The teacher would like to form one non-empty group of students with maximal strength, where the strength of a group of students of indices i0, i1, i2, ... , ik is defined as nums[i0] * nums[i1] * nums[i2] * ... * nums[ik​].\nReturn the maximum strength of a group the teacher can create.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Greatest Common Divisor Traversal",
    "problem_id": "2827",
    "frontend_id": "2709",
    "difficulty": "Hard",
    "problem_slug": "greatest-common-divisor-traversal",
    "topics": [
      "Array",
      "Math",
      "Union Find",
      "Number Theory"
    ],
    "description": "You are given a 0-indexed integer array nums, and you are allowed to traverse between its indices. You can traverse between index i and index j, i != j, if and only if gcd(nums[i], nums[j]) > 1, where gcd is the greatest common divisor.\nYour task is to determine if for every pair of indices i and j in nums, where i < j, there exists a sequence of traversals that can take us from i to j.\nReturn true if it is possible to traverse between all such pairs of indices, or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Remove Trailing Zeros From a String",
    "problem_id": "2819",
    "frontend_id": "2710",
    "difficulty": "Easy",
    "problem_slug": "remove-trailing-zeros-from-a-string",
    "topics": [
      "String"
    ],
    "description": "Given a positive integer num represented as a string, return the integer num without trailing zeros as a string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Difference of Number of Distinct Values on Diagonals",
    "problem_id": "2801",
    "frontend_id": "2711",
    "difficulty": "Medium",
    "problem_slug": "difference-of-number-of-distinct-values-on-diagonals",
    "topics": [
      "Array",
      "Hash Table",
      "Matrix"
    ],
    "description": "Given a 2D grid of size m x n, you should find the matrix answer of size m x n.\nThe cell answer[r][c] is calculated by looking at the diagonal values of the cell grid[r][c]:\nA matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until the end of the matrix is reached.\nReturn the matrix answer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Cost to Make All Characters Equal",
    "problem_id": "2817",
    "frontend_id": "2712",
    "difficulty": "Medium",
    "problem_slug": "minimum-cost-to-make-all-characters-equal",
    "topics": [
      "String",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "You are given a 0-indexed binary string s of length n on which you can apply two types of operations:\nReturn the minimum cost to make all characters of the string equal.\nInvert a character means if its value is '0' it becomes '1' and vice-versa.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Strictly Increasing Cells in a Matrix",
    "problem_id": "2818",
    "frontend_id": "2713",
    "difficulty": "Hard",
    "problem_slug": "maximum-strictly-increasing-cells-in-a-matrix",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Dynamic Programming",
      "Memoization",
      "Sorting",
      "Matrix",
      "Ordered Set"
    ],
    "description": "Given a 1-indexed m x n integer matrix mat, you can select any cell in the matrix as your starting cell.\nFrom the starting cell, you can move to any other cell in the same row or column, but only if the value of the destination cell is strictly greater than the value of the current cell. You can repeat this process as many times as possible, moving from cell to cell until you can no longer make any moves.\nYour task is to find the maximum number of cells that you can visit in the matrix by starting from some cell.\nReturn an integer denoting the maximum number of cells that can be visited.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Timeout Cancellation",
    "problem_id": "2821",
    "frontend_id": "2715",
    "difficulty": "Easy",
    "problem_slug": "timeout-cancellation",
    "topics": [],
    "description": "Given a function fn, an array of arguments args, and a timeout t in milliseconds, return a cancel function cancelFn.\nAfter a delay of cancelTimeMs, the returned cancel function cancelFn will be invoked.\nInitially, the execution of the function fn should be delayed by t milliseconds.\nIf, before the delay of t milliseconds, the function cancelFn is invoked, it should cancel the delayed execution of fn. Otherwise, if cancelFn is not invoked within the specified delay t, fn should be executed with the provided args as arguments.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimize String Length",
    "problem_id": "2825",
    "frontend_id": "2716",
    "difficulty": "Easy",
    "problem_slug": "minimize-string-length",
    "topics": [
      "Hash Table",
      "String"
    ],
    "description": "Given a string s, you have two types of operation:\nYour task is to minimize the length of s by performing the above operations zero or more times.\nReturn an integer denoting the length of the minimized string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Semi-Ordered Permutation",
    "problem_id": "2785",
    "frontend_id": "2717",
    "difficulty": "Easy",
    "problem_slug": "semi-ordered-permutation",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "You are given a 0-indexed permutation of n integers nums.\nA permutation is called semi-ordered if the first number equals 1 and the last number equals n. You can perform the below operation as many times as you want until you make nums a semi-ordered permutation:\nReturn the minimum number of operations to make nums a semi-ordered permutation.\nA permutation is a sequence of integers from 1 to n of length n containing each number exactly once.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sum of Matrix After Queries",
    "problem_id": "2838",
    "frontend_id": "2718",
    "difficulty": "Medium",
    "problem_slug": "sum-of-matrix-after-queries",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "You are given an integer n and a 0-indexed 2D array queries where queries[i] = [typei, indexi, vali].\nInitially, there is a 0-indexed n x n matrix filled with 0's. For each query, you must apply one of the following changes:\nReturn the sum of integers in the matrix after all queries are applied.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count of Integers",
    "problem_id": "2757",
    "frontend_id": "2719",
    "difficulty": "Hard",
    "problem_slug": "count-of-integers",
    "topics": [
      "Math",
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given two numeric strings num1 and num2 and two integers max_sum and min_sum. We denote an integer x to be good if:\nReturn the number of good integers. Since the answer may be large, return it modulo 109 + 7.\nNote that digit_sum(x) denotes the sum of the digits of x.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Execute Asynchronous Functions in Parallel",
    "problem_id": "2807",
    "frontend_id": "2721",
    "difficulty": "Medium",
    "problem_slug": "execute-asynchronous-functions-in-parallel",
    "topics": [],
    "description": "Given an array of asynchronous functions functions, return a new promise promise. Each function in the array accepts no arguments and returns a promise. All the promises should be executed in parallel.\npromise resolves:\npromise rejects:\nPlease solve it without using the built-in Promise.all function.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Join Two Arrays by ID",
    "problem_id": "2858",
    "frontend_id": "2722",
    "difficulty": "Medium",
    "problem_slug": "join-two-arrays-by-id",
    "topics": [],
    "description": "Given two arrays arr1 and arr2, return a new array joinedArray. All the objects in each of the two inputs arrays will contain an id field that has an integer value.\njoinedArray is an array formed by merging arr1 and arr2 based on their id key. The length of joinedArray should be the length of unique values of id. The returned array should be sorted in ascending order based on the id key.\nIf a given id exists in one array but not the other, the single object with that id should be included in the result array without modification.\nIf two objects share an id, their properties should be merged into a single object:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Add Two Promises",
    "problem_id": "2859",
    "frontend_id": "2723",
    "difficulty": "Easy",
    "problem_slug": "add-two-promises",
    "topics": [],
    "description": "Example 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sort By",
    "problem_id": "2860",
    "frontend_id": "2724",
    "difficulty": "Easy",
    "problem_slug": "sort-by",
    "topics": [],
    "description": "Given an array arr and a function fn, return a sorted array sortedArr. You can assume fn only returns numbers and those numbers determine the sort order of sortedArr. sortedArr must be sorted in ascending order by fn output.\nYou may assume that fn will never duplicate numbers for a given array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Interval Cancellation",
    "problem_id": "2862",
    "frontend_id": "2725",
    "difficulty": "Easy",
    "problem_slug": "interval-cancellation",
    "topics": [],
    "description": "Given a function fn, an array of arguments args, and an interval time t, return a cancel function cancelFn.\nAfter a delay of cancelTimeMs, the returned cancel function cancelFn will be invoked.\nThe function fn should be called with args immediately and then called again every t milliseconds until cancelFn is called at cancelTimeMs ms.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Calculator with Method Chaining",
    "problem_id": "2863",
    "frontend_id": "2726",
    "difficulty": "Easy",
    "problem_slug": "calculator-with-method-chaining",
    "topics": [],
    "description": "Design a Calculator class. The class should provide the mathematical operations of addition, subtraction, multiplication, division, and exponentiation. It should also allow consecutive operations to be performed using method chaining. The Calculator class constructor should accept a number which serves as the initial value of result.\nYour Calculator class should have the following methods:\nSolutions within 10-5 of the actual result are considered correct.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Is Object Empty",
    "problem_id": "2864",
    "frontend_id": "2727",
    "difficulty": "Easy",
    "problem_slug": "is-object-empty",
    "topics": [],
    "description": "Given an object or an array, return if it is empty.\nYou may assume the object or array is the output of JSON.parse.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check if The Number is Fascinating",
    "problem_id": "2824",
    "frontend_id": "2729",
    "difficulty": "Easy",
    "problem_slug": "check-if-the-number-is-fascinating",
    "topics": [
      "Hash Table",
      "Math"
    ],
    "description": "You are given an integer n that consists of exactly 3 digits.\nWe call the number n fascinating if, after the following modification, the resulting number contains all the digits from 1 to 9 exactly once and does not contain any 0's:\nReturn true if n is fascinating, or false otherwise.\nConcatenating two numbers means joining them together. For example, the concatenation of 121 and 371 is 121371.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Longest Semi-Repetitive Substring",
    "problem_id": "2786",
    "frontend_id": "2730",
    "difficulty": "Medium",
    "problem_slug": "find-the-longest-semi-repetitive-substring",
    "topics": [
      "String",
      "Sliding Window"
    ],
    "description": "You are given a digit string s that consists of digits from 0 to 9.\nA string is called semi-repetitive if there is at most one adjacent pair of the same digit. For example, \"0010\", \"002020\", \"0123\", \"2002\", and \"54944\" are semi-repetitive while the following are not: \"00101022\" (adjacent same digit pairs are 00 and 22), and \"1101234883\" (adjacent same digit pairs are 11 and 88).\nReturn the length of the longest semi-repetitive substring of s.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Movement of Robots",
    "problem_id": "2787",
    "frontend_id": "2731",
    "difficulty": "Medium",
    "problem_slug": "movement-of-robots",
    "topics": [
      "Array",
      "Brainteaser",
      "Sorting",
      "Prefix Sum"
    ],
    "description": "Some robots are standing on an infinite number line with their initial coordinates given by a 0-indexed integer array nums and will start moving once given the command to move. The robots will move a unit distance each second.\nYou are given a string s denoting the direction in which robots will move on command. 'L' means the robot will move towards the left side or negative side of the number line, whereas 'R' means the robot will move towards the right side or positive side of the number line.\nIf two robots collide, they will start moving in opposite directions.\nReturn the sum of distances between all the pairs of robots d seconds after the command. Since the sum can be very large, return it modulo 109 + 7.\nNote:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find a Good Subset of the Matrix",
    "problem_id": "2826",
    "frontend_id": "2732",
    "difficulty": "Hard",
    "problem_slug": "find-a-good-subset-of-the-matrix",
    "topics": [
      "Array",
      "Hash Table",
      "Bit Manipulation",
      "Matrix"
    ],
    "description": "You are given a 0-indexed m x n binary matrix grid.\nLet us call a non-empty subset of rows good if the sum of each column of the subset is at most half of the length of the subset.\nMore formally, if the length of the chosen subset of rows is k, then the sum of each column should be at most floor(k / 2).\nReturn an integer array that contains row indices of a good subset sorted in ascending order.\nIf there are multiple good subsets, you can return any of them. If there are no good subsets, return an empty array.\nA subset of rows of the matrix grid is any matrix that can be obtained by deleting some (possibly none or all) rows from grid.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Neither Minimum nor Maximum",
    "problem_id": "2836",
    "frontend_id": "2733",
    "difficulty": "Easy",
    "problem_slug": "neither-minimum-nor-maximum",
    "topics": [
      "Array",
      "Sorting"
    ],
    "description": "Given an integer array nums containing distinct positive integers, find and return any number from the array that is neither the minimum nor the maximum value in the array, or -1 if there is no such number.\nReturn the selected integer.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Lexicographically Smallest String After Substring Operation",
    "problem_id": "2828",
    "frontend_id": "2734",
    "difficulty": "Medium",
    "problem_slug": "lexicographically-smallest-string-after-substring-operation",
    "topics": [
      "String",
      "Greedy"
    ],
    "description": "Given a string s consisting of lowercase English letters. Perform the following operation:\nReturn the lexicographically smallest string after performing the operation.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Collecting Chocolates",
    "problem_id": "2810",
    "frontend_id": "2735",
    "difficulty": "Medium",
    "problem_slug": "collecting-chocolates",
    "topics": [
      "Array",
      "Enumeration"
    ],
    "description": "You are given a 0-indexed integer array nums of size n representing the cost of collecting different chocolates. The cost of collecting the chocolate at the index i is nums[i]. Each chocolate is of a different type, and initially, the chocolate at the index i is of ith type.\nIn one operation, you can do the following with an incurred cost of x:\nReturn the minimum cost to collect chocolates of all types, given that you can perform as many operations as you would like.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Sum Queries",
    "problem_id": "2839",
    "frontend_id": "2736",
    "difficulty": "Hard",
    "problem_slug": "maximum-sum-queries",
    "topics": [
      "Array",
      "Binary Search",
      "Stack",
      "Binary Indexed Tree",
      "Segment Tree",
      "Sorting",
      "Monotonic Stack"
    ],
    "description": "You are given two 0-indexed integer arrays nums1 and nums2, each of length n, and a 1-indexed 2D array queries where queries[i] = [xi, yi].\nFor the ith query, find the maximum value of nums1[j] + nums2[j] among all indices j (0 <= j < n), where nums1[j] >= xi and nums2[j] >= yi, or -1 if there is no j satisfying the constraints.\nReturn an array answer where answer[i] is the answer to the ith query.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Total Distance Traveled",
    "problem_id": "2857",
    "frontend_id": "2739",
    "difficulty": "Easy",
    "problem_slug": "total-distance-traveled",
    "topics": [
      "Math",
      "Simulation"
    ],
    "description": "A truck has two fuel tanks. You are given two integers, mainTank representing the fuel present in the main tank in liters and additionalTank representing the fuel present in the additional tank in liters.\nThe truck has a mileage of 10 km per liter. Whenever 5 liters of fuel get used up in the main tank, if the additional tank has at least 1 liters of fuel, 1 liters of fuel will be transferred from the additional tank to the main tank.\nReturn the maximum distance which can be traveled.\nNote: Injection from the additional tank is not continuous. It happens suddenly and immediately for every 5 liters consumed.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Value of the Partition",
    "problem_id": "2845",
    "frontend_id": "2740",
    "difficulty": "Medium",
    "problem_slug": "find-the-value-of-the-partition",
    "topics": [
      "Array",
      "Sorting"
    ],
    "description": "You are given a positive integer array nums.\nPartition nums into two arrays, nums1 and nums2, such that:\nThe value of the partition is |max(nums1) - min(nums2)|.\nHere, max(nums1) denotes the maximum element of the array nums1, and min(nums2) denotes the minimum element of the array nums2.\nReturn the integer denoting the value of such partition.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Special Permutations",
    "problem_id": "2848",
    "frontend_id": "2741",
    "difficulty": "Medium",
    "problem_slug": "special-permutations",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "You are given a 0-indexed integer array nums containing n distinct positive integers. A permutation of nums is called special if:\nReturn the total number of special permutations. As the answer could be large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Painting the Walls",
    "problem_id": "2808",
    "frontend_id": "2742",
    "difficulty": "Hard",
    "problem_slug": "painting-the-walls",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given two 0-indexed integer arrays, cost and time, of size n representing the costs and the time taken to paint n different walls respectively. There are two painters available:\nReturn the minimum amount of money required to paint the n walls.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Maximum Number of String Pairs",
    "problem_id": "2847",
    "frontend_id": "2744",
    "difficulty": "Easy",
    "problem_slug": "find-maximum-number-of-string-pairs",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Simulation"
    ],
    "description": "You are given a 0-indexed array words consisting of distinct strings.\nThe string words[i] can be paired with the string words[j] if:\nReturn the maximum number of pairs that can be formed from the array words.\nNote that each string can belong in at most one pair.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Construct the Longest New String",
    "problem_id": "2850",
    "frontend_id": "2745",
    "difficulty": "Medium",
    "problem_slug": "construct-the-longest-new-string",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Greedy",
      "Brainteaser"
    ],
    "description": "You are given three integers x, y, and z.\nYou have x strings equal to \"AA\", y strings equal to \"BB\", and z strings equal to \"AB\". You want to choose some (possibly all or none) of these strings and concatenate them in some order to form a new string. This new string must not contain \"AAA\" or \"BBB\" as a substring.\nReturn the maximum possible length of the new string.\nA substring is a contiguous non-empty sequence of characters within a string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Decremental String Concatenation",
    "problem_id": "2854",
    "frontend_id": "2746",
    "difficulty": "Medium",
    "problem_slug": "decremental-string-concatenation",
    "topics": [
      "Array",
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given a 0-indexed array words containing n strings.\nLet's define a join operation join(x, y) between two strings x and y as concatenating them into xy. However, if the last character of x is equal to the first character of y, one of them is deleted.\nFor example join(\"ab\", \"ba\") = \"aba\" and join(\"ab\", \"cde\") = \"abcde\".\nYou are to perform n - 1 join operations. Let str0 = words[0]. Starting from i = 1 up to i = n - 1, for the ith operation, you can do one of the following:\nYour task is to minimize the length of strn - 1.\nReturn an integer denoting the minimum possible length of strn - 1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Zero Request Servers",
    "problem_id": "2833",
    "frontend_id": "2747",
    "difficulty": "Medium",
    "problem_slug": "count-zero-request-servers",
    "topics": [
      "Array",
      "Hash Table",
      "Sliding Window",
      "Sorting"
    ],
    "description": "You are given an integer n denoting the total number of servers and a 2D 0-indexed integer array logs, where logs[i] = [server_id, time] denotes that the server with id server_id received a request at time time.\nYou are also given an integer x and a 0-indexed integer array queries.\nReturn a 0-indexed integer array arr of length queries.length where arr[i] represents the number of servers that did not receive any requests during the time interval [queries[i] - x, queries[i]].\nNote that the time intervals are inclusive.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Beautiful Pairs",
    "problem_id": "2831",
    "frontend_id": "2748",
    "difficulty": "Easy",
    "problem_slug": "number-of-beautiful-pairs",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Counting",
      "Number Theory"
    ],
    "description": "You are given a 0-indexed integer array nums. A pair of indices i, j where 0 <= i < j < nums.length is called beautiful if the first digit of nums[i] and the last digit of nums[j] are coprime.\nReturn the total number of beautiful pairs in nums.\nTwo integers x and y are coprime if there is no integer greater than 1 that divides both of them. In other words, x and y are coprime if gcd(x, y) == 1, where gcd(x, y) is the greatest common divisor of x and y.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Make the Integer Zero",
    "problem_id": "2837",
    "frontend_id": "2749",
    "difficulty": "Medium",
    "problem_slug": "minimum-operations-to-make-the-integer-zero",
    "topics": [
      "Bit Manipulation",
      "Brainteaser",
      "Enumeration"
    ],
    "description": "You are given two integers num1 and num2.\nIn one operation, you can choose integer i in the range [0, 60] and subtract 2i + num2 from num1.\nReturn the integer denoting the minimum number of operations needed to make num1 equal to 0.\nIf it is impossible to make num1 equal to 0, return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Ways to Split Array Into Good Subarrays",
    "problem_id": "2867",
    "frontend_id": "2750",
    "difficulty": "Medium",
    "problem_slug": "ways-to-split-array-into-good-subarrays",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming"
    ],
    "description": "You are given a binary array nums.\nA subarray of an array is good if it contains exactly one element with the value 1.\nReturn an integer denoting the number of ways to split the array nums into good subarrays. As the number may be too large, return it modulo 109 + 7.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Robot Collisions",
    "problem_id": "2846",
    "frontend_id": "2751",
    "difficulty": "Hard",
    "problem_slug": "robot-collisions",
    "topics": [
      "Array",
      "Stack",
      "Sorting",
      "Simulation"
    ],
    "description": "There are n 1-indexed robots, each having a position on a line, health, and movement direction.\nYou are given 0-indexed integer arrays positions, healths, and a string directions (directions[i] is either 'L' for left or 'R' for right). All integers in positions are unique.\nAll robots start moving on the line simultaneously at the same speed in their given directions. If two robots ever share the same position while moving, they will collide.\nIf two robots collide, the robot with lower health is removed from the line, and the health of the other robot decreases by one. The surviving robot continues in the same direction it was going. If both robots have the same health, they are both removed from the line.\nYour task is to determine the health of the robots that survive the collisions, in the same order that the robots were given, i.e. final health of robot 1 (if survived), final health of robot 2 (if survived), and so on. If there are no survivors, return an empty array.\nReturn an array containing the health of the remaining robots (in the order they were given in the input), after no further collisions can occur.\nNote: The positions may be unsorted.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest Even Odd Subarray With Threshold",
    "problem_id": "2866",
    "frontend_id": "2760",
    "difficulty": "Easy",
    "problem_slug": "longest-even-odd-subarray-with-threshold",
    "topics": [
      "Array",
      "Sliding Window"
    ],
    "description": "You are given a 0-indexed integer array nums and an integer threshold.\nFind the length of the longest subarray of nums starting at index l and ending at index r (0 <= l <= r < nums.length) that satisfies the following conditions:\nReturn an integer denoting the length of the longest such subarray.\nNote: A subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Prime Pairs With Target Sum",
    "problem_id": "2873",
    "frontend_id": "2761",
    "difficulty": "Medium",
    "problem_slug": "prime-pairs-with-target-sum",
    "topics": [
      "Array",
      "Math",
      "Enumeration",
      "Number Theory"
    ],
    "description": "You are given an integer n. We say that two integers x and y form a prime number pair if:\nReturn the 2D sorted list of prime number pairs [xi, yi]. The list should be sorted in increasing order of xi. If there are no prime number pairs at all, return an empty array.\nNote: A prime number is a natural number greater than 1 with only two factors, itself and 1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Continuous Subarrays",
    "problem_id": "2868",
    "frontend_id": "2762",
    "difficulty": "Medium",
    "problem_slug": "continuous-subarrays",
    "topics": [
      "Array",
      "Queue",
      "Sliding Window",
      "Heap (Priority Queue)",
      "Ordered Set",
      "Monotonic Queue"
    ],
    "description": "You are given a 0-indexed integer array nums. A subarray of nums is called continuous if:\nReturn the total number of continuous subarrays.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Imbalance Numbers of All Subarrays",
    "problem_id": "2849",
    "frontend_id": "2763",
    "difficulty": "Hard",
    "problem_slug": "sum-of-imbalance-numbers-of-all-subarrays",
    "topics": [
      "Array",
      "Hash Table",
      "Ordered Set"
    ],
    "description": "The imbalance number of a 0-indexed integer array arr of length n is defined as the number of indices in sarr = sorted(arr) such that:\nHere, sorted(arr) is the function that returns the sorted version of arr.\nGiven a 0-indexed integer array nums, return the sum of imbalance numbers of all its subarrays.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Alternating Subarray",
    "problem_id": "2870",
    "frontend_id": "2765",
    "difficulty": "Easy",
    "problem_slug": "longest-alternating-subarray",
    "topics": [
      "Array",
      "Enumeration"
    ],
    "description": "You are given a 0-indexed integer array nums. A subarray s of length m is called alternating if:\nReturn the maximum length of all alternating subarrays present in nums or -1 if no such subarray exists.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Relocate Marbles",
    "problem_id": "2834",
    "frontend_id": "2766",
    "difficulty": "Medium",
    "problem_slug": "relocate-marbles",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting",
      "Simulation"
    ],
    "description": "You are given a 0-indexed integer array nums representing the initial positions of some marbles. You are also given two 0-indexed integer arrays moveFrom and moveTo of equal length.\nThroughout moveFrom.length steps, you will change the positions of the marbles. On the ith step, you will move all marbles at position moveFrom[i] to position moveTo[i].\nAfter completing all the steps, return the sorted list of occupied positions.\nNotes:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Partition String Into Minimum Beautiful Substrings",
    "problem_id": "2883",
    "frontend_id": "2767",
    "difficulty": "Medium",
    "problem_slug": "partition-string-into-minimum-beautiful-substrings",
    "topics": [
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Backtracking"
    ],
    "description": "Given a binary string s, partition the string into one or more substrings such that each substring is beautiful.\nA string is beautiful if:\nReturn the minimum number of substrings in such partition. If it is impossible to partition the string s into beautiful substrings, return -1.\nA substring is a contiguous sequence of characters in a string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Black Blocks",
    "problem_id": "2889",
    "frontend_id": "2768",
    "difficulty": "Medium",
    "problem_slug": "number-of-black-blocks",
    "topics": [
      "Array",
      "Hash Table",
      "Enumeration"
    ],
    "description": "You are given two integers m and n representing the dimensions of a 0-indexed m x n grid.\nYou are also given a 0-indexed 2D integer matrix coordinates, where coordinates[i] = [x, y] indicates that the cell with coordinates [x, y] is colored black. All cells in the grid that do not appear in coordinates are white.\nA block is defined as a 2 x 2 submatrix of the grid. More formally, a block with cell [x, y] as its top-left corner where 0 <= x < m - 1 and 0 <= y < n - 1 contains the coordinates [x, y], [x + 1, y], [x, y + 1], and [x + 1, y + 1].\nReturn a 0-indexed integer array arr of size 5 such that arr[i] is the number of blocks that contains exactly i black cells.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Maximum Achievable Number",
    "problem_id": "2812",
    "frontend_id": "2769",
    "difficulty": "Easy",
    "problem_slug": "find-the-maximum-achievable-number",
    "topics": [
      "Math"
    ],
    "description": "Given two integers, num and t. A number x is achievable if it can become equal to num after applying the following operation at most t times:\nReturn the maximum possible value of x.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Number of Jumps to Reach the Last Index",
    "problem_id": "2855",
    "frontend_id": "2770",
    "difficulty": "Medium",
    "problem_slug": "maximum-number-of-jumps-to-reach-the-last-index",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given a 0-indexed array nums of n integers and an integer target.\nYou are initially positioned at index 0. In one step, you can jump from index i to any index j such that:\nReturn the maximum number of jumps you can make to reach index n - 1.\nIf there is no way to reach index n - 1, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest Non-decreasing Subarray From Two Arrays",
    "problem_id": "2869",
    "frontend_id": "2771",
    "difficulty": "Medium",
    "problem_slug": "longest-non-decreasing-subarray-from-two-arrays",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given two 0-indexed integer arrays nums1 and nums2 of length n.\nLet's define another 0-indexed integer array, nums3, of length n. For each index i in the range [0, n - 1], you can assign either nums1[i] or nums2[i] to nums3[i].\nYour task is to maximize the length of the longest non-decreasing subarray in nums3 by choosing its values optimally.\nReturn an integer representing the length of the longest non-decreasing subarray in nums3.\nNote: A subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Apply Operations to Make All Array Elements Equal to Zero",
    "problem_id": "2878",
    "frontend_id": "2772",
    "difficulty": "Medium",
    "problem_slug": "apply-operations-to-make-all-array-elements-equal-to-zero",
    "topics": [
      "Array",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed integer array nums and a positive integer k.\nYou can apply the following operation on the array any number of times:\nReturn true if you can make all the array elements equal to 0, or false otherwise.\nA subarray is a contiguous non-empty part of an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Squares of Special Elements ",
    "problem_id": "2844",
    "frontend_id": "2778",
    "difficulty": "Easy",
    "problem_slug": "sum-of-squares-of-special-elements",
    "topics": [
      "Array",
      "Enumeration"
    ],
    "description": "You are given a 1-indexed integer array nums of length n.\nAn element nums[i] of nums is called special if i divides n, i.e. n % i == 0.\nReturn the sum of the squares of all special elements of nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Beauty of an Array After Applying Operation",
    "problem_id": "2891",
    "frontend_id": "2779",
    "difficulty": "Medium",
    "problem_slug": "maximum-beauty-of-an-array-after-applying-operation",
    "topics": [
      "Array",
      "Binary Search",
      "Sliding Window",
      "Sorting"
    ],
    "description": "You are given a 0-indexed array nums and a non-negative integer k.\nIn one operation, you can do the following:\nThe beauty of the array is the length of the longest subsequence consisting of equal elements.\nReturn the maximum possible beauty of the array nums after applying the operation any number of times.\nNote that you can apply the operation to each index only once.\nA subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the order of the remaining elements.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Index of a Valid Split",
    "problem_id": "2888",
    "frontend_id": "2780",
    "difficulty": "Medium",
    "problem_slug": "minimum-index-of-a-valid-split",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting"
    ],
    "description": "An element x of an integer array arr of length m is dominant if more than half the elements of arr have a value of x.\nYou are given a 0-indexed integer array nums of length n with one dominant element.\nYou can split nums at an index i into two arrays nums[0, ..., i] and nums[i + 1, ..., n - 1], but the split is only valid if:\nHere, nums[i, ..., j] denotes the subarray of nums starting at index i and ending at index j, both ends being inclusive. Particularly, if j < i then nums[i, ..., j] denotes an empty subarray.\nReturn the minimum index of a valid split. If no valid split exists, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Length of the Longest Valid Substring",
    "problem_id": "2884",
    "frontend_id": "2781",
    "difficulty": "Hard",
    "problem_slug": "length-of-the-longest-valid-substring",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "You are given a string word and an array of strings forbidden.\nA string is called valid if none of its substrings are present in forbidden.\nReturn the length of the longest valid substring of the string word.\nA substring is a contiguous sequence of characters in a string, possibly empty.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check if Array is Good",
    "problem_id": "2892",
    "frontend_id": "2784",
    "difficulty": "Easy",
    "problem_slug": "check-if-array-is-good",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting"
    ],
    "description": "You are given an integer array nums. We consider an array good if it is a permutation of an array base[n].\nbase[n] = [1, 2, ..., n - 1, n, n] (in other words, it is an array of length n + 1 which contains 1 to n - 1 exactly once, plus two occurrences of n). For example, base[1] = [1, 1] and base[3] = [1, 2, 3, 3].\nReturn true if the given array is good, otherwise return false.\nNote: A permutation of integers represents an arrangement of these numbers.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Sort Vowels in a String",
    "problem_id": "2887",
    "frontend_id": "2785",
    "difficulty": "Medium",
    "problem_slug": "sort-vowels-in-a-string",
    "topics": [
      "String",
      "Sorting"
    ],
    "description": "Given a 0-indexed string s, permute s to get a new string t such that:\nReturn the resulting string.\nThe vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in lowercase or uppercase. Consonants comprise all letters that are not vowels.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Visit Array Positions to Maximize Score",
    "problem_id": "2893",
    "frontend_id": "2786",
    "difficulty": "Medium",
    "problem_slug": "visit-array-positions-to-maximize-score",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given a 0-indexed integer array nums and a positive integer x.\nYou are initially at position 0 in the array and you can visit other positions according to the following rules:\nReturn the maximum total score you can get.\nNote that initially you have nums[0] points.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Ways to Express an Integer as Sum of Powers",
    "problem_id": "2882",
    "frontend_id": "2787",
    "difficulty": "Medium",
    "problem_slug": "ways-to-express-an-integer-as-sum-of-powers",
    "topics": [
      "Dynamic Programming"
    ],
    "description": "Given two positive integers n and x.\nReturn the number of ways n can be expressed as the sum of the xth power of unique positive integers, in other words, the number of sets of unique integers [n1, n2, ..., nk] where n = n1x + n2x + ... + nkx.\nSince the result can be very large, return it modulo 109 + 7.\nFor example, if n = 160 and x = 3, one way to express n is n = 23 + 33 + 53.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Split Strings by Separator",
    "problem_id": "2881",
    "frontend_id": "2788",
    "difficulty": "Easy",
    "problem_slug": "split-strings-by-separator",
    "topics": [
      "Array",
      "String"
    ],
    "description": "Given an array of strings words and a character separator, split each string in words by separator.\nReturn an array of strings containing the new strings formed after the splits, excluding empty strings.\nNotes\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Largest Element in an Array after Merge Operations",
    "problem_id": "2872",
    "frontend_id": "2789",
    "difficulty": "Medium",
    "problem_slug": "largest-element-in-an-array-after-merge-operations",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "You are given a 0-indexed array nums consisting of positive integers.\nYou can do the following operation on the array any number of times:\nReturn the value of the largest element that you can possibly obtain in the final array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Number of Groups With Increasing Length",
    "problem_id": "2919",
    "frontend_id": "2790",
    "difficulty": "Hard",
    "problem_slug": "maximum-number-of-groups-with-increasing-length",
    "topics": [
      "Array",
      "Math",
      "Binary Search",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given a 0-indexed array usageLimits of length n.\nYour task is to create groups using numbers from 0 to n - 1, ensuring that each number, i, is used no more than usageLimits[i] times in total across all groups. You must also satisfy the following conditions:\nReturn an integer denoting the maximum number of groups you can create while satisfying these conditions.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Paths That Can Form a Palindrome in a Tree",
    "problem_id": "2905",
    "frontend_id": "2791",
    "difficulty": "Hard",
    "problem_slug": "count-paths-that-can-form-a-palindrome-in-a-tree",
    "topics": [
      "Dynamic Programming",
      "Bit Manipulation",
      "Tree",
      "Depth-First Search",
      "Bitmask"
    ],
    "description": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to the edge between i and parent[i]. s[0] can be ignored.\nReturn the number of pairs of nodes (u, v) such that u < v and the characters assigned to edges on the path from u to v can be rearranged to form a palindrome.\nA string is a palindrome when it reads the same backwards as forwards.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Employees Who Met the Target",
    "problem_id": "2876",
    "frontend_id": "2798",
    "difficulty": "Easy",
    "problem_slug": "number-of-employees-who-met-the-target",
    "topics": [
      "Array"
    ],
    "description": "There are n employees in a company, numbered from 0 to n - 1. Each employee i has worked for hours[i] hours in the company.\nThe company requires each employee to work for at least target hours.\nYou are given a 0-indexed array of non-negative integers hours of length n and a non-negative integer target.\nReturn the integer denoting the number of employees who worked at least target hours.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Complete Subarrays in an Array",
    "problem_id": "2856",
    "frontend_id": "2799",
    "difficulty": "Medium",
    "problem_slug": "count-complete-subarrays-in-an-array",
    "topics": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "description": "You are given an array nums consisting of positive integers.\nWe call a subarray of an array complete if the following condition is satisfied:\nReturn the number of complete subarrays.\nA subarray is a contiguous non-empty part of an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Shortest String That Contains Three Strings",
    "problem_id": "2877",
    "frontend_id": "2800",
    "difficulty": "Medium",
    "problem_slug": "shortest-string-that-contains-three-strings",
    "topics": [
      "String",
      "Greedy",
      "Enumeration"
    ],
    "description": "If there are multiple such strings, return the lexicographically smallest one.\nReturn a string denoting the answer to the problem.\nNotes\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Stepping Numbers in Range",
    "problem_id": "2921",
    "frontend_id": "2801",
    "difficulty": "Hard",
    "problem_slug": "count-stepping-numbers-in-range",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "Given two positive integers low and high represented as strings, find the count of stepping numbers in the inclusive range [low, high].\nA stepping number is an integer such that all of its adjacent digits have an absolute difference of exactly 1.\nReturn an integer denoting the count of stepping numbers in the inclusive range [low, high].\nSince the answer may be very large, return it modulo 109 + 7.\nNote: A stepping number should not have a leading zero.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Account Balance After Rounded Purchase",
    "problem_id": "2955",
    "frontend_id": "2806",
    "difficulty": "Easy",
    "problem_slug": "account-balance-after-rounded-purchase",
    "topics": [
      "Math"
    ],
    "description": "Initially, you have a bank account balance of 100 dollars.\nYou are given an integer purchaseAmount representing the amount you will spend on a purchase in dollars, in other words, its price.\nWhen making the purchase, first the purchaseAmount is rounded to the nearest multiple of 10. Let us call this value roundedAmount. Then, roundedAmount dollars are removed from your bank account.\nReturn an integer denoting your final bank account balance after this purchase.\nNotes:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Insert Greatest Common Divisors in Linked List",
    "problem_id": "2903",
    "frontend_id": "2807",
    "difficulty": "Medium",
    "problem_slug": "insert-greatest-common-divisors-in-linked-list",
    "topics": [
      "Linked List",
      "Math",
      "Number Theory"
    ],
    "description": "Given the head of a linked list head, in which each node contains an integer value.\nBetween every pair of adjacent nodes, insert a new node with a value equal to the greatest common divisor of them.\nReturn the linked list after insertion.\nThe greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Seconds to Equalize a Circular Array",
    "problem_id": "2920",
    "frontend_id": "2808",
    "difficulty": "Medium",
    "problem_slug": "minimum-seconds-to-equalize-a-circular-array",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "You are given a 0-indexed array nums containing n integers.\nAt each second, you perform the following operation on the array:\nNote that all the elements get replaced simultaneously.\nReturn the minimum number of seconds needed to make all elements in the array nums equal.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Time to Make Array Sum At Most x",
    "problem_id": "2952",
    "frontend_id": "2809",
    "difficulty": "Hard",
    "problem_slug": "minimum-time-to-make-array-sum-at-most-x",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "You are given two 0-indexed integer arrays nums1 and nums2 of equal length. Every second, for all indices 0 <= i < nums1.length, value of nums1[i] is incremented by nums2[i]. After this is done, you can do the following operation:\nYou are also given an integer x.\nReturn the minimum time in which you can make the sum of all elements of nums1 to be less than or equal to x, or -1 if this is not possible.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Faulty Keyboard",
    "problem_id": "2886",
    "frontend_id": "2810",
    "difficulty": "Easy",
    "problem_slug": "faulty-keyboard",
    "topics": [
      "String",
      "Simulation"
    ],
    "description": "Your laptop keyboard is faulty, and whenever you type a character 'i' on it, it reverses the string that you have written. Typing other characters works as expected.\nYou are given a 0-indexed string s, and you type each character of s using your faulty keyboard.\nReturn the final string that will be present on your laptop screen.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check if it is Possible to Split Array",
    "problem_id": "2916",
    "frontend_id": "2811",
    "difficulty": "Medium",
    "problem_slug": "check-if-it-is-possible-to-split-array",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "You are given an array nums of length n and an integer m. You need to determine if it is possible to split the array into n arrays of size 1 by performing a series of steps.\nAn array is called good if:\nIn each step, you can select an existing array (which may be the result of previous steps) with a length of at least two and split it into two arrays, if both resulting arrays are good.\nReturn true if you can split the given array into n arrays, otherwise return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Safest Path in a Grid",
    "problem_id": "2914",
    "frontend_id": "2812",
    "difficulty": "Medium",
    "problem_slug": "find-the-safest-path-in-a-grid",
    "topics": [
      "Array",
      "Binary Search",
      "Breadth-First Search",
      "Union Find",
      "Heap (Priority Queue)",
      "Matrix"
    ],
    "description": "You are given a 0-indexed 2D matrix grid of size n x n, where (r, c) represents:\nYou are initially positioned at cell (0, 0). In one move, you can move to any adjacent cell in the grid, including cells containing thieves.\nThe safeness factor of a path on the grid is defined as the minimum manhattan distance from any cell in the path to any thief in the grid.\nReturn the maximum safeness factor of all paths leading to cell (n - 1, n - 1).\nAn adjacent cell of cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) and (r - 1, c) if it exists.\nThe Manhattan distance between two cells (a, b) and (x, y) is equal to |a - x| + |b - y|, where |val| denotes the absolute value of val.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Elegance of a K-Length Subsequence",
    "problem_id": "2894",
    "frontend_id": "2813",
    "difficulty": "Hard",
    "problem_slug": "maximum-elegance-of-a-k-length-subsequence",
    "topics": [
      "Array",
      "Hash Table",
      "Stack",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given a 0-indexed 2D integer array items of length n and an integer k.\nitems[i] = [profiti, categoryi], where profiti and categoryi denote the profit and category of the ith item respectively.\nLet's define the elegance of a subsequence of items as total_profit + distinct_categories2, where total_profit is the sum of all profits in the subsequence, and distinct_categories is the number of distinct categories from all the categories in the selected subsequence.\nYour task is to find the maximum elegance from all subsequences of size k in items.\nReturn an integer denoting the maximum elegance of a subsequence of items with size exactly k.\nNote: A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Max Pair Sum in an Array",
    "problem_id": "2902",
    "frontend_id": "2815",
    "difficulty": "Easy",
    "problem_slug": "max-pair-sum-in-an-array",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "You are given an integer array nums. You have to find the maximum sum of a pair of numbers from nums such that the largest digit in both numbers is equal.\nFor example, 2373 is made up of three distinct digits: 2, 3, and 7, where 7 is the largest among them.\nReturn the maximum sum or -1 if no such pair exists.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Double a Number Represented as a Linked List",
    "problem_id": "2871",
    "frontend_id": "2816",
    "difficulty": "Medium",
    "problem_slug": "double-a-number-represented-as-a-linked-list",
    "topics": [
      "Linked List",
      "Math",
      "Stack"
    ],
    "description": "You are given the head of a non-empty linked list representing a non-negative integer without leading zeroes.\nReturn the head of the linked list after doubling it.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Absolute Difference Between Elements With Constraint",
    "problem_id": "3000",
    "frontend_id": "2817",
    "difficulty": "Medium",
    "problem_slug": "minimum-absolute-difference-between-elements-with-constraint",
    "topics": [
      "Array",
      "Binary Search",
      "Ordered Set"
    ],
    "description": "You are given a 0-indexed integer array nums and an integer x.\nFind the minimum absolute difference between two elements in the array that are at least x indices apart.\nIn other words, find two indices i and j such that abs(i - j) >= x and abs(nums[i] - nums[j]) is minimized.\nReturn an integer denoting the minimum absolute difference between two elements that are at least x indices apart.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Apply Operations to Maximize Score",
    "problem_id": "3001",
    "frontend_id": "2818",
    "difficulty": "Hard",
    "problem_slug": "apply-operations-to-maximize-score",
    "topics": [
      "Array",
      "Math",
      "Stack",
      "Greedy",
      "Sorting",
      "Monotonic Stack",
      "Number Theory"
    ],
    "description": "You are given an array nums of n positive integers and an integer k.\nInitially, you start with a score of 1. You have to maximize your score by applying the following operation at most k times:\nHere, nums[l, ..., r] denotes the subarray of nums starting at index l and ending at the index r, both ends being inclusive.\nThe prime score of an integer x is equal to the number of distinct prime factors of x. For example, the prime score of 300 is 3 since 300 = 2 * 2 * 3 * 5 * 5.\nReturn the maximum possible score after applying at most k operations.\nSince the answer may be large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Pairs Whose Sum is Less than Target",
    "problem_id": "2917",
    "frontend_id": "2824",
    "difficulty": "Easy",
    "problem_slug": "count-pairs-whose-sum-is-less-than-target",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "description": "Example 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Make String a Subsequence Using Cyclic Increments",
    "problem_id": "3018",
    "frontend_id": "2825",
    "difficulty": "Medium",
    "problem_slug": "make-string-a-subsequence-using-cyclic-increments",
    "topics": [
      "Two Pointers",
      "String"
    ],
    "description": "You are given two 0-indexed strings str1 and str2.\nIn an operation, you select a set of indices in str1, and for each index i in the set, increment str1[i] to the next character cyclically. That is 'a' becomes 'b', 'b' becomes 'c', and so on, and 'z' becomes 'a'.\nReturn true if it is possible to make str2 a subsequence of str1 by performing the operation at most once, and false otherwise.\nNote: A subsequence of a string is a new string that is formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sorting Three Groups",
    "problem_id": "2904",
    "frontend_id": "2826",
    "difficulty": "Medium",
    "problem_slug": "sorting-three-groups",
    "topics": [
      "Array",
      "Binary Search",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array nums. Each element in nums is 1, 2 or 3. In each operation, you can remove an element from nums. Return the minimum number of operations to make nums non-decreasing.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Beautiful Integers in the Range",
    "problem_id": "3017",
    "frontend_id": "2827",
    "difficulty": "Hard",
    "problem_slug": "number-of-beautiful-integers-in-the-range",
    "topics": [
      "Math",
      "Dynamic Programming"
    ],
    "description": "You are given positive integers low, high, and k.\nA number is beautiful if it meets both of the following conditions:\nReturn the number of beautiful integers in the range [low, high].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check if a String Is an Acronym of Words",
    "problem_id": "2977",
    "frontend_id": "2828",
    "difficulty": "Easy",
    "problem_slug": "check-if-a-string-is-an-acronym-of-words",
    "topics": [
      "Array",
      "String"
    ],
    "description": "Given an array of strings words and a string s, determine if s is an acronym of words.\nThe string s is considered an acronym of words if it can be formed by concatenating the first character of each string in words in order. For example, \"ab\" can be formed from [\"apple\", \"banana\"], but it can't be formed from [\"bear\", \"aardvark\"].\nReturn true if s is an acronym of words, and false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Determine the Minimum Sum of a k-avoiding Array",
    "problem_id": "2811",
    "frontend_id": "2829",
    "difficulty": "Medium",
    "problem_slug": "determine-the-minimum-sum-of-a-k-avoiding-array",
    "topics": [
      "Math",
      "Greedy"
    ],
    "description": "You are given two integers, n and k.\nAn array of distinct positive integers is called a k-avoiding array if there does not exist any pair of distinct elements that sum to k.\nReturn the minimum possible sum of a k-avoiding array of length n.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximize the Profit as the Salesman",
    "problem_id": "2979",
    "frontend_id": "2830",
    "difficulty": "Medium",
    "problem_slug": "maximize-the-profit-as-the-salesman",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "You are given an integer n representing the number of houses on a number line, numbered from 0 to n - 1.\nAdditionally, you are given a 2D integer array offers where offers[i] = [starti, endi, goldi], indicating that ith buyer wants to buy all the houses from starti to endi for goldi amount of gold.\nAs a salesman, your goal is to maximize your earnings by strategically selecting and selling houses to buyers.\nReturn the maximum amount of gold you can earn.\nNote that different buyers can't buy the same house, and some houses may remain unsold.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Longest Equal Subarray",
    "problem_id": "2832",
    "frontend_id": "2831",
    "difficulty": "Medium",
    "problem_slug": "find-the-longest-equal-subarray",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Sliding Window"
    ],
    "description": "You are given a 0-indexed integer array nums and an integer k.\nA subarray is called equal if all of its elements are equal. Note that the empty subarray is an equal subarray.\nReturn the length of the longest possible equal subarray after deleting at most k elements from nums.\nA subarray is a contiguous, possibly empty sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Furthest Point From Origin",
    "problem_id": "3019",
    "frontend_id": "2833",
    "difficulty": "Easy",
    "problem_slug": "furthest-point-from-origin",
    "topics": [
      "String",
      "Counting"
    ],
    "description": "You are given a string moves of length n consisting only of characters 'L', 'R', and '_'. The string represents your movement on a number line starting from the origin 0.\nIn the ith move, you can choose one of the following directions:\nReturn the distance from the origin of the furthest point you can get to after n moves.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Minimum Possible Sum of a Beautiful Array",
    "problem_id": "3026",
    "frontend_id": "2834",
    "difficulty": "Medium",
    "problem_slug": "find-the-minimum-possible-sum-of-a-beautiful-array",
    "topics": [
      "Math",
      "Greedy"
    ],
    "description": "You are given positive integers n and target.\nAn array nums is beautiful if it meets the following conditions:\nReturn the minimum possible sum that a beautiful array could have modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Form Subsequence With Target Sum",
    "problem_id": "3025",
    "frontend_id": "2835",
    "difficulty": "Hard",
    "problem_slug": "minimum-operations-to-form-subsequence-with-target-sum",
    "topics": [
      "Array",
      "Greedy",
      "Bit Manipulation"
    ],
    "description": "You are given a 0-indexed array nums consisting of non-negative powers of 2, and an integer target.\nIn one operation, you must apply the following changes to the array:\nReturn the minimum number of operations you need to perform so that nums contains a subsequence whose elements sum to target. If it is impossible to obtain such a subsequence, return -1.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximize Value of Function in a Ball Passing Game",
    "problem_id": "3032",
    "frontend_id": "2836",
    "difficulty": "Hard",
    "problem_slug": "maximize-value-of-function-in-a-ball-passing-game",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation"
    ],
    "description": "You are given an integer array receiver of length n and an integer k. n players are playing a ball-passing game.\nYou choose the starting player, i. The game proceeds as follows: player i passes the ball to player receiver[i], who then passes it to receiver[receiver[i]], and so on, for k passes in total. The game's score is the sum of the indices of the players who touched the ball, including repetitions, i.e. i + receiver[i] + receiver[receiver[i]] + ... + receiver(k)[i].\nReturn the maximum possible score.\nNotes:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check if Strings Can be Made Equal With Operations I",
    "problem_id": "2999",
    "frontend_id": "2839",
    "difficulty": "Easy",
    "problem_slug": "check-if-strings-can-be-made-equal-with-operations-i",
    "topics": [
      "String"
    ],
    "description": "You are given two strings s1 and s2, both of length 4, consisting of lowercase English letters.\nYou can apply the following operation on any of the two strings any number of times:\nReturn true if you can make the strings s1 and s2 equal, and false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check if Strings Can be Made Equal With Operations II",
    "problem_id": "2978",
    "frontend_id": "2840",
    "difficulty": "Medium",
    "problem_slug": "check-if-strings-can-be-made-equal-with-operations-ii",
    "topics": [
      "Hash Table",
      "String",
      "Sorting"
    ],
    "description": "You are given two strings s1 and s2, both of length n, consisting of lowercase English letters.\nYou can apply the following operation on any of the two strings any number of times:\nReturn true if you can make the strings s1 and s2 equal, and false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Sum of Almost Unique Subarray",
    "problem_id": "2954",
    "frontend_id": "2841",
    "difficulty": "Medium",
    "problem_slug": "maximum-sum-of-almost-unique-subarray",
    "topics": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "description": "You are given an integer array nums and two positive integers m and k.\nReturn the maximum sum out of all almost unique subarrays of length k of nums. If no such subarray exists, return 0.\nA subarray of nums is almost unique if it contains at least m distinct elements.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count K-Subsequences of a String With Maximum Beauty",
    "problem_id": "3057",
    "frontend_id": "2842",
    "difficulty": "Hard",
    "problem_slug": "count-k-subsequences-of-a-string-with-maximum-beauty",
    "topics": [
      "Hash Table",
      "Math",
      "String",
      "Greedy",
      "Combinatorics"
    ],
    "description": "You are given a string s and an integer k.\nA k-subsequence is a subsequence of s, having length k, and all its characters are unique, i.e., every character occurs once.\nLet f(c) denote the number of times the character c occurs in s.\nThe beauty of a k-subsequence is the sum of f(c) for every character c in the k-subsequence.\nFor example, consider s = \"abbbdd\" and k = 2:\nReturn an integer denoting the number of k-subsequences whose beauty is the maximum among all k-subsequences. Since the answer may be too large, return it modulo 109 + 7.\nA subsequence of a string is a new string formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.\nNotes\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "  Count Symmetric Integers",
    "problem_id": "2998",
    "frontend_id": "2843",
    "difficulty": "Easy",
    "problem_slug": "count-symmetric-integers",
    "topics": [
      "Math",
      "Enumeration"
    ],
    "description": "You are given two positive integers low and high.\nAn integer x consisting of 2 * n digits is symmetric if the sum of the first n digits of x is equal to the sum of the last n digits of x. Numbers with an odd number of digits are never symmetric.\nReturn the number of symmetric integers in the range [low, high].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Make a Special Number",
    "problem_id": "3046",
    "frontend_id": "2844",
    "difficulty": "Medium",
    "problem_slug": "minimum-operations-to-make-a-special-number",
    "topics": [
      "Math",
      "String",
      "Greedy",
      "Enumeration"
    ],
    "description": "You are given a 0-indexed string num representing a non-negative integer.\nIn one operation, you can pick any digit of num and delete it. Note that if you delete all the digits of num, num becomes 0.\nReturn the minimum number of operations required to make num special.\nAn integer x is considered special if it is divisible by 25.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count of Interesting Subarrays",
    "problem_id": "2915",
    "frontend_id": "2845",
    "difficulty": "Medium",
    "problem_slug": "count-of-interesting-subarrays",
    "topics": [
      "Array",
      "Hash Table",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed integer array nums, an integer modulo, and an integer k.\nYour task is to find the count of subarrays that are interesting.\nA subarray nums[l..r] is interesting if the following condition holds:\nReturn an integer denoting the count of interesting subarrays.\nNote: A subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Edge Weight Equilibrium Queries in a Tree",
    "problem_id": "3079",
    "frontend_id": "2846",
    "difficulty": "Hard",
    "problem_slug": "minimum-edge-weight-equilibrium-queries-in-a-tree",
    "topics": [
      "Array",
      "Tree",
      "Graph",
      "Strongly Connected Component"
    ],
    "description": "There is an undirected tree with n nodes labeled from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ui, vi, wi] indicates that there is an edge between nodes ui and vi with weight wi in the tree.\nYou are also given a 2D integer array queries of length m, where queries[i] = [ai, bi]. For each query, find the minimum number of operations required to make the weight of every edge on the path from ai to bi equal. In one operation, you can choose any edge of the tree and change its weight to any value.\nNote that:\nReturn an array answer of length m where answer[i] is the answer to the ith query.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Points That Intersect With Cars",
    "problem_id": "3034",
    "frontend_id": "2848",
    "difficulty": "Easy",
    "problem_slug": "points-that-intersect-with-cars",
    "topics": [
      "Array",
      "Hash Table",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed 2D integer array nums representing the coordinates of the cars parking on a number line. For any index i, nums[i] = [starti, endi] where starti is the starting point of the ith car and endi is the ending point of the ith car.\nReturn the number of integer points on the line that are covered with any part of a car.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Determine if a Cell Is Reachable at a Given Time",
    "problem_id": "3056",
    "frontend_id": "2849",
    "difficulty": "Medium",
    "problem_slug": "determine-if-a-cell-is-reachable-at-a-given-time",
    "topics": [
      "Math"
    ],
    "description": "You are given four integers sx, sy, fx, fy, and a non-negative integer t.\nIn an infinite 2D grid, you start at the cell (sx, sy). Each second, you must move to any of its adjacent cells.\nReturn true if you can reach cell (fx, fy) after exactly t seconds, or false otherwise.\nA cell's adjacent cells are the 8 cells around it that share at least one corner with it. You can visit the same cell several times.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Moves to Spread Stones Over Grid",
    "problem_id": "3092",
    "frontend_id": "2850",
    "difficulty": "Medium",
    "problem_slug": "minimum-moves-to-spread-stones-over-grid",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "You are given a 0-indexed 2D integer matrix grid of size 3 * 3, representing the number of stones in each cell. The grid contains exactly 9 stones, and there can be multiple stones in a single cell.\nIn one move, you can move a single stone from its current cell to any other cell if the two cells share a side.\nReturn the minimum number of moves required to place one stone in each cell.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "String Transformation",
    "problem_id": "3024",
    "frontend_id": "2851",
    "difficulty": "Hard",
    "problem_slug": "string-transformation",
    "topics": [
      "Math",
      "String",
      "Dynamic Programming",
      "String Matching"
    ],
    "description": "You are given two strings s and t of equal length n. You can perform the following operation on the string s:\nYou are also given an integer k. Return the number of ways in which s can be transformed into t in exactly k operations.\nSince the answer can be large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Right Shifts to Sort the Array",
    "problem_id": "3045",
    "frontend_id": "2855",
    "difficulty": "Easy",
    "problem_slug": "minimum-right-shifts-to-sort-the-array",
    "topics": [
      "Array"
    ],
    "description": "You are given a 0-indexed array nums of length n containing distinct positive integers. Return the minimum number of right shifts required to sort nums and -1 if this is not possible.\nA right shift is defined as shifting the element at index i to index (i + 1) % n, for all indices.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Array Length After Pair Removals",
    "problem_id": "3081",
    "frontend_id": "2856",
    "difficulty": "Medium",
    "problem_slug": "minimum-array-length-after-pair-removals",
    "topics": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search",
      "Greedy",
      "Counting"
    ],
    "description": "Given an integer array num sorted in non-decreasing order.\nYou can perform the following operation any number of times:\nReturn the minimum length of nums after applying the operation zero or more times.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Count Pairs of Points With Distance k",
    "problem_id": "2953",
    "frontend_id": "2857",
    "difficulty": "Medium",
    "problem_slug": "count-pairs-of-points-with-distance-k",
    "topics": [
      "Array",
      "Hash Table",
      "Bit Manipulation"
    ],
    "description": "You are given a 2D integer array coordinates and an integer k, where coordinates[i] = [xi, yi] are the coordinates of the ith point in a 2D plane.\nWe define the distance between two points (x1, y1) and (x2, y2) as (x1 XOR x2) + (y1 XOR y2) where XOR is the bitwise XOR operation.\nReturn the number of pairs (i, j) such that i < j and the distance between points i and j is equal to k.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Edge Reversals So Every Node Is Reachable",
    "problem_id": "3105",
    "frontend_id": "2858",
    "difficulty": "Hard",
    "problem_slug": "minimum-edge-reversals-so-every-node-is-reachable",
    "topics": [
      "Dynamic Programming",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph"
    ],
    "description": "There is a simple directed graph with n nodes labeled from 0 to n - 1. The graph would form a tree if its edges were bi-directional.\nYou are given an integer n and a 2D integer array edges, where edges[i] = [ui, vi] represents a directed edge going from node ui to node vi.\nAn edge reversal changes the direction of an edge, i.e., a directed edge going from node ui to node vi becomes a directed edge going from node vi to node ui.\nFor every node i in the range [0, n - 1], your task is to independently calculate the minimum number of edge reversals required so it is possible to reach any other node starting from node i through a sequence of directed edges.\nReturn an integer array answer, where answer[i] is the  minimum number of edge reversals required so it is possible to reach any other node starting from node i through a sequence of directed edges.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Values at Indices With K Set Bits",
    "problem_id": "3093",
    "frontend_id": "2859",
    "difficulty": "Easy",
    "problem_slug": "sum-of-values-at-indices-with-k-set-bits",
    "topics": [
      "Array",
      "Bit Manipulation"
    ],
    "description": "You are given a 0-indexed integer array nums and an integer k.\nReturn an integer that denotes the sum of elements in nums whose corresponding indices have exactly k set bits in their binary representation.\nThe set bits in an integer are the 1's present when it is written in binary.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Happy Students",
    "problem_id": "3104",
    "frontend_id": "2860",
    "difficulty": "Medium",
    "problem_slug": "happy-students",
    "topics": [
      "Array",
      "Sorting",
      "Enumeration"
    ],
    "description": "You are given a 0-indexed integer array nums of length n where n is the total number of students in the class. The class teacher tries to select a group of students so that all the students remain happy.\nThe ith student will become happy if one of these two conditions is met:\nReturn the number of ways to select a group of students so that everyone remains happy.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Number of Alloys",
    "problem_id": "3095",
    "frontend_id": "2861",
    "difficulty": "Medium",
    "problem_slug": "maximum-number-of-alloys",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "You are the owner of a company that creates alloys using various types of metals. There are n different types of metals available, and you have access to k machines that can be used to create alloys. Each machine requires a specific amount of each metal type to create an alloy.\nFor the ith machine to create an alloy, it needs composition[i][j] units of metal of type j. Initially, you have stock[i] units of metal type i, and purchasing one unit of metal type i costs cost[i] coins.\nGiven integers n, k, budget, a 1-indexed 2D array composition, and 1-indexed arrays stock and cost, your goal is to maximize the number of alloys the company can create while staying within the budget of budget coins.\nAll alloys must be created with the same machine.\nReturn the maximum number of alloys that the company can create.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Element-Sum of a Complete Subset of Indices",
    "problem_id": "3047",
    "frontend_id": "2862",
    "difficulty": "Hard",
    "problem_slug": "maximum-element-sum-of-a-complete-subset-of-indices",
    "topics": [
      "Array",
      "Math",
      "Number Theory"
    ],
    "description": "You are given a 1-indexed array nums. Your task is to select a complete subset from nums where every pair of selected indices multiplied is a perfect square,. i. e. if you select ai and aj, i * j must be a perfect square.\nReturn the sum of the complete subset with the maximum sum.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Odd Binary Number",
    "problem_id": "3055",
    "frontend_id": "2864",
    "difficulty": "Easy",
    "problem_slug": "maximum-odd-binary-number",
    "topics": [
      "Math",
      "String",
      "Greedy"
    ],
    "description": "You are given a binary string s that contains at least one '1'.\nYou have to rearrange the bits in such a way that the resulting binary number is the maximum odd binary number that can be created from this combination.\nReturn a string representing the maximum odd binary number that can be created from the given combination.\nNote that the resulting string can have leading zeros.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Beautiful Towers I",
    "problem_id": "3114",
    "frontend_id": "2865",
    "difficulty": "Medium",
    "problem_slug": "beautiful-towers-i",
    "topics": [
      "Array",
      "Stack",
      "Monotonic Stack"
    ],
    "description": "You are given an array heights of n integers representing the number of bricks in n consecutive towers. Your task is to remove some bricks to form a mountain-shaped tower arrangement. In this arrangement, the tower heights are non-decreasing, reaching a maximum peak value with one or multiple consecutive towers and then non-increasing.\nReturn the maximum possible sum of heights of a mountain-shaped tower arrangement.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Beautiful Towers II",
    "problem_id": "3113",
    "frontend_id": "2866",
    "difficulty": "Medium",
    "problem_slug": "beautiful-towers-ii",
    "topics": [
      "Array",
      "Stack",
      "Monotonic Stack"
    ],
    "description": "You are given a 0-indexed array maxHeights of n integers.\nYou are tasked with building n towers in the coordinate line. The ith tower is built at coordinate i and has a height of heights[i].\nA configuration of towers is beautiful if the following conditions hold:\nArray heights is a mountain if there exists an index i such that:\nReturn the maximum possible sum of heights of a beautiful configuration of towers.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Valid Paths in a Tree",
    "problem_id": "3112",
    "frontend_id": "2867",
    "difficulty": "Hard",
    "problem_slug": "count-valid-paths-in-a-tree",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Number Theory"
    ],
    "description": "There is an undirected tree with n nodes labeled from 1 to n. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the tree.\nReturn the number of valid paths in the tree.\nA path (a, b) is valid if there exists exactly one prime number among the node labels in the path from a to b.\nNote that:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Collect Elements",
    "problem_id": "3044",
    "frontend_id": "2869",
    "difficulty": "Easy",
    "problem_slug": "minimum-operations-to-collect-elements",
    "topics": [
      "Array",
      "Hash Table",
      "Bit Manipulation"
    ],
    "description": "You are given an array nums of positive integers and an integer k.\nIn one operation, you can remove the last element of the array and add it to your collection.\nReturn the minimum number of operations needed to collect elements 1, 2, ..., k.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Operations to Make Array Empty",
    "problem_id": "3094",
    "frontend_id": "2870",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-operations-to-make-array-empty",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Counting"
    ],
    "description": "You are given a 0-indexed array nums consisting of positive integers.\nThere are two types of operations that you can apply on the array any number of times:\nReturn the minimum number of operations required to make the array empty, or -1 if it is not possible.\nExample 1:\nExample 2:\nConstraints:\nNote: This question is the same as 2244: Minimum Rounds to Complete All Tasks."
  },
  {
    "title": "Split Array Into Maximum Number of Subarrays",
    "problem_id": "3080",
    "frontend_id": "2871",
    "difficulty": "Medium",
    "problem_slug": "split-array-into-maximum-number-of-subarrays",
    "topics": [
      "Array",
      "Greedy",
      "Bit Manipulation"
    ],
    "description": "You are given an array nums consisting of non-negative integers.\nWe define the score of subarray nums[l..r] such that l <= r as nums[l] AND nums[l + 1] AND ... AND nums[r] where AND is the bitwise AND operation.\nConsider splitting the array into one or more subarrays such that the following conditions are satisfied:\nReturn the maximum number of subarrays in a split that satisfies the conditions above.\nA subarray is a contiguous part of an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Number of K-Divisible Components",
    "problem_id": "3058",
    "frontend_id": "2872",
    "difficulty": "Hard",
    "problem_slug": "maximum-number-of-k-divisible-components",
    "topics": [
      "Tree",
      "Depth-First Search"
    ],
    "description": "There is an undirected tree with n nodes labeled from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nYou are also given a 0-indexed integer array values of length n, where values[i] is the value associated with the ith node, and an integer k.\nA valid split of the tree is obtained by removing any set of edges, possibly empty, from the tree such that the resulting components all have values that are divisible by k, where the value of a connected component is the sum of the values of its nodes.\nReturn the maximum number of components in any valid split.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Value of an Ordered Triplet I",
    "problem_id": "3154",
    "frontend_id": "2873",
    "difficulty": "Easy",
    "problem_slug": "maximum-value-of-an-ordered-triplet-i",
    "topics": [
      "Array"
    ],
    "description": "You are given a 0-indexed integer array nums.\nReturn the maximum value over all triplets of indices (i, j, k) such that i < j < k. If all such triplets have a negative value, return 0.\nThe value of a triplet of indices (i, j, k) is equal to (nums[i] - nums[j]) * nums[k].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Value of an Ordered Triplet II",
    "problem_id": "3152",
    "frontend_id": "2874",
    "difficulty": "Medium",
    "problem_slug": "maximum-value-of-an-ordered-triplet-ii",
    "topics": [
      "Array"
    ],
    "description": "You are given a 0-indexed integer array nums.\nReturn the maximum value over all triplets of indices (i, j, k) such that i < j < k. If all such triplets have a negative value, return 0.\nThe value of a triplet of indices (i, j, k) is equal to (nums[i] - nums[j]) * nums[k].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Size Subarray in Infinite Array",
    "problem_id": "3141",
    "frontend_id": "2875",
    "difficulty": "Medium",
    "problem_slug": "minimum-size-subarray-in-infinite-array",
    "topics": [
      "Array",
      "Hash Table",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed array nums and an integer target.\nA 0-indexed array infinite_nums is generated by infinitely appending the elements of nums to itself.\nReturn the length of the shortest subarray of the array infinite_nums with a sum equal to target. If there is no such subarray return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Visited Nodes in a Directed Graph",
    "problem_id": "3140",
    "frontend_id": "2876",
    "difficulty": "Hard",
    "problem_slug": "count-visited-nodes-in-a-directed-graph",
    "topics": [
      "Dynamic Programming",
      "Graph",
      "Memoization"
    ],
    "description": "There is a directed graph consisting of n nodes numbered from 0 to n - 1 and n directed edges.\nYou are given a 0-indexed array edges where edges[i] indicates that there is an edge from node i to node edges[i].\nConsider the following process on the graph:\nReturn an array answer where answer[i] is the number of different nodes that you will visit if you perform the process starting from node i.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Create a DataFrame from List",
    "problem_id": "3062",
    "frontend_id": "2877",
    "difficulty": "Easy",
    "problem_slug": "create-a-dataframe-from-list",
    "topics": [],
    "description": "Write a solution to create a DataFrame from a 2D list called student_data. This 2D list contains the IDs and ages of some students.\nThe DataFrame should have two columns, student_id and age, and be in the same order as the original 2D list.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Get the Size of a DataFrame",
    "problem_id": "3076",
    "frontend_id": "2878",
    "difficulty": "Easy",
    "problem_slug": "get-the-size-of-a-dataframe",
    "topics": [],
    "description": "Write a solution to calculate and display the number of rows and columns of players.\nReturn the result as an array:\n[number of rows, number of columns]\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Display the First Three Rows",
    "problem_id": "3065",
    "frontend_id": "2879",
    "difficulty": "Easy",
    "problem_slug": "display-the-first-three-rows",
    "topics": [],
    "description": "Write a solution to display the first 3 rows of this DataFrame.\nExample 1:"
  },
  {
    "title": "Select Data",
    "problem_id": "3074",
    "frontend_id": "2880",
    "difficulty": "Easy",
    "problem_slug": "select-data",
    "topics": [],
    "description": "Write a solution to select the name and age of the student with student_id = 101.\nThe result format is in the following example."
  },
  {
    "title": "Create a New Column",
    "problem_id": "3066",
    "frontend_id": "2881",
    "difficulty": "Easy",
    "problem_slug": "create-a-new-column",
    "topics": [],
    "description": "A company plans to provide its employees with a bonus.\nWrite a solution to create a new column name bonus that contains the doubled values of the salary column.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Drop Duplicate Rows",
    "problem_id": "3071",
    "frontend_id": "2882",
    "difficulty": "Easy",
    "problem_slug": "drop-duplicate-rows",
    "topics": [],
    "description": "There are some duplicate rows in the DataFrame based on the email column.\nWrite a solution to remove these duplicate rows and keep only the first occurrence.\nThe result format is in the following example."
  },
  {
    "title": "Drop Missing Data",
    "problem_id": "3075",
    "frontend_id": "2883",
    "difficulty": "Easy",
    "problem_slug": "drop-missing-data",
    "topics": [],
    "description": "There are some rows having missing values in the name column.\nWrite a solution to remove the rows with missing values.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Modify Columns",
    "problem_id": "3067",
    "frontend_id": "2884",
    "difficulty": "Easy",
    "problem_slug": "modify-columns",
    "topics": [],
    "description": "A company intends to give its employees a pay rise.\nWrite a solution to modify the salary column by multiplying each salary by 2.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Rename Columns",
    "problem_id": "3068",
    "frontend_id": "2885",
    "difficulty": "Easy",
    "problem_slug": "rename-columns",
    "topics": [],
    "description": "Write a solution to rename the columns as follows:\nThe result format is in the following example."
  },
  {
    "title": "Change Data Type",
    "problem_id": "3069",
    "frontend_id": "2886",
    "difficulty": "Easy",
    "problem_slug": "change-data-type",
    "topics": [],
    "description": "Write a solution to correct the errors:\nThe grade column is stored as floats, convert it to integers.\nThe result format is in the following example."
  },
  {
    "title": "Fill Missing Data",
    "problem_id": "3070",
    "frontend_id": "2887",
    "difficulty": "Easy",
    "problem_slug": "fill-missing-data",
    "topics": [],
    "description": "Write a solution to fill in the missing value as 0 in the quantity column.\nThe result format is in the following example."
  },
  {
    "title": "Reshape Data: Concatenate",
    "problem_id": "3064",
    "frontend_id": "2888",
    "difficulty": "Easy",
    "problem_slug": "reshape-data-concatenate",
    "topics": [],
    "description": "Write a solution to concatenate these two DataFrames vertically into one DataFrame.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Reshape Data: Pivot",
    "problem_id": "3072",
    "frontend_id": "2889",
    "difficulty": "Easy",
    "problem_slug": "reshape-data-pivot",
    "topics": [],
    "description": "Write a solution to pivot the data so that each row represents temperatures for a specific month, and each city is a separate column.\nThe result format is in the following example."
  },
  {
    "title": "Reshape Data: Melt",
    "problem_id": "3073",
    "frontend_id": "2890",
    "difficulty": "Easy",
    "problem_slug": "reshape-data-melt",
    "topics": [],
    "description": "Write a solution to reshape the data so that each row represents sales data for a product in a specific quarter.\nThe result format is in the following example.\nExample 1:"
  },
  {
    "title": "Method Chaining",
    "problem_id": "3063",
    "frontend_id": "2891",
    "difficulty": "Easy",
    "problem_slug": "method-chaining",
    "topics": [],
    "description": "Write a solution to list the names of animals that weigh strictly more than 100 kilograms.\nReturn the animals sorted by weight in descending order.\nThe result format is in the following example.\nExample 1:\nIn Pandas, method chaining enables us to perform operations on a DataFrame without breaking up each operation into a separate line or creating multiple temporary variables.\nCan you complete this task in just one line of code using method chaining?"
  },
  {
    "title": "Divisible and Non-divisible Sums Difference",
    "problem_id": "3172",
    "frontend_id": "2894",
    "difficulty": "Easy",
    "problem_slug": "divisible-and-non-divisible-sums-difference",
    "topics": [
      "Math"
    ],
    "description": "You are given positive integers n and m.\nDefine two integers as follows:\nReturn the integer num1 - num2.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Processing Time",
    "problem_id": "3151",
    "frontend_id": "2895",
    "difficulty": "Medium",
    "problem_slug": "minimum-processing-time",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You have a certain number of processors, each having 4 cores. The number of tasks to be executed is four times the number of processors. Each task must be assigned to a unique core, and each core can only be used once.\nYou are given an array processorTime representing the time each processor becomes available and an array tasks representing how long each task takes to complete. Return the minimum time needed to complete all tasks.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Apply Operations to Make Two Strings Equal",
    "problem_id": "3033",
    "frontend_id": "2896",
    "difficulty": "Medium",
    "problem_slug": "apply-operations-to-make-two-strings-equal",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given two 0-indexed binary strings s1 and s2, both of length n, and a positive integer x.\nYou can perform any of the following operations on the string s1 any number of times:\nReturn the minimum cost needed to make the strings s1 and s2 equal, or return -1 if it is impossible.\nNote that flipping a character means changing it from 0 to 1 or vice-versa.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Apply Operations on Array to Maximize Sum of Squares",
    "problem_id": "3153",
    "frontend_id": "2897",
    "difficulty": "Hard",
    "problem_slug": "apply-operations-on-array-to-maximize-sum-of-squares",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Bit Manipulation"
    ],
    "description": "You are given a 0-indexed integer array nums and a positive integer k.\nYou can do the following operation on the array any number of times:\nYou have to choose k elements from the final array and calculate the sum of their squares.\nReturn the maximum sum of squares you can achieve.\nSince the answer can be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Last Visited Integers",
    "problem_id": "3164",
    "frontend_id": "2899",
    "difficulty": "Easy",
    "problem_slug": "last-visited-integers",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "Given an integer array nums where nums[i] is either a positive integer or -1. We need to find for each -1 the respective positive integer, which we call the last visited integer.\nTo achieve this goal, let's define two empty arrays: seen and ans.\nStart iterating from the beginning of the array nums.\nReturn the array ans.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Unequal Adjacent Groups Subsequence I",
    "problem_id": "3143",
    "frontend_id": "2900",
    "difficulty": "Easy",
    "problem_slug": "longest-unequal-adjacent-groups-subsequence-i",
    "topics": [
      "Array",
      "String",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "You are given a string array words and a binary array groups both of length n.\nA subsequence of words is alternating if for any two consecutive strings in the sequence, their corresponding elements at the same indices in groups are different (that is, there cannot be consecutive 0 or 1).\nYour task is to select the longest alternating subsequence from words.\nReturn the selected subsequence. If there are multiple answers, return any of them.\nNote: The elements in words are distinct.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Unequal Adjacent Groups Subsequence II",
    "problem_id": "3142",
    "frontend_id": "2901",
    "difficulty": "Medium",
    "problem_slug": "longest-unequal-adjacent-groups-subsequence-ii",
    "topics": [
      "Array",
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given a string array words, and an array groups, both arrays having length n.\nThe hamming distance between two strings of equal length is the number of positions at which the corresponding characters are different.\nYou need to select the longest subsequence from an array of indices [0, 1, ..., n - 1], such that for the subsequence denoted as [i0, i1, ..., ik-1] having length k, the following holds:\nReturn a string array containing the words corresponding to the indices (in order) in the selected subsequence. If there are multiple answers, return any of them.\nNote: strings in words may be unequal in length.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count of Sub-Multisets With Bounded Sum",
    "problem_id": "3091",
    "frontend_id": "2902",
    "difficulty": "Hard",
    "problem_slug": "count-of-sub-multisets-with-bounded-sum",
    "topics": [
      "Array",
      "Hash Table",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "description": "You are given a 0-indexed array nums of non-negative integers, and two integers l and r.\nReturn the count of sub-multisets within nums where the sum of elements in each subset falls within the inclusive range of [l, r].\nSince the answer may be large, return it modulo 109 + 7.\nA sub-multiset is an unordered collection of elements of the array in which a given value x can occur 0, 1, ..., occ[x] times, where occ[x] is the number of occurrences of x in the array.\nNote that:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Indices With Index and Value Difference I",
    "problem_id": "3165",
    "frontend_id": "2903",
    "difficulty": "Easy",
    "problem_slug": "find-indices-with-index-and-value-difference-i",
    "topics": [
      "Array",
      "Two Pointers"
    ],
    "description": "You are given a 0-indexed integer array nums having length n, an integer indexDifference, and an integer valueDifference.\nYour task is to find two indices i and j, both in the range [0, n - 1], that satisfy the following conditions:\nReturn an integer array answer, where answer = [i, j] if there are two such indices, and answer = [-1, -1] otherwise. If there are multiple choices for the two indices, return any of them.\nNote: i and j may be equal.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Shortest and Lexicographically Smallest Beautiful String",
    "problem_id": "3150",
    "frontend_id": "2904",
    "difficulty": "Medium",
    "problem_slug": "shortest-and-lexicographically-smallest-beautiful-string",
    "topics": [
      "String",
      "Sliding Window"
    ],
    "description": "You are given a binary string s and a positive integer k.\nA substring of s is beautiful if the number of 1's in it is exactly k.\nLet len be the length of the shortest beautiful substring.\nReturn the lexicographically smallest beautiful substring of string s with length equal to len. If s doesn't contain a beautiful substring, return an empty string.\nA string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Indices With Index and Value Difference II",
    "problem_id": "3170",
    "frontend_id": "2905",
    "difficulty": "Medium",
    "problem_slug": "find-indices-with-index-and-value-difference-ii",
    "topics": [
      "Array",
      "Two Pointers"
    ],
    "description": "You are given a 0-indexed integer array nums having length n, an integer indexDifference, and an integer valueDifference.\nYour task is to find two indices i and j, both in the range [0, n - 1], that satisfy the following conditions:\nReturn an integer array answer, where answer = [i, j] if there are two such indices, and answer = [-1, -1] otherwise. If there are multiple choices for the two indices, return any of them.\nNote: i and j may be equal.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Construct Product Matrix",
    "problem_id": "3031",
    "frontend_id": "2906",
    "difficulty": "Medium",
    "problem_slug": "construct-product-matrix",
    "topics": [
      "Array",
      "Matrix",
      "Prefix Sum"
    ],
    "description": "Given a 0-indexed 2D integer matrix grid of size n * m, we define a 0-indexed 2D matrix p of size n * m as the product matrix of grid if the following condition is met:\nReturn the product matrix of grid.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Sum of Mountain Triplets I",
    "problem_id": "3176",
    "frontend_id": "2908",
    "difficulty": "Easy",
    "problem_slug": "minimum-sum-of-mountain-triplets-i",
    "topics": [
      "Array"
    ],
    "description": "You are given a 0-indexed array nums of integers.\nA triplet of indices (i, j, k) is a mountain if:\nReturn the minimum possible sum of a mountain triplet of nums. If no such triplet exists, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Sum of Mountain Triplets II",
    "problem_id": "3186",
    "frontend_id": "2909",
    "difficulty": "Medium",
    "problem_slug": "minimum-sum-of-mountain-triplets-ii",
    "topics": [
      "Array"
    ],
    "description": "You are given a 0-indexed array nums of integers.\nA triplet of indices (i, j, k) is a mountain if:\nReturn the minimum possible sum of a mountain triplet of nums. If no such triplet exists, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Groups to Create a Valid Assignment",
    "problem_id": "3166",
    "frontend_id": "2910",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-groups-to-create-a-valid-assignment",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy"
    ],
    "description": "You are given a collection of numbered balls and instructed to sort them into boxes for a nearly balanced distribution. There are two rules you must follow:\n​Return the fewest number of boxes to sort these balls following these rules.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Changes to Make K Semi-palindromes",
    "problem_id": "2879",
    "frontend_id": "2911",
    "difficulty": "Hard",
    "problem_slug": "minimum-changes-to-make-k-semi-palindromes",
    "topics": [
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "description": "Given a string s and an integer k, partition s into k substrings such that the letter changes needed to make each substring a semi-palindrome are minimized.\nReturn the minimum number of letter changes required.\nA semi-palindrome is a special type of string that can be divided into palindromes based on a repeating pattern. To check if a string is a semi-palindrome:​\nConsider the string \"abcabc\":\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Subarrays Distinct Element Sum of Squares I",
    "problem_id": "3163",
    "frontend_id": "2913",
    "difficulty": "Easy",
    "problem_slug": "subarrays-distinct-element-sum-of-squares-i",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "You are given a 0-indexed integer array nums.\nThe distinct count of a subarray of nums is defined as:\nReturn the sum of the squares of distinct counts of all subarrays of nums.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of Changes to Make Binary String Beautiful",
    "problem_id": "3174",
    "frontend_id": "2914",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-changes-to-make-binary-string-beautiful",
    "topics": [
      "String"
    ],
    "description": "You are given a 0-indexed binary string s having an even length.\nA string is beautiful if it's possible to partition it into one or more substrings such that:\nYou can change any character in s to 0 or 1.\nReturn the minimum number of changes required to make the string s beautiful.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Length of the Longest Subsequence That Sums to Target",
    "problem_id": "3106",
    "frontend_id": "2915",
    "difficulty": "Medium",
    "problem_slug": "length-of-the-longest-subsequence-that-sums-to-target",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given a 0-indexed array of integers nums, and an integer target.\nReturn the length of the longest subsequence of nums that sums up to target. If no such subsequence exists, return -1.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Subarrays Distinct Element Sum of Squares II",
    "problem_id": "3139",
    "frontend_id": "2916",
    "difficulty": "Hard",
    "problem_slug": "subarrays-distinct-element-sum-of-squares-ii",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Binary Indexed Tree",
      "Segment Tree"
    ],
    "description": "You are given a 0-indexed integer array nums.\nThe distinct count of a subarray of nums is defined as:\nReturn the sum of the squares of distinct counts of all subarrays of nums.\nSince the answer may be very large, return it modulo 109 + 7.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the K-or of an Array",
    "problem_id": "3183",
    "frontend_id": "2917",
    "difficulty": "Easy",
    "problem_slug": "find-the-k-or-of-an-array",
    "topics": [
      "Array",
      "Bit Manipulation"
    ],
    "description": "You are given an integer array nums, and an integer k. Let's introduce K-or operation by extending the standard bitwise OR. In K-or, a bit position in the result is set to 1 if at least k numbers in nums have a 1 in that position.\nReturn the K-or of nums.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Equal Sum of Two Arrays After Replacing Zeros",
    "problem_id": "3171",
    "frontend_id": "2918",
    "difficulty": "Medium",
    "problem_slug": "minimum-equal-sum-of-two-arrays-after-replacing-zeros",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "You are given two arrays nums1 and nums2 consisting of positive integers.\nYou have to replace all the 0's in both arrays with strictly positive integers such that the sum of elements of both arrays becomes equal.\nReturn the minimum equal sum you can obtain, or -1 if it is impossible.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Increment Operations to Make Array Beautiful",
    "problem_id": "3178",
    "frontend_id": "2919",
    "difficulty": "Medium",
    "problem_slug": "minimum-increment-operations-to-make-array-beautiful",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given a 0-indexed integer array nums having length n, and an integer k.\nYou can perform the following increment operation any number of times (including zero):\nAn array is considered beautiful if, for any subarray with a size of 3 or more, its maximum element is greater than or equal to k.\nReturn an integer denoting the minimum number of increment operations needed to make nums beautiful.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Points After Collecting Coins From All Nodes",
    "problem_id": "3179",
    "frontend_id": "2920",
    "difficulty": "Hard",
    "problem_slug": "maximum-points-after-collecting-coins-from-all-nodes",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Tree",
      "Depth-First Search",
      "Memoization"
    ],
    "description": "There exists an undirected tree rooted at node 0 with n nodes labeled from 0 to n - 1. You are given a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given a 0-indexed array coins of size n where coins[i] indicates the number of coins in the vertex i, and an integer k.\nStarting from the root, you have to collect all the coins such that the coins at a node can only be collected if the coins of its ancestors have been already collected.\nCoins at nodei can be collected in one of the following ways:\nReturn the maximum points you can get after collecting the coins from all the tree nodes.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Champion I",
    "problem_id": "3188",
    "frontend_id": "2923",
    "difficulty": "Easy",
    "problem_slug": "find-champion-i",
    "topics": [
      "Array",
      "Matrix"
    ],
    "description": "There are n teams numbered from 0 to n - 1 in a tournament.\nGiven a 0-indexed 2D boolean matrix grid of size n * n. For all i, j that 0 <= i, j <= n - 1 and i != j team i is stronger than team j if grid[i][j] == 1, otherwise, team j is stronger than team i.\nTeam a will be the champion of the tournament if there is no team b that is stronger than team a.\nReturn the team that will be the champion of the tournament.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Champion II",
    "problem_id": "3189",
    "frontend_id": "2924",
    "difficulty": "Medium",
    "problem_slug": "find-champion-ii",
    "topics": [
      "Graph"
    ],
    "description": "There are n teams numbered from 0 to n - 1 in a tournament; each team is also a node in a DAG.\nYou are given the integer n and a 0-indexed 2D integer array edges of length m representing the DAG, where edges[i] = [ui, vi] indicates that there is a directed edge from team ui to team vi in the graph.\nA directed edge from a to b in the graph means that team a is stronger than team b and team b is weaker than team a.\nTeam a will be the champion of the tournament if there is no team b that is stronger than team a.\nReturn the team that will be the champion of the tournament if there is a unique champion, otherwise, return -1.\nNotes\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Score After Applying Operations on a Tree",
    "problem_id": "3191",
    "frontend_id": "2925",
    "difficulty": "Medium",
    "problem_slug": "maximum-score-after-applying-operations-on-a-tree",
    "topics": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search"
    ],
    "description": "There is an undirected tree with n nodes labeled from 0 to n - 1, and rooted at node 0. You are given a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nYou are also given a 0-indexed integer array values of length n, where values[i] is the value associated with the ith node.\nYou start with a score of 0. In one operation, you can:\nA tree is healthy if the sum of values on the path from the root to any leaf node is different than zero.\nReturn the maximum score you can obtain after performing these operations on the tree any number of times so that it remains healthy.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Balanced Subsequence Sum",
    "problem_id": "3184",
    "frontend_id": "2926",
    "difficulty": "Hard",
    "problem_slug": "maximum-balanced-subsequence-sum",
    "topics": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Binary Indexed Tree",
      "Segment Tree"
    ],
    "description": "You are given a 0-indexed integer array nums.\nA subsequence of nums having length k and consisting of indices i0 < i1 < ... < ik-1 is balanced if the following holds:\nA subsequence of nums having length 1 is considered balanced.\nReturn an integer denoting the maximum possible sum of elements in a balanced subsequence of nums.\nA subsequence of an array is a new non-empty array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Distribute Candies Among Children I",
    "problem_id": "3199",
    "frontend_id": "2928",
    "difficulty": "Easy",
    "problem_slug": "distribute-candies-among-children-i",
    "topics": [
      "Math",
      "Combinatorics",
      "Enumeration"
    ],
    "description": "You are given two positive integers n and limit.\nReturn the total number of ways to distribute n candies among 3 children such that no child gets more than limit candies.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Distribute Candies Among Children II",
    "problem_id": "3201",
    "frontend_id": "2929",
    "difficulty": "Medium",
    "problem_slug": "distribute-candies-among-children-ii",
    "topics": [
      "Math",
      "Combinatorics",
      "Enumeration"
    ],
    "description": "You are given two positive integers n and limit.\nReturn the total number of ways to distribute n candies among 3 children such that no child gets more than limit candies.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Strings Which Can Be Rearranged to Contain Substring",
    "problem_id": "3200",
    "frontend_id": "2930",
    "difficulty": "Medium",
    "problem_slug": "number-of-strings-which-can-be-rearranged-to-contain-substring",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "description": "You are given an integer n.\nA string s is called good if it contains only lowercase English characters and it is possible to rearrange the characters of s such that the new string contains \"leet\" as a substring.\nFor example:\nReturn the total number of good strings of length n.\nSince the answer may be large, return it modulo 109 + 7.\nA substring is a contiguous sequence of characters within a string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Spending After Buying Items",
    "problem_id": "3107",
    "frontend_id": "2931",
    "difficulty": "Hard",
    "problem_slug": "maximum-spending-after-buying-items",
    "topics": [
      "Array",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)",
      "Matrix"
    ],
    "description": "You are given a 0-indexed m * n integer matrix values, representing the values of m * n different items in m different shops. Each shop has n items where the jth item in the ith shop has a value of values[i][j]. Additionally, the items in the ith shop are sorted in non-increasing order of value. That is, values[i][j] >= values[i][j + 1] for all 0 <= j < n - 1.\nOn each day, you would like to buy a single item from one of the shops. Specifically, On the dth day you can:\nNote that all items are pairwise different. For example, if you have bought item 0 from shop 1, you can still buy item 0 from any other shop.\nReturn the maximum amount of money that can be spent on buying all  m * n products.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Strong Pair XOR I",
    "problem_id": "3193",
    "frontend_id": "2932",
    "difficulty": "Easy",
    "problem_slug": "maximum-strong-pair-xor-i",
    "topics": [
      "Array",
      "Hash Table",
      "Bit Manipulation",
      "Trie",
      "Sliding Window"
    ],
    "description": "You are given a 0-indexed integer array nums. A pair of integers x and y is called a strong pair if it satisfies the condition:\nYou need to select two integers from nums such that they form a strong pair and their bitwise XOR is the maximum among all strong pairs in the array.\nReturn the maximum XOR value out of all possible strong pairs in the array nums.\nNote that you can pick the same integer twice to form a pair.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "High-Access Employees",
    "problem_id": "3202",
    "frontend_id": "2933",
    "difficulty": "Medium",
    "problem_slug": "high-access-employees",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Sorting"
    ],
    "description": "You are given a 2D 0-indexed array of strings, access_times, with size n. For each i where 0 <= i <= n - 1, access_times[i][0] represents the name of an employee, and access_times[i][1] represents the access time of that employee. All entries in access_times are within the same day.\nThe access time is represented as four digits using a 24-hour time format, for example, \"0800\" or \"2250\".\nAn employee is said to be high-access if he has accessed the system three or more times within a one-hour period.\nTimes with exactly one hour of difference are not considered part of the same one-hour period. For example, \"0815\" and \"0915\" are not part of the same one-hour period.\nAccess times at the start and end of the day are not counted within the same one-hour period. For example, \"0005\" and \"2350\" are not part of the same one-hour period.\nReturn a list that contains the names of high-access employees with any order you want.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Maximize Last Elements in Arrays",
    "problem_id": "3190",
    "frontend_id": "2934",
    "difficulty": "Medium",
    "problem_slug": "minimum-operations-to-maximize-last-elements-in-arrays",
    "topics": [
      "Array",
      "Enumeration"
    ],
    "description": "You are given two 0-indexed integer arrays, nums1 and nums2, both having length n.\nYou are allowed to perform a series of operations (possibly none).\nIn an operation, you select an index i in the range [0, n - 1] and swap the values of nums1[i] and nums2[i].\nYour task is to find the minimum number of operations required to satisfy the following conditions:\nReturn an integer denoting the minimum number of operations needed to meet both conditions, or -1 if it is impossible to satisfy both conditions.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Strong Pair XOR II",
    "problem_id": "3197",
    "frontend_id": "2935",
    "difficulty": "Hard",
    "problem_slug": "maximum-strong-pair-xor-ii",
    "topics": [
      "Array",
      "Hash Table",
      "Bit Manipulation",
      "Trie",
      "Sliding Window"
    ],
    "description": "You are given a 0-indexed integer array nums. A pair of integers x and y is called a strong pair if it satisfies the condition:\nYou need to select two integers from nums such that they form a strong pair and their bitwise XOR is the maximum among all strong pairs in the array.\nReturn the maximum XOR value out of all possible strong pairs in the array nums.\nNote that you can pick the same integer twice to form a pair.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Make Three Strings Equal",
    "problem_id": "3207",
    "frontend_id": "2937",
    "difficulty": "Easy",
    "problem_slug": "make-three-strings-equal",
    "topics": [
      "String"
    ],
    "description": "You are given three strings: s1, s2, and s3. In one operation you can choose one of these strings and delete its rightmost character. Note that you cannot completely empty a string.\nReturn the minimum number of operations required to make the strings equal. If it is impossible to make them equal, return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Separate Black and White Balls",
    "problem_id": "3195",
    "frontend_id": "2938",
    "difficulty": "Medium",
    "problem_slug": "separate-black-and-white-balls",
    "topics": [
      "Two Pointers",
      "String",
      "Greedy"
    ],
    "description": "There are n balls on a table, each ball has a color black or white.\nYou are given a 0-indexed binary string s of length n, where 1 and 0 represent black and white balls, respectively.\nIn each step, you can choose two adjacent balls and swap them.\nReturn the minimum number of steps to group all the black balls to the right and all the white balls to the left.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Xor Product",
    "problem_id": "3192",
    "frontend_id": "2939",
    "difficulty": "Medium",
    "problem_slug": "maximum-xor-product",
    "topics": [
      "Math",
      "Greedy",
      "Bit Manipulation"
    ],
    "description": "Given three integers a, b, and n, return the maximum value of (a XOR x) * (b XOR x) where 0 <= x < 2n.\nSince the answer may be too large, return it modulo 109 + 7.\nNote that XOR is the bitwise XOR operation.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Building Where Alice and Bob Can Meet",
    "problem_id": "3181",
    "frontend_id": "2940",
    "difficulty": "Hard",
    "problem_slug": "find-building-where-alice-and-bob-can-meet",
    "topics": [
      "Array",
      "Binary Search",
      "Stack",
      "Binary Indexed Tree",
      "Segment Tree",
      "Heap (Priority Queue)",
      "Monotonic Stack"
    ],
    "description": "You are given a 0-indexed array heights of positive integers, where heights[i] represents the height of the ith building.\nIf a person is in building i, they can move to any other building j if and only if i < j and heights[i] < heights[j].\nYou are also given another array queries where queries[i] = [ai, bi]. On the ith query, Alice is in building ai while Bob is in building bi.\nReturn an array ans where ans[i] is the index of the leftmost building where Alice and Bob can meet on the ith query. If Alice and Bob cannot move to a common building on query i, set ans[i] to -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Words Containing Character",
    "problem_id": "3194",
    "frontend_id": "2942",
    "difficulty": "Easy",
    "problem_slug": "find-words-containing-character",
    "topics": [
      "Array",
      "String"
    ],
    "description": "You are given a 0-indexed array of strings words and a character x.\nReturn an array of indices representing the words that contain the character x.\nNote that the returned array may be in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximize Area of Square Hole in Grid",
    "problem_id": "3214",
    "frontend_id": "2943",
    "difficulty": "Medium",
    "problem_slug": "maximize-area-of-square-hole-in-grid",
    "topics": [
      "Array",
      "Sorting"
    ],
    "description": "You are given the two integers, n and m and two integer arrays, hBars and vBars. The grid has n + 2 horizontal and m + 2 vertical bars, creating 1 x 1 unit cells. The bars are indexed starting from 1.\nYou can remove some of the bars in hBars from horizontal bars and some of the bars in vBars from vertical bars. Note that other bars are fixed and cannot be removed.\nReturn an integer denoting the maximum area of a square-shaped hole in the grid, after removing some bars (possibly none).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Coins for Fruits",
    "problem_id": "3209",
    "frontend_id": "2944",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-coins-for-fruits",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Queue",
      "Heap (Priority Queue)",
      "Monotonic Queue"
    ],
    "description": "You are given an 0-indexed integer array prices where prices[i] denotes the number of coins needed to purchase the (i + 1)th fruit.\nThe fruit market has the following reward for each fruit:\nNote that even if you can take fruit j for free, you can still purchase it for prices[j - 1] coins to receive its reward.\nReturn the minimum number of coins needed to acquire all the fruits.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Maximum Non-decreasing Array Length",
    "problem_id": "3211",
    "frontend_id": "2945",
    "difficulty": "Hard",
    "problem_slug": "find-maximum-non-decreasing-array-length",
    "topics": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Stack",
      "Queue",
      "Monotonic Stack",
      "Monotonic Queue"
    ],
    "description": "You are given a 0-indexed integer array nums.\nYou can perform any number of operations, where each operation involves selecting a subarray of the array and replacing it with the sum of its elements. For example, if the given array is [1,3,5,6] and you select subarray [3,5] the array will convert to [1,8,6].\nReturn the maximum length of a non-decreasing array that can be made after applying operations.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Matrix Similarity After Cyclic Shifts",
    "problem_id": "3215",
    "frontend_id": "2946",
    "difficulty": "Easy",
    "problem_slug": "matrix-similarity-after-cyclic-shifts",
    "topics": [
      "Array",
      "Math",
      "Matrix",
      "Simulation"
    ],
    "description": "You are given an m x n integer matrix mat and an integer k. The matrix rows are 0-indexed.\nThe following proccess happens k times:\nReturn true if the final modified matrix after k steps is identical to the original matrix, and false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Beautiful Substrings I",
    "problem_id": "3210",
    "frontend_id": "2947",
    "difficulty": "Medium",
    "problem_slug": "count-beautiful-substrings-i",
    "topics": [
      "Hash Table",
      "Math",
      "String",
      "Enumeration",
      "Number Theory",
      "Prefix Sum"
    ],
    "description": "You are given a string s and a positive integer k.\nLet vowels and consonants be the number of vowels and consonants in a string.\nA string is beautiful if:\nReturn the number of non-empty beautiful substrings in the given string s.\nA substring is a contiguous sequence of characters in a string.\nVowel letters in English are 'a', 'e', 'i', 'o', and 'u'.\nConsonant letters in English are every letter except vowels.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Make Lexicographically Smallest Array by Swapping Elements",
    "problem_id": "3219",
    "frontend_id": "2948",
    "difficulty": "Medium",
    "problem_slug": "make-lexicographically-smallest-array-by-swapping-elements",
    "topics": [
      "Array",
      "Union Find",
      "Sorting"
    ],
    "description": "You are given a 0-indexed array of positive integers nums and a positive integer limit.\nIn one operation, you can choose any two indices i and j and swap nums[i] and nums[j] if |nums[i] - nums[j]| <= limit.\nReturn the lexicographically smallest array that can be obtained by performing the operation any number of times.\nAn array a is lexicographically smaller than an array b if in the first position where a and b differ, array a has an element that is less than the corresponding element in b. For example, the array [2,10,3] is lexicographically smaller than the array [10,2,3] because they differ at index 0 and 2 < 10.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Beautiful Substrings II",
    "problem_id": "3208",
    "frontend_id": "2949",
    "difficulty": "Hard",
    "problem_slug": "count-beautiful-substrings-ii",
    "topics": [
      "Hash Table",
      "Math",
      "String",
      "Number Theory",
      "Prefix Sum"
    ],
    "description": "You are given a string s and a positive integer k.\nLet vowels and consonants be the number of vowels and consonants in a string.\nA string is beautiful if:\nReturn the number of non-empty beautiful substrings in the given string s.\nA substring is a contiguous sequence of characters in a string.\nVowel letters in English are 'a', 'e', 'i', 'o', and 'u'.\nConsonant letters in English are every letter except vowels.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Peaks",
    "problem_id": "3221",
    "frontend_id": "2951",
    "difficulty": "Easy",
    "problem_slug": "find-the-peaks",
    "topics": [
      "Array",
      "Enumeration"
    ],
    "description": "You are given a 0-indexed array mountain. Your task is to find all the peaks in the mountain array.\nReturn an array that consists of indices of peaks in the given array in any order.\nNotes:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of Coins to be Added",
    "problem_id": "3231",
    "frontend_id": "2952",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-coins-to-be-added",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given a 0-indexed integer array coins, representing the values of the coins available, and an integer target.\nAn integer x is obtainable if there exists a subsequence of coins that sums to x.\nReturn the minimum number of coins of any value that need to be added to the array so that every integer in the range [1, target] is obtainable.\nA subsequence of an array is a new non-empty array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Complete Substrings",
    "problem_id": "3223",
    "frontend_id": "2953",
    "difficulty": "Hard",
    "problem_slug": "count-complete-substrings",
    "topics": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "You are given a string word and an integer k.\nA substring s of word is complete if:\nReturn the number of complete substrings of word.\nA substring is a non-empty contiguous sequence of characters in a string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count the Number of Infection Sequences",
    "problem_id": "3224",
    "frontend_id": "2954",
    "difficulty": "Hard",
    "problem_slug": "count-the-number-of-infection-sequences",
    "topics": [
      "Array",
      "Math",
      "Combinatorics"
    ],
    "description": "You are given an integer n and an array sick sorted in increasing order, representing positions of infected people in a line of n people.\nAt each step, one uninfected person adjacent to an infected person gets infected. This process continues until everyone is infected.\nAn infection sequence is the order in which uninfected people become infected, excluding those initially infected.\nReturn the number of different infection sequences possible, modulo 109+7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Common Elements Between Two Arrays",
    "problem_id": "3206",
    "frontend_id": "2956",
    "difficulty": "Easy",
    "problem_slug": "find-common-elements-between-two-arrays",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "You are given two integer arrays nums1 and nums2 of sizes n and m, respectively. Calculate the following values:\nReturn [answer1,answer2].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Remove Adjacent Almost-Equal Characters",
    "problem_id": "3230",
    "frontend_id": "2957",
    "difficulty": "Medium",
    "problem_slug": "remove-adjacent-almost-equal-characters",
    "topics": [
      "String",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "You are given a 0-indexed string word.\nIn one operation, you can pick any index i of word and change word[i] to any lowercase English letter.\nReturn the minimum number of operations needed to remove all adjacent almost-equal characters from word.\nTwo characters a and b are almost-equal if a == b or a and b are adjacent in the alphabet.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Length of Longest Subarray With at Most K Frequency",
    "problem_id": "3225",
    "frontend_id": "2958",
    "difficulty": "Medium",
    "problem_slug": "length-of-longest-subarray-with-at-most-k-frequency",
    "topics": [
      "Array",
      "Hash Table",
      "Sliding Window"
    ],
    "description": "You are given an integer array nums and an integer k.\nThe frequency of an element x is the number of times it occurs in an array.\nAn array is called good if the frequency of each element in this array is less than or equal to k.\nReturn the length of the longest good subarray of nums.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Possible Sets of Closing Branches",
    "problem_id": "3217",
    "frontend_id": "2959",
    "difficulty": "Hard",
    "problem_slug": "number-of-possible-sets-of-closing-branches",
    "topics": [
      "Bit Manipulation",
      "Graph",
      "Heap (Priority Queue)",
      "Enumeration",
      "Shortest Path"
    ],
    "description": "There is a company with n branches across the country, some of which are connected by roads. Initially, all branches are reachable from each other by traveling some roads.\nThe company has realized that they are spending an excessive amount of time traveling between their branches. As a result, they have decided to close down some of these branches (possibly none). However, they want to ensure that the remaining branches have a distance of at most maxDistance from each other.\nThe distance between two branches is the minimum total traveled length needed to reach one branch from another.\nYou are given integers n, maxDistance, and a 0-indexed 2D array roads, where roads[i] = [ui, vi, wi] represents the undirected road between branches ui and vi with length wi.\nReturn the number of possible sets of closing branches, so that any branch has a distance of at most maxDistance from any other.\nNote that, after closing a branch, the company will no longer have access to any roads connected to it.\nNote that, multiple roads are allowed.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Tested Devices After Test Operations",
    "problem_id": "3220",
    "frontend_id": "2960",
    "difficulty": "Easy",
    "problem_slug": "count-tested-devices-after-test-operations",
    "topics": [
      "Array",
      "Simulation",
      "Counting"
    ],
    "description": "You are given a 0-indexed integer array batteryPercentages having length n, denoting the battery percentages of n 0-indexed devices.\nYour task is to test each device i in order from 0 to n - 1, by performing the following test operations:\nReturn an integer denoting the number of devices that will be tested after performing the test operations in order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Double Modular Exponentiation",
    "problem_id": "3234",
    "frontend_id": "2961",
    "difficulty": "Medium",
    "problem_slug": "double-modular-exponentiation",
    "topics": [
      "Array",
      "Math",
      "Simulation"
    ],
    "description": "You are given a 0-indexed 2D array variables where variables[i] = [ai, bi, ci, mi], and an integer target.\nAn index i is good if the following formula holds:\nReturn an array consisting of good indices in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Subarrays Where Max Element Appears at Least K Times",
    "problem_id": "3213",
    "frontend_id": "2962",
    "difficulty": "Medium",
    "problem_slug": "count-subarrays-where-max-element-appears-at-least-k-times",
    "topics": [
      "Array",
      "Sliding Window"
    ],
    "description": "You are given an integer array nums and a positive integer k.\nReturn the number of subarrays where the maximum element of nums appears at least k times in that subarray.\nA subarray is a contiguous sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count the Number of Good Partitions",
    "problem_id": "3212",
    "frontend_id": "2963",
    "difficulty": "Hard",
    "problem_slug": "count-the-number-of-good-partitions",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Combinatorics"
    ],
    "description": "You are given a 0-indexed array nums consisting of positive integers.\nA partition of an array into one or more contiguous subarrays is called good if no two subarrays contain the same number.\nReturn the total number of good partitions of nums.\nSince the answer may be large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Missing and Repeated Values",
    "problem_id": "3227",
    "frontend_id": "2965",
    "difficulty": "Easy",
    "problem_slug": "find-missing-and-repeated-values",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Matrix"
    ],
    "description": "You are given a 0-indexed 2D integer matrix grid of size n * n with values in the range [1, n2]. Each integer appears exactly once except a which appears twice and b which is missing. The task is to find the repeating and missing numbers a and b.\nReturn a 0-indexed integer array ans of size 2 where ans[0] equals to a and ans[1] equals to b.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Divide Array Into Arrays With Max Difference",
    "problem_id": "3241",
    "frontend_id": "2966",
    "difficulty": "Medium",
    "problem_slug": "divide-array-into-arrays-with-max-difference",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an integer array nums of size n where n is a multiple of 3 and a positive integer k.\nDivide the array nums into n / 3 arrays of size 3 satisfying the following condition:\nReturn a 2D array containing the arrays. If it is impossible to satisfy the conditions, return an empty array. And if there are multiple answers, return any of them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Cost to Make Array Equalindromic",
    "problem_id": "3229",
    "frontend_id": "2967",
    "difficulty": "Medium",
    "problem_slug": "minimum-cost-to-make-array-equalindromic",
    "topics": [
      "Array",
      "Math",
      "Binary Search",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given a 0-indexed integer array nums having length n.\nYou are allowed to perform a special move any number of times (including zero) on nums. In one special move you perform the following steps in order:\nA palindromic number is a positive integer that remains the same when its digits are reversed. For example, 121, 2552 and 65756 are palindromic numbers whereas 24, 46, 235 are not palindromic numbers.\nAn array is considered equalindromic if all the elements in the array are equal to an integer y, where y is a palindromic number less than 109.\nReturn an integer denoting the minimum possible total cost to make nums equalindromic by performing any number of special moves.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Apply Operations to Maximize Frequency Score",
    "problem_id": "3196",
    "frontend_id": "2968",
    "difficulty": "Hard",
    "problem_slug": "apply-operations-to-maximize-frequency-score",
    "topics": [
      "Array",
      "Binary Search",
      "Sliding Window",
      "Sorting",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed integer array nums and an integer k.\nYou can perform the following operation on the array at most k times:\nThe score of the final array is the frequency of the most frequent element in the array.\nReturn the maximum score you can achieve.\nThe frequency of an element is the number of occurences of that element in the array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count the Number of Incremovable Subarrays I",
    "problem_id": "3252",
    "frontend_id": "2970",
    "difficulty": "Easy",
    "problem_slug": "count-the-number-of-incremovable-subarrays-i",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Enumeration"
    ],
    "description": "You are given a 0-indexed array of positive integers nums.\nA subarray of nums is called incremovable if nums becomes strictly increasing on removing the subarray. For example, the subarray [3, 4] is an incremovable subarray of [5, 3, 4, 6, 7] because removing this subarray changes the array [5, 3, 4, 6, 7] to [5, 6, 7] which is strictly increasing.\nReturn the total number of incremovable subarrays of nums.\nNote that an empty array is considered strictly increasing.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Polygon With the Largest Perimeter",
    "problem_id": "3262",
    "frontend_id": "2971",
    "difficulty": "Medium",
    "problem_slug": "find-polygon-with-the-largest-perimeter",
    "topics": [
      "Array",
      "Greedy",
      "Sorting",
      "Prefix Sum"
    ],
    "description": "You are given an array of positive integers nums of length n.\nA polygon is a closed plane figure that has at least 3 sides. The longest side of a polygon is smaller than the sum of its other sides.\nConversely, if you have k (k >= 3) positive real numbers a1, a2, a3, ..., ak where a1 <= a2 <= a3 <= ... <= ak and a1 + a2 + a3 + ... + ak-1 > ak, then there always exists a polygon with k sides whose lengths are a1, a2, a3, ..., ak.\nThe perimeter of a polygon is the sum of lengths of its sides.\nReturn the largest possible perimeter of a polygon whose sides can be formed from nums, or -1 if it is not possible to create a polygon.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count the Number of Incremovable Subarrays II",
    "problem_id": "3248",
    "frontend_id": "2972",
    "difficulty": "Hard",
    "problem_slug": "count-the-number-of-incremovable-subarrays-ii",
    "topics": [
      "Array",
      "Two Pointers",
      "Binary Search"
    ],
    "description": "You are given a 0-indexed array of positive integers nums.\nA subarray of nums is called incremovable if nums becomes strictly increasing on removing the subarray. For example, the subarray [3, 4] is an incremovable subarray of [5, 3, 4, 6, 7] because removing this subarray changes the array [5, 3, 4, 6, 7] to [5, 6, 7] which is strictly increasing.\nReturn the total number of incremovable subarrays of nums.\nNote that an empty array is considered strictly increasing.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Number of Coins to Place in Tree Nodes",
    "problem_id": "3218",
    "frontend_id": "2973",
    "difficulty": "Hard",
    "problem_slug": "find-number-of-coins-to-place-in-tree-nodes",
    "topics": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given an undirected tree with n nodes labeled from 0 to n - 1, and rooted at node 0. You are given a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nYou are also given a 0-indexed integer array cost of length n, where cost[i] is the cost assigned to the ith node.\nYou need to place some coins on every node of the tree. The number of coins to be placed at node i can be calculated as:\nReturn an array coin of size n such that coin[i] is the number of coins placed at node i.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number Game",
    "problem_id": "3226",
    "frontend_id": "2974",
    "difficulty": "Easy",
    "problem_slug": "minimum-number-game",
    "topics": [
      "Array",
      "Sorting",
      "Heap (Priority Queue)",
      "Simulation"
    ],
    "description": "You are given a 0-indexed integer array nums of even length and there is also an empty array arr. Alice and Bob decided to play a game where in every round Alice and Bob will do one move. The rules of the game are as follows:\nReturn the resulting array arr.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Square Area by Removing Fences From a Field",
    "problem_id": "3250",
    "frontend_id": "2975",
    "difficulty": "Medium",
    "problem_slug": "maximum-square-area-by-removing-fences-from-a-field",
    "topics": [
      "Array",
      "Hash Table",
      "Enumeration"
    ],
    "description": "There is a large (m - 1) x (n - 1) rectangular field with corners at (1, 1) and (m, n) containing some horizontal and vertical fences given in arrays hFences and vFences respectively.\nHorizontal fences are from the coordinates (hFences[i], 1) to (hFences[i], n) and vertical fences are from the coordinates (1, vFences[i]) to (m, vFences[i]).\nReturn the maximum area of a square field that can be formed by removing some fences (possibly none) or -1 if it is impossible to make a square field.\nSince the answer may be large, return it modulo 109 + 7.\nNote: The field is surrounded by two horizontal fences from the coordinates (1, 1) to (1, n) and (m, 1) to (m, n) and two vertical fences from the coordinates (1, 1) to (m, 1) and (1, n) to (m, n). These fences cannot be removed.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Cost to Convert String I",
    "problem_id": "3235",
    "frontend_id": "2976",
    "difficulty": "Medium",
    "problem_slug": "minimum-cost-to-convert-string-i",
    "topics": [
      "Array",
      "String",
      "Graph",
      "Shortest Path"
    ],
    "description": "You are given two 0-indexed strings source and target, both of length n and consisting of lowercase English letters. You are also given two 0-indexed character arrays original and changed, and an integer array cost, where cost[i] represents the cost of changing the character original[i] to the character changed[i].\nYou start with the string source. In one operation, you can pick a character x from the string and change it to the character y at a cost of z if there exists any index j such that cost[j] == z, original[j] == x, and changed[j] == y.\nReturn the minimum cost to convert the string source to the string target using any number of operations. If it is impossible to convert source to target, return -1.\nNote that there may exist indices i, j such that original[j] == original[i] and changed[j] == changed[i].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Cost to Convert String II",
    "problem_id": "3238",
    "frontend_id": "2977",
    "difficulty": "Hard",
    "problem_slug": "minimum-cost-to-convert-string-ii",
    "topics": [
      "Array",
      "String",
      "Dynamic Programming",
      "Graph",
      "Trie",
      "Shortest Path"
    ],
    "description": "You are given two 0-indexed strings source and target, both of length n and consisting of lowercase English characters. You are also given two 0-indexed string arrays original and changed, and an integer array cost, where cost[i] represents the cost of converting the string original[i] to the string changed[i].\nYou start with the string source. In one operation, you can pick a substring x from the string, and change it to y at a cost of z if there exists any index j such that cost[j] == z, original[j] == x, and changed[j] == y. You are allowed to do any number of operations, but any pair of operations must satisfy either of these two conditions:\nReturn the minimum cost to convert the string source to the string target using any number of operations. If it is impossible to convert source to target, return -1.\nNote that there may exist indices i, j such that original[j] == original[i] and changed[j] == changed[i].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check if Bitwise OR Has Trailing Zeros",
    "problem_id": "3246",
    "frontend_id": "2980",
    "difficulty": "Easy",
    "problem_slug": "check-if-bitwise-or-has-trailing-zeros",
    "topics": [
      "Array",
      "Bit Manipulation"
    ],
    "description": "You are given an array of positive integers nums.\nYou have to check if it is possible to select two or more elements in the array such that the bitwise OR of the selected elements has at least one trailing zero in its binary representation.\nFor example, the binary representation of 5, which is \"101\", does not have any trailing zeros, whereas the binary representation of 4, which is \"100\", has two trailing zeros.\nReturn true if it is possible to select two or more elements whose bitwise OR has trailing zeros, return false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Longest Special Substring That Occurs Thrice I",
    "problem_id": "3267",
    "frontend_id": "2981",
    "difficulty": "Medium",
    "problem_slug": "find-longest-special-substring-that-occurs-thrice-i",
    "topics": [
      "Hash Table",
      "String",
      "Binary Search",
      "Sliding Window",
      "Counting"
    ],
    "description": "You are given a string s that consists of lowercase English letters.\nA string is called special if it is made up of only a single character. For example, the string \"abc\" is not special, whereas the strings \"ddd\", \"zz\", and \"f\" are special.\nReturn the length of the longest special substring of s which occurs at least thrice, or -1 if no special substring occurs at least thrice.\nA substring is a contiguous non-empty sequence of characters within a string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Longest Special Substring That Occurs Thrice II",
    "problem_id": "3266",
    "frontend_id": "2982",
    "difficulty": "Medium",
    "problem_slug": "find-longest-special-substring-that-occurs-thrice-ii",
    "topics": [
      "Hash Table",
      "String",
      "Binary Search",
      "Sliding Window",
      "Counting"
    ],
    "description": "You are given a string s that consists of lowercase English letters.\nA string is called special if it is made up of only a single character. For example, the string \"abc\" is not special, whereas the strings \"ddd\", \"zz\", and \"f\" are special.\nReturn the length of the longest special substring of s which occurs at least thrice, or -1 if no special substring occurs at least thrice.\nA substring is a contiguous non-empty sequence of characters within a string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Palindrome Rearrangement Queries",
    "problem_id": "3203",
    "frontend_id": "2983",
    "difficulty": "Hard",
    "problem_slug": "palindrome-rearrangement-queries",
    "topics": [
      "Hash Table",
      "String",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed string s having an even length n.\nYou are also given a 0-indexed 2D integer array, queries, where queries[i] = [ai, bi, ci, di].\nFor each query i, you are allowed to perform the following operations:\nFor each query, your task is to determine whether it is possible to make s a palindrome by performing the operations.\nEach query is answered independently of the others.\nReturn a 0-indexed array answer, where answer[i] == true if it is possible to make s a palindrome by performing operations specified by the ith query, and false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Smallest Missing Integer Greater Than Sequential Prefix Sum",
    "problem_id": "3236",
    "frontend_id": "2996",
    "difficulty": "Easy",
    "problem_slug": "smallest-missing-integer-greater-than-sequential-prefix-sum",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting"
    ],
    "description": "You are given a 0-indexed array of integers nums.\nA prefix nums[0..i] is sequential if, for all 1 <= j <= i, nums[j] = nums[j - 1] + 1. In particular, the prefix consisting only of nums[0] is sequential.\nReturn the smallest integer x missing from nums such that x is greater than or equal to the sum of the longest sequential prefix.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of Operations to Make Array XOR Equal to K",
    "problem_id": "3249",
    "frontend_id": "2997",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-operations-to-make-array-xor-equal-to-k",
    "topics": [
      "Array",
      "Bit Manipulation"
    ],
    "description": "You are given a 0-indexed integer array nums and a positive integer k.\nYou can apply the following operation on the array any number of times:\nReturn the minimum number of operations required to make the bitwise XOR of all elements of the final array equal to k.\nNote that you can flip leading zero bits in the binary representation of elements. For example, for the number (101)2 you can flip the fourth bit and obtain (1101)2.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of Operations to Make X and Y Equal",
    "problem_id": "3239",
    "frontend_id": "2998",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-operations-to-make-x-and-y-equal",
    "topics": [
      "Dynamic Programming",
      "Breadth-First Search",
      "Memoization"
    ],
    "description": "You are given two positive integers x and y.\nIn one operation, you can do one of the four following operations:\nReturn the minimum number of operations required to make  x and y equal.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count the Number of Powerful Integers",
    "problem_id": "3243",
    "frontend_id": "2999",
    "difficulty": "Hard",
    "problem_slug": "count-the-number-of-powerful-integers",
    "topics": [
      "Math",
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given three integers start, finish, and limit. You are also given a 0-indexed string s representing a positive integer.\nA positive integer x is called powerful if it ends with s (in other words, s is a suffix of x) and each digit in x is at most limit.\nReturn the total number of powerful integers in the range [start..finish].\nA string x is a suffix of a string y if and only if x is a substring of y that starts from some index (including 0) in y and extends to the index y.length - 1. For example, 25 is a suffix of 5125 whereas 512 is not.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Area of Longest Diagonal Rectangle",
    "problem_id": "3251",
    "frontend_id": "3000",
    "difficulty": "Easy",
    "problem_slug": "maximum-area-of-longest-diagonal-rectangle",
    "topics": [
      "Array"
    ],
    "description": "You are given a 2D 0-indexed integer array dimensions.\nFor all indices i, 0 <= i < dimensions.length, dimensions[i][0] represents the length and dimensions[i][1] represents the width of the rectangle i.\nReturn the area of the rectangle having the longest diagonal. If there are multiple rectangles with the longest diagonal, return the area of the rectangle having the maximum area.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Moves to Capture The Queen",
    "problem_id": "3270",
    "frontend_id": "3001",
    "difficulty": "Medium",
    "problem_slug": "minimum-moves-to-capture-the-queen",
    "topics": [
      "Math",
      "Enumeration"
    ],
    "description": "There is a 1-indexed 8 x 8 chessboard containing 3 pieces.\nYou are given 6 integers a, b, c, d, e, and f where:\nGiven that you can only move the white pieces, return the minimum number of moves required to capture the black queen.\nNote that:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Size of a Set After Removals",
    "problem_id": "3228",
    "frontend_id": "3002",
    "difficulty": "Medium",
    "problem_slug": "maximum-size-of-a-set-after-removals",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy"
    ],
    "description": "You are given two 0-indexed integer arrays nums1 and nums2 of even length n.\nYou must remove n / 2 elements from nums1 and n / 2 elements from nums2. After the removals, you insert the remaining elements of nums1 and nums2 into a set s.\nReturn the maximum possible size of the set s.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximize the Number of Partitions After Operations",
    "problem_id": "3233",
    "frontend_id": "3003",
    "difficulty": "Hard",
    "problem_slug": "maximize-the-number-of-partitions-after-operations",
    "topics": [
      "String",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "You are given a string s and an integer k.\nFirst, you are allowed to change at most one index in s to another lowercase English letter.\nAfter that, do the following partitioning operation until s is empty:\nReturn an integer denoting the maximum number of resulting partitions after the operations by optimally choosing at most one index to change.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Elements With Maximum Frequency",
    "problem_id": "3242",
    "frontend_id": "3005",
    "difficulty": "Easy",
    "problem_slug": "count-elements-with-maximum-frequency",
    "topics": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "description": "You are given an array nums consisting of positive integers.\nReturn the total frequencies of elements in nums such that those elements all have the maximum frequency.\nThe frequency of an element is the number of occurrences of that element in the array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Beautiful Indices in the Given Array I",
    "problem_id": "3245",
    "frontend_id": "3006",
    "difficulty": "Medium",
    "problem_slug": "find-beautiful-indices-in-the-given-array-i",
    "topics": [
      "Two Pointers",
      "String",
      "Binary Search",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "description": "You are given a 0-indexed string s, a string a, a string b, and an integer k.\nAn index i is beautiful if:\nReturn the array that contains beautiful indices in sorted order from smallest to largest.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Number That Sum of the Prices Is Less Than or Equal to K",
    "problem_id": "3240",
    "frontend_id": "3007",
    "difficulty": "Medium",
    "problem_slug": "maximum-number-that-sum-of-the-prices-is-less-than-or-equal-to-k",
    "topics": [
      "Binary Search",
      "Dynamic Programming",
      "Bit Manipulation"
    ],
    "description": "You are given an integer k and an integer x. The price of a number num is calculated by the count of set bits at positions x, 2x, 3x, etc., in its binary representation, starting from the least significant bit. The following table contains examples of how price is calculated.\nThe accumulated price of num is the total price of numbers from 1 to num. num is considered cheap if its accumulated price is less than or equal to k.\nReturn the greatest cheap number.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Beautiful Indices in the Given Array II",
    "problem_id": "3303",
    "frontend_id": "3008",
    "difficulty": "Hard",
    "problem_slug": "find-beautiful-indices-in-the-given-array-ii",
    "topics": [
      "Two Pointers",
      "String",
      "Binary Search",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "description": "You are given a 0-indexed string s, a string a, a string b, and an integer k.\nAn index i is beautiful if:\nReturn the array that contains beautiful indices in sorted order from smallest to largest.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Divide an Array Into Subarrays With Minimum Cost I",
    "problem_id": "3263",
    "frontend_id": "3010",
    "difficulty": "Easy",
    "problem_slug": "divide-an-array-into-subarrays-with-minimum-cost-i",
    "topics": [
      "Array",
      "Sorting",
      "Enumeration"
    ],
    "description": "You are given an array of integers nums of length n.\nThe cost of an array is the value of its first element. For example, the cost of [1,2,3] is 1 while the cost of [3,4,1] is 3.\nYou need to divide nums into 3 disjoint contiguous subarrays.\nReturn the minimum possible sum of the cost of these subarrays.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find if Array Can Be Sorted",
    "problem_id": "3291",
    "frontend_id": "3011",
    "difficulty": "Medium",
    "problem_slug": "find-if-array-can-be-sorted",
    "topics": [
      "Array",
      "Bit Manipulation",
      "Sorting"
    ],
    "description": "You are given a 0-indexed array of positive integers nums.\nIn one operation, you can swap any two adjacent elements if they have the same number of set bits. You are allowed to do this operation any number of times (including zero).\nReturn true if you can sort the array in ascending order, else return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimize Length of Array Using Operations",
    "problem_id": "3244",
    "frontend_id": "3012",
    "difficulty": "Medium",
    "problem_slug": "minimize-length-of-array-using-operations",
    "topics": [
      "Array",
      "Math",
      "Greedy",
      "Number Theory"
    ],
    "description": "You are given a 0-indexed integer array nums containing positive integers.\nYour task is to minimize the length of nums by performing the following operations any number of times (including zero):\nReturn an integer denoting the minimum length of nums after performing the operation any number of times.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Divide an Array Into Subarrays With Minimum Cost II",
    "problem_id": "3260",
    "frontend_id": "3013",
    "difficulty": "Hard",
    "problem_slug": "divide-an-array-into-subarrays-with-minimum-cost-ii",
    "topics": [
      "Array",
      "Hash Table",
      "Sliding Window",
      "Heap (Priority Queue)"
    ],
    "description": "You are given a 0-indexed array of integers nums of length n, and two positive integers k and dist.\nThe cost of an array is the value of its first element. For example, the cost of [1,2,3] is 1 while the cost of [3,4,1] is 3.\nYou need to divide nums into k disjoint contiguous subarrays, such that the difference between the starting index of the second subarray and the starting index of the kth subarray should be less than or equal to dist. In other words, if you divide nums into the subarrays nums[0..(i1 - 1)], nums[i1..(i2 - 1)], ..., nums[ik-1..(n - 1)], then ik-1 - i1 <= dist.\nReturn the minimum possible sum of the cost of these subarrays.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Pushes to Type Word I",
    "problem_id": "3275",
    "frontend_id": "3014",
    "difficulty": "Easy",
    "problem_slug": "minimum-number-of-pushes-to-type-word-i",
    "topics": [
      "Math",
      "String",
      "Greedy"
    ],
    "description": "You are given a string word containing distinct lowercase English letters.\nTelephone keypads have keys mapped with distinct collections of lowercase English letters, which can be used to form words by pushing them. For example, the key 2 is mapped with [\"a\",\"b\",\"c\"], we need to push the key one time to type \"a\", two times to type \"b\", and three times to type \"c\" .\nIt is allowed to remap the keys numbered 2 to 9 to distinct collections of letters. The keys can be remapped to any amount of letters, but each letter must be mapped to exactly one key. You need to find the minimum number of times the keys will be pushed to type the string word.\nReturn the minimum number of pushes needed to type word after remapping the keys.\nAn example mapping of letters to keys on a telephone keypad is given below. Note that 1, *, #, and 0 do not map to any letters.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count the Number of Houses at a Certain Distance I",
    "problem_id": "3271",
    "frontend_id": "3015",
    "difficulty": "Medium",
    "problem_slug": "count-the-number-of-houses-at-a-certain-distance-i",
    "topics": [
      "Breadth-First Search",
      "Graph",
      "Prefix Sum"
    ],
    "description": "You are given three positive integers n, x, and y.\nIn a city, there exist houses numbered 1 to n connected by n streets. There is a street connecting the house numbered i with the house numbered i + 1 for all 1 <= i <= n - 1 . An additional street connects the house numbered x with the house numbered y.\nFor each k, such that 1 <= k <= n, you need to find the number of pairs of houses (house1, house2) such that the minimum number of streets that need to be traveled to reach house2 from house1 is k.\nReturn a 1-indexed array result of length n where result[k] represents the total number of pairs of houses such that the minimum streets required to reach one house from the other is k.\nNote that x and y can be equal.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Pushes to Type Word II",
    "problem_id": "3276",
    "frontend_id": "3016",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-pushes-to-type-word-ii",
    "topics": [
      "Hash Table",
      "String",
      "Greedy",
      "Sorting",
      "Counting"
    ],
    "description": "You are given a string word containing lowercase English letters.\nTelephone keypads have keys mapped with distinct collections of lowercase English letters, which can be used to form words by pushing them. For example, the key 2 is mapped with [\"a\",\"b\",\"c\"], we need to push the key one time to type \"a\", two times to type \"b\", and three times to type \"c\" .\nIt is allowed to remap the keys numbered 2 to 9 to distinct collections of letters. The keys can be remapped to any amount of letters, but each letter must be mapped to exactly one key. You need to find the minimum number of times the keys will be pushed to type the string word.\nReturn the minimum number of pushes needed to type word after remapping the keys.\nAn example mapping of letters to keys on a telephone keypad is given below. Note that 1, *, #, and 0 do not map to any letters.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count the Number of Houses at a Certain Distance II",
    "problem_id": "3310",
    "frontend_id": "3017",
    "difficulty": "Hard",
    "problem_slug": "count-the-number-of-houses-at-a-certain-distance-ii",
    "topics": [
      "Graph",
      "Prefix Sum"
    ],
    "description": "You are given three positive integers n, x, and y.\nIn a city, there exist houses numbered 1 to n connected by n streets. There is a street connecting the house numbered i with the house numbered i + 1 for all 1 <= i <= n - 1 . An additional street connects the house numbered x with the house numbered y.\nFor each k, such that 1 <= k <= n, you need to find the number of pairs of houses (house1, house2) such that the minimum number of streets that need to be traveled to reach house2 from house1 is k.\nReturn a 1-indexed array result of length n where result[k] represents the total number of pairs of houses such that the minimum streets required to reach one house from the other is k.\nNote that x and y can be equal.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Changing Keys",
    "problem_id": "3312",
    "frontend_id": "3019",
    "difficulty": "Easy",
    "problem_slug": "number-of-changing-keys",
    "topics": [
      "String"
    ],
    "description": "You are given a 0-indexed string s typed by a user. Changing a key is defined as using a key different from the last used key. For example, s = \"ab\" has a change of a key while s = \"bBBb\" does not have any.\nReturn the number of times the user had to change the key.\nNote: Modifiers like shift or caps lock won't be counted in changing the key that is if a user typed the letter 'a' and then the letter 'A' then it will not be considered as a changing of key.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Maximum Number of Elements in Subset",
    "problem_id": "3299",
    "frontend_id": "3020",
    "difficulty": "Medium",
    "problem_slug": "find-the-maximum-number-of-elements-in-subset",
    "topics": [
      "Array",
      "Hash Table",
      "Enumeration"
    ],
    "description": "You are given an array of positive integers nums.\nYou need to select a subset of nums which satisfies the following condition:\nReturn the maximum number of elements in a subset that satisfies these conditions.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Alice and Bob Playing Flower Game",
    "problem_id": "3279",
    "frontend_id": "3021",
    "difficulty": "Medium",
    "problem_slug": "alice-and-bob-playing-flower-game",
    "topics": [
      "Math"
    ],
    "description": "Alice and Bob are playing a turn-based game on a circular field surrounded by flowers. The circle represents the field, and there are x flowers in the clockwise direction between Alice and Bob, and y flowers in the anti-clockwise direction between them.\nThe game proceeds as follows:\nGiven two integers, n and m, the task is to compute the number of possible pairs (x, y) that satisfy the conditions:\nReturn the number of possible pairs (x, y) that satisfy the conditions mentioned in the statement.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimize OR of Remaining Elements Using Operations",
    "problem_id": "3261",
    "frontend_id": "3022",
    "difficulty": "Hard",
    "problem_slug": "minimize-or-of-remaining-elements-using-operations",
    "topics": [
      "Array",
      "Greedy",
      "Bit Manipulation"
    ],
    "description": "You are given a 0-indexed integer array nums and an integer k.\nIn one operation, you can pick any index i of nums such that 0 <= i < nums.length - 1 and replace nums[i] and nums[i + 1] with a single occurrence of nums[i] & nums[i + 1], where & represents the bitwise AND operator.\nReturn the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Type of Triangle",
    "problem_id": "3321",
    "frontend_id": "3024",
    "difficulty": "Easy",
    "problem_slug": "type-of-triangle",
    "topics": [
      "Array",
      "Math",
      "Sorting"
    ],
    "description": "You are given a 0-indexed integer array nums of size 3 which can form the sides of a triangle.\nReturn a string representing the type of triangle that can be formed or \"none\" if it cannot form a triangle.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Number of Ways to Place People I",
    "problem_id": "3278",
    "frontend_id": "3025",
    "difficulty": "Medium",
    "problem_slug": "find-the-number-of-ways-to-place-people-i",
    "topics": [
      "Array",
      "Math",
      "Geometry",
      "Sorting",
      "Enumeration"
    ],
    "description": "You are given a 2D array points of size n x 2 representing integer coordinates of some points on a 2D plane, where points[i] = [xi, yi].\nCount the number of pairs of points (A, B), where\nReturn the count.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Good Subarray Sum",
    "problem_id": "3265",
    "frontend_id": "3026",
    "difficulty": "Medium",
    "problem_slug": "maximum-good-subarray-sum",
    "topics": [
      "Array",
      "Hash Table",
      "Prefix Sum"
    ],
    "description": "You are given an array nums of length n and a positive integer k.\nA subarray of nums is called good if the absolute difference between its first and last element is exactly k, in other words, the subarray nums[i..j] is good if |nums[i] - nums[j]| == k.\nReturn the maximum sum of a good subarray of nums. If there are no good subarrays, return 0.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Number of Ways to Place People II",
    "problem_id": "3277",
    "frontend_id": "3027",
    "difficulty": "Hard",
    "problem_slug": "find-the-number-of-ways-to-place-people-ii",
    "topics": [
      "Array",
      "Math",
      "Geometry",
      "Sorting",
      "Enumeration"
    ],
    "description": "You are given a 2D array points of size n x 2 representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi].\nWe define the right direction as positive x-axis (increasing x-coordinate) and the left direction as negative x-axis (decreasing x-coordinate). Similarly, we define the up direction as positive y-axis (increasing y-coordinate) and the down direction as negative y-axis (decreasing y-coordinate)\nYou have to place n people, including Alice and Bob, at these points such that there is exactly one person at every point. Alice wants to be alone with Bob, so Alice will build a rectangular fence with Alice's position as the upper left corner and Bob's position as the lower right corner of the fence (Note that the fence might not enclose any area, i.e. it can be a line). If any person other than Alice and Bob is either inside the fence or on the fence, Alice will be sad.\nReturn the number of pairs of points where you can place Alice and Bob, such that Alice does not become sad on building the fence.\nNote that Alice can only build a fence with Alice's position as the upper left corner, and Bob's position as the lower right corner. For example, Alice cannot build either of the fences in the picture below with four corners (1, 1), (1, 3), (3, 1), and (3, 3), because:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Ant on the Boundary",
    "problem_id": "3311",
    "frontend_id": "3028",
    "difficulty": "Easy",
    "problem_slug": "ant-on-the-boundary",
    "topics": [
      "Array",
      "Simulation",
      "Prefix Sum"
    ],
    "description": "An ant is on a boundary. It sometimes goes left and sometimes right.\nYou are given an array of non-zero integers nums. The ant starts reading nums from the first element of it to its end. At each step, it moves according to the value of the current element:\nReturn the number of times the ant returns to the boundary.\nNotes:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Time to Revert Word to Initial State I",
    "problem_id": "3297",
    "frontend_id": "3029",
    "difficulty": "Medium",
    "problem_slug": "minimum-time-to-revert-word-to-initial-state-i",
    "topics": [
      "String",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "description": "You are given a 0-indexed string word and an integer k.\nAt every second, you must perform the following operations:\nNote that you do not necessarily need to add the same characters that you removed. However, you must perform both operations at every second.\nReturn the minimum time greater than zero required for word to revert to its initial state.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Grid of Region Average",
    "problem_id": "3272",
    "frontend_id": "3030",
    "difficulty": "Medium",
    "problem_slug": "find-the-grid-of-region-average",
    "topics": [
      "Array",
      "Matrix"
    ],
    "description": "You are given m x n grid image which represents a grayscale image, where image[i][j] represents a pixel with intensity in the range [0..255]. You are also given a non-negative integer threshold.\nTwo pixels are adjacent if they share an edge.\nA region is a 3 x 3 subgrid where the absolute difference in intensity between any two adjacent pixels is less than or equal to threshold.\nAll pixels in a region belong to that region, note that a pixel can belong to multiple regions.\nYou need to calculate a m x n grid result, where result[i][j] is the average intensity of the regions to which image[i][j] belongs, rounded down to the nearest integer. If image[i][j] belongs to multiple regions, result[i][j] is the average of the rounded-down average intensities of these regions, rounded down to the nearest integer. If image[i][j] does not belong to any region, result[i][j] is equal to image[i][j].\nReturn the grid result.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Time to Revert Word to Initial State II",
    "problem_id": "3296",
    "frontend_id": "3031",
    "difficulty": "Hard",
    "problem_slug": "minimum-time-to-revert-word-to-initial-state-ii",
    "topics": [
      "String",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "description": "You are given a 0-indexed string word and an integer k.\nAt every second, you must perform the following operations:\nNote that you do not necessarily need to add the same characters that you removed. However, you must perform both operations at every second.\nReturn the minimum time greater than zero required for word to revert to its initial state.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Modify the Matrix",
    "problem_id": "3330",
    "frontend_id": "3033",
    "difficulty": "Easy",
    "problem_slug": "modify-the-matrix",
    "topics": [
      "Array",
      "Matrix"
    ],
    "description": "Given a 0-indexed m x n integer matrix matrix, create a new 0-indexed matrix called answer. Make answer equal to matrix, then replace each element with the value -1 with the maximum element in its respective column.\nReturn the matrix answer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Subarrays That Match a Pattern I",
    "problem_id": "3269",
    "frontend_id": "3034",
    "difficulty": "Medium",
    "problem_slug": "number-of-subarrays-that-match-a-pattern-i",
    "topics": [
      "Array",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "description": "You are given a 0-indexed integer array nums of size n, and a 0-indexed integer array pattern of size m consisting of integers -1, 0, and 1.\nA subarray nums[i..j] of size m + 1 is said to match the pattern if the following conditions hold for each element pattern[k]:\nReturn the count of subarrays in nums that match the pattern.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Palindromes After Operations",
    "problem_id": "3317",
    "frontend_id": "3035",
    "difficulty": "Medium",
    "problem_slug": "maximum-palindromes-after-operations",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Greedy",
      "Sorting",
      "Counting"
    ],
    "description": "You are given a 0-indexed string array words having length n and containing 0-indexed strings.\nYou are allowed to perform the following operation any number of times (including zero):\nReturn an integer denoting the maximum number of palindromes words can contain, after performing some operations.\nNote: i and j may be equal during an operation.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Subarrays That Match a Pattern II",
    "problem_id": "3290",
    "frontend_id": "3036",
    "difficulty": "Hard",
    "problem_slug": "number-of-subarrays-that-match-a-pattern-ii",
    "topics": [
      "Array",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "description": "You are given a 0-indexed integer array nums of size n, and a 0-indexed integer array pattern of size m consisting of integers -1, 0, and 1.\nA subarray nums[i..j] of size m + 1 is said to match the pattern if the following conditions hold for each element pattern[k]:\nReturn the count of subarrays in nums that match the pattern.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Number of Operations With the Same Score I",
    "problem_id": "3320",
    "frontend_id": "3038",
    "difficulty": "Easy",
    "problem_slug": "maximum-number-of-operations-with-the-same-score-i",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "You are given an array of integers nums. Consider the following operation:\nYou can perform this operation until nums contains fewer than two elements. Additionally, the same score must be achieved in all operations.\nReturn the maximum number of operations you can perform.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Apply Operations to Make String Empty",
    "problem_id": "3308",
    "frontend_id": "3039",
    "difficulty": "Medium",
    "problem_slug": "apply-operations-to-make-string-empty",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting",
      "Counting"
    ],
    "description": "You are given a string s.\nConsider performing the following operation until s becomes empty:\nFor example, let initially s = \"aabcbbca\". We do the following operations:\nReturn the value of the string s right before applying the last operation. In the example above, answer is \"ba\".\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Number of Operations With the Same Score II",
    "problem_id": "3318",
    "frontend_id": "3040",
    "difficulty": "Medium",
    "problem_slug": "maximum-number-of-operations-with-the-same-score-ii",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Memoization"
    ],
    "description": "Given an array of integers called nums, you can perform any of the following operation while nums contains at least 2 elements:\nThe score of the operation is the sum of the deleted elements.\nYour task is to find the maximum number of operations that can be performed, such that all operations have the same score.\nReturn the maximum number of operations possible that satisfy the condition mentioned above.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximize Consecutive Elements in an Array After Modification",
    "problem_id": "3298",
    "frontend_id": "3041",
    "difficulty": "Hard",
    "problem_slug": "maximize-consecutive-elements-in-an-array-after-modification",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "You are given a 0-indexed array nums consisting of positive integers.\nInitially, you can increase the value of any element in the array by at most 1.\nAfter that, you need to select one or more elements from the final array such that those elements are consecutive when sorted in increasing order. For example, the elements [3, 4, 5] are consecutive while [3, 4, 6] and [1, 1, 2, 3] are not.\nReturn the maximum number of elements that you can select.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Prefix and Suffix Pairs I",
    "problem_id": "3309",
    "frontend_id": "3042",
    "difficulty": "Easy",
    "problem_slug": "count-prefix-and-suffix-pairs-i",
    "topics": [
      "Array",
      "String",
      "Trie",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "description": "You are given a 0-indexed string array words.\nLet's define a boolean function isPrefixAndSuffix that takes two strings, str1 and str2:\nFor example, isPrefixAndSuffix(\"aba\", \"ababa\") is true because \"aba\" is a prefix of \"ababa\" and also a suffix, but isPrefixAndSuffix(\"abc\", \"abcd\") is false.\nReturn an integer denoting the number of index pairs (i, j) such that i < j, and isPrefixAndSuffix(words[i], words[j]) is true.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Length of the Longest Common Prefix",
    "problem_id": "3329",
    "frontend_id": "3043",
    "difficulty": "Medium",
    "problem_slug": "find-the-length-of-the-longest-common-prefix",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Trie"
    ],
    "description": "You are given two arrays with positive integers arr1 and arr2.\nA prefix of a positive integer is an integer formed by one or more of its digits, starting from its leftmost digit. For example, 123 is a prefix of the integer 12345, while 234 is not.\nA common prefix of two integers a and b is an integer c, such that c is a prefix of both a and b. For example, 5655359 and 56554 have common prefixes 565 and 5655 while 1223 and 43456 do not have a common prefix.\nYou need to find the length of the longest common prefix between all pairs of integers (x, y) such that x belongs to arr1 and y belongs to arr2.\nReturn the length of the longest common prefix among all pairs. If no common prefix exists among them, return 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Most Frequent Prime",
    "problem_id": "3314",
    "frontend_id": "3044",
    "difficulty": "Medium",
    "problem_slug": "most-frequent-prime",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Matrix",
      "Counting",
      "Enumeration",
      "Number Theory"
    ],
    "description": "You are given a m x n 0-indexed 2D matrix mat. From every cell, you can create numbers in the following way:\nReturn the most frequent prime number greater than 10 out of all the numbers created by traversing the matrix or -1 if no such prime number exists. If there are multiple prime numbers with the highest frequency, then return the largest among them.\nNote: It is invalid to change the direction during the move.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Prefix and Suffix Pairs II",
    "problem_id": "3305",
    "frontend_id": "3045",
    "difficulty": "Hard",
    "problem_slug": "count-prefix-and-suffix-pairs-ii",
    "topics": [
      "Array",
      "String",
      "Trie",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "description": "You are given a 0-indexed string array words.\nLet's define a boolean function isPrefixAndSuffix that takes two strings, str1 and str2:\nFor example, isPrefixAndSuffix(\"aba\", \"ababa\") is true because \"aba\" is a prefix of \"ababa\" and also a suffix, but isPrefixAndSuffix(\"abc\", \"abcd\") is false.\nReturn an integer denoting the number of index pairs (i, j) such that i < j, and isPrefixAndSuffix(words[i], words[j]) is true.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Split the Array",
    "problem_id": "3324",
    "frontend_id": "3046",
    "difficulty": "Easy",
    "problem_slug": "split-the-array",
    "topics": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "description": "You are given an integer array nums of even length. You have to split the array into two parts nums1 and nums2 such that:\nReturn true if it is possible to split the array, and false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Largest Area of Square Inside Two Rectangles",
    "problem_id": "3325",
    "frontend_id": "3047",
    "difficulty": "Medium",
    "problem_slug": "find-the-largest-area-of-square-inside-two-rectangles",
    "topics": [
      "Array",
      "Math",
      "Geometry"
    ],
    "description": "There exist n rectangles in a 2D plane with edges parallel to the x and y axis. You are given two 2D integer arrays bottomLeft and topRight where bottomLeft[i] = [a_i, b_i] and topRight[i] = [c_i, d_i] represent the bottom-left and top-right coordinates of the ith rectangle, respectively.\nYou need to find the maximum area of a square that can fit inside the intersecting region of at least two rectangles. Return 0 if such a square does not exist.\nExample 1:\nInput: bottomLeft = [[1,1],[2,2],[3,1]], topRight = [[3,3],[4,4],[6,6]]\nOutput: 1\nExplanation:\nA square with side length 1 can fit inside either the intersecting region of rectangles 0 and 1 or the intersecting region of rectangles 1 and 2. Hence the maximum area is 1. It can be shown that a square with a greater side length can not fit inside any intersecting region of two rectangles.\nExample 2:\nInput: bottomLeft = [[1,1],[1,3],[1,5]], topRight = [[5,5],[5,7],[5,9]]\nOutput: 4\nExplanation:\nA square with side length 2 can fit inside either the intersecting region of rectangles 0 and 1 or the intersecting region of rectangles 1 and 2. Hence the maximum area is 2 * 2 = 4. It can be shown that a square with a greater side length can not fit inside any intersecting region of two rectangles.\nExample 3:\nInput: bottomLeft = [[1,1],[2,2],[1,2]], topRight = [[3,3],[4,4],[3,4]]\nOutput: 1\nExplanation:\nA square with side length 1 can fit inside the intersecting region of any two rectangles. Also, no larger square can, so the maximum area is 1. Note that the region can be formed by the intersection of more than 2 rectangles.\nExample 4:\nInput: bottomLeft = [[1,1],[3,3],[3,1]], topRight = [[2,2],[4,4],[4,2]]\nOutput: 0\nExplanation:\nNo pair of rectangles intersect, hence, the answer is 0.\nConstraints:"
  },
  {
    "title": "Earliest Second to Mark Indices I",
    "problem_id": "3292",
    "frontend_id": "3048",
    "difficulty": "Medium",
    "problem_slug": "earliest-second-to-mark-indices-i",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "You are given two 1-indexed integer arrays, nums and, changeIndices, having lengths n and m, respectively.\nInitially, all indices in nums are unmarked. Your task is to mark all indices in nums.\nIn each second, s, in order from 1 to m (inclusive), you can perform one of the following operations:\nReturn an integer denoting the earliest second in the range [1, m] when all indices in nums can be marked by choosing operations optimally, or -1 if it is impossible.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Earliest Second to Mark Indices II",
    "problem_id": "3289",
    "frontend_id": "3049",
    "difficulty": "Hard",
    "problem_slug": "earliest-second-to-mark-indices-ii",
    "topics": [
      "Array",
      "Binary Search",
      "Greedy",
      "Heap (Priority Queue)"
    ],
    "description": "You are given two 1-indexed integer arrays, nums and, changeIndices, having lengths n and m, respectively.\nInitially, all indices in nums are unmarked. Your task is to mark all indices in nums.\nIn each second, s, in order from 1 to m (inclusive), you can perform one of the following operations:\nReturn an integer denoting the earliest second in the range [1, m] when all indices in nums can be marked by choosing operations optimally, or -1 if it is impossible.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Exceed Threshold Value I",
    "problem_id": "3331",
    "frontend_id": "3065",
    "difficulty": "Easy",
    "problem_slug": "minimum-operations-to-exceed-threshold-value-i",
    "topics": [
      "Array"
    ],
    "description": "You are given a 0-indexed integer array nums, and an integer k.\nIn one operation, you can remove one occurrence of the smallest element of nums.\nReturn the minimum number of operations needed so that all elements of the array are greater than or equal to k.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Exceed Threshold Value II",
    "problem_id": "3332",
    "frontend_id": "3066",
    "difficulty": "Medium",
    "problem_slug": "minimum-operations-to-exceed-threshold-value-ii",
    "topics": [
      "Array",
      "Heap (Priority Queue)",
      "Simulation"
    ],
    "description": "You are given a 0-indexed integer array nums, and an integer k.\nYou are allowed to perform some operations on nums, where in a single operation, you can:\nNote that you can only apply the described operation if nums contains at least two elements.\nReturn the minimum number of operations needed so that all elements of the array are greater than or equal to k.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Pairs of Connectable Servers in a Weighted Tree Network",
    "problem_id": "3326",
    "frontend_id": "3067",
    "difficulty": "Medium",
    "problem_slug": "count-pairs-of-connectable-servers-in-a-weighted-tree-network",
    "topics": [
      "Array",
      "Tree",
      "Depth-First Search"
    ],
    "description": "You are given an unrooted weighted tree with n vertices representing servers numbered from 0 to n - 1, an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional edge between vertices ai and bi of weight weighti. You are also given an integer signalSpeed.\nTwo servers a and b are connectable through a server c if:\nReturn an integer array count of length n where count[i] is the number of server pairs that are connectable through the server i.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Maximum Sum of Node Values",
    "problem_id": "3307",
    "frontend_id": "3068",
    "difficulty": "Hard",
    "problem_slug": "find-the-maximum-sum-of-node-values",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Greedy",
      "Bit Manipulation",
      "Tree",
      "Sorting"
    ],
    "description": "There exists an undirected tree with n nodes numbered 0 to n - 1. You are given a 0-indexed 2D integer array edges of length n - 1, where edges[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the tree. You are also given a positive integer k, and a 0-indexed array of non-negative integers nums of length n, where nums[i] represents the value of the node numbered i.\nAlice wants the sum of values of tree nodes to be maximum, for which Alice can perform the following operation any number of times (including zero) on the tree:\nReturn the maximum possible sum of the values Alice can achieve by performing the operation any number of times.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Distribute Elements Into Two Arrays I",
    "problem_id": "3347",
    "frontend_id": "3069",
    "difficulty": "Easy",
    "problem_slug": "distribute-elements-into-two-arrays-i",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "You are given a 1-indexed array of distinct integers nums of length n.\nYou need to distribute all the elements of nums between two arrays arr1 and arr2 using n operations. In the first operation, append nums[1] to arr1. In the second operation, append nums[2] to arr2. Afterwards, in the ith operation:\nThe array result is formed by concatenating the arrays arr1 and arr2. For example, if arr1 == [1,2,3] and arr2 == [4,5,6], then result = [1,2,3,4,5,6].\nReturn the array result.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Submatrices with Top-Left Element and Sum Less Than k",
    "problem_id": "3338",
    "frontend_id": "3070",
    "difficulty": "Medium",
    "problem_slug": "count-submatrices-with-top-left-element-and-sum-less-than-k",
    "topics": [
      "Array",
      "Matrix",
      "Prefix Sum"
    ],
    "description": "You are given a 0-indexed integer matrix grid and an integer k.\nReturn the number of submatrices that contain the top-left element of the grid, and have a sum less than or equal to k.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Write the Letter Y on a Grid",
    "problem_id": "3335",
    "frontend_id": "3071",
    "difficulty": "Medium",
    "problem_slug": "minimum-operations-to-write-the-letter-y-on-a-grid",
    "topics": [
      "Array",
      "Hash Table",
      "Matrix",
      "Counting"
    ],
    "description": "You are given a 0-indexed n x n grid where n is odd, and grid[r][c] is 0, 1, or 2.\nWe say that a cell belongs to the Letter Y if it belongs to one of the following:\nThe Letter Y is written on the grid if and only if:\nReturn the minimum number of operations needed to write the letter Y on the grid given that in one operation you can change the value at any cell to 0, 1, or 2.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Distribute Elements Into Two Arrays II",
    "problem_id": "3350",
    "frontend_id": "3072",
    "difficulty": "Hard",
    "problem_slug": "distribute-elements-into-two-arrays-ii",
    "topics": [
      "Array",
      "Binary Indexed Tree",
      "Segment Tree",
      "Simulation"
    ],
    "description": "You are given a 1-indexed array of integers nums of length n.\nWe define a function greaterCount such that greaterCount(arr, val) returns the number of elements in arr that are strictly greater than val.\nYou need to distribute all the elements of nums between two arrays arr1 and arr2 using n operations. In the first operation, append nums[1] to arr1. In the second operation, append nums[2] to arr2. Afterwards, in the ith operation:\nThe array result is formed by concatenating the arrays arr1 and arr2. For example, if arr1 == [1,2,3] and arr2 == [4,5,6], then result = [1,2,3,4,5,6].\nReturn the integer array result.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Apple Redistribution into Boxes",
    "problem_id": "3334",
    "frontend_id": "3074",
    "difficulty": "Easy",
    "problem_slug": "apple-redistribution-into-boxes",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an array apple of size n and an array capacity of size m.\nThere are n packs where the ith pack contains apple[i] apples. There are m boxes as well, and the ith box has a capacity of capacity[i] apples.\nReturn the minimum number of boxes you need to select to redistribute these n packs of apples into boxes.\nNote that, apples from the same pack can be distributed into different boxes.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximize Happiness of Selected Children",
    "problem_id": "3351",
    "frontend_id": "3075",
    "difficulty": "Medium",
    "problem_slug": "maximize-happiness-of-selected-children",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an array happiness of length n, and a positive integer k.\nThere are n children standing in a queue, where the ith child has happiness value happiness[i]. You want to select k children from these n children in k turns.\nIn each turn, when you select a child, the happiness value of all the children that have not been selected till now decreases by 1. Note that the happiness value cannot become negative and gets decremented only if it is positive.\nReturn the maximum sum of the happiness values of the selected children you can achieve by selecting k children.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Shortest Uncommon Substring in an Array",
    "problem_id": "3356",
    "frontend_id": "3076",
    "difficulty": "Medium",
    "problem_slug": "shortest-uncommon-substring-in-an-array",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Trie"
    ],
    "description": "You are given an array arr of size n consisting of non-empty strings.\nFind a string array answer of size n such that:\nReturn the array answer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Strength of K Disjoint Subarrays",
    "problem_id": "3313",
    "frontend_id": "3077",
    "difficulty": "Hard",
    "problem_slug": "maximum-strength-of-k-disjoint-subarrays",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "description": "You are given an array of integers nums with length n, and a positive odd integer k.\nSelect exactly k disjoint subarrays sub1, sub2, ..., subk from nums such that the last element of subi appears before the first element of sub{i+1} for all 1 <= i <= k-1. The goal is to maximize their combined strength.\nThe strength of the selected subarrays is defined as:\nstrength = k * sum(sub1)- (k - 1) * sum(sub2) + (k - 2) * sum(sub3) - ... - 2 * sum(sub{k-1}) + sum(subk)\nwhere sum(subi) is the sum of the elements in the i-th subarray.\nReturn the maximum possible strength that can be obtained from selecting exactly k disjoint subarrays from nums.\nNote that the chosen subarrays don't need to cover the entire array.\nExample 1:\nInput: nums = [1,2,3,-1,2], k = 3\nOutput: 22\nExplanation:\nThe best possible way to select 3 subarrays is: nums[0..2], nums[3..3], and nums[4..4]. The strength is calculated as follows:\nstrength = 3 * (1 + 2 + 3) - 2 * (-1) + 2 = 22\nExample 2:\nInput: nums = [12,-2,-2,-2,-2], k = 5\nOutput: 64\nExplanation:\nThe only possible way to select 5 disjoint subarrays is: nums[0..0], nums[1..1], nums[2..2], nums[3..3], and nums[4..4]. The strength is calculated as follows:\nstrength = 5 * 12 - 4 * (-2) + 3 * (-2) - 2 * (-2) + (-2) = 64\nExample 3:\nInput: nums = [-1,-2,-3], k = 1\nOutput: -1\nExplanation:\nThe best possible way to select 1 subarray is: nums[0..0]. The strength is -1.\nConstraints:"
  },
  {
    "title": "Find the Sum of Encrypted Integers",
    "problem_id": "3367",
    "frontend_id": "3079",
    "difficulty": "Easy",
    "problem_slug": "find-the-sum-of-encrypted-integers",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "You are given an integer array nums containing positive integers. We define a function encrypt such that encrypt(x) replaces every digit in x with the largest digit in x. For example, encrypt(523) = 555 and encrypt(213) = 333.\nReturn the sum of encrypted elements.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Mark Elements on Array by Performing Queries",
    "problem_id": "3306",
    "frontend_id": "3080",
    "difficulty": "Medium",
    "problem_slug": "mark-elements-on-array-by-performing-queries",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting",
      "Heap (Priority Queue)",
      "Simulation"
    ],
    "description": "You are given a 0-indexed array nums of size n consisting of positive integers.\nYou are also given a 2D array queries of size m where queries[i] = [indexi, ki].\nInitially all elements of the array are unmarked.\nYou need to apply m queries on the array in order, where on the ith query you do the following:\nReturn an array answer of size m where answer[i] is the sum of unmarked elements in the array after the ith query.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Replace Question Marks in String to Minimize Its Value",
    "problem_id": "3354",
    "frontend_id": "3081",
    "difficulty": "Medium",
    "problem_slug": "replace-question-marks-in-string-to-minimize-its-value",
    "topics": [
      "Hash Table",
      "String",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)",
      "Counting"
    ],
    "description": "You are given a string s. s[i] is either a lowercase English letter or '?'.\nFor a string t having length m containing only lowercase English letters, we define the function cost(i) for an index i as the number of characters equal to t[i] that appeared before it, i.e. in the range [0, i - 1].\nThe value of t is the sum of cost(i) for all indices i.\nFor example, for the string t = \"aab\":\nYour task is to replace all occurrences of '?' in s with any lowercase English letter so that the value of s is minimized.\nReturn a string denoting the modified string with replaced occurrences of '?'. If there are multiple strings resulting in the minimum value, return the lexicographically smallest one.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Sum of the Power of All Subsequences",
    "problem_id": "3345",
    "frontend_id": "3082",
    "difficulty": "Hard",
    "problem_slug": "find-the-sum-of-the-power-of-all-subsequences",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array nums of length n and a positive integer k.\nThe power of an array of integers is defined as the number of subsequences with their sum equal to k.\nReturn the sum of power of all subsequences of nums.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Existence of a Substring in a String and Its Reverse",
    "problem_id": "3353",
    "frontend_id": "3083",
    "difficulty": "Easy",
    "problem_slug": "existence-of-a-substring-in-a-string-and-its-reverse",
    "topics": [
      "Hash Table",
      "String"
    ],
    "description": "Given a string s, find any substring of length 2 which is also present in the reverse of s.\nReturn true if such a substring exists, and false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Substrings Starting and Ending with Given Character",
    "problem_id": "3337",
    "frontend_id": "3084",
    "difficulty": "Medium",
    "problem_slug": "count-substrings-starting-and-ending-with-given-character",
    "topics": [
      "Math",
      "String",
      "Counting"
    ],
    "description": "You are given a string s and a character c. Return the total number of substrings of s that start and end with c.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Deletions to Make String K-Special",
    "problem_id": "3360",
    "frontend_id": "3085",
    "difficulty": "Medium",
    "problem_slug": "minimum-deletions-to-make-string-k-special",
    "topics": [
      "Hash Table",
      "String",
      "Greedy",
      "Sorting",
      "Counting"
    ],
    "description": "You are given a string word and an integer k.\nWe consider word to be k-special if |freq(word[i]) - freq(word[j])| <= k for all indices i and j in the string.\nHere, freq(x) denotes the frequency of the character x in word, and |y| denotes the absolute value of y.\nReturn the minimum number of characters you need to delete to make word k-special.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Moves to Pick K Ones",
    "problem_id": "3327",
    "frontend_id": "3086",
    "difficulty": "Hard",
    "problem_slug": "minimum-moves-to-pick-k-ones",
    "topics": [
      "Array",
      "Greedy",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "You are given a binary array nums of length n, a positive integer k and a non-negative integer maxChanges.\nAlice plays a game, where the goal is for Alice to pick up k ones from nums using the minimum number of moves. When the game starts, Alice picks up any index aliceIndex in the range [0, n - 1] and stands there. If nums[aliceIndex] == 1 , Alice picks up the one and nums[aliceIndex] becomes 0(this does not count as a move). After this, Alice can make any number of moves (including zero) where in each move Alice must perform exactly one of the following actions:\nReturn the minimum number of moves required by Alice to pick exactly k ones.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Length Substring With Two Occurrences",
    "problem_id": "3349",
    "frontend_id": "3090",
    "difficulty": "Easy",
    "problem_slug": "maximum-length-substring-with-two-occurrences",
    "topics": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "Example 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Apply Operations to Make Sum of Array Greater Than or Equal to k",
    "problem_id": "3328",
    "frontend_id": "3091",
    "difficulty": "Medium",
    "problem_slug": "apply-operations-to-make-sum-of-array-greater-than-or-equal-to-k",
    "topics": [
      "Math",
      "Greedy",
      "Enumeration"
    ],
    "description": "You are given a positive integer k. Initially, you have an array nums = [1].\nYou can perform any of the following operations on the array any number of times (possibly zero):\nReturn the minimum number of operations required to make the sum of elements of the final array greater than or equal to k.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Most Frequent IDs",
    "problem_id": "3363",
    "frontend_id": "3092",
    "difficulty": "Medium",
    "problem_slug": "most-frequent-ids",
    "topics": [
      "Array",
      "Hash Table",
      "Heap (Priority Queue)",
      "Ordered Set"
    ],
    "description": "The problem involves tracking the frequency of IDs in a collection that changes over time. You have two integer arrays, nums and freq, of equal length n. Each element in nums represents an ID, and the corresponding element in freq indicates how many times that ID should be added to or removed from the collection at each step.\nReturn an array ans of length n, where ans[i] represents the count of the most frequent ID in the collection after the ith step. If the collection is empty at any step, ans[i] should be 0 for that step.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Common Suffix Queries",
    "problem_id": "3376",
    "frontend_id": "3093",
    "difficulty": "Hard",
    "problem_slug": "longest-common-suffix-queries",
    "topics": [
      "Array",
      "String",
      "Trie"
    ],
    "description": "You are given two arrays of strings wordsContainer and wordsQuery.\nFor each wordsQuery[i], you need to find a string from wordsContainer that has the longest common suffix with wordsQuery[i]. If there are two or more strings in wordsContainer that share the longest common suffix, find the string that is the smallest in length. If there are two or more such strings that have the same smallest length, find the one that occurred earlier in wordsContainer.\nReturn an array of integers ans, where ans[i] is the index of the string in wordsContainer that has the longest common suffix with wordsQuery[i].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Shortest Subarray With OR at Least K I",
    "problem_id": "3381",
    "frontend_id": "3095",
    "difficulty": "Easy",
    "problem_slug": "shortest-subarray-with-or-at-least-k-i",
    "topics": [
      "Array",
      "Bit Manipulation",
      "Sliding Window"
    ],
    "description": "You are given an array nums of non-negative integers and an integer k.\nAn array is called special if the bitwise OR of all of its elements is at least k.\nReturn the length of the shortest special non-empty subarray of nums, or return -1 if no special subarray exists.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Levels to Gain More Points",
    "problem_id": "3355",
    "frontend_id": "3096",
    "difficulty": "Medium",
    "problem_slug": "minimum-levels-to-gain-more-points",
    "topics": [
      "Array",
      "Prefix Sum"
    ],
    "description": "You are given a binary array possible of length n.\nAlice and Bob are playing a game that consists of n levels. Some of the levels in the game are impossible to clear while others can always be cleared. In particular, if possible[i] == 0, then the ith level is impossible to clear for both the players. A player gains 1 point on clearing a level and loses 1 point if the player fails to clear it.\nAt the start of the game, Alice will play some levels in the given order starting from the 0th level, after which Bob will play for the rest of the levels.\nAlice wants to know the minimum number of levels she should play to gain more points than Bob, if both players play optimally to maximize their points.\nReturn the minimum number of levels Alice should play to gain more points. If this is not possible, return -1.\nNote that each player must play at least 1 level.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Shortest Subarray With OR at Least K II",
    "problem_id": "3380",
    "frontend_id": "3097",
    "difficulty": "Medium",
    "problem_slug": "shortest-subarray-with-or-at-least-k-ii",
    "topics": [
      "Array",
      "Bit Manipulation",
      "Sliding Window"
    ],
    "description": "You are given an array nums of non-negative integers and an integer k.\nAn array is called special if the bitwise OR of all of its elements is at least k.\nReturn the length of the shortest special non-empty subarray of nums, or return -1 if no special subarray exists.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Sum of Subsequence Powers",
    "problem_id": "3316",
    "frontend_id": "3098",
    "difficulty": "Hard",
    "problem_slug": "find-the-sum-of-subsequence-powers",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "You are given an integer array nums of length n, and a positive integer k.\nThe power of a subsequence is defined as the minimum absolute difference between any two elements in the subsequence.\nReturn the sum of powers of all subsequences of nums which have length equal to k.\nSince the answer may be large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Harshad Number",
    "problem_id": "3371",
    "frontend_id": "3099",
    "difficulty": "Easy",
    "problem_slug": "harshad-number",
    "topics": [
      "Math"
    ],
    "description": "An integer divisible by the sum of its digits is said to be a Harshad number. You are given an integer x. Return the sum of the digits of x if x is a Harshad number, otherwise, return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Water Bottles II",
    "problem_id": "3336",
    "frontend_id": "3100",
    "difficulty": "Medium",
    "problem_slug": "water-bottles-ii",
    "topics": [
      "Math",
      "Simulation"
    ],
    "description": "You are given two integers numBottles and numExchange.\nnumBottles represents the number of full water bottles that you initially have. In one operation, you can perform one of the following operations:\nNote that you cannot exchange multiple batches of empty bottles for the same value of numExchange. For example, if numBottles == 3 and numExchange == 1, you cannot exchange 3 empty water bottles for 3 full bottles.\nReturn the maximum number of water bottles you can drink.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Alternating Subarrays",
    "problem_id": "3374",
    "frontend_id": "3101",
    "difficulty": "Medium",
    "problem_slug": "count-alternating-subarrays",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "You are given a binary array nums.\nWe call a subarray alternating if no two adjacent elements in the subarray have the same value.\nReturn the number of alternating subarrays in nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimize Manhattan Distances",
    "problem_id": "3344",
    "frontend_id": "3102",
    "difficulty": "Hard",
    "problem_slug": "minimize-manhattan-distances",
    "topics": [
      "Array",
      "Math",
      "Geometry",
      "Sorting",
      "Ordered Set"
    ],
    "description": "You are given an array points representing integer coordinates of some points on a 2D plane, where points[i] = [xi, yi].\nThe distance between two points is defined as their Manhattan distance.\nReturn the minimum possible value for maximum distance between any two points by removing exactly one point.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Strictly Increasing or Strictly Decreasing Subarray",
    "problem_id": "3372",
    "frontend_id": "3105",
    "difficulty": "Easy",
    "problem_slug": "longest-strictly-increasing-or-strictly-decreasing-subarray",
    "topics": [
      "Array"
    ],
    "description": "You are given an array of integers nums. Return the length of the longest subarray of nums which is either strictly increasing or strictly decreasing.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Lexicographically Smallest String After Operations With Constraint",
    "problem_id": "3346",
    "frontend_id": "3106",
    "difficulty": "Medium",
    "problem_slug": "lexicographically-smallest-string-after-operations-with-constraint",
    "topics": [
      "String",
      "Greedy"
    ],
    "description": "You are given a string s and an integer k.\nDefine a function distance(s1, s2) between two strings s1 and s2 of the same length n as:\nFor example, distance(\"ab\", \"cd\") == 4, and distance(\"a\", \"z\") == 1.\nYou can change any letter of s to any other lowercase English letter, any number of times.\nReturn a string denoting the lexicographically smallest string t you can get after some changes, such that distance(s, t) <= k.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Make Median of Array Equal to K",
    "problem_id": "3387",
    "frontend_id": "3107",
    "difficulty": "Medium",
    "problem_slug": "minimum-operations-to-make-median-of-array-equal-to-k",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an integer array nums and a non-negative integer k. In one operation, you can increase or decrease any element by 1.\nReturn the minimum number of operations needed to make the median of nums equal to k.\nThe median of an array is defined as the middle element of the array when it is sorted in non-decreasing order. If there are two choices for a median, the larger of the two values is taken.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Cost Walk in Weighted Graph",
    "problem_id": "3348",
    "frontend_id": "3108",
    "difficulty": "Hard",
    "problem_slug": "minimum-cost-walk-in-weighted-graph",
    "topics": [
      "Array",
      "Bit Manipulation",
      "Union Find",
      "Graph"
    ],
    "description": "There is an undirected weighted graph with n vertices labeled from 0 to n - 1.\nYou are given the integer n and an array edges, where edges[i] = [ui, vi, wi] indicates that there is an edge between vertices ui and vi with a weight of wi.\nA walk on a graph is a sequence of vertices and edges. The walk starts and ends with a vertex, and each edge connects the vertex that comes before it and the vertex that comes after it. It's important to note that a walk may visit the same edge or vertex more than once.\nThe cost of a walk starting at node u and ending at node v is defined as the bitwise AND of the weights of the edges traversed during the walk. In other words, if the sequence of edge weights encountered during the walk is w0, w1, w2, ..., wk, then the cost is calculated as w0 & w1 & w2 & ... & wk, where & denotes the bitwise AND operator.\nYou are also given a 2D array query, where query[i] = [si, ti]. For each query, you need to find the minimum cost of the walk starting at vertex si and ending at vertex ti. If there exists no such walk, the answer is -1.\nReturn the array answer, where answer[i] denotes the minimum cost of a walk for query i.\nExample 1:\nConstraints:"
  },
  {
    "title": "Score of a String",
    "problem_id": "3379",
    "frontend_id": "3110",
    "difficulty": "Easy",
    "problem_slug": "score-of-a-string",
    "topics": [
      "String"
    ],
    "description": "You are given a string s. The score of a string is defined as the sum of the absolute difference between the ASCII values of adjacent characters.\nReturn the score of s.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Rectangles to Cover Points",
    "problem_id": "3390",
    "frontend_id": "3111",
    "difficulty": "Medium",
    "problem_slug": "minimum-rectangles-to-cover-points",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given a 2D integer array points, where points[i] = [xi, yi]. You are also given an integer w. Your task is to cover all the given points with rectangles.\nEach rectangle has its lower end at some point (x1, 0) and its upper end at some point (x2, y2), where x1 <= x2, y2 >= 0, and the condition x2 - x1 <= w must be satisfied for each rectangle.\nA point is considered covered by a rectangle if it lies within or on the boundary of the rectangle.\nReturn an integer denoting the minimum number of rectangles needed so that each point is covered by at least one rectangle.\nNote: A point may be covered by more than one rectangle.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Time to Visit Disappearing Nodes",
    "problem_id": "3389",
    "frontend_id": "3112",
    "difficulty": "Medium",
    "problem_slug": "minimum-time-to-visit-disappearing-nodes",
    "topics": [
      "Array",
      "Graph",
      "Heap (Priority Queue)",
      "Shortest Path"
    ],
    "description": "There is an undirected graph of n nodes. You are given a 2D array edges, where edges[i] = [ui, vi, lengthi] describes an edge between node ui and node vi with a traversal time of lengthi units.\nAdditionally, you are given an array disappear, where disappear[i] denotes the time when the node i disappears from the graph and you won't be able to visit it.\nNote that the graph might be disconnected and might contain multiple edges.\nReturn the array answer, with answer[i] denoting the minimum units of time required to reach node i from node 0. If node i is unreachable from node 0 then answer[i] is -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Number of Subarrays Where Boundary Elements Are Maximum",
    "problem_id": "3382",
    "frontend_id": "3113",
    "difficulty": "Hard",
    "problem_slug": "find-the-number-of-subarrays-where-boundary-elements-are-maximum",
    "topics": [
      "Array",
      "Binary Search",
      "Stack",
      "Monotonic Stack"
    ],
    "description": "You are given an array of positive integers nums.\nReturn the number of subarrays of nums, where the first and the last elements of the subarray are equal to the largest element in the subarray.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Latest Time You Can Obtain After Replacing Characters",
    "problem_id": "3361",
    "frontend_id": "3114",
    "difficulty": "Easy",
    "problem_slug": "latest-time-you-can-obtain-after-replacing-characters",
    "topics": [
      "String",
      "Enumeration"
    ],
    "description": "You are given a string s representing a 12-hour format time where some of the digits (possibly none) are replaced with a \"?\".\n12-hour times are formatted as \"HH:MM\", where HH is between 00 and 11, and MM is between 00 and 59. The earliest 12-hour time is 00:00, and the latest is 11:59.\nYou have to replace all the \"?\" characters in s with digits such that the time we obtain by the resulting string is a valid 12-hour format time and is the latest possible.\nReturn the resulting string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Prime Difference",
    "problem_id": "3373",
    "frontend_id": "3115",
    "difficulty": "Medium",
    "problem_slug": "maximum-prime-difference",
    "topics": [
      "Array",
      "Math",
      "Number Theory"
    ],
    "description": "You are given an integer array nums.\nReturn an integer that is the maximum distance between the indices of two (not necessarily different) prime numbers in nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Kth Smallest Amount With Single Denomination Combination",
    "problem_id": "3375",
    "frontend_id": "3116",
    "difficulty": "Hard",
    "problem_slug": "kth-smallest-amount-with-single-denomination-combination",
    "topics": [
      "Array",
      "Math",
      "Binary Search",
      "Bit Manipulation",
      "Combinatorics",
      "Number Theory"
    ],
    "description": "You are given an integer array coins representing coins of different denominations and an integer k.\nYou have an infinite number of coins of each denomination. However, you are not allowed to combine coins of different denominations.\nReturn the kth smallest amount that can be made using these coins.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Sum of Values by Dividing Array",
    "problem_id": "3364",
    "frontend_id": "3117",
    "difficulty": "Hard",
    "problem_slug": "minimum-sum-of-values-by-dividing-array",
    "topics": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Bit Manipulation",
      "Segment Tree",
      "Queue"
    ],
    "description": "You are given two arrays nums and andValues of length n and m respectively.\nThe value of an array is equal to the last element of that array.\nYou have to divide nums into m disjoint contiguous subarrays such that for the ith subarray [li, ri], the bitwise AND of the subarray elements is equal to andValues[i], in other words, nums[li] & nums[li + 1] & ... & nums[ri] == andValues[i] for all 1 <= i <= m, where & represents the bitwise AND operator.\nReturn the minimum possible sum of the values of the m subarrays nums is divided into. If it is not possible to divide nums into m subarrays satisfying these conditions, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count the Number of Special Characters I",
    "problem_id": "3408",
    "frontend_id": "3120",
    "difficulty": "Easy",
    "problem_slug": "count-the-number-of-special-characters-i",
    "topics": [
      "Hash Table",
      "String"
    ],
    "description": "You are given a string word. A letter is called special if it appears both in lowercase and uppercase in word.\nReturn the number of special letters in word.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count the Number of Special Characters II",
    "problem_id": "3405",
    "frontend_id": "3121",
    "difficulty": "Medium",
    "problem_slug": "count-the-number-of-special-characters-ii",
    "topics": [
      "Hash Table",
      "String"
    ],
    "description": "You are given a string word. A letter c is called special if it appears both in lowercase and uppercase in word, and every lowercase occurrence of c appears before the first uppercase occurrence of c.\nReturn the number of special letters in word.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Operations to Satisfy Conditions",
    "problem_id": "3404",
    "frontend_id": "3122",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-operations-to-satisfy-conditions",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "You are given a 2D matrix grid of size m x n. In one operation, you can change the value of any cell to any non-negative number. You need to perform some operations such that each cell grid[i][j] is:\nReturn the minimum number of operations needed.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Edges in Shortest Paths",
    "problem_id": "3386",
    "frontend_id": "3123",
    "difficulty": "Hard",
    "problem_slug": "find-edges-in-shortest-paths",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Heap (Priority Queue)",
      "Shortest Path"
    ],
    "description": "You are given an undirected weighted graph of n nodes numbered from 0 to n - 1. The graph consists of m edges represented by a 2D array edges, where edges[i] = [ai, bi, wi] indicates that there is an edge between nodes ai and bi with weight wi.\nConsider all the shortest paths from node 0 to node n - 1 in the graph. You need to find a boolean array answer where answer[i] is true if the edge edges[i] is part of at least one shortest path. Otherwise, answer[i] is false.\nReturn the array answer.\nNote that the graph may not be connected.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Make a Square with the Same Color",
    "problem_id": "3398",
    "frontend_id": "3127",
    "difficulty": "Easy",
    "problem_slug": "make-a-square-with-the-same-color",
    "topics": [
      "Array",
      "Matrix",
      "Enumeration"
    ],
    "description": "You are given a 2D matrix grid of size 3 x 3 consisting only of characters 'B' and 'W'. Character 'W' represents the white color, and character 'B' represents the black color.\nYour task is to change the color of at most one cell so that the matrix has a 2 x 2 square where all cells are of the same color.\nReturn true if it is possible to create a 2 x 2 square of the same color, otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Right Triangles",
    "problem_id": "3388",
    "frontend_id": "3128",
    "difficulty": "Medium",
    "problem_slug": "right-triangles",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Combinatorics",
      "Counting"
    ],
    "description": "You are given a 2D boolean matrix grid.\nA collection of 3 elements of grid is a right triangle if one of its elements is in the same row with another element and in the same column with the third element. The 3 elements may not be next to each other.\nReturn an integer that is the number of right triangles that can be made with 3 elements of grid such that all of them have a value of 1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find All Possible Stable Binary Arrays I",
    "problem_id": "3406",
    "frontend_id": "3129",
    "difficulty": "Medium",
    "problem_slug": "find-all-possible-stable-binary-arrays-i",
    "topics": [
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "description": "You are given 3 positive integers zero, one, and limit.\nA binary array arr is called stable if:\nReturn the total number of stable binary arrays.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find All Possible Stable Binary Arrays II",
    "problem_id": "3407",
    "frontend_id": "3130",
    "difficulty": "Hard",
    "problem_slug": "find-all-possible-stable-binary-arrays-ii",
    "topics": [
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "description": "You are given 3 positive integers zero, one, and limit.\nA binary array arr is called stable if:\nReturn the total number of stable binary arrays.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Integer Added to Array I",
    "problem_id": "3397",
    "frontend_id": "3131",
    "difficulty": "Easy",
    "problem_slug": "find-the-integer-added-to-array-i",
    "topics": [
      "Array"
    ],
    "description": "You are given two arrays of equal length, nums1 and nums2.\nEach element in nums1 has been increased (or decreased in the case of negative) by an integer, represented by the variable x.\nAs a result, nums1 becomes equal to nums2. Two arrays are considered equal when they contain the same integers with the same frequencies.\nReturn the integer x.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Integer Added to Array II",
    "problem_id": "3399",
    "frontend_id": "3132",
    "difficulty": "Medium",
    "problem_slug": "find-the-integer-added-to-array-ii",
    "topics": [
      "Array",
      "Two Pointers",
      "Sorting",
      "Enumeration"
    ],
    "description": "You are given two integer arrays nums1 and nums2.\nFrom nums1 two elements have been removed, and all other elements have been increased (or decreased in the case of negative) by an integer, represented by the variable x.\nAs a result, nums1 becomes equal to nums2. Two arrays are considered equal when they contain the same integers with the same frequencies.\nReturn the minimum possible integer x that achieves this equivalence.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Array End",
    "problem_id": "3394",
    "frontend_id": "3133",
    "difficulty": "Medium",
    "problem_slug": "minimum-array-end",
    "topics": [
      "Bit Manipulation"
    ],
    "description": "You are given two integers n and x. You have to construct an array of positive integers nums of size n where for every 0 <= i < n - 1, nums[i + 1] is greater than nums[i], and the result of the bitwise AND operation between all elements of nums is x.\nReturn the minimum possible value of nums[n - 1].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Median of the Uniqueness Array",
    "problem_id": "3362",
    "frontend_id": "3134",
    "difficulty": "Hard",
    "problem_slug": "find-the-median-of-the-uniqueness-array",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Sliding Window"
    ],
    "description": "You are given an integer array nums. The uniqueness array of nums is the sorted array that contains the number of distinct elements of all the subarrays of nums. In other words, it is a sorted array consisting of distinct(nums[i..j]), for all 0 <= i <= j < nums.length.\nHere, distinct(nums[i..j]) denotes the number of distinct elements in the subarray that starts at index i and ends at index j.\nReturn the median of the uniqueness array of nums.\nNote that the median of an array is defined as the middle element of the array when it is sorted in non-decreasing order. If there are two choices for a median, the smaller of the two values is taken.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Valid Word",
    "problem_id": "3396",
    "frontend_id": "3136",
    "difficulty": "Easy",
    "problem_slug": "valid-word",
    "topics": [
      "String"
    ],
    "description": "A word is considered valid if:\nYou are given a string word.\nReturn true if word is valid, otherwise, return false.\nNotes:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Operations to Make Word K-Periodic",
    "problem_id": "3384",
    "frontend_id": "3137",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-operations-to-make-word-k-periodic",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "You are given a string word of size n, and an integer k such that k divides n.\nIn one operation, you can pick any two indices i and j, that are divisible by k, then replace the substring of length k starting at i with the substring of length k starting at j. That is, replace the substring word[i..i + k - 1] with the substring word[j..j + k - 1].\nReturn the minimum number of operations required to make word k-periodic.\nWe say that word is k-periodic if there is some string s of length k such that word can be obtained by concatenating s an arbitrary number of times. For example, if word == “ababab”, then word is 2-periodic for s = \"ab\".\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Length of Anagram Concatenation",
    "problem_id": "3395",
    "frontend_id": "3138",
    "difficulty": "Medium",
    "problem_slug": "minimum-length-of-anagram-concatenation",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "You are given a string s, which is known to be a concatenation of anagrams of some string t.\nReturn the minimum possible length of the string t.\nAn anagram is formed by rearranging the letters of a string. For example, \"aab\", \"aba\", and, \"baa\" are anagrams of \"aab\".\nExample 1:\nExample 2:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Cost to Equalize Array",
    "problem_id": "3402",
    "frontend_id": "3139",
    "difficulty": "Hard",
    "problem_slug": "minimum-cost-to-equalize-array",
    "topics": [
      "Array",
      "Greedy",
      "Enumeration"
    ],
    "description": "You are given an integer array nums and two integers cost1 and cost2. You are allowed to perform either of the following operations any number of times:\nReturn the minimum cost required to make all elements in the array equal.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check if Grid Satisfies Conditions",
    "problem_id": "3415",
    "frontend_id": "3142",
    "difficulty": "Easy",
    "problem_slug": "check-if-grid-satisfies-conditions",
    "topics": [
      "Array",
      "Matrix"
    ],
    "description": "You are given a 2D matrix grid of size m x n. You need to check if each cell grid[i][j] is:\nReturn true if all the cells satisfy these conditions, otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Points Inside the Square",
    "problem_id": "3419",
    "frontend_id": "3143",
    "difficulty": "Medium",
    "problem_slug": "maximum-points-inside-the-square",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Binary Search",
      "Sorting"
    ],
    "description": "You are given a 2D array points and a string s where, points[i] represents the coordinates of point i, and s[i] represents the tag of point i.\nA valid square is a square centered at the origin (0, 0), has edges parallel to the axes, and does not contain two points with the same tag.\nReturn the maximum number of points contained in a valid square.\nNote:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Substring Partition of Equal Character Frequency",
    "problem_id": "3403",
    "frontend_id": "3144",
    "difficulty": "Medium",
    "problem_slug": "minimum-substring-partition-of-equal-character-frequency",
    "topics": [
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Counting"
    ],
    "description": "Given a string s, you need to partition it into one or more balanced substrings. For example, if s == \"ababcc\" then (\"abab\", \"c\", \"c\"), (\"ab\", \"abc\", \"c\"), and (\"ababcc\") are all valid partitions, but (\"a\", \"bab\", \"cc\"), (\"aba\", \"bc\", \"c\"), and (\"ab\", \"abcc\") are not. The unbalanced substrings are bolded.\nReturn the minimum number of substrings that you can partition s into.\nNote: A balanced string is a string where each character in the string occurs the same number of times.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Products of Elements of Big Array",
    "problem_id": "3411",
    "frontend_id": "3145",
    "difficulty": "Hard",
    "problem_slug": "find-products-of-elements-of-big-array",
    "topics": [
      "Array",
      "Binary Search",
      "Bit Manipulation"
    ],
    "description": "The powerful array of a non-negative integer x is defined as the shortest sorted array of powers of two that sum up to x. The table below illustrates examples of how the powerful array is determined. It can be proven that the powerful array of x is unique.\nThe array big_nums is created by concatenating the powerful arrays for every positive integer i in ascending order: 1, 2, 3, and so on. Thus, big_nums begins as [1, 2, 1, 2, 4, 1, 4, 2, 4, 1, 2, 4, 8, ...].\nYou are given a 2D integer matrix queries, where for queries[i] = [fromi, toi, modi] you should calculate (big_nums[fromi] * big_nums[fromi + 1] * ... * big_nums[toi]) % modi.\nReturn an integer array answer such that answer[i] is the answer to the ith query.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Permutation Difference between Two Strings",
    "problem_id": "3412",
    "frontend_id": "3146",
    "difficulty": "Easy",
    "problem_slug": "permutation-difference-between-two-strings",
    "topics": [
      "Hash Table",
      "String"
    ],
    "description": "You are given two strings s and t such that every character occurs at most once in s and t is a permutation of s.\nThe permutation difference between s and t is defined as the sum of the absolute difference between the index of the occurrence of each character in s and the index of the occurrence of the same character in t.\nReturn the permutation difference between s and t.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Taking Maximum Energy From the Mystic Dungeon",
    "problem_id": "3383",
    "frontend_id": "3147",
    "difficulty": "Medium",
    "problem_slug": "taking-maximum-energy-from-the-mystic-dungeon",
    "topics": [
      "Array",
      "Prefix Sum"
    ],
    "description": "In a mystic dungeon, n magicians are standing in a line. Each magician has an attribute that gives you energy. Some magicians can give you negative energy, which means taking energy from you.\nYou have been cursed in such a way that after absorbing energy from magician i, you will be instantly transported to magician (i + k). This process will be repeated until you reach the magician where (i + k) does not exist.\nIn other words, you will choose a starting point and then teleport with k jumps until you reach the end of the magicians' sequence, absorbing all the energy during the journey.\nYou are given an array energy and an integer k. Return the maximum possible energy you can gain.\nNote that when you are reach a magician, you must take energy from them, whether it is negative or positive energy.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Difference Score in a Grid",
    "problem_id": "3391",
    "frontend_id": "3148",
    "difficulty": "Medium",
    "problem_slug": "maximum-difference-score-in-a-grid",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "You are given an m x n matrix grid consisting of positive integers. You can move from a cell in the matrix to any other cell that is either to the bottom or to the right (not necessarily adjacent). The score of a move from a cell with the value c1 to a cell with the value c2 is c2 - c1.\nYou can start at any cell, and you have to make at least one move.\nReturn the maximum total score you can achieve.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Minimum Cost Array Permutation",
    "problem_id": "3431",
    "frontend_id": "3149",
    "difficulty": "Hard",
    "problem_slug": "find-the-minimum-cost-array-permutation",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "You are given an array nums which is a permutation of [0, 1, 2, ..., n - 1]. The score of any permutation of [0, 1, 2, ..., n - 1] named perm is defined as:\nscore(perm) = |perm[0] - nums[perm[1]]| + |perm[1] - nums[perm[2]]| + ... + |perm[n - 1] - nums[perm[0]]|\nReturn the permutation perm which has the minimum possible score. If multiple permutations exist with this score, return the one that is lexicographically smallest among them.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Special Array I",
    "problem_id": "3429",
    "frontend_id": "3151",
    "difficulty": "Easy",
    "problem_slug": "special-array-i",
    "topics": [
      "Array"
    ],
    "description": "An array is considered special if the parity of every pair of adjacent elements is different. In other words, one element in each pair must be even, and the other must be odd.\nYou are given an array of integers nums. Return true if nums is a special array, otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Special Array II",
    "problem_id": "3427",
    "frontend_id": "3152",
    "difficulty": "Medium",
    "problem_slug": "special-array-ii",
    "topics": [
      "Array",
      "Binary Search",
      "Prefix Sum"
    ],
    "description": "An array is considered special if every pair of its adjacent elements contains two numbers with different parity.\nYou are given an array of integer nums and a 2D integer matrix queries, where for queries[i] = [fromi, toi] your task is to check that subarray nums[fromi..toi] is special or not.\nReturn an array of booleans answer such that answer[i] is true if nums[fromi..toi] is special.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Digit Differences of All Pairs",
    "problem_id": "3416",
    "frontend_id": "3153",
    "difficulty": "Medium",
    "problem_slug": "sum-of-digit-differences-of-all-pairs",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Counting"
    ],
    "description": "You are given an array nums consisting of positive integers where all integers have the same number of digits.\nThe digit difference between two integers is the count of different digits that are in the same position in the two integers.\nReturn the sum of the digit differences between all pairs of integers in nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Number of Ways to Reach the K-th Stair",
    "problem_id": "3414",
    "frontend_id": "3154",
    "difficulty": "Hard",
    "problem_slug": "find-number-of-ways-to-reach-the-k-th-stair",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Bit Manipulation",
      "Memoization",
      "Combinatorics"
    ],
    "description": "You are given a non-negative integer k. There exists a staircase with an infinite number of stairs, with the lowest stair numbered 0.\nAlice has an integer jump, with an initial value of 0. She starts on stair 1 and wants to reach stair k using any number of operations. If she is on stair i, in one operation she can:\nReturn the total number of ways Alice can reach stair k.\nNote that it is possible that Alice reaches the stair k, and performs some operations to reach the stair k again.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the XOR of Numbers Which Appear Twice",
    "problem_id": "3428",
    "frontend_id": "3158",
    "difficulty": "Easy",
    "problem_slug": "find-the-xor-of-numbers-which-appear-twice",
    "topics": [
      "Array",
      "Hash Table",
      "Bit Manipulation"
    ],
    "description": "You are given an array nums, where each number in the array appears either once or twice.\nReturn the bitwise XOR of all the numbers that appear twice in the array, or 0 if no number appears twice.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Occurrences of an Element in an Array",
    "problem_id": "3420",
    "frontend_id": "3159",
    "difficulty": "Medium",
    "problem_slug": "find-occurrences-of-an-element-in-an-array",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "You are given an integer array nums, an integer array queries, and an integer x.\nFor each queries[i], you need to find the index of the queries[i]th occurrence of x in the nums array. If there are fewer than queries[i] occurrences of x, the answer should be -1 for that query.\nReturn an integer array answer containing the answers to all queries.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Number of Distinct Colors Among the Balls",
    "problem_id": "3434",
    "frontend_id": "3160",
    "difficulty": "Medium",
    "problem_slug": "find-the-number-of-distinct-colors-among-the-balls",
    "topics": [
      "Array",
      "Hash Table",
      "Simulation"
    ],
    "description": "You are given an integer limit and a 2D array queries of size n x 2.\nThere are limit + 1 balls with distinct labels in the range [0, limit]. Initially, all balls are uncolored. For every query in queries that is of the form [x, y], you mark ball x with the color y. After each query, you need to find the number of colors among the balls.\nReturn an array result of length n, where result[i] denotes the number of colors after ith query.\nNote that when answering a query, lack of a color will not be considered as a color.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Block Placement Queries",
    "problem_id": "3435",
    "frontend_id": "3161",
    "difficulty": "Hard",
    "problem_slug": "block-placement-queries",
    "topics": [
      "Array",
      "Binary Search",
      "Binary Indexed Tree",
      "Segment Tree"
    ],
    "description": "There exists an infinite number line, with its origin at 0 and extending towards the positive x-axis.\nYou are given a 2D array queries, which contains two types of queries:\nReturn a boolean array results, where results[i] is true if you can place the block specified in the ith query of type 2, and false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Number of Good Pairs I",
    "problem_id": "3446",
    "frontend_id": "3162",
    "difficulty": "Easy",
    "problem_slug": "find-the-number-of-good-pairs-i",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "You are given 2 integer arrays nums1 and nums2 of lengths n and m respectively. You are also given a positive integer k.\nA pair (i, j) is called good if nums1[i] is divisible by nums2[j] * k (0 <= i <= n - 1, 0 <= j <= m - 1).\nReturn the total number of good pairs.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "String Compression III",
    "problem_id": "3451",
    "frontend_id": "3163",
    "difficulty": "Medium",
    "problem_slug": "string-compression-iii",
    "topics": [
      "String"
    ],
    "description": "Given a string word, compress it using the following algorithm:\nReturn the string comp.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Number of Good Pairs II",
    "problem_id": "3444",
    "frontend_id": "3164",
    "difficulty": "Medium",
    "problem_slug": "find-the-number-of-good-pairs-ii",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "You are given 2 integer arrays nums1 and nums2 of lengths n and m respectively. You are also given a positive integer k.\nA pair (i, j) is called good if nums1[i] is divisible by nums2[j] * k (0 <= i <= n - 1, 0 <= j <= m - 1).\nReturn the total number of good pairs.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Sum of Subsequence With Non-adjacent Elements",
    "problem_id": "3423",
    "frontend_id": "3165",
    "difficulty": "Hard",
    "problem_slug": "maximum-sum-of-subsequence-with-non-adjacent-elements",
    "topics": [
      "Array",
      "Divide and Conquer",
      "Dynamic Programming",
      "Segment Tree"
    ],
    "description": "You are given an array nums consisting of integers. You are also given a 2D array queries, where queries[i] = [posi, xi].\nFor query i, we first set nums[posi] equal to xi, then we calculate the answer to query i which is the maximum sum of a subsequence of nums where no two adjacent elements are selected.\nReturn the sum of the answers to all queries.\nSince the final answer may be very large, return it modulo 109 + 7.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of Chairs in a Waiting Room",
    "problem_id": "3426",
    "frontend_id": "3168",
    "difficulty": "Easy",
    "problem_slug": "minimum-number-of-chairs-in-a-waiting-room",
    "topics": [
      "String",
      "Simulation"
    ],
    "description": "You are given a string s. Simulate events at each second i:\nReturn the minimum number of chairs needed so that a chair is available for every person who enters the waiting room given that it is initially empty.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Days Without Meetings",
    "problem_id": "3430",
    "frontend_id": "3169",
    "difficulty": "Medium",
    "problem_slug": "count-days-without-meetings",
    "topics": [
      "Array",
      "Sorting"
    ],
    "description": "You are given a positive integer days representing the total number of days an employee is available for work (starting from day 1). You are also given a 2D array meetings of size n where, meetings[i] = [start_i, end_i] represents the starting and ending days of meeting i (inclusive).\nReturn the count of days when the employee is available for work but no meetings are scheduled.\nNote: The meetings may overlap.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Lexicographically Minimum String After Removing Stars",
    "problem_id": "3445",
    "frontend_id": "3170",
    "difficulty": "Medium",
    "problem_slug": "lexicographically-minimum-string-after-removing-stars",
    "topics": [
      "Hash Table",
      "String",
      "Stack",
      "Greedy",
      "Heap (Priority Queue)"
    ],
    "description": "You are given a string s. It may contain any number of '*' characters. Your task is to remove all '*' characters.\nWhile there is a '*', do the following operation:\nReturn the lexicographically smallest resulting string after removing all '*' characters.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Subarray With Bitwise OR Closest to K",
    "problem_id": "3436",
    "frontend_id": "3171",
    "difficulty": "Hard",
    "problem_slug": "find-subarray-with-bitwise-or-closest-to-k",
    "topics": [
      "Array",
      "Binary Search",
      "Bit Manipulation",
      "Segment Tree"
    ],
    "description": "You are given an array nums and an integer k. You need to find a subarray of nums such that the absolute difference between k and the bitwise OR of the subarray elements is as small as possible. In other words, select a subarray nums[l..r] such that |k - (nums[l] OR nums[l + 1] ... OR nums[r])| is minimum.\nReturn the minimum possible value of the absolute difference.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Clear Digits",
    "problem_id": "3447",
    "frontend_id": "3174",
    "difficulty": "Easy",
    "problem_slug": "clear-digits",
    "topics": [
      "String",
      "Stack",
      "Simulation"
    ],
    "description": "You are given a string s.\nYour task is to remove all digits by doing this operation repeatedly:\nReturn the resulting string after removing all digits.\nNote that the operation cannot be performed on a digit that does not have any non-digit character to its left.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find The First Player to win K Games in a Row",
    "problem_id": "3413",
    "frontend_id": "3175",
    "difficulty": "Medium",
    "problem_slug": "find-the-first-player-to-win-k-games-in-a-row",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "A competition consists of n players numbered from 0 to n - 1.\nYou are given an integer array skills of size n and a positive integer k, where skills[i] is the skill level of player i. All integers in skills are unique.\nAll players are standing in a queue in order from player 0 to player n - 1.\nThe competition process is as follows:\nThe winner of the competition is the first player who wins k games in a row.\nReturn the initial index of the winning player.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Maximum Length of a Good Subsequence I",
    "problem_id": "3456",
    "frontend_id": "3176",
    "difficulty": "Medium",
    "problem_slug": "find-the-maximum-length-of-a-good-subsequence-i",
    "topics": [
      "Array",
      "Hash Table",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array nums and a non-negative integer k. A sequence of integers seq is called good if there are at most k indices i in the range [0, seq.length - 2] such that seq[i] != seq[i + 1].\nReturn the maximum possible length of a good subsequence of nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Maximum Length of a Good Subsequence II",
    "problem_id": "3452",
    "frontend_id": "3177",
    "difficulty": "Hard",
    "problem_slug": "find-the-maximum-length-of-a-good-subsequence-ii",
    "topics": [
      "Array",
      "Hash Table",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array nums and a non-negative integer k. A sequence of integers seq is called good if there are at most k indices i in the range [0, seq.length - 2] such that seq[i] != seq[i + 1].\nReturn the maximum possible length of a good subsequence of nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Child Who Has the Ball After K Seconds",
    "problem_id": "3450",
    "frontend_id": "3178",
    "difficulty": "Easy",
    "problem_slug": "find-the-child-who-has-the-ball-after-k-seconds",
    "topics": [
      "Math",
      "Simulation"
    ],
    "description": "You are given two positive integers n and k. There are n children numbered from 0 to n - 1 standing in a queue in order from left to right.\nInitially, child 0 holds a ball and the direction of passing the ball is towards the right direction. After each second, the child holding the ball passes it to the child next to them. Once the ball reaches either end of the line, i.e. child 0 or child n - 1, the direction of passing is reversed.\nReturn the number of the child who receives the ball after k seconds.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nNote: This question is the same as  2582: Pass the Pillow."
  },
  {
    "title": "Find the N-th Value After K Seconds",
    "problem_id": "3422",
    "frontend_id": "3179",
    "difficulty": "Medium",
    "problem_slug": "find-the-n-th-value-after-k-seconds",
    "topics": [
      "Array",
      "Math",
      "Simulation",
      "Combinatorics",
      "Prefix Sum"
    ],
    "description": "You are given two integers n and k.\nInitially, you start with an array a of n integers where a[i] = 1 for all 0 <= i <= n - 1. After each second, you simultaneously update each element to be the sum of all its preceding elements plus the element itself. For example, after one second, a[0] remains the same, a[1] becomes a[0] + a[1], a[2] becomes a[0] + a[1] + a[2], and so on.\nReturn the value of a[n - 1] after k seconds.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Total Reward Using Operations I",
    "problem_id": "3442",
    "frontend_id": "3180",
    "difficulty": "Medium",
    "problem_slug": "maximum-total-reward-using-operations-i",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array rewardValues of length n, representing the values of rewards.\nInitially, your total reward x is 0, and all indices are unmarked. You are allowed to perform the following operation any number of times:\nReturn an integer denoting the maximum total reward you can collect by performing the operations optimally.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Total Reward Using Operations II",
    "problem_id": "3443",
    "frontend_id": "3181",
    "difficulty": "Hard",
    "problem_slug": "maximum-total-reward-using-operations-ii",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation"
    ],
    "description": "You are given an integer array rewardValues of length n, representing the values of rewards.\nInitially, your total reward x is 0, and all indices are unmarked. You are allowed to perform the following operation any number of times:\nReturn an integer denoting the maximum total reward you can collect by performing the operations optimally.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Pairs That Form a Complete Day I",
    "problem_id": "3421",
    "frontend_id": "3184",
    "difficulty": "Easy",
    "problem_slug": "count-pairs-that-form-a-complete-day-i",
    "topics": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "description": "Given an integer array hours representing times in hours, return an integer denoting the number of pairs i, j where i < j and hours[i] + hours[j] forms a complete day.\nA complete day is defined as a time duration that is an exact multiple of 24 hours.\nFor example, 1 day is 24 hours, 2 days is 48 hours, 3 days is 72 hours, and so on.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Pairs That Form a Complete Day II",
    "problem_id": "3418",
    "frontend_id": "3185",
    "difficulty": "Medium",
    "problem_slug": "count-pairs-that-form-a-complete-day-ii",
    "topics": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "description": "Given an integer array hours representing times in hours, return an integer denoting the number of pairs i, j where i < j and hours[i] + hours[j] forms a complete day.\nA complete day is defined as a time duration that is an exact multiple of 24 hours.\nFor example, 1 day is 24 hours, 2 days is 48 hours, 3 days is 72 hours, and so on.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Total Damage With Spell Casting",
    "problem_id": "3437",
    "frontend_id": "3186",
    "difficulty": "Medium",
    "problem_slug": "maximum-total-damage-with-spell-casting",
    "topics": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search",
      "Dynamic Programming",
      "Sorting",
      "Counting"
    ],
    "description": "A magician has various spells.\nYou are given an array power, where each element represents the damage of a spell. Multiple spells can have the same damage value.\nIt is a known fact that if a magician decides to cast a spell with a damage of power[i], they cannot cast any spell with a damage of power[i] - 2, power[i] - 1, power[i] + 1, or power[i] + 2.\nEach spell can be cast only once.\nReturn the maximum possible total damage that a magician can cast.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Peaks in Array",
    "problem_id": "3438",
    "frontend_id": "3187",
    "difficulty": "Hard",
    "problem_slug": "peaks-in-array",
    "topics": [
      "Array",
      "Binary Indexed Tree",
      "Segment Tree"
    ],
    "description": "A peak in an array arr is an element that is greater than its previous and next element in arr.\nYou are given an integer array nums and a 2D integer array queries.\nYou have to process queries of two types:\nReturn an array answer containing the results of the queries of the first type in order.\nNotes:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Minimum Operations to Make All Elements Divisible by Three",
    "problem_id": "3476",
    "frontend_id": "3190",
    "difficulty": "Easy",
    "problem_slug": "find-minimum-operations-to-make-all-elements-divisible-by-three",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "You are given an integer array nums. In one operation, you can add or subtract 1 from any element of nums.\nReturn the minimum number of operations to make all elements of nums divisible by 3.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Make Binary Array Elements Equal to One I",
    "problem_id": "3475",
    "frontend_id": "3191",
    "difficulty": "Medium",
    "problem_slug": "minimum-operations-to-make-binary-array-elements-equal-to-one-i",
    "topics": [
      "Array",
      "Bit Manipulation",
      "Queue",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "You are given a binary array nums.\nYou can do the following operation on the array any number of times (possibly zero):\nFlipping an element means changing its value from 0 to 1, and from 1 to 0.\nReturn the minimum number of operations required to make all elements in nums equal to 1. If it is impossible, return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Make Binary Array Elements Equal to One II",
    "problem_id": "3477",
    "frontend_id": "3192",
    "difficulty": "Medium",
    "problem_slug": "minimum-operations-to-make-binary-array-elements-equal-to-one-ii",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "You are given a binary array nums.\nYou can do the following operation on the array any number of times (possibly zero):\nFlipping an element means changing its value from 0 to 1, and from 1 to 0.\nReturn the minimum number of operations required to make all elements in nums equal to 1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count the Number of Inversions",
    "problem_id": "3460",
    "frontend_id": "3193",
    "difficulty": "Hard",
    "problem_slug": "count-the-number-of-inversions",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an integer n and a 2D array requirements, where requirements[i] = [endi, cnti] represents the end index and the inversion count of each requirement.\nA pair of indices (i, j) from an integer array nums is called an inversion if:\nReturn the number of permutations perm of [0, 1, 2, ..., n - 1] such that for all requirements[i], perm[0..endi] has exactly cnti inversions.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Average of Smallest and Largest Elements",
    "problem_id": "3471",
    "frontend_id": "3194",
    "difficulty": "Easy",
    "problem_slug": "minimum-average-of-smallest-and-largest-elements",
    "topics": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "description": "You have an array of floating point numbers averages which is initially empty. You are given an array nums of n integers where n is even.\nYou repeat the following procedure n / 2 times:\nReturn the minimum element in averages.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Minimum Area to Cover All Ones I",
    "problem_id": "3461",
    "frontend_id": "3195",
    "difficulty": "Medium",
    "problem_slug": "find-the-minimum-area-to-cover-all-ones-i",
    "topics": [
      "Array",
      "Matrix"
    ],
    "description": "You are given a 2D binary array grid. Find a rectangle with horizontal and vertical sides with the smallest area, such that all the 1's in grid lie inside this rectangle.\nReturn the minimum possible area of the rectangle.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximize Total Cost of Alternating Subarrays",
    "problem_id": "3464",
    "frontend_id": "3196",
    "difficulty": "Medium",
    "problem_slug": "maximize-total-cost-of-alternating-subarrays",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array nums with length n.\nThe cost of a subarray nums[l..r], where 0 <= l <= r < n, is defined as:\ncost(l, r) = nums[l] - nums[l + 1] + ... + nums[r] * (−1)r − l\nYour task is to split nums into subarrays such that the total cost of the subarrays is maximized, ensuring each element belongs to exactly one subarray.\nFormally, if nums is split into k subarrays, where k > 1, at indices i1, i2, ..., ik − 1, where 0 <= i1 < i2 < ... < ik - 1 < n - 1, then the total cost will be:\ncost(0, i1) + cost(i1 + 1, i2) + ... + cost(ik − 1 + 1, n − 1)\nReturn an integer denoting the maximum total cost of the subarrays after splitting the array optimally.\nNote: If nums is not split into subarrays, i.e. k = 1, the total cost is simply cost(0, n - 1).\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Find the Minimum Area to Cover All Ones II",
    "problem_id": "3459",
    "frontend_id": "3197",
    "difficulty": "Hard",
    "problem_slug": "find-the-minimum-area-to-cover-all-ones-ii",
    "topics": [
      "Array",
      "Matrix",
      "Enumeration"
    ],
    "description": "You are given a 2D binary array grid. You need to find 3 non-overlapping rectangles having non-zero areas with horizontal and vertical sides such that all the 1's in grid lie inside these rectangles.\nReturn the minimum possible sum of the area of these rectangles.\nNote that the rectangles are allowed to touch.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Height of a Triangle",
    "problem_id": "3469",
    "frontend_id": "3200",
    "difficulty": "Easy",
    "problem_slug": "maximum-height-of-a-triangle",
    "topics": [
      "Array",
      "Enumeration"
    ],
    "description": "You are given two integers red and blue representing the count of red and blue colored balls. You have to arrange these balls to form a triangle such that the 1st row will have 1 ball, the 2nd row will have 2 balls, the 3rd row will have 3 balls, and so on.\nAll the balls in a particular row should be the same color, and adjacent rows should have different colors.\nReturn the maximum height of the triangle that can be achieved.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Find the Maximum Length of Valid Subsequence I",
    "problem_id": "3490",
    "frontend_id": "3201",
    "difficulty": "Medium",
    "problem_slug": "find-the-maximum-length-of-valid-subsequence-i",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "A subsequence sub of nums with length x is called valid if it satisfies:\nReturn the length of the longest valid subsequence of nums.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Maximum Length of Valid Subsequence II",
    "problem_id": "3491",
    "frontend_id": "3202",
    "difficulty": "Medium",
    "problem_slug": "find-the-maximum-length-of-valid-subsequence-ii",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "A subsequence sub of nums with length x is called valid if it satisfies:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Minimum Diameter After Merging Two Trees",
    "problem_id": "3439",
    "frontend_id": "3203",
    "difficulty": "Hard",
    "problem_slug": "find-minimum-diameter-after-merging-two-trees",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph"
    ],
    "description": "There exist two undirected trees with n and m nodes, numbered from 0 to n - 1 and from 0 to m - 1, respectively. You are given two 2D integer arrays edges1 and edges2 of lengths n - 1 and m - 1, respectively, where edges1[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the first tree and edges2[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the second tree.\nYou must connect one node from the first tree with another node from the second tree with an edge.\nReturn the minimum possible diameter of the resulting tree.\nThe diameter of a tree is the length of the longest path between any two nodes in the tree.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Alternating Groups I",
    "problem_id": "3463",
    "frontend_id": "3206",
    "difficulty": "Easy",
    "problem_slug": "alternating-groups-i",
    "topics": [
      "Array",
      "Sliding Window"
    ],
    "description": "There is a circle of red and blue tiles. You are given an array of integers colors. The color of tile i is represented by colors[i]:\nEvery 3 contiguous tiles in the circle with alternating colors (the middle tile has a different color from its left and right tiles) is called an alternating group.\nReturn the number of alternating groups.\nNote that since colors represents a circle, the first and the last tiles are considered to be next to each other.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Points After Enemy Battles",
    "problem_id": "3264",
    "frontend_id": "3207",
    "difficulty": "Medium",
    "problem_slug": "maximum-points-after-enemy-battles",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "You are given an integer array enemyEnergies denoting the energy values of various enemies.\nYou are also given an integer currentEnergy denoting the amount of energy you have initially.\nYou start with 0 points, and all the enemies are unmarked initially.\nYou can perform either of the following operations zero or multiple times to gain points:\nReturn an integer denoting the maximum points you can get in the end by optimally performing operations.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Alternating Groups II",
    "problem_id": "3483",
    "frontend_id": "3208",
    "difficulty": "Medium",
    "problem_slug": "alternating-groups-ii",
    "topics": [
      "Array",
      "Sliding Window"
    ],
    "description": "There is a circle of red and blue tiles. You are given an array of integers colors and an integer k. The color of tile i is represented by colors[i]:\nAn alternating group is every k contiguous tiles in the circle with alternating colors (each tile in the group except the first and last one has a different color from its left and right tiles).\nReturn the number of alternating groups.\nNote that since colors represents a circle, the first and the last tiles are considered to be next to each other.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Subarrays With AND Value of K",
    "problem_id": "3466",
    "frontend_id": "3209",
    "difficulty": "Hard",
    "problem_slug": "number-of-subarrays-with-and-value-of-k",
    "topics": [
      "Array",
      "Binary Search",
      "Bit Manipulation",
      "Segment Tree"
    ],
    "description": "Given an array of integers nums and an integer k, return the number of subarrays of nums where the bitwise AND of the elements of the subarray equals k.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Encrypted String",
    "problem_id": "3468",
    "frontend_id": "3210",
    "difficulty": "Easy",
    "problem_slug": "find-the-encrypted-string",
    "topics": [
      "String"
    ],
    "description": "You are given a string s and an integer k. Encrypt the string using the following algorithm:\nReturn the encrypted string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Generate Binary Strings Without Adjacent Zeros",
    "problem_id": "3453",
    "frontend_id": "3211",
    "difficulty": "Medium",
    "problem_slug": "generate-binary-strings-without-adjacent-zeros",
    "topics": [
      "String",
      "Backtracking",
      "Bit Manipulation"
    ],
    "description": "You are given a positive integer n.\nA binary string x is valid if all substrings of x of length 2 contain at least one \"1\".\nReturn all valid strings with length n, in any order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Submatrices With Equal Frequency of X and Y",
    "problem_id": "3492",
    "frontend_id": "3212",
    "difficulty": "Medium",
    "problem_slug": "count-submatrices-with-equal-frequency-of-x-and-y",
    "topics": [
      "Array",
      "Matrix",
      "Prefix Sum"
    ],
    "description": "Given a 2D character matrix grid, where grid[i][j] is either 'X', 'Y', or '.', return the number of submatrices that contain:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Construct String with Minimum Cost",
    "problem_id": "3482",
    "frontend_id": "3213",
    "difficulty": "Hard",
    "problem_slug": "construct-string-with-minimum-cost",
    "topics": [
      "Array",
      "String",
      "Dynamic Programming",
      "Suffix Array"
    ],
    "description": "You are given a string target, an array of strings words, and an integer array costs, both arrays of the same length.\nImagine an empty string s.\nYou can perform the following operation any number of times (including zero):\nReturn the minimum cost to make s equal to target. If it's not possible, return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Lexicographically Smallest String After a Swap",
    "problem_id": "3484",
    "frontend_id": "3216",
    "difficulty": "Easy",
    "problem_slug": "lexicographically-smallest-string-after-a-swap",
    "topics": [
      "String",
      "Greedy"
    ],
    "description": "Given a string s containing only digits, return the lexicographically smallest string that can be obtained after swapping adjacent digits in s with the same parity at most once.\nDigits have the same parity if both are odd or both are even. For example, 5 and 9, as well as 2 and 4, have the same parity, while 6 and 9 do not.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Delete Nodes From Linked List Present in Array",
    "problem_id": "3501",
    "frontend_id": "3217",
    "difficulty": "Medium",
    "problem_slug": "delete-nodes-from-linked-list-present-in-array",
    "topics": [
      "Array",
      "Hash Table",
      "Linked List"
    ],
    "description": "You are given an array of integers nums and the head of a linked list. Return the head of the modified linked list after removing all nodes from the linked list that have a value that exists in nums.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Cost for Cutting Cake I",
    "problem_id": "3494",
    "frontend_id": "3218",
    "difficulty": "Medium",
    "problem_slug": "minimum-cost-for-cutting-cake-i",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Greedy",
      "Sorting"
    ],
    "description": "There is an m x n cake that needs to be cut into 1 x 1 pieces.\nYou are given integers m, n, and two arrays:\nIn one operation, you can choose any piece of cake that is not yet a 1 x 1 square and perform one of the following cuts:\nAfter the cut, the piece of cake is divided into two distinct pieces.\nThe cost of a cut depends only on the initial cost of the line and does not change.\nReturn the minimum total cost to cut the entire cake into 1 x 1 pieces.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Cost for Cutting Cake II",
    "problem_id": "3500",
    "frontend_id": "3219",
    "difficulty": "Hard",
    "problem_slug": "minimum-cost-for-cutting-cake-ii",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "There is an m x n cake that needs to be cut into 1 x 1 pieces.\nYou are given integers m, n, and two arrays:\nIn one operation, you can choose any piece of cake that is not yet a 1 x 1 square and perform one of the following cuts:\nAfter the cut, the piece of cake is divided into two distinct pieces.\nThe cost of a cut depends only on the initial cost of the line and does not change.\nReturn the minimum total cost to cut the entire cake into 1 x 1 pieces.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Odd and Even Transactions",
    "problem_id": "3530",
    "frontend_id": "3220",
    "difficulty": "Medium",
    "problem_slug": "odd-and-even-transactions",
    "topics": [
      "Database"
    ],
    "description": "Table: transactions\nWrite a solution to find the sum of amounts for odd and even transactions for each day. If there are no odd or even transactions for a specific date, display as 0.\nReturn the result table ordered by transaction_date in ascending order.\nThe result format is in the following example.\nExample:"
  },
  {
    "title": "Find the Winning Player in Coin Game",
    "problem_id": "3511",
    "frontend_id": "3222",
    "difficulty": "Easy",
    "problem_slug": "find-the-winning-player-in-coin-game",
    "topics": [
      "Math",
      "Simulation",
      "Game Theory"
    ],
    "description": "You are given two positive integers x and y, denoting the number of coins with values 75 and 10 respectively.\nAlice and Bob are playing a game. Each turn, starting with Alice, the player must pick up coins with a total value 115. If the player is unable to do so, they lose the game.\nReturn the name of the player who wins the game if both players play optimally.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Length of String After Operations",
    "problem_id": "3455",
    "frontend_id": "3223",
    "difficulty": "Medium",
    "problem_slug": "minimum-length-of-string-after-operations",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "You are given a string s.\nYou can perform the following process on s any number of times:\nReturn the minimum length of the final string s that you can achieve.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Array Changes to Make Differences Equal",
    "problem_id": "3498",
    "frontend_id": "3224",
    "difficulty": "Medium",
    "problem_slug": "minimum-array-changes-to-make-differences-equal",
    "topics": [
      "Array",
      "Hash Table",
      "Prefix Sum"
    ],
    "description": "You are given an integer array nums of size n where n is even, and an integer k.\nYou can perform some changes on the array, where in one change you can replace any element in the array with any integer in the range from 0 to k.\nYou need to perform some changes (possibly none) such that the final array satisfies the following condition:\nReturn the minimum number of changes required to satisfy the above condition.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Score From Grid Operations",
    "problem_id": "3470",
    "frontend_id": "3225",
    "difficulty": "Hard",
    "problem_slug": "maximum-score-from-grid-operations",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix",
      "Prefix Sum"
    ],
    "description": "You are given a 2D matrix grid of size n x n. Initially, all cells of the grid are colored white. In one operation, you can select any cell of indices (i, j), and color black all the cells of the jth column starting from the top row down to the ith row.\nThe grid score is the sum of all grid[i][j] such that cell (i, j) is white and it has a horizontally adjacent black cell.\nReturn the maximum score that can be achieved after some number of operations.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Bit Changes to Make Two Integers Equal",
    "problem_id": "3508",
    "frontend_id": "3226",
    "difficulty": "Easy",
    "problem_slug": "number-of-bit-changes-to-make-two-integers-equal",
    "topics": [
      "Bit Manipulation"
    ],
    "description": "You are given two positive integers n and k.\nYou can choose any bit in the binary representation of n that is equal to 1 and change it to 0.\nReturn the number of changes needed to make n equal to k. If it is impossible, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Vowels Game in a String",
    "problem_id": "3462",
    "frontend_id": "3227",
    "difficulty": "Medium",
    "problem_slug": "vowels-game-in-a-string",
    "topics": [
      "Math",
      "String",
      "Brainteaser",
      "Game Theory"
    ],
    "description": "Alice and Bob are playing a game on a string.\nYou are given a string s, Alice and Bob will take turns playing the following game where Alice starts first:\nThe first player who cannot make a move on their turn loses the game. We assume that both Alice and Bob play optimally.\nReturn true if Alice wins the game, and false otherwise.\nThe English vowels are: a, e, i, o, and u.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Number of Operations to Move Ones to the End",
    "problem_id": "3493",
    "frontend_id": "3228",
    "difficulty": "Medium",
    "problem_slug": "maximum-number-of-operations-to-move-ones-to-the-end",
    "topics": [
      "String",
      "Greedy",
      "Counting"
    ],
    "description": "You are given a binary string s.\nYou can perform the following operation on the string any number of times:\nReturn the maximum number of operations that you can perform.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Make Array Equal to Target",
    "problem_id": "3454",
    "frontend_id": "3229",
    "difficulty": "Hard",
    "problem_slug": "minimum-operations-to-make-array-equal-to-target",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Greedy",
      "Monotonic Stack"
    ],
    "description": "You are given two positive integer arrays nums and target, of the same length.\nIn a single operation, you can select any subarray of nums and increment each element within that subarray by 1 or decrement each element within that subarray by 1.\nReturn the minimum number of operations required to make nums equal to the array target.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find if Digit Game Can Be Won",
    "problem_id": "3515",
    "frontend_id": "3232",
    "difficulty": "Easy",
    "problem_slug": "find-if-digit-game-can-be-won",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "You are given an array of positive integers nums.\nAlice and Bob are playing a game. In the game, Alice can choose either all single-digit numbers or all double-digit numbers from nums, and the rest of the numbers are given to Bob. Alice wins if the sum of her numbers is strictly greater than the sum of Bob's numbers.\nReturn true if Alice can win this game, otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Count of Numbers Which Are Not Special",
    "problem_id": "3507",
    "frontend_id": "3233",
    "difficulty": "Medium",
    "problem_slug": "find-the-count-of-numbers-which-are-not-special",
    "topics": [
      "Array",
      "Math",
      "Number Theory"
    ],
    "description": "You are given 2 positive integers l and r. For any number x, all positive divisors of x except x are called the proper divisors of x.\nA number is called special if it has exactly 2 proper divisors. For example:\nReturn the count of numbers in the range [l, r] that are not special.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count the Number of Substrings With Dominant Ones",
    "problem_id": "3479",
    "frontend_id": "3234",
    "difficulty": "Medium",
    "problem_slug": "count-the-number-of-substrings-with-dominant-ones",
    "topics": [
      "String",
      "Sliding Window",
      "Enumeration"
    ],
    "description": "You are given a binary string s.\nReturn the number of substrings with dominant ones.\nA string has dominant ones if the number of ones in the string is greater than or equal to the square of the number of zeros in the string.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check if the Rectangle Corner Is Reachable",
    "problem_id": "3478",
    "frontend_id": "3235",
    "difficulty": "Hard",
    "problem_slug": "check-if-the-rectangle-corner-is-reachable",
    "topics": [
      "Array",
      "Math",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Geometry"
    ],
    "description": "You are given two positive integers xCorner and yCorner, and a 2D array circles, where circles[i] = [xi, yi, ri] denotes a circle with center at (xi, yi) and radius ri.\nThere is a rectangle in the coordinate plane with its bottom left corner at the origin and top right corner at the coordinate (xCorner, yCorner). You need to check whether there is a path from the bottom left corner to the top right corner such that the entire path lies inside the rectangle, does not touch or lie inside any circle, and touches the rectangle only at the two corners.\nReturn true if such a path exists, and false otherwise.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Find the Number of Winning Players",
    "problem_id": "3519",
    "frontend_id": "3238",
    "difficulty": "Easy",
    "problem_slug": "find-the-number-of-winning-players",
    "topics": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "description": "You are given an integer n representing the number of players in a game and a 2D array pick where pick[i] = [xi, yi] represents that the player xi picked a ball of color yi.\nPlayer i wins the game if they pick strictly more than i balls of the same color. In other words,\nReturn the number of players who win the game.\nNote that multiple players can win the game.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Flips to Make Binary Grid Palindromic I",
    "problem_id": "3526",
    "frontend_id": "3239",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-flips-to-make-binary-grid-palindromic-i",
    "topics": [
      "Array",
      "Two Pointers",
      "Matrix"
    ],
    "description": "You are given an m x n binary matrix grid.\nA row or column is considered palindromic if its values read the same forward and backward.\nYou can flip any number of cells in grid from 0 to 1, or from 1 to 0.\nReturn the minimum number of cells that need to be flipped to make either all rows palindromic or all columns palindromic.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Flips to Make Binary Grid Palindromic II",
    "problem_id": "3524",
    "frontend_id": "3240",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-flips-to-make-binary-grid-palindromic-ii",
    "topics": [
      "Array",
      "Two Pointers",
      "Matrix"
    ],
    "description": "You are given an m x n binary matrix grid.\nA row or column is considered palindromic if its values read the same forward and backward.\nYou can flip any number of cells in grid from 0 to 1, or from 1 to 0.\nReturn the minimum number of cells that need to be flipped to make all rows and columns palindromic, and the total number of 1's in grid divisible by 4.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Time Taken to Mark All Nodes",
    "problem_id": "3532",
    "frontend_id": "3241",
    "difficulty": "Hard",
    "problem_slug": "time-taken-to-mark-all-nodes",
    "topics": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Graph"
    ],
    "description": "There exists an undirected tree with n nodes numbered 0 to n - 1. You are given a 2D integer array edges of length n - 1, where edges[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the tree.\nInitially, all nodes are unmarked. For each node i:\nReturn an array times where times[i] is the time when all nodes get marked in the tree, if you mark node i at time t = 0.\nNote that the answer for each times[i] is independent, i.e. when you mark node i all other nodes are unmarked.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Design Neighbor Sum Service",
    "problem_id": "3516",
    "frontend_id": "3242",
    "difficulty": "Easy",
    "problem_slug": "design-neighbor-sum-service",
    "topics": [
      "Array",
      "Hash Table",
      "Design",
      "Matrix",
      "Simulation"
    ],
    "description": "You are given a n x n 2D array grid containing distinct elements in the range [0, n2 - 1].\nImplement the NeighborSum class:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Shortest Distance After Road Addition Queries I",
    "problem_id": "3517",
    "frontend_id": "3243",
    "difficulty": "Medium",
    "problem_slug": "shortest-distance-after-road-addition-queries-i",
    "topics": [
      "Array",
      "Breadth-First Search",
      "Graph"
    ],
    "description": "You are given an integer n and a 2D integer array queries.\nThere are n cities numbered from 0 to n - 1. Initially, there is a unidirectional road from city i to city i + 1 for all 0 <= i < n - 1.\nqueries[i] = [ui, vi] represents the addition of a new unidirectional road from city ui to city vi. After each query, you need to find the length of the shortest path from city 0 to city n - 1.\nReturn an array answer where for each i in the range [0, queries.length - 1], answer[i] is the length of the shortest path from city 0 to city n - 1 after processing the first i + 1 queries.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Shortest Distance After Road Addition Queries II",
    "problem_id": "3514",
    "frontend_id": "3244",
    "difficulty": "Hard",
    "problem_slug": "shortest-distance-after-road-addition-queries-ii",
    "topics": [
      "Array",
      "Greedy",
      "Graph",
      "Ordered Set"
    ],
    "description": "You are given an integer n and a 2D integer array queries.\nThere are n cities numbered from 0 to n - 1. Initially, there is a unidirectional road from city i to city i + 1 for all 0 <= i < n - 1.\nqueries[i] = [ui, vi] represents the addition of a new unidirectional road from city ui to city vi. After each query, you need to find the length of the shortest path from city 0 to city n - 1.\nThere are no two queries such that queries[i][0] < queries[j][0] < queries[i][1] < queries[j][1].\nReturn an array answer where for each i in the range [0, queries.length - 1], answer[i] is the length of the shortest path from city 0 to city n - 1 after processing the first i + 1 queries.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Alternating Groups III",
    "problem_id": "3527",
    "frontend_id": "3245",
    "difficulty": "Hard",
    "problem_slug": "alternating-groups-iii",
    "topics": [
      "Array",
      "Binary Indexed Tree"
    ],
    "description": "There are some red and blue tiles arranged circularly. You are given an array of integers colors and a 2D integers array queries.\nThe color of tile i is represented by colors[i]:\nAn alternating group is a contiguous subset of tiles in the circle with alternating colors (each tile in the group except the first and last one has a different color from its adjacent tiles in the group).\nYou have to process queries of two types:\nReturn an array answer containing the results of the queries of the first type in order.\nNote that since colors represents a circle, the first and the last tiles are considered to be next to each other.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Snake in Matrix",
    "problem_id": "3533",
    "frontend_id": "3248",
    "difficulty": "Easy",
    "problem_slug": "snake-in-matrix",
    "topics": [
      "Array",
      "String",
      "Simulation"
    ],
    "description": "There is a snake in an n x n matrix grid and can move in four possible directions. Each cell in the grid is identified by the position: grid[i][j] = (i * n) + j.\nThe snake starts at cell 0 and follows a sequence of commands.\nYou are given an integer n representing the size of the grid and an array of strings commands where each command[i] is either \"UP\", \"RIGHT\", \"DOWN\", and \"LEFT\". It's guaranteed that the snake will remain within the grid boundaries throughout its movement.\nReturn the position of the final cell where the snake ends up after executing commands.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count the Number of Good Nodes",
    "problem_id": "3486",
    "frontend_id": "3249",
    "difficulty": "Medium",
    "problem_slug": "count-the-number-of-good-nodes",
    "topics": [
      "Tree",
      "Depth-First Search"
    ],
    "description": "There is an undirected tree with n nodes labeled from 0 to n - 1, and rooted at node 0. You are given a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nA node is good if all the subtrees rooted at its children have the same size.\nReturn the number of good nodes in the given tree.\nA subtree of treeName is a tree consisting of a node in treeName and all of its descendants.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Count of Monotonic Pairs I",
    "problem_id": "3535",
    "frontend_id": "3250",
    "difficulty": "Hard",
    "problem_slug": "find-the-count-of-monotonic-pairs-i",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Combinatorics",
      "Prefix Sum"
    ],
    "description": "You are given an array of positive integers nums of length n.\nWe call a pair of non-negative integer arrays (arr1, arr2) monotonic if:\nReturn the count of monotonic pairs.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Count of Monotonic Pairs II",
    "problem_id": "3536",
    "frontend_id": "3251",
    "difficulty": "Hard",
    "problem_slug": "find-the-count-of-monotonic-pairs-ii",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Combinatorics",
      "Prefix Sum"
    ],
    "description": "You are given an array of positive integers nums of length n.\nWe call a pair of non-negative integer arrays (arr1, arr2) monotonic if:\nReturn the count of monotonic pairs.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Power of K-Size Subarrays I",
    "problem_id": "3522",
    "frontend_id": "3254",
    "difficulty": "Medium",
    "problem_slug": "find-the-power-of-k-size-subarrays-i",
    "topics": [
      "Array",
      "Sliding Window"
    ],
    "description": "You are given an array of integers nums of length n and a positive integer k.\nThe power of an array is defined as:\nYou need to find the power of all subarrays of nums of size k.\nReturn an integer array results of size n - k + 1, where results[i] is the power of nums[i..(i + k - 1)].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Power of K-Size Subarrays II",
    "problem_id": "3523",
    "frontend_id": "3255",
    "difficulty": "Medium",
    "problem_slug": "find-the-power-of-k-size-subarrays-ii",
    "topics": [
      "Array",
      "Sliding Window"
    ],
    "description": "You are given an array of integers nums of length n and a positive integer k.\nThe power of an array is defined as:\nYou need to find the power of all subarrays of nums of size k.\nReturn an integer array results of size n - k + 1, where results[i] is the power of nums[i..(i + k - 1)].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Value Sum by Placing Three Rooks I",
    "problem_id": "3550",
    "frontend_id": "3256",
    "difficulty": "Hard",
    "problem_slug": "maximum-value-sum-by-placing-three-rooks-i",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix",
      "Enumeration"
    ],
    "description": "You are given a m x n 2D array board representing a chessboard, where board[i][j] represents the value of the cell (i, j).\nRooks in the same row or column attack each other. You need to place three rooks on the chessboard such that the rooks do not attack each other.\nReturn the maximum sum of the cell values on which the rooks are placed.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Value Sum by Placing Three Rooks II",
    "problem_id": "3542",
    "frontend_id": "3257",
    "difficulty": "Hard",
    "problem_slug": "maximum-value-sum-by-placing-three-rooks-ii",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix",
      "Enumeration"
    ],
    "description": "You are given a m x n 2D array board representing a chessboard, where board[i][j] represents the value of the cell (i, j).\nRooks in the same row or column attack each other. You need to place three rooks on the chessboard such that the rooks do not attack each other.\nReturn the maximum sum of the cell values on which the rooks are placed.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Substrings That Satisfy K-Constraint I",
    "problem_id": "3543",
    "frontend_id": "3258",
    "difficulty": "Easy",
    "problem_slug": "count-substrings-that-satisfy-k-constraint-i",
    "topics": [
      "String",
      "Sliding Window"
    ],
    "description": "You are given a binary string s and an integer k.\nA binary string satisfies the k-constraint if either of the following conditions holds:\nReturn an integer denoting the number of substrings of s that satisfy the k-constraint.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Energy Boost From Two Drinks",
    "problem_id": "3525",
    "frontend_id": "3259",
    "difficulty": "Medium",
    "problem_slug": "maximum-energy-boost-from-two-drinks",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given two integer arrays energyDrinkA and energyDrinkB of the same length n by a futuristic sports scientist. These arrays represent the energy boosts per hour provided by two different energy drinks, A and B, respectively.\nYou want to maximize your total energy boost by drinking one energy drink per hour. However, if you want to switch from consuming one energy drink to the other, you need to wait for one hour to cleanse your system (meaning you won't get any energy boost in that hour).\nReturn the maximum total energy boost you can gain in the next n hours.\nNote that you can start consuming either of the two energy drinks.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Largest Palindrome Divisible by K",
    "problem_id": "3552",
    "frontend_id": "3260",
    "difficulty": "Hard",
    "problem_slug": "find-the-largest-palindrome-divisible-by-k",
    "topics": [
      "Math",
      "String",
      "Dynamic Programming",
      "Greedy",
      "Number Theory"
    ],
    "description": "You are given two positive integers n and k.\nAn integer x is called k-palindromic if:\nReturn the largest integer having n digits (as a string) that is k-palindromic.\nNote that the integer must not have leading zeros.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Substrings That Satisfy K-Constraint II",
    "problem_id": "3546",
    "frontend_id": "3261",
    "difficulty": "Hard",
    "problem_slug": "count-substrings-that-satisfy-k-constraint-ii",
    "topics": [
      "Array",
      "String",
      "Binary Search",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "You are given a binary string s and an integer k.\nYou are also given a 2D integer array queries, where queries[i] = [li, ri].\nA binary string satisfies the k-constraint if either of the following conditions holds:\nReturn an integer array answer, where answer[i] is the number of substrings of s[li..ri] that satisfy the k-constraint.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Final Array State After K Multiplication Operations I",
    "problem_id": "3555",
    "frontend_id": "3264",
    "difficulty": "Easy",
    "problem_slug": "final-array-state-after-k-multiplication-operations-i",
    "topics": [
      "Array",
      "Math",
      "Heap (Priority Queue)",
      "Simulation"
    ],
    "description": "You are given an integer array nums, an integer k, and an integer multiplier.\nYou need to perform k operations on nums. In each operation:\nReturn an integer array denoting the final state of nums after performing all k operations.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Almost Equal Pairs I",
    "problem_id": "3534",
    "frontend_id": "3265",
    "difficulty": "Medium",
    "problem_slug": "count-almost-equal-pairs-i",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting",
      "Counting",
      "Enumeration"
    ],
    "description": "You are given an array nums consisting of positive integers.\nWe call two integers x and y in this problem almost equal if both integers can become equal after performing the following operation at most once:\nReturn the number of indices i and j in nums where i < j such that nums[i] and nums[j] are almost equal.\nNote that it is allowed for an integer to have leading zeros after performing an operation.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Final Array State After K Multiplication Operations II",
    "problem_id": "3556",
    "frontend_id": "3266",
    "difficulty": "Hard",
    "problem_slug": "final-array-state-after-k-multiplication-operations-ii",
    "topics": [
      "Array",
      "Heap (Priority Queue)",
      "Simulation"
    ],
    "description": "You are given an integer array nums, an integer k, and an integer multiplier.\nYou need to perform k operations on nums. In each operation:\nAfter the k operations, apply modulo 109 + 7 to every value in nums.\nReturn an integer array denoting the final state of nums after performing all k operations and then applying the modulo.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Almost Equal Pairs II",
    "problem_id": "3544",
    "frontend_id": "3267",
    "difficulty": "Hard",
    "problem_slug": "count-almost-equal-pairs-ii",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting",
      "Counting",
      "Enumeration"
    ],
    "description": "Attention: In this version, the number of operations that can be performed, has been increased to twice.\nYou are given an array nums consisting of positive integers.\nWe call two integers x and y almost equal if both integers can become equal after performing the following operation at most twice:\nReturn the number of indices i and j in nums where i < j such that nums[i] and nums[j] are almost equal.\nNote that it is allowed for an integer to have leading zeros after performing an operation.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Key of the Numbers",
    "problem_id": "3568",
    "frontend_id": "3270",
    "difficulty": "Easy",
    "problem_slug": "find-the-key-of-the-numbers",
    "topics": [
      "Math"
    ],
    "description": "You are given three positive integers num1, num2, and num3.\nThe key of num1, num2, and num3 is defined as a four-digit number such that:\nReturn the key of the three numbers without leading zeros (if any).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Hash Divided String",
    "problem_id": "3540",
    "frontend_id": "3271",
    "difficulty": "Medium",
    "problem_slug": "hash-divided-string",
    "topics": [
      "String",
      "Simulation"
    ],
    "description": "You are given a string s of length n and an integer k, where n is a multiple of k. Your task is to hash the string s into a new string called result, which has a length of n / k.\nFirst, divide s into n / k substrings, each with a length of k. Then, initialize result as an empty string.\nFor each substring in order from the beginning:\nReturn result.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Count of Good Integers",
    "problem_id": "3548",
    "frontend_id": "3272",
    "difficulty": "Hard",
    "problem_slug": "find-the-count-of-good-integers",
    "topics": [
      "Hash Table",
      "Math",
      "Combinatorics",
      "Enumeration"
    ],
    "description": "You are given two positive integers n and k.\nAn integer x is called k-palindromic if:\nAn integer is called good if its digits can be rearranged to form a k-palindromic integer. For example, for k = 2, 2020 can be rearranged to form the k-palindromic integer 2002, whereas 1010 cannot be rearranged to form a k-palindromic integer.\nReturn the count of good integers containing n digits.\nNote that any integer must not have leading zeros, neither before nor after rearrangement. For example, 1010 cannot be rearranged to form 101.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Amount of Damage Dealt to Bob",
    "problem_id": "3531",
    "frontend_id": "3273",
    "difficulty": "Hard",
    "problem_slug": "minimum-amount-of-damage-dealt-to-bob",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an integer power and two integer arrays damage and health, both having length n.\nBob has n enemies, where enemy i will deal Bob damage[i] points of damage per second while they are alive (i.e. health[i] > 0).\nEvery second, after the enemies deal damage to Bob, he chooses one of the enemies that is still alive and deals power points of damage to them.\nDetermine the minimum total amount of damage points that will be dealt to Bob before all n enemies are dead.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check if Two Chessboard Squares Have the Same Color",
    "problem_id": "3553",
    "frontend_id": "3274",
    "difficulty": "Easy",
    "problem_slug": "check-if-two-chessboard-squares-have-the-same-color",
    "topics": [
      "Math",
      "String"
    ],
    "description": "You are given two strings, coordinate1 and coordinate2, representing the coordinates of a square on an 8 x 8 chessboard.\nBelow is the chessboard for reference.\nReturn true if these two squares have the same color and false otherwise.\nThe coordinate will always represent a valid chessboard square. The coordinate will always have the letter first (indicating its column), and the number second (indicating its row).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "K-th Nearest Obstacle Queries",
    "problem_id": "3495",
    "frontend_id": "3275",
    "difficulty": "Medium",
    "problem_slug": "k-th-nearest-obstacle-queries",
    "topics": [
      "Array",
      "Heap (Priority Queue)"
    ],
    "description": "There is an infinite 2D plane.\nYou are given a positive integer k. You are also given a 2D array queries, which contains the following queries:\nAfter each query, you need to find the distance of the kth nearest obstacle from the origin.\nReturn an integer array results where results[i] denotes the kth nearest obstacle after query i, or results[i] == -1 if there are less than k obstacles.\nNote that initially there are no obstacles anywhere.\nThe distance of an obstacle at coordinate (x, y) from the origin is given by |x| + |y|.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Select Cells in Grid With Maximum Score",
    "problem_id": "3563",
    "frontend_id": "3276",
    "difficulty": "Hard",
    "problem_slug": "select-cells-in-grid-with-maximum-score",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Matrix",
      "Bitmask"
    ],
    "description": "You are given a 2D matrix grid consisting of positive integers.\nYou have to select one or more cells from the matrix such that the following conditions are satisfied:\nYour score will be the sum of the values of the selected cells.\nReturn the maximum score you can achieve.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum XOR Score Subarray Queries",
    "problem_id": "3551",
    "frontend_id": "3277",
    "difficulty": "Hard",
    "problem_slug": "maximum-xor-score-subarray-queries",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an array nums of n integers, and a 2D integer array queries of size q, where queries[i] = [li, ri].\nFor each query, you must find the maximum XOR score of any subarray of nums[li..ri].\nThe XOR score of an array a is found by repeatedly applying the following operations on a so that only one element remains, that is the score:\nReturn an array answer of size q where answer[i] is the answer to query i.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Convert Date to Binary",
    "problem_id": "3567",
    "frontend_id": "3280",
    "difficulty": "Easy",
    "problem_slug": "convert-date-to-binary",
    "topics": [
      "Math",
      "String"
    ],
    "description": "You are given a string date representing a Gregorian calendar date in the yyyy-mm-dd format.\ndate can be written in its binary representation obtained by converting year, month, and day to their binary representations without any leading zeroes and writing them down in year-month-day format.\nReturn the binary representation of date.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximize Score of Numbers in Ranges",
    "problem_id": "3485",
    "frontend_id": "3281",
    "difficulty": "Medium",
    "problem_slug": "maximize-score-of-numbers-in-ranges",
    "topics": [
      "Array",
      "Binary Search",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an array of integers start and an integer d, representing n intervals [start[i], start[i] + d].\nYou are asked to choose n integers where the ith integer must belong to the ith interval. The score of the chosen integers is defined as the minimum absolute difference between any two integers that have been chosen.\nReturn the maximum possible score of the chosen integers.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Reach End of Array With Max Score",
    "problem_id": "3528",
    "frontend_id": "3282",
    "difficulty": "Medium",
    "problem_slug": "reach-end-of-array-with-max-score",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "You are given an integer array nums of length n.\nYour goal is to start at index 0 and reach index n - 1. You can only jump to indices greater than your current index.\nThe score for a jump from index i to index j is calculated as (j - i) * nums[i].\nReturn the maximum possible total score by the time you reach the last index.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Number of Moves to Kill All Pawns",
    "problem_id": "3560",
    "frontend_id": "3283",
    "difficulty": "Hard",
    "problem_slug": "maximum-number-of-moves-to-kill-all-pawns",
    "topics": [
      "Array",
      "Math",
      "Bit Manipulation",
      "Breadth-First Search",
      "Game Theory",
      "Bitmask"
    ],
    "description": "There is a 50 x 50 chessboard with one knight and some pawns on it. You are given two integers kx and ky where (kx, ky) denotes the position of the knight, and a 2D array positions where positions[i] = [xi, yi] denotes the position of the pawns on the chessboard.\nAlice and Bob play a turn-based game, where Alice goes first. In each player's turn:\nAlice is trying to maximize the sum of the number of moves made by both players until there are no more pawns on the board, whereas Bob tries to minimize them.\nReturn the maximum total number of moves made during the game that Alice can achieve, assuming both players play optimally.\nNote that in one move, a chess knight has eight possible positions it can move to, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Indices of Stable Mountains",
    "problem_id": "3582",
    "frontend_id": "3285",
    "difficulty": "Easy",
    "problem_slug": "find-indices-of-stable-mountains",
    "topics": [
      "Array"
    ],
    "description": "There are n mountains in a row, and each mountain has a height. You are given an integer array height where height[i] represents the height of mountain i, and an integer threshold.\nA mountain is called stable if the mountain just before it (if it exists) has a height strictly greater than threshold. Note that mountain 0 is not stable.\nReturn an array containing the indices of all stable mountains in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find a Safe Walk Through a Grid",
    "problem_id": "3558",
    "frontend_id": "3286",
    "difficulty": "Medium",
    "problem_slug": "find-a-safe-walk-through-a-grid",
    "topics": [
      "Array",
      "Breadth-First Search",
      "Graph",
      "Heap (Priority Queue)",
      "Matrix",
      "Shortest Path"
    ],
    "description": "You are given an m x n binary matrix grid and an integer health.\nYou start on the upper-left corner (0, 0) and would like to get to the lower-right corner (m - 1, n - 1).\nYou can move up, down, left, or right from one cell to another adjacent cell as long as your health remains positive.\nCells (i, j) with grid[i][j] = 1 are considered unsafe and reduce your health by 1.\nReturn true if you can reach the final cell with a health value of 1 or more, and false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Maximum Sequence Value of Array",
    "problem_id": "3575",
    "frontend_id": "3287",
    "difficulty": "Hard",
    "problem_slug": "find-the-maximum-sequence-value-of-array",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation"
    ],
    "description": "You are given an integer array nums and a positive integer k.\nThe value of a sequence seq of size 2 * x is defined as:\nReturn the maximum value of any subsequence of nums having size 2 * k.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Length of the Longest Increasing Path",
    "problem_id": "3571",
    "frontend_id": "3288",
    "difficulty": "Hard",
    "problem_slug": "length-of-the-longest-increasing-path",
    "topics": [
      "Array",
      "Binary Search",
      "Sorting"
    ],
    "description": "You are given a 2D array of integers coordinates of length n and an integer k, where 0 <= k < n.\ncoordinates[i] = [xi, yi] indicates the point (xi, yi) in a 2D plane.\nAn increasing path of length m is defined as a list of points (x1, y1), (x2, y2), (x3, y3), ..., (xm, ym) such that:\nReturn the maximum length of an increasing path that contains coordinates[k].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "The Two Sneaky Numbers of Digitville",
    "problem_id": "3581",
    "frontend_id": "3289",
    "difficulty": "Easy",
    "problem_slug": "the-two-sneaky-numbers-of-digitville",
    "topics": [
      "Array",
      "Hash Table",
      "Math"
    ],
    "description": "In the town of Digitville, there was a list of numbers called nums containing integers from 0 to n - 1. Each number was supposed to appear exactly once in the list, however, two mischievous numbers sneaked in an additional time, making the list longer than usual.\nAs the town detective, your task is to find these two sneaky numbers. Return an array of size two containing the two numbers (in any order), so peace can return to Digitville.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Multiplication Score",
    "problem_id": "3518",
    "frontend_id": "3290",
    "difficulty": "Medium",
    "problem_slug": "maximum-multiplication-score",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array a of size 4 and another integer array b of size at least 4.\nYou need to choose 4 indices i0, i1, i2, and i3 from the array b such that i0 < i1 < i2 < i3. Your score will be equal to the value a[0] * b[i0] + a[1] * b[i1] + a[2] * b[i2] + a[3] * b[i3].\nReturn the maximum score you can achieve.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of Valid Strings to Form Target I",
    "problem_id": "3559",
    "frontend_id": "3291",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-valid-strings-to-form-target-i",
    "topics": [
      "Array",
      "String",
      "Binary Search",
      "Dynamic Programming",
      "Trie",
      "Segment Tree",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "description": "You are given an array of strings words and a string target.\nA string x is called valid if x is a prefix of any string in words.\nReturn the minimum number of valid strings that can be concatenated to form target. If it is not possible to form target, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Valid Strings to Form Target II",
    "problem_id": "3557",
    "frontend_id": "3292",
    "difficulty": "Hard",
    "problem_slug": "minimum-number-of-valid-strings-to-form-target-ii",
    "topics": [
      "Array",
      "String",
      "Binary Search",
      "Dynamic Programming",
      "Segment Tree",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "description": "You are given an array of strings words and a string target.\nA string x is called valid if x is a prefix of any string in words.\nReturn the minimum number of valid strings that can be concatenated to form target. If it is not possible to form target, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Report Spam Message",
    "problem_id": "3541",
    "frontend_id": "3295",
    "difficulty": "Medium",
    "problem_slug": "report-spam-message",
    "topics": [
      "Array",
      "Hash Table",
      "String"
    ],
    "description": "You are given an array of strings message and an array of strings bannedWords.\nAn array of words is considered spam if there are at least two words in it that exactly match any word in bannedWords.\nReturn true if the array message is spam, and false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Number of Seconds to Make Mountain Height Zero",
    "problem_id": "3496",
    "frontend_id": "3296",
    "difficulty": "Medium",
    "problem_slug": "minimum-number-of-seconds-to-make-mountain-height-zero",
    "topics": [
      "Array",
      "Math",
      "Binary Search",
      "Greedy",
      "Heap (Priority Queue)"
    ],
    "description": "You are given an integer mountainHeight denoting the height of a mountain.\nYou are also given an integer array workerTimes representing the work time of workers in seconds.\nThe workers work simultaneously to reduce the height of the mountain. For worker i:\nReturn an integer representing the minimum number of seconds required for the workers to make the height of the mountain 0.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Substrings That Can Be Rearranged to Contain a String I",
    "problem_id": "3573",
    "frontend_id": "3297",
    "difficulty": "Medium",
    "problem_slug": "count-substrings-that-can-be-rearranged-to-contain-a-string-i",
    "topics": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "You are given two strings word1 and word2.\nA string x is called valid if x can be rearranged to have word2 as a prefix.\nReturn the total number of valid substrings of word1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Substrings That Can Be Rearranged to Contain a String II",
    "problem_id": "3572",
    "frontend_id": "3298",
    "difficulty": "Hard",
    "problem_slug": "count-substrings-that-can-be-rearranged-to-contain-a-string-ii",
    "topics": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "You are given two strings word1 and word2.\nA string x is called valid if x can be rearranged to have word2 as a prefix.\nReturn the total number of valid substrings of word1.\nNote that the memory limits in this problem are smaller than usual, so you must implement a solution with a linear runtime complexity.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Element After Replacement With Digit Sum",
    "problem_id": "3606",
    "frontend_id": "3300",
    "difficulty": "Easy",
    "problem_slug": "minimum-element-after-replacement-with-digit-sum",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "You are given an integer array nums.\nYou replace each element in nums with the sum of its digits.\nReturn the minimum element in nums after all replacements.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximize the Total Height of Unique Towers",
    "problem_id": "3510",
    "frontend_id": "3301",
    "difficulty": "Medium",
    "problem_slug": "maximize-the-total-height-of-unique-towers",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an array maximumHeight, where maximumHeight[i] denotes the maximum height the ith tower can be assigned.\nYour task is to assign a height to each tower so that:\nReturn the maximum possible total sum of the tower heights. If it's not possible to assign heights, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Lexicographically Smallest Valid Sequence",
    "problem_id": "3584",
    "frontend_id": "3302",
    "difficulty": "Medium",
    "problem_slug": "find-the-lexicographically-smallest-valid-sequence",
    "topics": [
      "Two Pointers",
      "String",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "You are given two strings word1 and word2.\nA string x is called almost equal to y if you can change at most one character in x to make it identical to y.\nA sequence of indices seq is called valid if:\nReturn an array of size word2.length representing the lexicographically smallest valid sequence of indices. If no such sequence of indices exists, return an empty array.\nNote that the answer must represent the lexicographically smallest array, not the corresponding string formed by those indices.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Find the Occurrence of First Almost Equal Substring",
    "problem_id": "3580",
    "frontend_id": "3303",
    "difficulty": "Hard",
    "problem_slug": "find-the-occurrence-of-first-almost-equal-substring",
    "topics": [
      "String",
      "String Matching"
    ],
    "description": "You are given two strings s and pattern.\nA string x is called almost equal to y if you can change at most one character in x to make it identical to y.\nReturn the smallest starting index of a substring in s that is almost equal to pattern. If no such index exists, return -1.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Find the K-th Character in String Game I",
    "problem_id": "3600",
    "frontend_id": "3304",
    "difficulty": "Easy",
    "problem_slug": "find-the-k-th-character-in-string-game-i",
    "topics": [
      "Math",
      "Bit Manipulation",
      "Recursion",
      "Simulation"
    ],
    "description": "Alice and Bob are playing a game. Initially, Alice has a string word = \"a\".\nYou are given a positive integer k.\nNow Bob will ask Alice to perform the following operation forever:\nFor example, performing the operation on \"c\" generates \"cd\" and performing the operation on \"zb\" generates \"zbac\".\nReturn the value of the kth character in word, after enough operations have been done for word to have at least k characters.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count of Substrings Containing Every Vowel and K Consonants I",
    "problem_id": "3570",
    "frontend_id": "3305",
    "difficulty": "Medium",
    "problem_slug": "count-of-substrings-containing-every-vowel-and-k-consonants-i",
    "topics": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "You are given a string word and a non-negative integer k.\nReturn the total number of substrings of word that contain every vowel ('a', 'e', 'i', 'o', and 'u') at least once and exactly k consonants.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count of Substrings Containing Every Vowel and K Consonants II",
    "problem_id": "3569",
    "frontend_id": "3306",
    "difficulty": "Medium",
    "problem_slug": "count-of-substrings-containing-every-vowel-and-k-consonants-ii",
    "topics": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "You are given a string word and a non-negative integer k.\nReturn the total number of substrings of word that contain every vowel ('a', 'e', 'i', 'o', and 'u') at least once and exactly k consonants.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the K-th Character in String Game II",
    "problem_id": "3601",
    "frontend_id": "3307",
    "difficulty": "Hard",
    "problem_slug": "find-the-k-th-character-in-string-game-ii",
    "topics": [
      "Math",
      "Bit Manipulation",
      "Recursion"
    ],
    "description": "Alice and Bob are playing a game. Initially, Alice has a string word = \"a\".\nYou are given a positive integer k. You are also given an integer array operations, where operations[i] represents the type of the ith operation.\nNow Bob will ask Alice to perform all operations in sequence:\nReturn the value of the kth character in word after performing all the operations.\nNote that the character 'z' can be changed to 'a' in the second type of operation.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Possible Number by Binary Concatenation",
    "problem_id": "3579",
    "frontend_id": "3309",
    "difficulty": "Medium",
    "problem_slug": "maximum-possible-number-by-binary-concatenation",
    "topics": [
      "Array",
      "Bit Manipulation",
      "Enumeration"
    ],
    "description": "You are given an array of integers nums of size 3.\nReturn the maximum possible number whose binary representation can be formed by concatenating the binary representation of all elements in nums in some order.\nNote that the binary representation of any number does not contain leading zeros.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Remove Methods From Project",
    "problem_id": "3561",
    "frontend_id": "3310",
    "difficulty": "Medium",
    "problem_slug": "remove-methods-from-project",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph"
    ],
    "description": "You are maintaining a project that has n methods numbered from 0 to n - 1.\nYou are given two integers n and k, and a 2D integer array invocations, where invocations[i] = [ai, bi] indicates that method ai invokes method bi.\nThere is a known bug in method k. Method k, along with any method invoked by it, either directly or indirectly, are considered suspicious and we aim to remove them.\nA group of methods can only be removed if no method outside the group invokes any methods within it.\nReturn an array containing all the remaining methods after removing all the suspicious methods. You may return the answer in any order. If it is not possible to remove all the suspicious methods, none should be removed.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Construct 2D Grid Matching Graph Layout",
    "problem_id": "3578",
    "frontend_id": "3311",
    "difficulty": "Hard",
    "problem_slug": "construct-2d-grid-matching-graph-layout",
    "topics": [
      "Array",
      "Hash Table",
      "Graph",
      "Matrix"
    ],
    "description": "You are given a 2D integer array edges representing an undirected graph having n nodes, where edges[i] = [ui, vi] denotes an edge between nodes ui and vi.\nConstruct a 2D grid that satisfies these conditions:\nIt is guaranteed that edges can form a 2D grid that satisfies the conditions.\nReturn a 2D integer array satisfying the conditions above. If there are multiple solutions, return any of them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sorted GCD Pair Queries",
    "problem_id": "3583",
    "frontend_id": "3312",
    "difficulty": "Hard",
    "problem_slug": "sorted-gcd-pair-queries",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Binary Search",
      "Combinatorics",
      "Counting",
      "Number Theory",
      "Prefix Sum"
    ],
    "description": "You are given an integer array nums of length n and an integer array queries.\nLet gcdPairs denote an array obtained by calculating the GCD of all possible pairs (nums[i], nums[j]), where 0 <= i < j < n, and then sorting these values in ascending order.\nFor each query queries[i], you need to find the element at index queries[i] in gcdPairs.\nReturn an integer array answer, where answer[i] is the value at gcdPairs[queries[i]] for each query.\nThe term gcd(a, b) denotes the greatest common divisor of a and b.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Construct the Minimum Bitwise Array I",
    "problem_id": "3605",
    "frontend_id": "3314",
    "difficulty": "Easy",
    "problem_slug": "construct-the-minimum-bitwise-array-i",
    "topics": [
      "Array",
      "Bit Manipulation"
    ],
    "description": "You are given an array nums consisting of n prime integers.\nYou need to construct an array ans of length n, such that, for each index i, the bitwise OR of ans[i] and ans[i] + 1 is equal to nums[i], i.e. ans[i] OR (ans[i] + 1) == nums[i].\nAdditionally, you must minimize each value of ans[i] in the resulting array.\nIf it is not possible to find such a value for ans[i] that satisfies the condition, then set ans[i] = -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Construct the Minimum Bitwise Array II",
    "problem_id": "3611",
    "frontend_id": "3315",
    "difficulty": "Medium",
    "problem_slug": "construct-the-minimum-bitwise-array-ii",
    "topics": [
      "Array",
      "Bit Manipulation"
    ],
    "description": "You are given an array nums consisting of n prime integers.\nYou need to construct an array ans of length n, such that, for each index i, the bitwise OR of ans[i] and ans[i] + 1 is equal to nums[i], i.e. ans[i] OR (ans[i] + 1) == nums[i].\nAdditionally, you must minimize each value of ans[i] in the resulting array.\nIf it is not possible to find such a value for ans[i] that satisfies the condition, then set ans[i] = -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Maximum Removals From Source String",
    "problem_id": "3487",
    "frontend_id": "3316",
    "difficulty": "Medium",
    "problem_slug": "find-maximum-removals-from-source-string",
    "topics": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given a string source of size n, a string pattern that is a subsequence of source, and a sorted integer array targetIndices that contains distinct numbers in the range [0, n - 1].\nWe define an operation as removing a character at an index idx from source such that:\nPerforming an operation does not change the indices of the other characters in source. For example, if you remove 'c' from \"acb\", the character at index 2 would still be 'b'.\nReturn the maximum number of operations that can be performed.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Find the Number of Possible Ways for an Event",
    "problem_id": "3604",
    "frontend_id": "3317",
    "difficulty": "Hard",
    "problem_slug": "find-the-number-of-possible-ways-for-an-event",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "description": "You are given three integers n, x, and y.\nAn event is being held for n performers. When a performer arrives, they are assigned to one of the x stages. All performers assigned to the same stage will perform together as a band, though some stages might remain empty.\nAfter all performances are completed, the jury will award each band a score in the range [1, y].\nReturn the total number of possible ways the event can take place.\nSince the answer may be very large, return it modulo 109 + 7.\nNote that two events are considered to have been held differently if either of the following conditions is satisfied:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find X-Sum of All K-Long Subarrays I",
    "problem_id": "3610",
    "frontend_id": "3318",
    "difficulty": "Easy",
    "problem_slug": "find-x-sum-of-all-k-long-subarrays-i",
    "topics": [
      "Array",
      "Hash Table",
      "Sliding Window",
      "Heap (Priority Queue)"
    ],
    "description": "You are given an array nums of n integers and two integers k and x.\nThe x-sum of an array is calculated by the following procedure:\nNote that if an array has less than x distinct elements, its x-sum is the sum of the array.\nReturn an integer array answer of length n - k + 1 where answer[i] is the x-sum of the subarray nums[i..i + k - 1].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "K-th Largest Perfect Subtree Size in Binary Tree",
    "problem_id": "3509",
    "frontend_id": "3319",
    "difficulty": "Medium",
    "problem_slug": "k-th-largest-perfect-subtree-size-in-binary-tree",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Sorting",
      "Binary Tree"
    ],
    "description": "You are given the root of a binary tree and an integer k.\nReturn an integer denoting the size of the kth largest perfect binary subtree, or -1 if it doesn't exist.\nA perfect binary tree is a tree where all leaves are on the same level, and every parent has two children.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count The Number of Winning Sequences",
    "problem_id": "3588",
    "frontend_id": "3320",
    "difficulty": "Hard",
    "problem_slug": "count-the-number-of-winning-sequences",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "Alice and Bob are playing a fantasy battle game consisting of n rounds where they summon one of three magical creatures each round: a Fire Dragon, a Water Serpent, or an Earth Golem. In each round, players simultaneously summon their creature and are awarded points as follows:\nYou are given a string s consisting of n characters 'F', 'W', and 'E', representing the sequence of creatures Alice will summon in each round:\nBob’s sequence of moves is unknown, but it is guaranteed that Bob will never summon the same creature in two consecutive rounds. Bob beats Alice if the total number of points awarded to Bob after n rounds is strictly greater than the points awarded to Alice.\nReturn the number of distinct sequences Bob can use to beat Alice.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find X-Sum of All K-Long Subarrays II",
    "problem_id": "3592",
    "frontend_id": "3321",
    "difficulty": "Hard",
    "problem_slug": "find-x-sum-of-all-k-long-subarrays-ii",
    "topics": [
      "Array",
      "Hash Table",
      "Sliding Window",
      "Heap (Priority Queue)"
    ],
    "description": "You are given an array nums of n integers and two integers k and x.\nThe x-sum of an array is calculated by the following procedure:\nNote that if an array has less than x distinct elements, its x-sum is the sum of the array.\nReturn an integer array answer of length n - k + 1 where answer[i] is the x-sum of the subarray nums[i..i + k - 1].\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Sequence of Strings Appeared on the Screen",
    "problem_id": "3566",
    "frontend_id": "3324",
    "difficulty": "Medium",
    "problem_slug": "find-the-sequence-of-strings-appeared-on-the-screen",
    "topics": [
      "String",
      "Simulation"
    ],
    "description": "You are given a string target.\nAlice is going to type target on her computer using a special keyboard that has only two keys:\nNote that initially there is an empty string \"\" on the screen, so she can only press key 1.\nReturn a list of all strings that appear on the screen as Alice types target, in the order they appear, using the minimum key presses.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Substrings With K-Frequency Characters I",
    "problem_id": "3502",
    "frontend_id": "3325",
    "difficulty": "Medium",
    "problem_slug": "count-substrings-with-k-frequency-characters-i",
    "topics": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "description": "Given a string s and an integer k, return the total number of substrings of s where at least one character appears at least k times.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Division Operations to Make Array Non Decreasing",
    "problem_id": "3607",
    "frontend_id": "3326",
    "difficulty": "Medium",
    "problem_slug": "minimum-division-operations-to-make-array-non-decreasing",
    "topics": [
      "Array",
      "Math",
      "Greedy",
      "Number Theory"
    ],
    "description": "You are given an integer array nums.\nAny positive divisor of a natural number x that is strictly less than x is called a proper divisor of x. For example, 2 is a proper divisor of 4, while 6 is not a proper divisor of 6.\nYou are allowed to perform an operation any number of times on nums, where in each operation you select any one element from nums and divide it by its greatest proper divisor.\nReturn the minimum number of operations required to make the array non-decreasing.\nIf it is not possible to make the array non-decreasing using any number of operations, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check if DFS Strings Are Palindromes",
    "problem_id": "3603",
    "frontend_id": "3327",
    "difficulty": "Hard",
    "problem_slug": "check-if-dfs-strings-are-palindromes",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Tree",
      "Depth-First Search",
      "Hash Function"
    ],
    "description": "You are given a tree rooted at node 0, consisting of n nodes numbered from 0 to n - 1. The tree is represented by an array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to node i.\nConsider an empty string dfsStr, and define a recursive function dfs(int x) that takes a node x as a parameter and performs the following steps in order:\nNote that dfsStr is shared across all recursive calls of dfs.\nYou need to find a boolean array answer of size n, where for each index i from 0 to n - 1, you do the following:\nReturn the array answer.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Original Typed String I",
    "problem_id": "3617",
    "frontend_id": "3330",
    "difficulty": "Easy",
    "problem_slug": "find-the-original-typed-string-i",
    "topics": [
      "String"
    ],
    "description": "Alice is attempting to type a specific string on her computer. However, she tends to be clumsy and may press a key for too long, resulting in a character being typed multiple times.\nAlthough Alice tried to focus on her typing, she is aware that she may still have done this at most once.\nYou are given a string word, which represents the final output displayed on Alice's screen.\nReturn the total number of possible original strings that Alice might have intended to type.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Subtree Sizes After Changes",
    "problem_id": "3576",
    "frontend_id": "3331",
    "difficulty": "Medium",
    "problem_slug": "find-subtree-sizes-after-changes",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Tree",
      "Depth-First Search"
    ],
    "description": "You are given a tree rooted at node 0 that consists of n nodes numbered from 0 to n - 1. The tree is represented by an array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to node i.\nWe make the following changes on the tree one time simultaneously for all nodes x from 1 to n - 1:\nReturn an array answer of size n where answer[i] is the size of the subtree rooted at node i in the final tree.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Points Tourist Can Earn",
    "problem_id": "3587",
    "frontend_id": "3332",
    "difficulty": "Medium",
    "problem_slug": "maximum-points-tourist-can-earn",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "You are given two integers, n and k, along with two 2D integer arrays, stayScore and travelScore.\nA tourist is visiting a country with n cities, where each city is directly connected to every other city. The tourist's journey consists of exactly k 0-indexed days, and they can choose any city as their starting point.\nEach day, the tourist has two choices:\nReturn the maximum possible points the tourist can earn.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Original Typed String II",
    "problem_id": "3618",
    "frontend_id": "3333",
    "difficulty": "Hard",
    "problem_slug": "find-the-original-typed-string-ii",
    "topics": [
      "String",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "description": "Alice is attempting to type a specific string on her computer. However, she tends to be clumsy and may press a key for too long, resulting in a character being typed multiple times.\nYou are given a string word, which represents the final output displayed on Alice's screen. You are also given a positive integer k.\nReturn the total number of possible original strings that Alice might have intended to type, if she was trying to type a string of size at least k.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Maximum Factor Score of Array",
    "problem_id": "3593",
    "frontend_id": "3334",
    "difficulty": "Medium",
    "problem_slug": "find-the-maximum-factor-score-of-array",
    "topics": [
      "Array",
      "Math",
      "Number Theory"
    ],
    "description": "You are given an integer array nums.\nThe factor score of an array is defined as the product of the LCM and GCD of all elements of that array.\nReturn the maximum factor score of nums after removing at most one element from it.\nNote that both the LCM and GCD of a single number are the number itself, and the factor score of an empty array is 0.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Total Characters in String After Transformations I",
    "problem_id": "3629",
    "frontend_id": "3335",
    "difficulty": "Medium",
    "problem_slug": "total-characters-in-string-after-transformations-i",
    "topics": [
      "Hash Table",
      "Math",
      "String",
      "Dynamic Programming",
      "Counting"
    ],
    "description": "You are given a string s and an integer t, representing the number of transformations to perform. In one transformation, every character in s is replaced according to the following rules:\nReturn the length of the resulting string after exactly t transformations.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Number of Subsequences With Equal GCD",
    "problem_id": "3608",
    "frontend_id": "3336",
    "difficulty": "Hard",
    "problem_slug": "find-the-number-of-subsequences-with-equal-gcd",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Number Theory"
    ],
    "description": "You are given an integer array nums.\nYour task is to find the number of pairs of non-empty subsequences (seq1, seq2) of nums that satisfy the following conditions:\nReturn the total number of such pairs.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Total Characters in String After Transformations II",
    "problem_id": "3630",
    "frontend_id": "3337",
    "difficulty": "Hard",
    "problem_slug": "total-characters-in-string-after-transformations-ii",
    "topics": [
      "Hash Table",
      "Math",
      "String",
      "Dynamic Programming",
      "Counting"
    ],
    "description": "You are given a string s consisting of lowercase English letters, an integer t representing the number of transformations to perform, and an array nums of size 26. In one transformation, every character in s is replaced according to the following rules:\nReturn the length of the resulting string after exactly t transformations.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check Balanced String",
    "problem_id": "3636",
    "frontend_id": "3340",
    "difficulty": "Easy",
    "problem_slug": "check-balanced-string",
    "topics": [
      "String"
    ],
    "description": "You are given a string num consisting of only digits. A string of digits is called balanced if the sum of the digits at even indices is equal to the sum of digits at odd indices.\nReturn true if num is balanced, otherwise return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Minimum Time to Reach Last Room I",
    "problem_id": "3627",
    "frontend_id": "3341",
    "difficulty": "Medium",
    "problem_slug": "find-minimum-time-to-reach-last-room-i",
    "topics": [
      "Array",
      "Graph",
      "Heap (Priority Queue)",
      "Matrix",
      "Shortest Path"
    ],
    "description": "There is a dungeon with n x m rooms arranged as a grid.\nYou are given a 2D array moveTime of size n x m, where moveTime[i][j] represents the minimum time in seconds after which the room opens and can be moved to. You start from the room (0, 0) at time t = 0 and can move to an adjacent room. Moving between adjacent rooms takes exactly one second.\nReturn the minimum time to reach the room (n - 1, m - 1).\nTwo rooms are adjacent if they share a common wall, either horizontally or vertically.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Minimum Time to Reach Last Room II",
    "problem_id": "3628",
    "frontend_id": "3342",
    "difficulty": "Medium",
    "problem_slug": "find-minimum-time-to-reach-last-room-ii",
    "topics": [
      "Array",
      "Graph",
      "Heap (Priority Queue)",
      "Matrix",
      "Shortest Path"
    ],
    "description": "There is a dungeon with n x m rooms arranged as a grid.\nYou are given a 2D array moveTime of size n x m, where moveTime[i][j] represents the minimum time in seconds when you can start moving to that room. You start from the room (0, 0) at time t = 0 and can move to an adjacent room. Moving between adjacent rooms takes one second for one move and two seconds for the next, alternating between the two.\nReturn the minimum time to reach the room (n - 1, m - 1).\nTwo rooms are adjacent if they share a common wall, either horizontally or vertically.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Number of Balanced Permutations",
    "problem_id": "3637",
    "frontend_id": "3343",
    "difficulty": "Hard",
    "problem_slug": "count-number-of-balanced-permutations",
    "topics": [
      "Math",
      "String",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "description": "You are given a string num. A string of digits is called balanced if the sum of the digits at even indices is equal to the sum of the digits at odd indices.\nReturn the number of distinct permutations of num that are balanced.\nSince the answer may be very large, return it modulo 109 + 7.\nA permutation is a rearrangement of all the characters of a string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Smallest Divisible Digit Product I",
    "problem_id": "3626",
    "frontend_id": "3345",
    "difficulty": "Easy",
    "problem_slug": "smallest-divisible-digit-product-i",
    "topics": [
      "Math",
      "Enumeration"
    ],
    "description": "You are given two integers n and t. Return the smallest number greater than or equal to n such that the product of its digits is divisible by t.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Frequency of an Element After Performing Operations I",
    "problem_id": "3622",
    "frontend_id": "3346",
    "difficulty": "Medium",
    "problem_slug": "maximum-frequency-of-an-element-after-performing-operations-i",
    "topics": [
      "Array",
      "Binary Search",
      "Sliding Window",
      "Sorting",
      "Prefix Sum"
    ],
    "description": "You are given an integer array nums and two integers k and numOperations.\nYou must perform an operation numOperations times on nums, where in each operation you:\nReturn the maximum possible frequency of any element in nums after performing the operations.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Frequency of an Element After Performing Operations II",
    "problem_id": "3640",
    "frontend_id": "3347",
    "difficulty": "Hard",
    "problem_slug": "maximum-frequency-of-an-element-after-performing-operations-ii",
    "topics": [
      "Array",
      "Binary Search",
      "Sliding Window",
      "Sorting",
      "Prefix Sum"
    ],
    "description": "You are given an integer array nums and two integers k and numOperations.\nYou must perform an operation numOperations times on nums, where in each operation you:\nReturn the maximum possible frequency of any element in nums after performing the operations.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Smallest Divisible Digit Product II",
    "problem_id": "3635",
    "frontend_id": "3348",
    "difficulty": "Hard",
    "problem_slug": "smallest-divisible-digit-product-ii",
    "topics": [
      "Math",
      "String",
      "Backtracking",
      "Greedy",
      "Number Theory"
    ],
    "description": "You are given a string num which represents a positive integer, and an integer t.\nA number is called zero-free if none of its digits are 0.\nReturn a string representing the smallest zero-free number greater than or equal to num such that the product of its digits is divisible by t. If no such number exists, return \"-1\".\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Adjacent Increasing Subarrays Detection I",
    "problem_id": "3612",
    "frontend_id": "3349",
    "difficulty": "Easy",
    "problem_slug": "adjacent-increasing-subarrays-detection-i",
    "topics": [
      "Array"
    ],
    "description": "Given an array nums of n integers and an integer k, determine whether there exist two adjacent subarrays of length k such that both subarrays are strictly increasing. Specifically, check if there are two subarrays starting at indices a and b (a < b), where:\nReturn true if it is possible to find two such subarrays, and false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Adjacent Increasing Subarrays Detection II",
    "problem_id": "3619",
    "frontend_id": "3350",
    "difficulty": "Medium",
    "problem_slug": "adjacent-increasing-subarrays-detection-ii",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "Given an array nums of n integers, your task is to find the maximum value of k for which there exist two adjacent subarrays of length k each, such that both subarrays are strictly increasing. Specifically, check if there are two subarrays of length k starting at indices a and b (a < b), where:\nReturn the maximum possible value of k.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Good Subsequences",
    "problem_id": "3646",
    "frontend_id": "3351",
    "difficulty": "Hard",
    "problem_slug": "sum-of-good-subsequences",
    "topics": [
      "Array",
      "Hash Table",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array nums. A good subsequence is defined as a subsequence of nums where the absolute difference between any two consecutive elements in the subsequence is exactly 1.\nReturn the sum of all possible good subsequences of nums.\nSince the answer may be very large, return it modulo 109 + 7.\nNote that a subsequence of size 1 is considered good by definition.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count K-Reducible Numbers Less Than N",
    "problem_id": "3631",
    "frontend_id": "3352",
    "difficulty": "Hard",
    "problem_slug": "count-k-reducible-numbers-less-than-n",
    "topics": [
      "Math",
      "String",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "description": "You are given a binary string s representing a number n in its binary form.\nYou are also given an integer k.\nAn integer x is called k-reducible if performing the following operation at most k times reduces it to 1:\nFor example, the binary representation of 6 is \"110\". Applying the operation once reduces it to 2 (since \"110\" has two set bits). Applying the operation again to 2 (binary \"10\") reduces it to 1 (since \"10\" has one set bit).\nReturn an integer denoting the number of positive integers less than n that are k-reducible.\nSince the answer may be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Make Array Elements Equal to Zero",
    "problem_id": "3616",
    "frontend_id": "3354",
    "difficulty": "Easy",
    "problem_slug": "make-array-elements-equal-to-zero",
    "topics": [
      "Array",
      "Simulation",
      "Prefix Sum"
    ],
    "description": "You are given an integer array nums.\nStart by selecting a starting position curr such that nums[curr] == 0, and choose a movement direction of either left or right.\nAfter that, you repeat the following process:\nA selection of the initial position curr and movement direction is considered valid if every element in nums becomes 0 by the end of the process.\nReturn the number of possible valid selections.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Zero Array Transformation I",
    "problem_id": "3639",
    "frontend_id": "3355",
    "difficulty": "Medium",
    "problem_slug": "zero-array-transformation-i",
    "topics": [
      "Array",
      "Prefix Sum"
    ],
    "description": "You are given an integer array nums of length n and a 2D array queries, where queries[i] = [li, ri].\nFor each queries[i]:\nA Zero Array is an array where all elements are equal to 0.\nReturn true if it is possible to transform nums into a Zero Array after processing all the queries sequentially, otherwise return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Zero Array Transformation II",
    "problem_id": "3643",
    "frontend_id": "3356",
    "difficulty": "Medium",
    "problem_slug": "zero-array-transformation-ii",
    "topics": [
      "Array",
      "Binary Search",
      "Prefix Sum"
    ],
    "description": "You are given an integer array nums of length n and a 2D array queries where queries[i] = [li, ri, vali].\nEach queries[i] represents the following action on nums:\nA Zero Array is an array with all its elements equal to 0.\nReturn the minimum possible non-negative value of k, such that after processing the first k queries in sequence, nums becomes a Zero Array. If no such k exists, return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimize the Maximum Adjacent Element Difference",
    "problem_id": "3658",
    "frontend_id": "3357",
    "difficulty": "Hard",
    "problem_slug": "minimize-the-maximum-adjacent-element-difference",
    "topics": [
      "Array",
      "Binary Search",
      "Greedy"
    ],
    "description": "You are given an array of integers nums. Some values in nums are missing and are denoted by -1.\nYou must choose a pair of positive integers (x, y) exactly once and replace each missing element with either x or y.\nYou need to minimize the maximum absolute difference between adjacent elements of nums after replacements.\nReturn the minimum possible difference.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Stone Removal Game",
    "problem_id": "3625",
    "frontend_id": "3360",
    "difficulty": "Easy",
    "problem_slug": "stone-removal-game",
    "topics": [
      "Math",
      "Simulation"
    ],
    "description": "Alice and Bob are playing a game where they take turns removing stones from a pile, with Alice going first.\nThe player who cannot make a move loses the game.\nGiven a positive integer n, return true if Alice wins the game and false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Shift Distance Between Two Strings",
    "problem_id": "3591",
    "frontend_id": "3361",
    "difficulty": "Medium",
    "problem_slug": "shift-distance-between-two-strings",
    "topics": [
      "Array",
      "String",
      "Prefix Sum"
    ],
    "description": "You are given two strings s and t of the same length, and two integer arrays nextCost and previousCost.\nIn one operation, you can pick any index i of s, and perform either one of the following actions:\nThe shift distance is the minimum total cost of operations required to transform s into t.\nReturn the shift distance from s to t.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Zero Array Transformation III",
    "problem_id": "3647",
    "frontend_id": "3362",
    "difficulty": "Medium",
    "problem_slug": "zero-array-transformation-iii",
    "topics": [
      "Array",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)",
      "Prefix Sum"
    ],
    "description": "You are given an integer array nums of length n and a 2D array queries where queries[i] = [li, ri].\nEach queries[i] represents the following action on nums:\nA Zero Array is an array with all its elements equal to 0.\nReturn the maximum number of elements that can be removed from queries, such that nums can still be converted to a zero array using the remaining queries. If it is not possible to convert nums to a zero array, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Maximum Number of Fruits Collected",
    "problem_id": "3648",
    "frontend_id": "3363",
    "difficulty": "Hard",
    "problem_slug": "find-the-maximum-number-of-fruits-collected",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "There is a game dungeon comprised of n x n rooms arranged in a grid.\nYou are given a 2D array fruits of size n x n, where fruits[i][j] represents the number of fruits in the room (i, j). Three children will play in the game dungeon, with initial positions at the corner rooms (0, 0), (0, n - 1), and (n - 1, 0).\nThe children will make exactly n - 1 moves according to the following rules to reach the room (n - 1, n - 1):\nWhen a child enters a room, they will collect all the fruits there. If two or more children enter the same room, only one child will collect the fruits, and the room will be emptied after they leave.\nReturn the maximum number of fruits the children can collect from the dungeon.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Positive Sum Subarray ",
    "problem_id": "3644",
    "frontend_id": "3364",
    "difficulty": "Easy",
    "problem_slug": "minimum-positive-sum-subarray",
    "topics": [
      "Array",
      "Sliding Window",
      "Prefix Sum"
    ],
    "description": "You are given an integer array nums and two integers l and r. Your task is to find the minimum sum of a subarray whose size is between l and r (inclusive) and whose sum is greater than 0.\nReturn the minimum sum of such a subarray. If no such subarray exists, return -1.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Rearrange K Substrings to Form Target String",
    "problem_id": "3595",
    "frontend_id": "3365",
    "difficulty": "Medium",
    "problem_slug": "rearrange-k-substrings-to-form-target-string",
    "topics": [
      "Hash Table",
      "String",
      "Sorting"
    ],
    "description": "You are given two strings s and t, both of which are anagrams of each other, and an integer k.\nYour task is to determine whether it is possible to split the string s into k equal-sized substrings, rearrange the substrings, and concatenate them in any order to create a new string that matches the given string t.\nReturn true if this is possible, otherwise, return false.\nAn anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once.\nA substring is a contiguous non-empty sequence of characters within a string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Array Sum",
    "problem_id": "3654",
    "frontend_id": "3366",
    "difficulty": "Medium",
    "problem_slug": "minimum-array-sum",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array nums and three integers k, op1, and op2.\nYou can perform the following operations on nums:\nNote: Both operations can be applied to the same index, but at most once each.\nReturn the minimum possible sum of all elements in nums after performing any number of operations.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximize Sum of Weights after Edge Removals",
    "problem_id": "3675",
    "frontend_id": "3367",
    "difficulty": "Hard",
    "problem_slug": "maximize-sum-of-weights-after-edge-removals",
    "topics": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search"
    ],
    "description": "There exists an undirected tree with n nodes numbered 0 to n - 1. You are given a 2D integer array edges of length n - 1, where edges[i] = [ui, vi, wi] indicates that there is an edge between nodes ui and vi with weight wi in the tree.\nYour task is to remove zero or more edges such that:\nReturn the maximum possible sum of weights for the remaining edges after making the necessary removals.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Smallest Number With All Set Bits",
    "problem_id": "3676",
    "frontend_id": "3370",
    "difficulty": "Easy",
    "problem_slug": "smallest-number-with-all-set-bits",
    "topics": [
      "Math",
      "Bit Manipulation"
    ],
    "description": "You are given a positive number n.\nReturn the smallest number x greater than or equal to n, such that the binary representation of x contains only set bits\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Identify the Largest Outlier in an Array",
    "problem_id": "3594",
    "frontend_id": "3371",
    "difficulty": "Medium",
    "problem_slug": "identify-the-largest-outlier-in-an-array",
    "topics": [
      "Array",
      "Hash Table",
      "Counting",
      "Enumeration"
    ],
    "description": "You are given an integer array nums. This array contains n elements, where exactly n - 2 elements are special numbers. One of the remaining two elements is the sum of these special numbers, and the other is an outlier.\nAn outlier is defined as a number that is neither one of the original special numbers nor the element representing the sum of those numbers.\nNote that special numbers, the sum element, and the outlier must have distinct indices, but may share the same value.\nReturn the largest potential outlier in nums.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximize the Number of Target Nodes After Connecting Trees I",
    "problem_id": "3633",
    "frontend_id": "3372",
    "difficulty": "Medium",
    "problem_slug": "maximize-the-number-of-target-nodes-after-connecting-trees-i",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search"
    ],
    "description": "There exist two undirected trees with n and m nodes, with distinct labels in ranges [0, n - 1] and [0, m - 1], respectively.\nYou are given two 2D integer arrays edges1 and edges2 of lengths n - 1 and m - 1, respectively, where edges1[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the first tree and edges2[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the second tree. You are also given an integer k.\nNode u is target to node v if the number of edges on the path from u to v is less than or equal to k. Note that a node is always target to itself.\nReturn an array of n integers answer, where answer[i] is the maximum possible number of nodes target to node i of the first tree if you have to connect one node from the first tree to another node in the second tree.\nNote that queries are independent from each other. That is, for every query you will remove the added edge before proceeding to the next query.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximize the Number of Target Nodes After Connecting Trees II",
    "problem_id": "3645",
    "frontend_id": "3373",
    "difficulty": "Hard",
    "problem_slug": "maximize-the-number-of-target-nodes-after-connecting-trees-ii",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search"
    ],
    "description": "There exist two undirected trees with n and m nodes, labeled from [0, n - 1] and [0, m - 1], respectively.\nYou are given two 2D integer arrays edges1 and edges2 of lengths n - 1 and m - 1, respectively, where edges1[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the first tree and edges2[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the second tree.\nNode u is target to node v if the number of edges on the path from u to v is even. Note that a node is always target to itself.\nReturn an array of n integers answer, where answer[i] is the maximum possible number of nodes that are target to node i of the first tree if you had to connect one node from the first tree to another node in the second tree.\nNote that queries are independent from each other. That is, for every query you will remove the added edge before proceeding to the next query.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "First Letter Capitalization II",
    "problem_id": "3711",
    "frontend_id": "3374",
    "difficulty": "Hard",
    "problem_slug": "first-letter-capitalization-ii",
    "topics": [
      "Database"
    ],
    "description": "Table: user_content\nWrite a solution to transform the text in the content_text column by applying the following rules:\nReturn the result table that includes both the original content_text and the modified text following the above rules.\nThe result format is in the following example.\nExample:"
  },
  {
    "title": "Minimum Operations to Make Array Values Equal to K",
    "problem_id": "3621",
    "frontend_id": "3375",
    "difficulty": "Easy",
    "problem_slug": "minimum-operations-to-make-array-values-equal-to-k",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "You are given an integer array nums and an integer k.\nAn integer h is called valid if all values in the array that are strictly greater than h are identical.\nFor example, if nums = [10, 8, 10, 8], a valid integer is h = 9 because all nums[i] > 9 are equal to 10, but 5 is not a valid integer.\nYou are allowed to perform the following operation on nums:\nReturn the minimum number of operations required to make every element in nums equal to k. If it is impossible to make all elements equal to k, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Time to Break Locks I",
    "problem_id": "3649",
    "frontend_id": "3376",
    "difficulty": "Medium",
    "problem_slug": "minimum-time-to-break-locks-i",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Depth-First Search",
      "Bitmask"
    ],
    "description": "Bob is stuck in a dungeon and must break n locks, each requiring some amount of energy to break. The required energy for each lock is stored in an array called strength where strength[i] indicates the energy needed to break the ith lock.\nTo break a lock, Bob uses a sword with the following characteristics:\nYour task is to determine the minimum time in minutes required for Bob to break all n locks and escape the dungeon.\nReturn the minimum time required for Bob to break all n locks.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Digit Operations to Make Two Integers Equal",
    "problem_id": "3655",
    "frontend_id": "3377",
    "difficulty": "Medium",
    "problem_slug": "digit-operations-to-make-two-integers-equal",
    "topics": [
      "Math",
      "Graph",
      "Heap (Priority Queue)",
      "Number Theory",
      "Shortest Path"
    ],
    "description": "You are given two integers n and m that consist of the same number of digits.\nYou can perform the following operations any number of times:\nThe integer n must not be a prime number at any point, including its original value and after each operation.\nThe cost of a transformation is the sum of all values that n takes throughout the operations performed.\nReturn the minimum cost to transform n into m. If it is impossible, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Connected Components in LCM Graph",
    "problem_id": "3680",
    "frontend_id": "3378",
    "difficulty": "Hard",
    "problem_slug": "count-connected-components-in-lcm-graph",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Union Find",
      "Number Theory"
    ],
    "description": "You are given an array of integers nums of size n and a positive integer threshold.\nThere is a graph consisting of n nodes with the ith node having a value of nums[i]. Two nodes i and j in the graph are connected via an undirected edge if lcm(nums[i], nums[j]) <= threshold.\nReturn the number of connected components in this graph.\nA connected component is a subgraph of a graph in which there exists a path between any two vertices, and no vertex of the subgraph shares an edge with a vertex outside of the subgraph.\nThe term lcm(a, b) denotes the least common multiple of a and b.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Transformed Array",
    "problem_id": "3651",
    "frontend_id": "3379",
    "difficulty": "Easy",
    "problem_slug": "transformed-array",
    "topics": [
      "Array",
      "Simulation"
    ],
    "description": "You are given an integer array nums that represents a circular array. Your task is to create a new array result of the same size, following these rules:\nReturn the new array result.\nNote: Since nums is circular, moving past the last element wraps around to the beginning, and moving before the first element wraps back to the end.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Area Rectangle With Point Constraints I",
    "problem_id": "3681",
    "frontend_id": "3380",
    "difficulty": "Medium",
    "problem_slug": "maximum-area-rectangle-with-point-constraints-i",
    "topics": [
      "Array",
      "Math",
      "Binary Indexed Tree",
      "Segment Tree",
      "Geometry",
      "Sorting",
      "Enumeration"
    ],
    "description": "You are given an array points where points[i] = [xi, yi] represents the coordinates of a point on an infinite plane.\nYour task is to find the maximum area of a rectangle that:\nReturn the maximum area that you can obtain or -1 if no such rectangle is possible.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Subarray Sum With Length Divisible by K",
    "problem_id": "3653",
    "frontend_id": "3381",
    "difficulty": "Medium",
    "problem_slug": "maximum-subarray-sum-with-length-divisible-by-k",
    "topics": [
      "Array",
      "Hash Table",
      "Prefix Sum"
    ],
    "description": "You are given an array of integers nums and an integer k.\nReturn the maximum sum of a subarray of nums, such that the size of the subarray is divisible by k.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Area Rectangle With Point Constraints II",
    "problem_id": "3689",
    "frontend_id": "3382",
    "difficulty": "Hard",
    "problem_slug": "maximum-area-rectangle-with-point-constraints-ii",
    "topics": [
      "Array",
      "Math",
      "Binary Indexed Tree",
      "Segment Tree",
      "Geometry",
      "Sorting"
    ],
    "description": "There are n points on an infinite plane. You are given two integer arrays xCoord and yCoord where (xCoord[i], yCoord[i]) represents the coordinates of the ith point.\nYour task is to find the maximum area of a rectangle that:\nReturn the maximum area that you can obtain or -1 if no such rectangle is possible.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Button with Longest Push Time",
    "problem_id": "3632",
    "frontend_id": "3386",
    "difficulty": "Easy",
    "problem_slug": "button-with-longest-push-time",
    "topics": [
      "Array"
    ],
    "description": "You are given a 2D array events which represents a sequence of events where a child pushes a series of buttons on a keyboard.\nEach events[i] = [indexi, timei] indicates that the button at index indexi was pressed at time timei.\nReturn the index of the button that took the longest time to push. If multiple buttons have the same longest time, return the button with the smallest index.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximize Amount After Two Days of Conversions",
    "problem_id": "3613",
    "frontend_id": "3387",
    "difficulty": "Medium",
    "problem_slug": "maximize-amount-after-two-days-of-conversions",
    "topics": [
      "Array",
      "String",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph"
    ],
    "description": "You are given a string initialCurrency, and you start with 1.0 of initialCurrency.\nYou are also given four arrays with currency pairs (strings) and rates (real numbers):\nYou can perform any number of conversions, including zero, using rates1 on day 1, followed by any number of additional conversions, including zero, using rates2 on day 2.\nReturn the maximum amount of initialCurrency you can have after performing any number of conversions on both days in order.\nNote: Conversion rates are valid, and there will be no contradictions in the rates for either day. The rates for the days are independent of each other.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Beautiful Splits in an Array",
    "problem_id": "3686",
    "frontend_id": "3388",
    "difficulty": "Medium",
    "problem_slug": "count-beautiful-splits-in-an-array",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an array nums.\nA split of an array nums is beautiful if:\nReturn the number of ways you can make this split.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Make Character Frequencies Equal",
    "problem_id": "3638",
    "frontend_id": "3389",
    "difficulty": "Hard",
    "problem_slug": "minimum-operations-to-make-character-frequencies-equal",
    "topics": [
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Counting",
      "Enumeration"
    ],
    "description": "You are given a string s.\nA string t is called good if all characters of t occur the same number of times.\nYou can perform the following operations any number of times:\nNote that you cannot change 'z' to 'a' using the third operation.\nReturn the minimum number of operations required to make s good.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Subarrays of Length Three With a Condition",
    "problem_id": "3685",
    "frontend_id": "3392",
    "difficulty": "Easy",
    "problem_slug": "count-subarrays-of-length-three-with-a-condition",
    "topics": [
      "Array"
    ],
    "description": "Given an integer array nums, return the number of subarrays of length 3 such that the sum of the first and third numbers equals exactly half of the second number.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Paths With the Given XOR Value",
    "problem_id": "3659",
    "frontend_id": "3393",
    "difficulty": "Medium",
    "problem_slug": "count-paths-with-the-given-xor-value",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Matrix"
    ],
    "description": "You are given a 2D integer array grid with size m x n. You are also given an integer k.\nYour task is to calculate the number of paths you can take from the top-left cell (0, 0) to the bottom-right cell (m - 1, n - 1) satisfying the following constraints:\nReturn the total number of such paths.\nSince the answer can be very large, return the result modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Check if Grid can be Cut into Sections",
    "problem_id": "3657",
    "frontend_id": "3394",
    "difficulty": "Medium",
    "problem_slug": "check-if-grid-can-be-cut-into-sections",
    "topics": [
      "Array",
      "Sorting"
    ],
    "description": "You are given an integer n representing the dimensions of an n x n grid, with the origin at the bottom-left corner of the grid. You are also given a 2D array of coordinates rectangles, where rectangles[i] is in the form [startx, starty, endx, endy], representing a rectangle on the grid. Each rectangle is defined as follows:\nNote that the rectangles do not overlap. Your task is to determine if it is possible to make either two horizontal or two vertical cuts on the grid such that:\nReturn true if such cuts can be made; otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Subsequences with a Unique Middle Mode I",
    "problem_id": "3700",
    "frontend_id": "3395",
    "difficulty": "Hard",
    "problem_slug": "subsequences-with-a-unique-middle-mode-i",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Combinatorics"
    ],
    "description": "Given an integer array nums, find the number of subsequences of size 5 of nums with a unique middle mode.\nSince the answer may be very large, return it modulo 109 + 7.\nA mode of a sequence of numbers is defined as the element that appears the maximum number of times in the sequence.\nA sequence of numbers contains a unique mode if it has only one mode.\nA sequence of numbers seq of size 5 contains a unique middle mode if the middle element (seq[2]) is a unique mode.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Number of Operations to Make Elements in Array Distinct",
    "problem_id": "3656",
    "frontend_id": "3396",
    "difficulty": "Easy",
    "problem_slug": "minimum-number-of-operations-to-make-elements-in-array-distinct",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "You are given an integer array nums. You need to ensure that the elements in the array are distinct. To achieve this, you can perform the following operation any number of times:\nNote that an empty array is considered to have distinct elements. Return the minimum number of operations needed to make the elements in the array distinct.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Number of Distinct Elements After Operations",
    "problem_id": "3620",
    "frontend_id": "3397",
    "difficulty": "Medium",
    "problem_slug": "maximum-number-of-distinct-elements-after-operations",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an integer array nums and an integer k.\nYou are allowed to perform the following operation on each element of the array at most once:\nReturn the maximum possible number of distinct elements in nums after performing the operations.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Smallest Substring With Identical Characters I",
    "problem_id": "3690",
    "frontend_id": "3398",
    "difficulty": "Hard",
    "problem_slug": "smallest-substring-with-identical-characters-i",
    "topics": [
      "Array",
      "Binary Search",
      "Enumeration"
    ],
    "description": "You are given a binary string s of length n and an integer numOps.\nYou are allowed to perform the following operation on s at most numOps times:\nYou need to minimize the length of the longest substring of s such that all the characters in the substring are identical.\nReturn the minimum length after the operations.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Smallest Substring With Identical Characters II",
    "problem_id": "3706",
    "frontend_id": "3399",
    "difficulty": "Hard",
    "problem_slug": "smallest-substring-with-identical-characters-ii",
    "topics": [
      "String",
      "Binary Search"
    ],
    "description": "You are given a binary string s of length n and an integer numOps.\nYou are allowed to perform the following operation on s at most numOps times:\nYou need to minimize the length of the longest substring of s such that all the characters in the substring are identical.\nReturn the minimum length after the operations.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Make Columns Strictly Increasing",
    "problem_id": "3691",
    "frontend_id": "3402",
    "difficulty": "Easy",
    "problem_slug": "minimum-operations-to-make-columns-strictly-increasing",
    "topics": [
      "Array",
      "Greedy",
      "Matrix"
    ],
    "description": "You are given a m x n matrix grid consisting of non-negative integers.\nIn one operation, you can increment the value of any grid[i][j] by 1.\nReturn the minimum number of operations needed to make all columns of grid strictly increasing.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Lexicographically Largest String From the Box I",
    "problem_id": "3683",
    "frontend_id": "3403",
    "difficulty": "Medium",
    "problem_slug": "find-the-lexicographically-largest-string-from-the-box-i",
    "topics": [
      "Two Pointers",
      "String",
      "Enumeration"
    ],
    "description": "You are given a string word, and an integer numFriends.\nAlice is organizing a game for her numFriends friends. There are multiple rounds in the game, where in each round:\nFind the lexicographically largest string from the box after all the rounds are finished.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Special Subsequences",
    "problem_id": "3699",
    "frontend_id": "3404",
    "difficulty": "Medium",
    "problem_slug": "count-special-subsequences",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Enumeration"
    ],
    "description": "You are given an array nums consisting of positive integers.\nA special subsequence is defined as a subsequence of length 4, represented by indices (p, q, r, s), where p < q < r < s. This subsequence must satisfy the following conditions:\nReturn the number of different special subsequences in nums.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count the Number of Arrays with K Matching Adjacent Elements",
    "problem_id": "3682",
    "frontend_id": "3405",
    "difficulty": "Hard",
    "problem_slug": "count-the-number-of-arrays-with-k-matching-adjacent-elements",
    "topics": [
      "Math",
      "Combinatorics"
    ],
    "description": "You are given three integers n, m, k. A good array arr of size n is defined as follows:\nReturn the number of good arrays that can be formed.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Substring Matching Pattern",
    "problem_id": "3684",
    "frontend_id": "3407",
    "difficulty": "Easy",
    "problem_slug": "substring-matching-pattern",
    "topics": [
      "String",
      "String Matching"
    ],
    "description": "You are given a string s and a pattern string p, where p contains exactly one '*' character.\nThe '*' in p can be replaced with any sequence of zero or more characters.\nReturn true if p can be made a substring of s, and false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Design Task Manager",
    "problem_id": "3678",
    "frontend_id": "3408",
    "difficulty": "Medium",
    "problem_slug": "design-task-manager",
    "topics": [
      "Hash Table",
      "Design",
      "Heap (Priority Queue)",
      "Ordered Set"
    ],
    "description": "There is a task management system that allows users to manage their tasks, each associated with a priority. The system should efficiently handle adding, modifying, executing, and removing tasks.\nImplement the TaskManager class:\nNote that a user may be assigned multiple tasks.\nExample 1:\nConstraints:"
  },
  {
    "title": "Longest Subsequence With Decreasing Adjacent Difference",
    "problem_id": "3716",
    "frontend_id": "3409",
    "difficulty": "Medium",
    "problem_slug": "longest-subsequence-with-decreasing-adjacent-difference",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an array of integers nums.\nYour task is to find the length of the longest subsequence seq of nums, such that the absolute differences between consecutive elements form a non-increasing sequence of integers. In other words, for a subsequence seq0, seq1, seq2, ..., seqm of nums, |seq1 - seq0| >= |seq2 - seq1| >= ... >= |seqm - seqm - 1|.\nReturn the length of such a subsequence.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximize Subarray Sum After Removing All Occurrences of One Element",
    "problem_id": "3688",
    "frontend_id": "3410",
    "difficulty": "Hard",
    "problem_slug": "maximize-subarray-sum-after-removing-all-occurrences-of-one-element",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Segment Tree"
    ],
    "description": "You are given an integer array nums.\nYou can do the following operation on the array at most once:\nReturn the maximum subarray sum across all possible resulting arrays.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Subarray With Equal Products",
    "problem_id": "3702",
    "frontend_id": "3411",
    "difficulty": "Easy",
    "problem_slug": "maximum-subarray-with-equal-products",
    "topics": [
      "Array",
      "Math",
      "Sliding Window",
      "Enumeration",
      "Number Theory"
    ],
    "description": "You are given an array of positive integers nums.\nAn array arr is called product equivalent if prod(arr) == lcm(arr) * gcd(arr), where:\nReturn the length of the longest product equivalent subarray of nums.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Mirror Score of a String",
    "problem_id": "3634",
    "frontend_id": "3412",
    "difficulty": "Medium",
    "problem_slug": "find-mirror-score-of-a-string",
    "topics": [
      "Hash Table",
      "String",
      "Stack",
      "Simulation"
    ],
    "description": "You are given a string s.\nWe define the mirror of a letter in the English alphabet as its corresponding letter when the alphabet is reversed. For example, the mirror of 'a' is 'z', and the mirror of 'y' is 'b'.\nInitially, all characters in the string s are unmarked.\nYou start with a score of 0, and you perform the following process on the string s:\nReturn the total score at the end of the process.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Coins From K Consecutive Bags",
    "problem_id": "3715",
    "frontend_id": "3413",
    "difficulty": "Medium",
    "problem_slug": "maximum-coins-from-k-consecutive-bags",
    "topics": [
      "Array",
      "Binary Search",
      "Greedy",
      "Sliding Window",
      "Sorting",
      "Prefix Sum"
    ],
    "description": "There are an infinite amount of bags on a number line, one bag for each coordinate. Some of these bags contain coins.\nYou are given a 2D array coins, where coins[i] = [li, ri, ci] denotes that every bag from li to ri contains ci coins.\nThe segments that coins contain are non-overlapping.\nYou are also given an integer k.\nReturn the maximum amount of coins you can obtain by collecting k consecutive bags.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Score of Non-overlapping Intervals",
    "problem_id": "3562",
    "frontend_id": "3414",
    "difficulty": "Hard",
    "problem_slug": "maximum-score-of-non-overlapping-intervals",
    "topics": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Sorting"
    ],
    "description": "You are given a 2D integer array intervals, where intervals[i] = [li, ri, weighti]. Interval i starts at position li and ends at ri, and has a weight of weighti. You can choose up to 4 non-overlapping intervals. The score of the chosen intervals is defined as the total sum of their weights.\nReturn the lexicographically smallest array of at most 4 indices from intervals with maximum score, representing your choice of non-overlapping intervals.\nTwo intervals are said to be non-overlapping if they do not share any points. In particular, intervals sharing a left or right boundary are considered overlapping.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Zigzag Grid Traversal With Skip",
    "problem_id": "3708",
    "frontend_id": "3417",
    "difficulty": "Easy",
    "problem_slug": "zigzag-grid-traversal-with-skip",
    "topics": [
      "Array",
      "Matrix",
      "Simulation"
    ],
    "description": "You are given an m x n 2D array grid of positive integers.\nYour task is to traverse grid in a zigzag pattern while skipping every alternate cell.\nZigzag pattern traversal is defined as following the below actions:\nNote that you must skip every alternate cell during the traversal.\nReturn an array of integers result containing, in order, the value of the cells visited during the zigzag traversal with skips.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Amount of Money Robot Can Earn",
    "problem_id": "3677",
    "frontend_id": "3418",
    "difficulty": "Medium",
    "problem_slug": "maximum-amount-of-money-robot-can-earn",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "You are given an m x n grid. A robot starts at the top-left corner of the grid (0, 0) and wants to reach the bottom-right corner (m - 1, n - 1). The robot can move either right or down at any point in time.\nThe grid contains a value coins[i][j] in each cell:\nThe robot has a special ability to neutralize robbers in at most 2 cells on its path, preventing them from stealing coins in those cells.\nNote: The robot's total coins can be negative.\nReturn the maximum profit the robot can gain on the route.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimize the Maximum Edge Weight of Graph",
    "problem_id": "3720",
    "frontend_id": "3419",
    "difficulty": "Medium",
    "problem_slug": "minimize-the-maximum-edge-weight-of-graph",
    "topics": [
      "Binary Search",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Shortest Path"
    ],
    "description": "You are given two integers, n and threshold, as well as a directed weighted graph of n nodes numbered from 0 to n - 1. The graph is represented by a 2D integer array edges, where edges[i] = [Ai, Bi, Wi] indicates that there is an edge going from node Ai to node Bi with weight Wi.\nYou have to remove some edges from this graph (possibly none), so that it satisfies the following conditions:\nReturn the minimum possible value of the maximum edge weight after removing the necessary edges. If it is impossible for all conditions to be satisfied, return -1.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Count Non-Decreasing Subarrays After K Operations",
    "problem_id": "3674",
    "frontend_id": "3420",
    "difficulty": "Hard",
    "problem_slug": "count-non-decreasing-subarrays-after-k-operations",
    "topics": [
      "Array",
      "Stack",
      "Segment Tree",
      "Queue",
      "Sliding Window",
      "Monotonic Stack",
      "Monotonic Queue"
    ],
    "description": "You are given an array nums of n integers and an integer k.\nFor each subarray of nums, you can apply up to k operations on it. In each operation, you increment any element of the subarray by 1.\nNote that each subarray is considered independently, meaning changes made to one subarray do not persist to another.\nReturn the number of subarrays that you can make non-decreasing ​​​​​after performing at most k operations.\nAn array is said to be non-decreasing if each element is greater than or equal to its previous element, if it exists.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Students Who Improved",
    "problem_id": "3767",
    "frontend_id": "3421",
    "difficulty": "Medium",
    "problem_slug": "find-students-who-improved",
    "topics": [
      "Database"
    ],
    "description": "Table: Scores\nWrite a solution to find the students who have shown improvement. A student is considered to have shown improvement if they meet both of these conditions:\nReturn the result table ordered by student_id, subject in ascending order.\nThe result format is in the following example.\nExample:"
  },
  {
    "title": "Maximum Difference Between Adjacent Elements in a Circular Array",
    "problem_id": "3747",
    "frontend_id": "3423",
    "difficulty": "Easy",
    "problem_slug": "maximum-difference-between-adjacent-elements-in-a-circular-array",
    "topics": [
      "Array"
    ],
    "description": "Given a circular array nums, find the maximum absolute difference between adjacent elements.\nNote: In a circular array, the first and last elements are adjacent.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Cost to Make Arrays Identical",
    "problem_id": "3712",
    "frontend_id": "3424",
    "difficulty": "Medium",
    "problem_slug": "minimum-cost-to-make-arrays-identical",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given two integer arrays arr and brr of length n, and an integer k. You can perform the following operations on arr any number of times:\nReturn the minimum total cost to make arr equal to brr.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Special Path",
    "problem_id": "3687",
    "frontend_id": "3425",
    "difficulty": "Hard",
    "problem_slug": "longest-special-path",
    "topics": [
      "Array",
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Prefix Sum"
    ],
    "description": "You are given an undirected tree rooted at node 0 with n nodes numbered from 0 to n - 1, represented by a 2D array edges of length n - 1, where edges[i] = [ui, vi, lengthi] indicates an edge between nodes ui and vi with length lengthi. You are also given an integer array nums, where nums[i] represents the value at node i.\nA special path is defined as a downward path from an ancestor node to a descendant node such that all the values of the nodes in that path are unique.\nNote that a path may start and end at the same node.\nReturn an array result of size 2, where result[0] is the length of the longest special path, and result[1] is the minimum number of nodes in all possible longest special paths.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Manhattan Distances of All Arrangements of Pieces",
    "problem_id": "3739",
    "frontend_id": "3426",
    "difficulty": "Hard",
    "problem_slug": "manhattan-distances-of-all-arrangements-of-pieces",
    "topics": [
      "Math",
      "Combinatorics"
    ],
    "description": "You are given three integers m, n, and k.\nThere is a rectangular grid of size m × n containing k identical pieces. Return the sum of Manhattan distances between every pair of pieces over all valid arrangements of pieces.\nA valid arrangement is a placement of all k pieces on the grid with at most one piece per cell.\nSince the answer may be very large, return it modulo 109 + 7.\nThe Manhattan Distance between two cells (xi, yi) and (xj, yj) is |xi - xj| + |yi - yj|.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of Variable Length Subarrays",
    "problem_id": "3731",
    "frontend_id": "3427",
    "difficulty": "Easy",
    "problem_slug": "sum-of-variable-length-subarrays",
    "topics": [
      "Array",
      "Prefix Sum"
    ],
    "description": "You are given an integer array nums of size n. For each index i where 0 <= i < n, define a subarray nums[start ... i] where start = max(0, i - nums[i]).\nReturn the total sum of all elements from the subarray defined for each index in the array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum and Minimum Sums of at Most Size K Subsequences",
    "problem_id": "3714",
    "frontend_id": "3428",
    "difficulty": "Medium",
    "problem_slug": "maximum-and-minimum-sums-of-at-most-size-k-subsequences",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Sorting",
      "Combinatorics"
    ],
    "description": "You are given an integer array nums and a positive integer k. Return the sum of the maximum and minimum elements of all subsequences of nums with at most k elements.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Paint House IV",
    "problem_id": "3737",
    "frontend_id": "3429",
    "difficulty": "Medium",
    "problem_slug": "paint-house-iv",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an even integer n representing the number of houses arranged in a straight line, and a 2D array cost of size n x 3, where cost[i][j] represents the cost of painting house i with color j + 1.\nThe houses will look beautiful if they satisfy the following conditions:\nReturn the minimum cost to paint the houses such that they look beautiful.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum and Minimum Sums of at Most Size K Subarrays",
    "problem_id": "3725",
    "frontend_id": "3430",
    "difficulty": "Hard",
    "problem_slug": "maximum-and-minimum-sums-of-at-most-size-k-subarrays",
    "topics": [
      "Array",
      "Math",
      "Stack",
      "Monotonic Stack"
    ],
    "description": "You are given an integer array nums and a positive integer k. Return the sum of the maximum and minimum elements of all subarrays with at most k elements.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Partitions with Even Sum Difference",
    "problem_id": "3704",
    "frontend_id": "3432",
    "difficulty": "Easy",
    "problem_slug": "count-partitions-with-even-sum-difference",
    "topics": [
      "Array",
      "Math",
      "Prefix Sum"
    ],
    "description": "You are given an integer array nums of length n.\nA partition is defined as an index i where 0 <= i < n - 1, splitting the array into two non-empty subarrays such that:\nReturn the number of partitions where the difference between the sum of the left and right subarrays is even.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Mentions Per User",
    "problem_id": "3721",
    "frontend_id": "3433",
    "difficulty": "Medium",
    "problem_slug": "count-mentions-per-user",
    "topics": [
      "Array",
      "Math",
      "Sorting",
      "Simulation"
    ],
    "description": "You are given an integer numberOfUsers representing the total number of users and an array events of size n x 3.\nEach events[i] can be either of the following two types:\nReturn an array mentions where mentions[i] represents the number of mentions the user with id i has across all MESSAGE events.\nAll users are initially online, and if a user goes offline or comes back online, their status change is processed before handling any message event that occurs at the same timestamp.\nNote that a user can be mentioned multiple times in a single message event, and each mention should be counted separately.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Frequency After Subarray Operation",
    "problem_id": "3751",
    "frontend_id": "3434",
    "difficulty": "Medium",
    "problem_slug": "maximum-frequency-after-subarray-operation",
    "topics": [
      "Array",
      "Hash Table",
      "Dynamic Programming",
      "Greedy",
      "Enumeration",
      "Prefix Sum"
    ],
    "description": "You are given an array nums of length n. You are also given an integer k.\nYou perform the following operation on nums once:\nFind the maximum frequency of the value k after the operation.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Frequencies of Shortest Supersequences",
    "problem_id": "3713",
    "frontend_id": "3435",
    "difficulty": "Hard",
    "problem_slug": "frequencies-of-shortest-supersequences",
    "topics": [
      "Array",
      "String",
      "Bit Manipulation",
      "Graph",
      "Topological Sort",
      "Enumeration"
    ],
    "description": "You are given an array of strings words. Find all shortest common supersequences (SCS) of words that are not permutations of each other.\nA shortest common supersequence is a string of minimum length that contains each string in words as a subsequence.\nReturn a 2D array of integers freqs that represent all the SCSs. Each freqs[i] is an array of size 26, representing the frequency of each letter in the lowercase English alphabet for a single SCS. You may return the frequency arrays in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Valid Emails",
    "problem_id": "3782",
    "frontend_id": "3436",
    "difficulty": "Easy",
    "problem_slug": "find-valid-emails",
    "topics": [
      "Database"
    ],
    "description": "Table: Users\nWrite a solution to find all the valid email addresses. A valid email address meets the following criteria:\nReturn the result table ordered by user_id in ascending order.\nExample:"
  },
  {
    "title": "Find Valid Pair of Adjacent Digits in String",
    "problem_id": "3736",
    "frontend_id": "3438",
    "difficulty": "Easy",
    "problem_slug": "find-valid-pair-of-adjacent-digits-in-string",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "You are given a string s consisting only of digits. A valid pair is defined as two adjacent digits in s such that:\nReturn the first valid pair found in the string s when traversing from left to right. If no valid pair exists, return an empty string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Reschedule Meetings for Maximum Free Time I",
    "problem_id": "3743",
    "frontend_id": "3439",
    "difficulty": "Medium",
    "problem_slug": "reschedule-meetings-for-maximum-free-time-i",
    "topics": [
      "Array",
      "Greedy",
      "Sliding Window"
    ],
    "description": "You are given an integer eventTime denoting the duration of an event, where the event occurs from time t = 0 to time t = eventTime.\nYou are also given two integer arrays startTime and endTime, each of length n. These represent the start and end time of n non-overlapping meetings, where the ith meeting occurs during the time [startTime[i], endTime[i]].\nYou can reschedule at most k meetings by moving their start time while maintaining the same duration, to maximize the longest continuous period of free time during the event.\nThe relative order of all the meetings should stay the same and they should remain non-overlapping.\nReturn the maximum amount of free time possible after rearranging the meetings.\nNote that the meetings can not be rescheduled to a time outside the event.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Reschedule Meetings for Maximum Free Time II",
    "problem_id": "3741",
    "frontend_id": "3440",
    "difficulty": "Medium",
    "problem_slug": "reschedule-meetings-for-maximum-free-time-ii",
    "topics": [
      "Array",
      "Greedy",
      "Enumeration"
    ],
    "description": "You are given an integer eventTime denoting the duration of an event. You are also given two integer arrays startTime and endTime, each of length n.\nThese represent the start and end times of n non-overlapping meetings that occur during the event between time t = 0 and time t = eventTime, where the ith meeting occurs during the time [startTime[i], endTime[i]].\nYou can reschedule at most one meeting by moving its start time while maintaining the same duration, such that the meetings remain non-overlapping, to maximize the longest continuous period of free time during the event.\nReturn the maximum amount of free time possible after rearranging the meetings.\nNote that the meetings can not be rescheduled to a time outside the event and they should remain non-overlapping.\nNote: In this version, it is valid for the relative ordering of the meetings to change after rescheduling one meeting.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Minimum Cost Good Caption",
    "problem_id": "3701",
    "frontend_id": "3441",
    "difficulty": "Hard",
    "problem_slug": "minimum-cost-good-caption",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given a string caption of length n. A good caption is a string where every character appears in groups of at least 3 consecutive occurrences.\nFor example:\nYou can perform the following operation any number of times:\nChoose an index i (where 0 <= i < n) and change the character at that index to either:\nYour task is to convert the given caption into a good caption using the minimum number of operations, and return it. If there are multiple possible good captions, return the lexicographically smallest one among them. If it is impossible to create a good caption, return an empty string \"\".\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Difference Between Even and Odd Frequency I",
    "problem_id": "3753",
    "frontend_id": "3442",
    "difficulty": "Easy",
    "problem_slug": "maximum-difference-between-even-and-odd-frequency-i",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "You are given a string s consisting of lowercase English letters.\nYour task is to find the maximum difference diff = freq(a1) - freq(a2) between the frequency of characters a1 and a2 in the string such that:\nReturn this maximum difference.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Manhattan Distance After K Changes",
    "problem_id": "3754",
    "frontend_id": "3443",
    "difficulty": "Medium",
    "problem_slug": "maximum-manhattan-distance-after-k-changes",
    "topics": [
      "Hash Table",
      "Math",
      "String",
      "Counting"
    ],
    "description": "You are given a string s consisting of the characters 'N', 'S', 'E', and 'W', where s[i] indicates movements in an infinite grid:\nInitially, you are at the origin (0, 0). You can change at most k characters to any of the four directions.\nFind the maximum Manhattan distance from the origin that can be achieved at any time while performing the movements in order.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Increments for Target Multiples in an Array",
    "problem_id": "3697",
    "frontend_id": "3444",
    "difficulty": "Hard",
    "problem_slug": "minimum-increments-for-target-multiples-in-an-array",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Bit Manipulation",
      "Number Theory",
      "Bitmask"
    ],
    "description": "You are given two arrays, nums and target.\nIn a single operation, you may increment any element of nums by 1.\nReturn the minimum number of operations required so that each element in target has at least one multiple in nums.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Difference Between Even and Odd Frequency II",
    "problem_id": "3761",
    "frontend_id": "3445",
    "difficulty": "Hard",
    "problem_slug": "maximum-difference-between-even-and-odd-frequency-ii",
    "topics": [
      "String",
      "Sliding Window",
      "Enumeration",
      "Prefix Sum"
    ],
    "description": "You are given a string s and an integer k. Your task is to find the maximum difference between the frequency of two characters, freq[a] - freq[b], in a substring subs of s, such that:\nReturn the maximum difference.\nNote that subs can contain more than 2 distinct characters.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Sort Matrix by Diagonals",
    "problem_id": "3748",
    "frontend_id": "3446",
    "difficulty": "Medium",
    "problem_slug": "sort-matrix-by-diagonals",
    "topics": [
      "Array",
      "Sorting",
      "Matrix"
    ],
    "description": "You are given an n x n square matrix of integers grid. Return the matrix such that:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Assign Elements to Groups with Constraints",
    "problem_id": "3760",
    "frontend_id": "3447",
    "difficulty": "Medium",
    "problem_slug": "assign-elements-to-groups-with-constraints",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "You are given an integer array groups, where groups[i] represents the size of the ith group. You are also given an integer array elements.\nYour task is to assign one element to each group based on the following rules:\nReturn an integer array assigned, where assigned[i] is the index of the element chosen for group i, or -1 if no suitable element exists.\nNote: An element may be assigned to more than one group.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Substrings Divisible By Last Digit",
    "problem_id": "3696",
    "frontend_id": "3448",
    "difficulty": "Hard",
    "problem_slug": "count-substrings-divisible-by-last-digit",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given a string s consisting of digits.\nReturn the number of substrings of s divisible by their non-zero last digit.\nNote: A substring may contain leading zeros.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximize the Minimum Game Score",
    "problem_id": "3762",
    "frontend_id": "3449",
    "difficulty": "Hard",
    "problem_slug": "maximize-the-minimum-game-score",
    "topics": [
      "Array",
      "Binary Search",
      "Greedy"
    ],
    "description": "You are given an array points of size n and an integer m. There is another array gameScore of size n, where gameScore[i] represents the score achieved at the ith game. Initially, gameScore[i] == 0 for all i.\nYou start at index -1, which is outside the array (before the first position at index 0). You can make at most m moves. In each move, you can either:\nNote that the index must always remain within the bounds of the array after the first move.\nReturn the maximum possible minimum value in gameScore after at most m moves.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Invalid IP Addresses",
    "problem_id": "3792",
    "frontend_id": "3451",
    "difficulty": "Hard",
    "problem_slug": "find-invalid-ip-addresses",
    "topics": [
      "Database"
    ],
    "description": "Table:  logs\nWrite a solution to find invalid IP addresses. An IPv4 address is invalid if it meets any of these conditions:\nReturn the result table ordered by invalid_count, ip in descending order respectively.\nThe result format is in the following example.\nExample:"
  },
  {
    "title": "Sum of Good Numbers",
    "problem_id": "3723",
    "frontend_id": "3452",
    "difficulty": "Easy",
    "problem_slug": "sum-of-good-numbers",
    "topics": [
      "Array"
    ],
    "description": "Given an array of integers nums and an integer k, an element nums[i] is considered good if it is strictly greater than the elements at indices i - k and i + k (if those indices exist). If neither of these indices exists, nums[i] is still considered good.\nReturn the sum of all the good elements in the array.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Separate Squares I",
    "problem_id": "3763",
    "frontend_id": "3453",
    "difficulty": "Medium",
    "problem_slug": "separate-squares-i",
    "topics": [
      "Array",
      "Binary Search"
    ],
    "description": "You are given a 2D integer array squares. Each squares[i] = [xi, yi, li] represents the coordinates of the bottom-left point and the side length of a square parallel to the x-axis.\nFind the minimum y-coordinate value of a horizontal line such that the total area of the squares above the line equals the total area of the squares below the line.\nAnswers within 10-5 of the actual answer will be accepted.\nNote: Squares may overlap. Overlapping areas should be counted multiple times.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Separate Squares II",
    "problem_id": "3775",
    "frontend_id": "3454",
    "difficulty": "Hard",
    "problem_slug": "separate-squares-ii",
    "topics": [
      "Array",
      "Binary Search",
      "Segment Tree",
      "Line Sweep"
    ],
    "description": "You are given a 2D integer array squares. Each squares[i] = [xi, yi, li] represents the coordinates of the bottom-left point and the side length of a square parallel to the x-axis.\nFind the minimum y-coordinate value of a horizontal line such that the total area covered by squares above the line equals the total area covered by squares below the line.\nAnswers within 10-5 of the actual answer will be accepted.\nNote: Squares may overlap. Overlapping areas should be counted only once in this version.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Shortest Matching Substring",
    "problem_id": "3692",
    "frontend_id": "3455",
    "difficulty": "Hard",
    "problem_slug": "shortest-matching-substring",
    "topics": [
      "Two Pointers",
      "String",
      "Binary Search",
      "String Matching"
    ],
    "description": "You are given a string s and a pattern string p, where p contains exactly two '*' characters.\nThe '*' in p matches any sequence of zero or more characters.\nReturn the length of the shortest substring in s that matches p. If there is no such substring, return -1.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Find Special Substring of Length K",
    "problem_id": "3709",
    "frontend_id": "3456",
    "difficulty": "Easy",
    "problem_slug": "find-special-substring-of-length-k",
    "topics": [
      "String"
    ],
    "description": "You are given a string s and an integer k.\nDetermine if there exists a substring of length exactly k in s that satisfies the following conditions:\nReturn true if such a substring exists. Otherwise, return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Eat Pizzas!",
    "problem_id": "3779",
    "frontend_id": "3457",
    "difficulty": "Medium",
    "problem_slug": "eat-pizzas",
    "topics": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "description": "You are given an integer array pizzas of size n, where pizzas[i] represents the weight of the ith pizza. Every day, you eat exactly 4 pizzas. Due to your incredible metabolism, when you eat pizzas of weights W, X, Y, and Z, where W <= X <= Y <= Z, you gain the weight of only 1 pizza!\nFind the maximum total weight you can gain by eating all pizzas optimally.\nNote: It is guaranteed that n is a multiple of 4, and each pizza can be eaten only once.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Select K Disjoint Special Substrings",
    "problem_id": "3771",
    "frontend_id": "3458",
    "difficulty": "Medium",
    "problem_slug": "select-k-disjoint-special-substrings",
    "topics": [
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Greedy",
      "Sorting"
    ],
    "description": "Given a string s of length n and an integer k, determine whether it is possible to select k disjoint special substrings.\nA special substring is a substring where:\nNote that all k substrings must be disjoint, meaning they cannot overlap.\nReturn true if it is possible to select k such disjoint special substrings; otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Length of Longest V-Shaped Diagonal Segment",
    "problem_id": "3733",
    "frontend_id": "3459",
    "difficulty": "Hard",
    "problem_slug": "length-of-longest-v-shaped-diagonal-segment",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Memoization",
      "Matrix"
    ],
    "description": "You are given a 2D integer matrix grid of size n x m, where each element is either 0, 1, or 2.\nA V-shaped diagonal segment is defined as:\nReturn the length of the longest V-shaped diagonal segment. If no valid segment exists, return 0.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Check If Digits Are Equal in String After Operations I",
    "problem_id": "3768",
    "frontend_id": "3461",
    "difficulty": "Easy",
    "problem_slug": "check-if-digits-are-equal-in-string-after-operations-i",
    "topics": [
      "Math",
      "String",
      "Simulation",
      "Combinatorics",
      "Number Theory"
    ],
    "description": "You are given a string s consisting of digits. Perform the following operation repeatedly until the string has exactly two digits:\nReturn true if the final two digits in s are the same; otherwise, return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Sum With at Most K Elements",
    "problem_id": "3764",
    "frontend_id": "3462",
    "difficulty": "Medium",
    "problem_slug": "maximum-sum-with-at-most-k-elements",
    "topics": [
      "Array",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)",
      "Matrix"
    ],
    "description": "You are given a 2D integer matrix grid of size n x m, an integer array limits of length n, and an integer k. The task is to find the maximum sum of at most k elements from the matrix grid such that:\nReturn the maximum sum.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check If Digits Are Equal in String After Operations II",
    "problem_id": "3774",
    "frontend_id": "3463",
    "difficulty": "Hard",
    "problem_slug": "check-if-digits-are-equal-in-string-after-operations-ii",
    "topics": [
      "Math",
      "String",
      "Combinatorics",
      "Number Theory"
    ],
    "description": "You are given a string s consisting of digits. Perform the following operation repeatedly until the string has exactly two digits:\nReturn true if the final two digits in s are the same; otherwise, return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximize the Distance Between Points on a Square",
    "problem_id": "3781",
    "frontend_id": "3464",
    "difficulty": "Hard",
    "problem_slug": "maximize-the-distance-between-points-on-a-square",
    "topics": [
      "Array",
      "Binary Search",
      "Greedy"
    ],
    "description": "You are given an integer side, representing the edge length of a square with corners at (0, 0), (0, side), (side, 0), and (side, side) on a Cartesian plane.\nYou are also given a positive integer k and a 2D integer array points, where points[i] = [xi, yi] represents the coordinate of a point lying on the boundary of the square.\nYou need to select k elements among points such that the minimum Manhattan distance between any two points is maximized.\nReturn the maximum possible minimum Manhattan distance between the selected k points.\nThe Manhattan Distance between two cells (xi, yi) and (xj, yj) is |xi - xj| + |yi - yj|.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Products with Valid Serial Numbers",
    "problem_id": "3803",
    "frontend_id": "3465",
    "difficulty": "Easy",
    "problem_slug": "find-products-with-valid-serial-numbers",
    "topics": [
      "Database"
    ],
    "description": "Table: products\nWrite a solution to find all products whose description contains a valid serial number pattern. A valid serial number follows these rules:\nReturn the result table ordered by product_id in ascending order.\nThe result format is in the following example.\nExample:"
  },
  {
    "title": "Transform Array by Parity",
    "problem_id": "3778",
    "frontend_id": "3467",
    "difficulty": "Easy",
    "problem_slug": "transform-array-by-parity",
    "topics": [
      "Array",
      "Sorting",
      "Counting"
    ],
    "description": "You are given an integer array nums. Transform nums by performing the following operations in the exact order specified:\nReturn the resulting array after performing these operations.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find the Number of Copy Arrays",
    "problem_id": "3785",
    "frontend_id": "3468",
    "difficulty": "Medium",
    "problem_slug": "find-the-number-of-copy-arrays",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "You are given an array original of length n and a 2D array bounds of length n x 2, where bounds[i] = [ui, vi].\nYou need to find the number of possible arrays copy of length n such that:\nReturn the number of such arrays.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Minimum Cost to Remove Array Elements",
    "problem_id": "3776",
    "frontend_id": "3469",
    "difficulty": "Medium",
    "problem_slug": "find-minimum-cost-to-remove-array-elements",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array nums. Your task is to remove all elements from the array by performing one of the following operations at each step until nums is empty:\nReturn the minimum cost required to remove all the elements.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Permutations IV",
    "problem_id": "3783",
    "frontend_id": "3470",
    "difficulty": "Hard",
    "problem_slug": "permutations-iv",
    "topics": [
      "Array",
      "Math",
      "Combinatorics",
      "Enumeration"
    ],
    "description": "Given two integers, n and k, an alternating permutation is a permutation of the first n positive integers such that no two adjacent elements are both odd or both even.\nReturn the k-th alternating permutation sorted in lexicographical order. If there are fewer than k valid alternating permutations, return an empty list.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Largest Almost Missing Integer",
    "problem_id": "3705",
    "frontend_id": "3471",
    "difficulty": "Easy",
    "problem_slug": "find-the-largest-almost-missing-integer",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "description": "You are given an integer array nums and an integer k.\nAn integer x is almost missing from nums if x appears in exactly one subarray of size k within nums.\nReturn the largest almost missing integer from nums. If no such integer exists, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest Palindromic Subsequence After at Most K Operations",
    "problem_id": "3786",
    "frontend_id": "3472",
    "difficulty": "Medium",
    "problem_slug": "longest-palindromic-subsequence-after-at-most-k-operations",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given a string s and an integer k.\nIn one operation, you can replace the character at any position with the next or previous letter in the alphabet (wrapping around so that 'a' is after 'z'). For example, replacing 'a' with the next letter results in 'b', and replacing 'a' with the previous letter results in 'z'. Similarly, replacing 'z' with the next letter results in 'a', and replacing 'z' with the previous letter results in 'y'.\nReturn the length of the longest palindromic subsequence of s that can be obtained after performing at most k operations.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Sum of K Subarrays With Length at Least M",
    "problem_id": "3722",
    "frontend_id": "3473",
    "difficulty": "Medium",
    "problem_slug": "sum-of-k-subarrays-with-length-at-least-m",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "description": "You are given an integer array nums and two integers, k and m.\nReturn the maximum sum of k non-overlapping subarrays of nums, where each subarray has a length of at least m.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Lexicographically Smallest Generated String",
    "problem_id": "3770",
    "frontend_id": "3474",
    "difficulty": "Hard",
    "problem_slug": "lexicographically-smallest-generated-string",
    "topics": [
      "String",
      "Greedy",
      "String Matching"
    ],
    "description": "You are given two strings, str1 and str2, of lengths n and m, respectively.\nA string word of length n + m - 1 is defined to be generated by str1 and str2 if it satisfies the following conditions for each index 0 <= i <= n - 1:\nReturn the lexicographically smallest possible string that can be generated by str1 and str2. If no string can be generated, return an empty string \"\".\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "DNA Pattern Recognition ",
    "problem_id": "3816",
    "frontend_id": "3475",
    "difficulty": "Medium",
    "problem_slug": "dna-pattern-recognition",
    "topics": [
      "Database"
    ],
    "description": "Table: Samples\nBiologists are studying basic patterns in DNA sequences. Write a solution to identify sample_id with the following patterns:\nReturn the result table ordered by sample_id in ascending order.\nThe result format is in the following example.\nExample:"
  },
  {
    "title": "Fruits Into Baskets II",
    "problem_id": "3790",
    "frontend_id": "3477",
    "difficulty": "Easy",
    "problem_slug": "fruits-into-baskets-ii",
    "topics": [
      "Array",
      "Binary Search",
      "Segment Tree",
      "Simulation",
      "Ordered Set"
    ],
    "description": "You are given two arrays of integers, fruits and baskets, each of length n, where fruits[i] represents the quantity of the ith type of fruit, and baskets[j] represents the capacity of the jth basket.\nFrom left to right, place the fruits according to these rules:\nReturn the number of fruit types that remain unplaced after all possible allocations are made.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Choose K Elements With Maximum Sum",
    "problem_id": "3759",
    "frontend_id": "3478",
    "difficulty": "Medium",
    "problem_slug": "choose-k-elements-with-maximum-sum",
    "topics": [
      "Array",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given two integer arrays, nums1 and nums2, both of length n, along with a positive integer k.\nFor each index i from 0 to n - 1, perform the following:\nReturn an array answer of size n, where answer[i] represents the result for the corresponding index i.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Fruits Into Baskets III",
    "problem_id": "3791",
    "frontend_id": "3479",
    "difficulty": "Medium",
    "problem_slug": "fruits-into-baskets-iii",
    "topics": [
      "Array",
      "Binary Search",
      "Segment Tree",
      "Ordered Set"
    ],
    "description": "You are given two arrays of integers, fruits and baskets, each of length n, where fruits[i] represents the quantity of the ith type of fruit, and baskets[j] represents the capacity of the jth basket.\nFrom left to right, place the fruits according to these rules:\nReturn the number of fruit types that remain unplaced after all possible allocations are made.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximize Subarrays After Removing One Conflicting Pair",
    "problem_id": "3789",
    "frontend_id": "3480",
    "difficulty": "Hard",
    "problem_slug": "maximize-subarrays-after-removing-one-conflicting-pair",
    "topics": [
      "Array",
      "Segment Tree",
      "Enumeration",
      "Prefix Sum"
    ],
    "description": "You are given an integer n which represents an array nums containing the numbers from 1 to n in order. Additionally, you are given a 2D array conflictingPairs, where conflictingPairs[i] = [a, b] indicates that a and b form a conflicting pair.\nRemove exactly one element from conflictingPairs. Afterward, count the number of non-empty subarrays of nums which do not contain both a and b for any remaining conflicting pair [a, b].\nReturn the maximum number of subarrays possible after removing exactly one conflicting pair.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Analyze Organization Hierarchy",
    "problem_id": "3828",
    "frontend_id": "3482",
    "difficulty": "Hard",
    "problem_slug": "analyze-organization-hierarchy",
    "topics": [
      "Database"
    ],
    "description": "Table: Employees\nWrite a solution to analyze the organizational hierarchy and answer the following:\nReturn the result table ordered by the result ordered by level in ascending order, then by budget in descending order, and finally by employee_name in ascending order.\nThe result format is in the following example.\nExample:"
  },
  {
    "title": "Unique 3-Digit Even Numbers",
    "problem_id": "3799",
    "frontend_id": "3483",
    "difficulty": "Easy",
    "problem_slug": "unique-3-digit-even-numbers",
    "topics": [
      "Array",
      "Hash Table",
      "Recursion",
      "Enumeration"
    ],
    "description": "You are given an array of digits called digits. Your task is to determine the number of distinct three-digit even numbers that can be formed using these digits.\nNote: Each copy of a digit can only be used once per number, and there may not be leading zeros.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Design Spreadsheet",
    "problem_id": "3797",
    "frontend_id": "3484",
    "difficulty": "Medium",
    "problem_slug": "design-spreadsheet",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Design",
      "Matrix"
    ],
    "description": "A spreadsheet is a grid with 26 columns (labeled from 'A' to 'Z') and a given number of rows. Each cell in the spreadsheet can hold an integer value between 0 and 105.\nImplement the Spreadsheet class:\nNote: If getValue references a cell that has not been explicitly set using setCell, its value is considered 0.\nExample 1:\nConstraints:"
  },
  {
    "title": "Longest Common Prefix of K Strings After Removal",
    "problem_id": "3784",
    "frontend_id": "3485",
    "difficulty": "Hard",
    "problem_slug": "longest-common-prefix-of-k-strings-after-removal",
    "topics": [
      "Array",
      "String",
      "Trie"
    ],
    "description": "You are given an array of strings words and an integer k.\nFor each index i in the range [0, words.length - 1], find the length of the longest common prefix among any k strings (selected at distinct indices) from the remaining array after removing the ith element.\nReturn an array answer, where answer[i] is the answer for ith element. If removing the ith element leaves the array with fewer than k strings, answer[i] is 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Special Path II",
    "problem_id": "3798",
    "frontend_id": "3486",
    "difficulty": "Hard",
    "problem_slug": "longest-special-path-ii",
    "topics": [
      "Array",
      "Hash Table",
      "Tree",
      "Depth-First Search",
      "Prefix Sum"
    ],
    "description": "You are given an undirected tree rooted at node 0, with n nodes numbered from 0 to n - 1. This is represented by a 2D array edges of length n - 1, where edges[i] = [ui, vi, lengthi] indicates an edge between nodes ui and vi with length lengthi. You are also given an integer array nums, where nums[i] represents the value at node i.\nA special path is defined as a downward path from an ancestor node to a descendant node in which all node values are distinct, except for at most one value that may appear twice.\nReturn an array result of size 2, where result[0] is the length of the longest special path, and result[1] is the minimum number of nodes in all possible longest special paths.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Unique Subarray Sum After Deletion",
    "problem_id": "3788",
    "frontend_id": "3487",
    "difficulty": "Easy",
    "problem_slug": "maximum-unique-subarray-sum-after-deletion",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy"
    ],
    "description": "You are given an integer array nums.\nYou are allowed to delete any number of elements from nums without making it empty. After performing the deletions, select a subarray of nums such that:\nReturn the maximum sum of such a subarray.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Closest Equal Element Queries",
    "problem_id": "3750",
    "frontend_id": "3488",
    "difficulty": "Medium",
    "problem_slug": "closest-equal-element-queries",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search"
    ],
    "description": "You are given a circular array nums and an array queries.\nFor each query i, you have to find the following:\nReturn an array answer of the same size as queries, where answer[i] represents the result for query i.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Zero Array Transformation IV",
    "problem_id": "3795",
    "frontend_id": "3489",
    "difficulty": "Medium",
    "problem_slug": "zero-array-transformation-iv",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array nums of length n and a 2D array queries, where queries[i] = [li, ri, vali].\nEach queries[i] represents the following action on nums:\nA Zero Array is an array with all its elements equal to 0.\nReturn the minimum possible non-negative value of k, such that after processing the first k queries in sequence, nums becomes a Zero Array. If no such k exists, return -1.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Count Beautiful Numbers",
    "problem_id": "3801",
    "frontend_id": "3490",
    "difficulty": "Hard",
    "problem_slug": "count-beautiful-numbers",
    "topics": [
      "Dynamic Programming"
    ],
    "description": "You are given two positive integers, l and r. A positive integer is called beautiful if the product of its digits is divisible by the sum of its digits.\nReturn the count of beautiful numbers between l and r, inclusive.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Containers on a Ship",
    "problem_id": "3817",
    "frontend_id": "3492",
    "difficulty": "Easy",
    "problem_slug": "maximum-containers-on-a-ship",
    "topics": [
      "Math"
    ],
    "description": "You are given a positive integer n representing an n x n cargo deck on a ship. Each cell on the deck can hold one container with a weight of exactly w.\nHowever, the total weight of all containers, if loaded onto the deck, must not exceed the ship's maximum weight capacity, maxWeight.\nReturn the maximum number of containers that can be loaded onto the ship.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Properties Graph",
    "problem_id": "3809",
    "frontend_id": "3493",
    "difficulty": "Medium",
    "problem_slug": "properties-graph",
    "topics": [
      "Array",
      "Hash Table",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "description": "You are given a 2D integer array properties having dimensions n x m and an integer k.\nDefine a function intersect(a, b) that returns the number of distinct integers common to both arrays a and b.\nConstruct an undirected graph where each index i corresponds to properties[i]. There is an edge between node i and node j if and only if intersect(properties[i], properties[j]) >= k, where i and j are in the range [0, n - 1] and i != j.\nReturn the number of connected components in the resulting graph.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Minimum Amount of Time to Brew Potions",
    "problem_id": "3794",
    "frontend_id": "3494",
    "difficulty": "Medium",
    "problem_slug": "find-the-minimum-amount-of-time-to-brew-potions",
    "topics": [
      "Array",
      "Simulation",
      "Prefix Sum"
    ],
    "description": "You are given two integer arrays, skill and mana, of length n and m, respectively.\nIn a laboratory, n wizards must brew m potions in order. Each potion has a mana capacity mana[j] and must pass through all the wizards sequentially to be brewed properly. The time taken by the ith wizard on the jth potion is timeij = skill[i] * mana[j].\nSince the brewing process is delicate, a potion must be passed to the next wizard immediately after the current wizard completes their work. This means the timing must be synchronized so that each wizard begins working on a potion exactly when it arrives. ​\nReturn the minimum amount of time required for the potions to be brewed properly.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Make Array Elements Zero",
    "problem_id": "3744",
    "frontend_id": "3495",
    "difficulty": "Hard",
    "problem_slug": "minimum-operations-to-make-array-elements-zero",
    "topics": [
      "Array",
      "Math",
      "Bit Manipulation"
    ],
    "description": "You are given a 2D array queries, where queries[i] is of the form [l, r]. Each queries[i] defines an array of integers nums consisting of elements ranging from l to r, both inclusive.\nIn one operation, you can:\nYour task is to determine the minimum number of operations required to reduce all elements of the array to zero for each query. Return the sum of the results for all queries.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Analyze Subscription Conversion ",
    "problem_id": "3848",
    "frontend_id": "3497",
    "difficulty": "Medium",
    "problem_slug": "analyze-subscription-conversion",
    "topics": [
      "Database"
    ],
    "description": "Table: UserActivity\nA subscription service wants to analyze user behavior patterns. The company offers a 7-day free trial, after which users can subscribe to a paid plan or cancel. Write a solution to:\nReturn the result table ordered by user_id in ascending order.\nThe result format is in the following example.\nExample:"
  },
  {
    "title": "Reverse Degree of a String",
    "problem_id": "3811",
    "frontend_id": "3498",
    "difficulty": "Easy",
    "problem_slug": "reverse-degree-of-a-string",
    "topics": [
      "String",
      "Simulation"
    ],
    "description": "Given a string s, calculate its reverse degree.\nThe reverse degree is calculated as follows:\nReturn the reverse degree of s.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximize Active Section with Trade I",
    "problem_id": "3805",
    "frontend_id": "3499",
    "difficulty": "Medium",
    "problem_slug": "maximize-active-section-with-trade-i",
    "topics": [
      "String",
      "Enumeration"
    ],
    "description": "You are given a binary string s of length n, where:\nYou can perform at most one trade to maximize the number of active sections in s. In a trade, you:\nReturn the maximum number of active sections in s after making the optimal trade.\nNote: Treat s as if it is augmented with a '1' at both ends, forming t = '1' + s + '1'. The augmented '1's do not contribute to the final count.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Minimum Cost to Divide Array Into Subarrays",
    "problem_id": "3765",
    "frontend_id": "3500",
    "difficulty": "Hard",
    "problem_slug": "minimum-cost-to-divide-array-into-subarrays",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "description": "You are given two integer arrays, nums and cost, of the same size, and an integer k.\nYou can divide nums into subarrays. The cost of the ith subarray consisting of elements nums[l..r] is:\nNote that i represents the order of the subarray: 1 for the first subarray, 2 for the second, and so on.\nReturn the minimum total cost possible from any valid division.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximize Active Section with Trade II",
    "problem_id": "3804",
    "frontend_id": "3501",
    "difficulty": "Hard",
    "problem_slug": "maximize-active-section-with-trade-ii",
    "topics": [
      "Array",
      "String",
      "Binary Search",
      "Segment Tree"
    ],
    "description": "You are given a binary string s of length n, where:\nYou can perform at most one trade to maximize the number of active sections in s. In a trade, you:\nAdditionally, you are given a 2D array queries, where queries[i] = [li, ri] represents a substring s[li...ri].\nFor each query, determine the maximum possible number of active sections in s after making the optimal trade on the substring s[li...ri].\nReturn an array answer, where answer[i] is the result for queries[i].\nNote\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Minimum Cost to Reach Every Position",
    "problem_id": "3832",
    "frontend_id": "3502",
    "difficulty": "Easy",
    "problem_slug": "minimum-cost-to-reach-every-position",
    "topics": [
      "Array"
    ],
    "description": "You are given an integer array cost of size n. You are currently at position n (at the end of the line) in a line of n + 1 people (numbered from 0 to n).\nYou wish to move forward in the line, but each person in front of you charges a specific amount to swap places. The cost to swap with person i is given by cost[i].\nYou are allowed to swap places with people as follows:\nReturn an array answer of size n, where answer[i] is the minimum total cost to reach each position i in the line.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Palindrome After Substring Concatenation I",
    "problem_id": "3793",
    "frontend_id": "3503",
    "difficulty": "Medium",
    "problem_slug": "longest-palindrome-after-substring-concatenation-i",
    "topics": [
      "Two Pointers",
      "String",
      "Dynamic Programming",
      "Enumeration"
    ],
    "description": "You are given two strings, s and t.\nYou can create a new string by selecting a substring from s (possibly empty) and a substring from t (possibly empty), then concatenating them in order.\nReturn the length of the longest palindrome that can be formed this way.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Longest Palindrome After Substring Concatenation II",
    "problem_id": "3808",
    "frontend_id": "3504",
    "difficulty": "Hard",
    "problem_slug": "longest-palindrome-after-substring-concatenation-ii",
    "topics": [
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given two strings, s and t.\nYou can create a new string by selecting a substring from s (possibly empty) and a substring from t (possibly empty), then concatenating them in order.\nReturn the length of the longest palindrome that can be formed this way.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Make Elements Within K Subarrays Equal",
    "problem_id": "3717",
    "frontend_id": "3505",
    "difficulty": "Hard",
    "problem_slug": "minimum-operations-to-make-elements-within-k-subarrays-equal",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Dynamic Programming",
      "Sliding Window",
      "Heap (Priority Queue)"
    ],
    "description": "You are given an integer array nums and two integers, x and k. You can perform the following operation any number of times (including zero):\nReturn the minimum number of operations needed to have at least k non-overlapping subarrays of size exactly x in nums, where all elements within each subarray are equal.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Pair Removal to Sort Array I",
    "problem_id": "3773",
    "frontend_id": "3507",
    "difficulty": "Easy",
    "problem_slug": "minimum-pair-removal-to-sort-array-i",
    "topics": [
      "Array",
      "Hash Table",
      "Linked List",
      "Heap (Priority Queue)",
      "Simulation",
      "Doubly-Linked List",
      "Ordered Set"
    ],
    "description": "Given an array nums, you can perform the following operation any number of times:\nReturn the minimum number of operations needed to make the array non-decreasing.\nAn array is said to be non-decreasing if each element is greater than or equal to its previous element (if it exists).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Implement Router",
    "problem_id": "3827",
    "frontend_id": "3508",
    "difficulty": "Medium",
    "problem_slug": "implement-router",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Design",
      "Queue",
      "Ordered Set"
    ],
    "description": "Design a data structure that can efficiently manage data packets in a network router. Each data packet consists of the following attributes:\nImplement the Router class:\nRouter(int memoryLimit): Initializes the Router object with a fixed memory limit.\nbool addPacket(int source, int destination, int timestamp): Adds a packet with the given attributes to the router.\nint[] forwardPacket(): Forwards the next packet in FIFO (First In First Out) order.\nint getCount(int destination, int startTime, int endTime):\nNote that queries for addPacket will be made in increasing order of timestamp.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Product of Subsequences With an Alternating Sum Equal to K",
    "problem_id": "3777",
    "frontend_id": "3509",
    "difficulty": "Hard",
    "problem_slug": "maximum-product-of-subsequences-with-an-alternating-sum-equal-to-k",
    "topics": [
      "Array",
      "Hash Table",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array nums and two integers, k and limit. Your task is to find a non-empty subsequence of nums that:\nReturn the product of the numbers in such a subsequence. If no subsequence satisfies the requirements, return -1.\nThe alternating sum of a 0-indexed array is defined as the sum of the elements at even indices minus the sum of the elements at odd indices.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Pair Removal to Sort Array II",
    "problem_id": "3772",
    "frontend_id": "3510",
    "difficulty": "Hard",
    "problem_slug": "minimum-pair-removal-to-sort-array-ii",
    "topics": [
      "Array",
      "Hash Table",
      "Linked List",
      "Heap (Priority Queue)",
      "Simulation",
      "Doubly-Linked List",
      "Ordered Set"
    ],
    "description": "Given an array nums, you can perform the following operation any number of times:\nReturn the minimum number of operations needed to make the array non-decreasing.\nAn array is said to be non-decreasing if each element is greater than or equal to its previous element (if it exists).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Make Array Sum Divisible by K",
    "problem_id": "3846",
    "frontend_id": "3512",
    "difficulty": "Easy",
    "problem_slug": "minimum-operations-to-make-array-sum-divisible-by-k",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "You are given an integer array nums and an integer k. You can perform the following operation any number of times:\nReturn the minimum number of operations required to make the sum of the array divisible by k.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Number of Unique XOR Triplets I",
    "problem_id": "3824",
    "frontend_id": "3513",
    "difficulty": "Medium",
    "problem_slug": "number-of-unique-xor-triplets-i",
    "topics": [
      "Array",
      "Math",
      "Bit Manipulation"
    ],
    "description": "You are given an integer array nums of length n, where nums is a permutation of the numbers in the range [1, n].\nA XOR triplet is defined as the XOR of three elements nums[i] XOR nums[j] XOR nums[k] where i <= j <= k.\nReturn the number of unique XOR triplet values from all possible triplets (i, j, k).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Unique XOR Triplets II",
    "problem_id": "3820",
    "frontend_id": "3514",
    "difficulty": "Medium",
    "problem_slug": "number-of-unique-xor-triplets-ii",
    "topics": [
      "Array",
      "Math",
      "Bit Manipulation",
      "Enumeration"
    ],
    "description": "You are given an integer array nums.\nA XOR triplet is defined as the XOR of three elements nums[i] XOR nums[j] XOR nums[k] where i <= j <= k.\nReturn the number of unique XOR triplet values from all possible triplets (i, j, k).\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Shortest Path in a Weighted Tree",
    "problem_id": "3829",
    "frontend_id": "3515",
    "difficulty": "Hard",
    "problem_slug": "shortest-path-in-a-weighted-tree",
    "topics": [
      "Array",
      "Tree",
      "Depth-First Search",
      "Binary Indexed Tree",
      "Segment Tree"
    ],
    "description": "You are given an integer n and an undirected, weighted tree rooted at node 1 with n nodes numbered from 1 to n. This is represented by a 2D array edges of length n - 1, where edges[i] = [ui, vi, wi] indicates an undirected edge from node ui to vi with weight wi.\nYou are also given a 2D integer array queries of length q, where each queries[i] is either:\nReturn an integer array answer, where answer[i] is the shortest path distance from node 1 to x for the ith query of [2, x].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Closest Person",
    "problem_id": "3830",
    "frontend_id": "3516",
    "difficulty": "Easy",
    "problem_slug": "find-closest-person",
    "topics": [
      "Math"
    ],
    "description": "You are given three integers x, y, and z, representing the positions of three people on a number line:\nBoth Person 1 and Person 2 move toward Person 3 at the same speed.\nDetermine which person reaches Person 3 first:\nReturn the result accordingly.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Smallest Palindromic Rearrangement I",
    "problem_id": "3812",
    "frontend_id": "3517",
    "difficulty": "Medium",
    "problem_slug": "smallest-palindromic-rearrangement-i",
    "topics": [
      "String",
      "Sorting",
      "Counting Sort"
    ],
    "description": "You are given a palindromic string s.\nReturn the lexicographically smallest palindromic permutation of s.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Smallest Palindromic Rearrangement II",
    "problem_id": "3813",
    "frontend_id": "3518",
    "difficulty": "Hard",
    "problem_slug": "smallest-palindromic-rearrangement-ii",
    "topics": [
      "Hash Table",
      "Math",
      "String",
      "Combinatorics",
      "Counting"
    ],
    "description": "You are given a palindromic string s and an integer k.\nReturn the k-th lexicographically smallest palindromic permutation of s. If there are fewer than k distinct palindromic permutations, return an empty string.\nNote: Different rearrangements that yield the same palindromic string are considered identical and are counted once.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Numbers with Non-Decreasing Digits ",
    "problem_id": "3810",
    "frontend_id": "3519",
    "difficulty": "Hard",
    "problem_slug": "count-numbers-with-non-decreasing-digits",
    "topics": [
      "Math",
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given two integers, l and r, represented as strings, and an integer b. Return the count of integers in the inclusive range [l, r] whose digits are in non-decreasing order when represented in base b.\nAn integer is considered to have non-decreasing digits if, when read from left to right (from the most significant digit to the least significant digit), each digit is greater than or equal to the previous one.\nSince the answer may be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Product Recommendation Pairs",
    "problem_id": "3865",
    "frontend_id": "3521",
    "difficulty": "Medium",
    "problem_slug": "find-product-recommendation-pairs",
    "topics": [
      "Database"
    ],
    "description": "Table: ProductPurchases\nTable: ProductInfo\nAmazon wants to implement the Customers who bought this also bought... feature based on co-purchase patterns. Write a solution to :\nA product pair is considered for recommendation if at least 3 different customers have purchased both products.\nReturn the result table ordered by customer_count in descending order, and in case of a tie, by product1_id in ascending order, and then by product2_id in ascending order.\nThe result format is in the following example.\nExample:"
  },
  {
    "title": "Calculate Score After Performing Instructions",
    "problem_id": "3732",
    "frontend_id": "3522",
    "difficulty": "Medium",
    "problem_slug": "calculate-score-after-performing-instructions",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Simulation"
    ],
    "description": "You are given two arrays, instructions and values, both of size n.\nYou need to simulate a process based on the following rules:\nThe process ends when you either:\nReturn your score at the end of the process.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Make Array Non-decreasing",
    "problem_id": "3738",
    "frontend_id": "3523",
    "difficulty": "Medium",
    "problem_slug": "make-array-non-decreasing",
    "topics": [
      "Array",
      "Stack",
      "Greedy",
      "Monotonic Stack"
    ],
    "description": "You are given an integer array nums. In one operation, you can select a subarray and replace it with a single element equal to its maximum value.\nReturn the maximum possible size of the array after performing zero or more operations such that the resulting array is non-decreasing.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find X Value of Array I",
    "problem_id": "3831",
    "frontend_id": "3524",
    "difficulty": "Medium",
    "problem_slug": "find-x-value-of-array-i",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming"
    ],
    "description": "You are given an array of positive integers nums, and a positive integer k.\nYou are allowed to perform an operation once on nums, where in each operation you can remove any non-overlapping prefix and suffix from nums such that nums remains non-empty.\nYou need to find the x-value of nums, which is the number of ways to perform this operation so that the product of the remaining elements leaves a remainder of x when divided by k.\nReturn an array result of size k where result[x] is the x-value of nums for 0 <= x <= k - 1.\nA prefix of an array is a subarray that starts from the beginning of the array and extends to any point within it.\nA suffix of an array is a subarray that starts at any point within the array and extends to the end of the array.\nNote that the prefix and suffix to be chosen for the operation can be empty.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find X Value of Array II",
    "problem_id": "3840",
    "frontend_id": "3525",
    "difficulty": "Hard",
    "problem_slug": "find-x-value-of-array-ii",
    "topics": [
      "Array",
      "Math",
      "Segment Tree"
    ],
    "description": "You are given an array of positive integers nums and a positive integer k. You are also given a 2D array queries, where queries[i] = [indexi, valuei, starti, xi].\nYou are allowed to perform an operation once on nums, where you can remove any suffix from nums such that nums remains non-empty.\nThe x-value of nums for a given x is defined as the number of ways to perform this operation so that the product of the remaining elements leaves a remainder of x modulo k.\nFor each query in queries you need to determine the x-value of nums for xi after performing the following actions:\nReturn an array result of size queries.length where result[i] is the answer for the ith query.\nA prefix of an array is a subarray that starts from the beginning of the array and extends to any point within it.\nA suffix of an array is a subarray that starts at any point within the array and extends to the end of the array.\nNote that the prefix and suffix to be chosen for the operation can be empty.\nNote that x-value has a different definition in this version.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find the Most Common Response",
    "problem_id": "3707",
    "frontend_id": "3527",
    "difficulty": "Medium",
    "problem_slug": "find-the-most-common-response",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "You are given a 2D string array responses where each responses[i] is an array of strings representing survey responses from the ith day.\nReturn the most common response across all days after removing duplicate responses within each responses[i]. If there is a tie, return the lexicographically smallest response.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Unit Conversion I",
    "problem_id": "3729",
    "frontend_id": "3528",
    "difficulty": "Medium",
    "problem_slug": "unit-conversion-i",
    "topics": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph"
    ],
    "description": "There are n types of units indexed from 0 to n - 1. You are given a 2D integer array conversions of length n - 1, where conversions[i] = [sourceUniti, targetUniti, conversionFactori]. This indicates that a single unit of type sourceUniti is equivalent to conversionFactori units of type targetUniti.\nReturn an array baseUnitConversion of length n, where baseUnitConversion[i] is the number of units of type i equivalent to a single unit of type 0. Since the answer may be large, return each baseUnitConversion[i] modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Cells in Overlapping Horizontal and Vertical Substrings",
    "problem_id": "3821",
    "frontend_id": "3529",
    "difficulty": "Medium",
    "problem_slug": "count-cells-in-overlapping-horizontal-and-vertical-substrings",
    "topics": [
      "Array",
      "String",
      "Rolling Hash",
      "String Matching",
      "Matrix",
      "Hash Function"
    ],
    "description": "You are given an m x n matrix grid consisting of characters and a string pattern.\nA horizontal substring is a contiguous sequence of characters read from left to right. If the end of a row is reached before the substring is complete, it wraps to the first column of the next row and continues as needed. You do not wrap from the bottom row back to the top.\nA vertical substring is a contiguous sequence of characters read from top to bottom. If the bottom of a column is reached before the substring is complete, it wraps to the first row of the next column and continues as needed. You do not wrap from the last column back to the first.\nCount the number of cells in the matrix that satisfy the following condition:\nReturn the count of these cells.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Profit from Valid Topological Order in DAG",
    "problem_id": "3826",
    "frontend_id": "3530",
    "difficulty": "Hard",
    "problem_slug": "maximum-profit-from-valid-topological-order-in-dag",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Graph",
      "Topological Sort",
      "Bitmask"
    ],
    "description": "You are given a Directed Acyclic Graph (DAG) with n nodes labeled from 0 to n - 1, represented by a 2D array edges, where edges[i] = [ui, vi] indicates a directed edge from node ui to vi. Each node has an associated score given in an array score, where score[i] represents the score of node i.\nYou must process the nodes in a valid topological order. Each node is assigned a 1-based position in the processing order.\nThe profit is calculated by summing up the product of each node's score and its position in the ordering.\nReturn the maximum possible profit achievable with an optimal topological order.\nA topological order of a DAG is a linear ordering of its nodes such that for every directed edge u → v, node u comes before v in the ordering.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Covered Buildings",
    "problem_id": "3819",
    "frontend_id": "3531",
    "difficulty": "Medium",
    "problem_slug": "count-covered-buildings",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting"
    ],
    "description": "You are given a positive integer n, representing an n x n city. You are also given a 2D grid buildings, where buildings[i] = [x, y] denotes a unique building located at coordinates [x, y].\nA building is covered if there is at least one building in all four directions: left, right, above, and below.\nReturn the number of covered buildings.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Path Existence Queries in a Graph I",
    "problem_id": "3838",
    "frontend_id": "3532",
    "difficulty": "Medium",
    "problem_slug": "path-existence-queries-in-a-graph-i",
    "topics": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Union Find",
      "Graph"
    ],
    "description": "You are given an integer n representing the number of nodes in a graph, labeled from 0 to n - 1.\nYou are also given an integer array nums of length n sorted in non-decreasing order, and an integer maxDiff.\nAn undirected edge exists between nodes i and j if the absolute difference between nums[i] and nums[j] is at most maxDiff (i.e., |nums[i] - nums[j]| <= maxDiff).\nYou are also given a 2D integer array queries. For each queries[i] = [ui, vi], determine whether there exists a path between nodes ui and vi.\nReturn a boolean array answer, where answer[i] is true if there exists a path between ui and vi in the ith query and false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Concatenated Divisibility",
    "problem_id": "3841",
    "frontend_id": "3533",
    "difficulty": "Hard",
    "problem_slug": "concatenated-divisibility",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "description": "You are given an array of positive integers nums and a positive integer k.\nA permutation of nums is said to form a divisible concatenation if, when you concatenate the decimal representations of the numbers in the order specified by the permutation, the resulting number is divisible by k.\nReturn the lexicographically smallest permutation (when considered as a list of integers) that forms a divisible concatenation. If no such permutation exists, return an empty list.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Path Existence Queries in a Graph II",
    "problem_id": "3852",
    "frontend_id": "3534",
    "difficulty": "Hard",
    "problem_slug": "path-existence-queries-in-a-graph-ii",
    "topics": [
      "Array",
      "Binary Search",
      "Greedy",
      "Graph",
      "Sorting"
    ],
    "description": "You are given an integer n representing the number of nodes in a graph, labeled from 0 to n - 1.\nYou are also given an integer array nums of length n and an integer maxDiff.\nAn undirected edge exists between nodes i and j if the absolute difference between nums[i] and nums[j] is at most maxDiff (i.e., |nums[i] - nums[j]| <= maxDiff).\nYou are also given a 2D integer array queries. For each queries[i] = [ui, vi], find the minimum distance between nodes ui and vi. If no path exists between the two nodes, return -1 for that query.\nReturn an array answer, where answer[i] is the result of the ith query.\nNote: The edges between the nodes are unweighted.\nExample 1:\nExample 2:\nThus, the output is [1, 2, -1, 1].\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Product of Two Digits",
    "problem_id": "3859",
    "frontend_id": "3536",
    "difficulty": "Easy",
    "problem_slug": "maximum-product-of-two-digits",
    "topics": [
      "Math",
      "Sorting"
    ],
    "description": "You are given a positive integer n.\nReturn the maximum product of any two digits in n.\nNote: You may use the same digit twice if it appears more than once in n.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Fill a Special Grid",
    "problem_id": "3822",
    "frontend_id": "3537",
    "difficulty": "Medium",
    "problem_slug": "fill-a-special-grid",
    "topics": [
      "Array",
      "Divide and Conquer",
      "Matrix"
    ],
    "description": "You are given a non-negative integer n representing a 2n x 2n grid. You must fill the grid with integers from 0 to 22n - 1 to make it special. A grid is special if it satisfies all the following conditions:\nReturn the special 2n x 2n grid.\nNote: Any 1x1 grid is special.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Merge Operations for Minimum Travel Time",
    "problem_id": "3833",
    "frontend_id": "3538",
    "difficulty": "Hard",
    "problem_slug": "merge-operations-for-minimum-travel-time",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "description": "You are given a straight road of length l km, an integer n, an integer k, and two integer arrays, position and time, each of length n.\nThe array position lists the positions (in km) of signs in strictly increasing order (with position[0] = 0 and position[n - 1] = l).\nEach time[i] represents the time (in minutes) required to travel 1 km between position[i] and position[i + 1].\nYou must perform exactly k merge operations. In one merge, you can choose any two adjacent signs at indices i and i + 1 (with i > 0 and i + 1 < n) and:\nReturn the minimum total travel time (in minutes) to travel from 0 to l after exactly k merges.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Sum of Array Product of Magical Sequences",
    "problem_id": "3851",
    "frontend_id": "3539",
    "difficulty": "Hard",
    "problem_slug": "find-sum-of-array-product-of-magical-sequences",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Bit Manipulation",
      "Combinatorics",
      "Bitmask"
    ],
    "description": "You are given two integers, m and k, and an integer array nums.\nThe array product of this sequence is defined as prod(seq) = (nums[seq[0]] * nums[seq[1]] * ... * nums[seq[m - 1]]).\nReturn the sum of the array products for all valid magical sequences.\nSince the answer may be large, return it modulo 109 + 7.\nA set bit refers to a bit in the binary representation of a number that has a value of 1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Most Frequent Vowel and Consonant",
    "problem_id": "3872",
    "frontend_id": "3541",
    "difficulty": "Easy",
    "problem_slug": "find-most-frequent-vowel-and-consonant",
    "topics": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "description": "You are given a string s consisting of lowercase English letters ('a' to 'z').\nYour task is to:\nReturn the sum of the two frequencies.\nNote: If multiple vowels or consonants have the same maximum frequency, you may choose any one of them. If there are no vowels or no consonants in the string, consider their frequency as 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Operations to Convert All Elements to Zero",
    "problem_id": "3834",
    "frontend_id": "3542",
    "difficulty": "Medium",
    "problem_slug": "minimum-operations-to-convert-all-elements-to-zero",
    "topics": [
      "Array",
      "Hash Table",
      "Stack",
      "Greedy",
      "Monotonic Stack"
    ],
    "description": "You are given an array nums of size n, consisting of non-negative integers. Your task is to apply some (possibly zero) operations on the array so that all elements become 0.\nIn one operation, you can select a subarray [i, j] (where 0 <= i <= j < n) and set all occurrences of the minimum non-negative integer in that subarray to 0.\nReturn the minimum number of operations required to make all elements in the array 0.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Weighted K-Edge Path",
    "problem_id": "3856",
    "frontend_id": "3543",
    "difficulty": "Medium",
    "problem_slug": "maximum-weighted-k-edge-path",
    "topics": [
      "Hash Table",
      "Dynamic Programming",
      "Graph"
    ],
    "description": "You are given an integer n and a Directed Acyclic Graph (DAG) with n nodes labeled from 0 to n - 1. This is represented by a 2D array edges, where edges[i] = [ui, vi, wi] indicates a directed edge from node ui to vi with weight wi.\nYou are also given two integers, k and t.\nYour task is to determine the maximum possible sum of edge weights for any path in the graph such that:\nReturn the maximum possible sum of weights for such a path. If no such path exists, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Subtree Inversion Sum",
    "problem_id": "3858",
    "frontend_id": "3544",
    "difficulty": "Hard",
    "problem_slug": "subtree-inversion-sum",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Tree",
      "Depth-First Search"
    ],
    "description": "You are given an undirected tree rooted at node 0, with n nodes numbered from 0 to n - 1. The tree is represented by a 2D integer array edges of length n - 1, where edges[i] = [ui, vi] indicates an edge between nodes ui and vi.\nYou are also given an integer array nums of length n, where nums[i] represents the value at node i, and an integer k.\nYou may perform inversion operations on a subset of nodes subject to the following rules:\nReturn the maximum possible sum of the tree's node values after applying inversion operations.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Deletions for At Most K Distinct Characters",
    "problem_id": "3871",
    "frontend_id": "3545",
    "difficulty": "Easy",
    "problem_slug": "minimum-deletions-for-at-most-k-distinct-characters",
    "topics": [
      "Hash Table",
      "String",
      "Greedy",
      "Sorting",
      "Counting"
    ],
    "description": "You are given a string s consisting of lowercase English letters, and an integer k.\nYour task is to delete some (possibly none) of the characters in the string so that the number of distinct characters in the resulting string is at most k.\nReturn the minimum number of deletions required to achieve this.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Equal Sum Grid Partition I",
    "problem_id": "3849",
    "frontend_id": "3546",
    "difficulty": "Medium",
    "problem_slug": "equal-sum-grid-partition-i",
    "topics": [
      "Array",
      "Matrix",
      "Enumeration",
      "Prefix Sum"
    ],
    "description": "You are given an m x n matrix grid of positive integers. Your task is to determine if it is possible to make either one horizontal or one vertical cut on the grid such that:\nReturn true if such a partition exists; otherwise return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Sum of Edge Values in a Graph",
    "problem_id": "3845",
    "frontend_id": "3547",
    "difficulty": "Hard",
    "problem_slug": "maximum-sum-of-edge-values-in-a-graph",
    "topics": [
      "Greedy",
      "Depth-First Search",
      "Graph",
      "Sorting"
    ],
    "description": "You are given an undirected connected graph of n nodes, numbered from 0 to n - 1. Each node is connected to at most 2 other nodes.\nThe graph consists of m edges, represented by a 2D array edges, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi.\nYou have to assign a unique value from 1 to n to each node. The value of an edge will be the product of the values assigned to the two nodes it connects.\nYour score is the sum of the values of all edges in the graph.\nReturn the maximum score you can achieve.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Equal Sum Grid Partition II",
    "problem_id": "3850",
    "frontend_id": "3548",
    "difficulty": "Hard",
    "problem_slug": "equal-sum-grid-partition-ii",
    "topics": [
      "Array",
      "Hash Table",
      "Matrix",
      "Enumeration",
      "Prefix Sum"
    ],
    "description": "You are given an m x n matrix grid of positive integers. Your task is to determine if it is possible to make either one horizontal or one vertical cut on the grid such that:\nReturn true if such a partition exists; otherwise, return false.\nNote: A section is connected if every cell in it can be reached from any other cell by moving up, down, left, or right through other cells in the section.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Smallest Index With Digit Sum Equal to Index",
    "problem_id": "3869",
    "frontend_id": "3550",
    "difficulty": "Easy",
    "problem_slug": "smallest-index-with-digit-sum-equal-to-index",
    "topics": [
      "Array",
      "Math"
    ],
    "description": "You are given an integer array nums.\nReturn the smallest index i such that the sum of the digits of nums[i] is equal to i.\nIf no such index exists, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Swaps to Sort by Digit Sum",
    "problem_id": "3847",
    "frontend_id": "3551",
    "difficulty": "Medium",
    "problem_slug": "minimum-swaps-to-sort-by-digit-sum",
    "topics": [
      "Array",
      "Hash Table",
      "Sorting"
    ],
    "description": "You are given an array nums of distinct positive integers. You need to sort the array in increasing order based on the sum of the digits of each number. If two numbers have the same digit sum, the smaller number appears first in the sorted order.\nReturn the minimum number of swaps required to rearrange nums into this sorted order.\nA swap is defined as exchanging the values at two distinct positions in the array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Grid Teleportation Traversal",
    "problem_id": "3837",
    "frontend_id": "3552",
    "difficulty": "Medium",
    "problem_slug": "grid-teleportation-traversal",
    "topics": [
      "Array",
      "Hash Table",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "You are given a 2D character grid matrix of size m x n, represented as an array of strings, where matrix[i][j] represents the cell at the intersection of the ith row and jth column. Each cell is one of the following:\nYou start at the top-left cell (0, 0), and your goal is to reach the bottom-right cell (m - 1, n - 1). You can move from the current cell to any adjacent cell (up, down, left, right) as long as the destination cell is within the grid bounds and is not an obstacle.\nIf you step on a cell containing a portal letter and you haven't used that portal letter before, you may instantly teleport to any other cell in the grid with the same letter. This teleportation does not count as a move, but each portal letter can be used at most once during your journey.\nReturn the minimum number of moves required to reach the bottom-right cell. If it is not possible to reach the destination, return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Weighted Subgraph With the Required Paths II",
    "problem_id": "3853",
    "frontend_id": "3553",
    "difficulty": "Hard",
    "problem_slug": "minimum-weighted-subgraph-with-the-required-paths-ii",
    "topics": [
      "Array",
      "Tree",
      "Depth-First Search"
    ],
    "description": "You are given an undirected weighted tree with n nodes, numbered from 0 to n - 1. It is represented by a 2D integer array edges of length n - 1, where edges[i] = [ui, vi, wi] indicates that there is an edge between nodes ui and vi with weight wi.​\nAdditionally, you are given a 2D integer array queries, where queries[j] = [src1j, src2j, destj].\nReturn an array answer of length equal to queries.length, where answer[j] is the minimum total weight of a subtree such that it is possible to reach destj from both src1j and src2j using edges in this subtree.\nA subtree here is any connected subset of nodes and edges of the original tree forming a valid tree.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Category Recommendation Pairs",
    "problem_id": "3891",
    "frontend_id": "3554",
    "difficulty": "Hard",
    "problem_slug": "find-category-recommendation-pairs",
    "topics": [
      "Database"
    ],
    "description": "Table: ProductPurchases\nTable: ProductInfo\nAmazon wants to understand shopping patterns across product categories. Write a solution to:\nA category pair is considered reportable if at least 3 different customers have purchased products from both categories.\nReturn the result table of reportable category pairs ordered by customer_count in descending order, and in case of a tie, by category1 in ascending order lexicographically, and then by category2 in ascending order.\nThe result format is in the following example.\nExample:"
  },
  {
    "title": "Sum of Largest Prime Substrings",
    "problem_id": "3815",
    "frontend_id": "3556",
    "difficulty": "Medium",
    "problem_slug": "sum-of-largest-prime-substrings",
    "topics": [
      "Hash Table",
      "Math",
      "String",
      "Sorting",
      "Number Theory"
    ],
    "description": "Given a string s, find the sum of the 3 largest unique prime numbers that can be formed using any of its substrings.\nReturn the sum of the three largest unique prime numbers that can be formed. If fewer than three exist, return the sum of all available primes. If no prime numbers can be formed, return 0.\nNote: Each prime number should be counted only once, even if it appears in multiple substrings. Additionally, when converting a substring to an integer, any leading zeros are ignored.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Maximum Number of Non Intersecting Substrings",
    "problem_id": "3857",
    "frontend_id": "3557",
    "difficulty": "Medium",
    "problem_slug": "find-maximum-number-of-non-intersecting-substrings",
    "topics": [
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "You are given a string word.\nReturn the maximum number of non-intersecting substrings of word that are at least four characters long and start and end with the same letter.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Ways to Assign Edge Weights I",
    "problem_id": "3844",
    "frontend_id": "3558",
    "difficulty": "Medium",
    "problem_slug": "number-of-ways-to-assign-edge-weights-i",
    "topics": [
      "Math",
      "Tree",
      "Depth-First Search"
    ],
    "description": "There is an undirected tree with n nodes labeled from 1 to n, rooted at node 1. The tree is represented by a 2D integer array edges of length n - 1, where edges[i] = [ui, vi] indicates that there is an edge between nodes ui and vi.\nInitially, all edges have a weight of 0. You must assign each edge a weight of either 1 or 2.\nThe cost of a path between any two nodes u and v is the total weight of all edges in the path connecting them.\nSelect any one node x at the maximum depth. Return the number of ways to assign edge weights in the path from node 1 to x such that its total cost is odd.\nSince the answer may be large, return it modulo 109 + 7.\nNote: Ignore all edges not in the path from node 1 to x.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Ways to Assign Edge Weights II",
    "problem_id": "3842",
    "frontend_id": "3559",
    "difficulty": "Hard",
    "problem_slug": "number-of-ways-to-assign-edge-weights-ii",
    "topics": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Tree",
      "Depth-First Search"
    ],
    "description": "There is an undirected tree with n nodes labeled from 1 to n, rooted at node 1. The tree is represented by a 2D integer array edges of length n - 1, where edges[i] = [ui, vi] indicates that there is an edge between nodes ui and vi.\nInitially, all edges have a weight of 0. You must assign each edge a weight of either 1 or 2.\nThe cost of a path between any two nodes u and v is the total weight of all edges in the path connecting them.\nYou are given a 2D integer array queries. For each queries[i] = [ui, vi], determine the number of ways to assign weights to edges in the path such that the cost of the path between ui and vi is odd.\nReturn an array answer, where answer[i] is the number of valid assignments for queries[i].\nSince the answer may be large, apply modulo 109 + 7 to each answer[i].\nNote: For each query, disregard all edges not in the path between node ui and vi.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Minimum Log Transportation Cost",
    "problem_id": "3879",
    "frontend_id": "3560",
    "difficulty": "Easy",
    "problem_slug": "find-minimum-log-transportation-cost",
    "topics": [
      "Math"
    ],
    "description": "You are given integers n, m, and k.\nThere are two logs of lengths n and m units, which need to be transported in three trucks where each truck can carry one log with length at most k units.\nYou may cut the logs into smaller pieces, where the cost of cutting a log of length x into logs of length len1 and len2 is cost = len1 * len2 such that len1 + len2 = x.\nReturn the minimum total cost to distribute the logs onto the trucks. If the logs don't need to be cut, the total cost is 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Resulting String After Adjacent Removals",
    "problem_id": "3860",
    "frontend_id": "3561",
    "difficulty": "Medium",
    "problem_slug": "resulting-string-after-adjacent-removals",
    "topics": [
      "String",
      "Stack",
      "Simulation"
    ],
    "description": "You are given a string s consisting of lowercase English letters.\nYou must repeatedly perform the following operation while the string s has at least two consecutive characters:\nReturn the resulting string after no more operations can be performed.\nNote: Consider the alphabet as circular, thus 'a' and 'z' are consecutive.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Profit from Trading Stocks with Discounts",
    "problem_id": "3854",
    "frontend_id": "3562",
    "difficulty": "Hard",
    "problem_slug": "maximum-profit-from-trading-stocks-with-discounts",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Tree",
      "Depth-First Search"
    ],
    "description": "You are given an integer n, representing the number of employees in a company. Each employee is assigned a unique ID from 1 to n, and employee 1 is the CEO. You are given two 1-based integer arrays, present and future, each of length n, where:\nThe company's hierarchy is represented by a 2D integer array hierarchy, where hierarchy[i] = [ui, vi] means that employee ui is the direct boss of employee vi.\nAdditionally, you have an integer budget representing the total funds available for investment.\nHowever, the company has a discount policy: if an employee's direct boss purchases their own stock, then the employee can buy their stock at half the original price (floor(present[v] / 2)).\nReturn the maximum profit that can be achieved without exceeding the given budget.\nNote:\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Lexicographically Smallest String After Adjacent Removals",
    "problem_id": "3867",
    "frontend_id": "3563",
    "difficulty": "Hard",
    "problem_slug": "lexicographically-smallest-string-after-adjacent-removals",
    "topics": [
      "String",
      "Dynamic Programming"
    ],
    "description": "You are given a string s consisting of lowercase English letters.\nYou can perform the following operation any number of times (including zero):\nReturn the lexicographically smallest string that can be obtained after performing the operations optimally.\nNote: Consider the alphabet as circular, thus 'a' and 'z' are consecutive.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Seasonal Sales Analysis",
    "problem_id": "3898",
    "frontend_id": "3564",
    "difficulty": "Medium",
    "problem_slug": "seasonal-sales-analysis",
    "topics": [
      "Database"
    ],
    "description": "Table: sales\nTable: products\nWrite a solution to find the most popular product category for each season. The seasons are defined as:\nThe popularity of a category is determined by the total quantity sold in that season. If there is a tie, select the category with the highest total revenue (quantity × price).\nReturn the result table ordered by season in ascending order.\nThe result format is in the following example.\nExample:"
  },
  {
    "title": "Partition Array into Two Equal Product Subsets",
    "problem_id": "3843",
    "frontend_id": "3566",
    "difficulty": "Medium",
    "problem_slug": "partition-array-into-two-equal-product-subsets",
    "topics": [
      "Array",
      "Bit Manipulation",
      "Recursion",
      "Enumeration"
    ],
    "description": "You are given an integer array nums containing distinct positive integers and an integer target.\nDetermine if you can partition nums into two non-empty disjoint subsets, with each element belonging to exactly one subset, such that the product of the elements in each subset is equal to target.\nReturn true if such a partition exists and false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Absolute Difference in Sliding Submatrix",
    "problem_id": "3884",
    "frontend_id": "3567",
    "difficulty": "Medium",
    "problem_slug": "minimum-absolute-difference-in-sliding-submatrix",
    "topics": [
      "Array",
      "Sorting",
      "Matrix"
    ],
    "description": "You are given an m x n integer matrix grid and an integer k.\nFor every contiguous k x k submatrix of grid, compute the minimum absolute difference between any two distinct values within that submatrix.\nReturn a 2D array ans of size (m - k + 1) x (n - k + 1), where ans[i][j] is the minimum absolute difference in the submatrix whose top-left corner is (i, j) in grid.\nNote: If all elements in the submatrix have the same value, the answer will be 0.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Moves to Clean the Classroom",
    "problem_id": "3870",
    "frontend_id": "3568",
    "difficulty": "Medium",
    "problem_slug": "minimum-moves-to-clean-the-classroom",
    "topics": [
      "Array",
      "Hash Table",
      "Bit Manipulation",
      "Breadth-First Search",
      "Matrix"
    ],
    "description": "You are given an m x n grid classroom where a student volunteer is tasked with cleaning up litter scattered around the room. Each cell in the grid is one of the following:\nYou are also given an integer energy, representing the student's maximum energy capacity. The student starts with this energy from the starting position 'S'.\nEach move to an adjacent cell (up, down, left, or right) costs 1 unit of energy. If the energy reaches 0, the student can only continue if they are on a reset area 'R', which resets the energy to its maximum capacity energy.\nReturn the minimum number of moves required to collect all litter items, or -1 if it's impossible.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximize Count of Distinct Primes After Split",
    "problem_id": "3878",
    "frontend_id": "3569",
    "difficulty": "Hard",
    "problem_slug": "maximize-count-of-distinct-primes-after-split",
    "topics": [
      "Array",
      "Math",
      "Segment Tree",
      "Number Theory"
    ],
    "description": "You are given an integer array nums having length n and a 2D integer array queries where queries[i] = [idx, val].\nFor each query:\nNote: The changes made to the array in one query persist into the next query.\nReturn an array containing the result for each query, in the order they are given.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Books with No Available Copies",
    "problem_id": "3910",
    "frontend_id": "3570",
    "difficulty": "Easy",
    "problem_slug": "find-books-with-no-available-copies",
    "topics": [
      "Database"
    ],
    "description": "Table: library_books\nTable: borrowing_records\nWrite a solution to find all books that are currently borrowed (not returned) and have zero copies available in the library.\nReturn the result table ordered by current borrowers in descending order, then by book title in ascending order.\nThe result format is in the following example.\nExample:"
  },
  {
    "title": "Maximize Y‑Sum by Picking a Triplet of Distinct X‑Values",
    "problem_id": "3894",
    "frontend_id": "3572",
    "difficulty": "Medium",
    "problem_slug": "maximize-ysum-by-picking-a-triplet-of-distinct-xvalues",
    "topics": [
      "Array",
      "Hash Table",
      "Greedy",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "description": "You are given two integer arrays x and y, each of length n. You must choose three distinct indices i, j, and k such that:\nYour goal is to maximize the value of y[i] + y[j] + y[k] under these conditions. Return the maximum possible sum that can be obtained by choosing such a triplet of indices.\nIf no such triplet exists, return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Best Time to Buy and Sell Stock V",
    "problem_id": "3892",
    "frontend_id": "3573",
    "difficulty": "Medium",
    "problem_slug": "best-time-to-buy-and-sell-stock-v",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given an integer array prices where prices[i] is the price of a stock in dollars on the ith day, and an integer k.\nYou are allowed to make at most k transactions, where each transaction can be either of the following:\nNote that you must complete each transaction before starting another. Additionally, you can't buy or sell on the same day you are selling or buying back as part of a previous transaction.\nReturn the maximum total profit you can earn by making at most k transactions.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximize Subarray GCD Score",
    "problem_id": "3888",
    "frontend_id": "3574",
    "difficulty": "Hard",
    "problem_slug": "maximize-subarray-gcd-score",
    "topics": [
      "Array",
      "Math",
      "Enumeration",
      "Number Theory"
    ],
    "description": "You are given an array of positive integers nums and an integer k.\nYou may perform at most k operations. In each operation, you can choose one element in the array and double its value. Each element can be doubled at most once.\nThe score of a contiguous subarray is defined as the product of its length and the greatest common divisor (GCD) of all its elements.\nYour task is to return the maximum score that can be achieved by selecting a contiguous subarray from the modified array.\nNote:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Good Subtree Score",
    "problem_id": "3875",
    "frontend_id": "3575",
    "difficulty": "Hard",
    "problem_slug": "maximum-good-subtree-score",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Tree",
      "Depth-First Search",
      "Bitmask"
    ],
    "description": "You are given an undirected tree rooted at node 0 with n nodes numbered from 0 to n - 1. Each node i has an integer value vals[i], and its parent is given by par[i].\nA subset of nodes within the subtree of a node is called good if every digit from 0 to 9 appears at most once in the decimal representation of the values of the selected nodes.\nThe score of a good subset is the sum of the values of its nodes.\nDefine an array maxScore of length n, where maxScore[u] represents the maximum possible sum of values of a good subset of nodes that belong to the subtree rooted at node u, including u itself and all its descendants.\nReturn the sum of all values in maxScore.\nSince the answer may be large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Transform Array to All Equal Elements",
    "problem_id": "3876",
    "frontend_id": "3576",
    "difficulty": "Medium",
    "problem_slug": "transform-array-to-all-equal-elements",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "You are given an integer array nums of size n containing only 1 and -1, and an integer k.\nYou can perform the following operation at most k times:\nNote that you can choose the same index i more than once in different operations.\nReturn true if it is possible to make all elements of the array equal after at most k operations, and false otherwise.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count the Number of Computer Unlocking Permutations",
    "problem_id": "3864",
    "frontend_id": "3577",
    "difficulty": "Medium",
    "problem_slug": "count-the-number-of-computer-unlocking-permutations",
    "topics": [
      "Array",
      "Math",
      "Brainteaser",
      "Combinatorics"
    ],
    "description": "You are given an array complexity of length n.\nThere are n locked computers in a room with labels from 0 to n - 1, each with its own unique password. The password of the computer i has a complexity complexity[i].\nThe password for the computer labeled 0 is already decrypted and serves as the root. All other computers must be unlocked using it or another previously unlocked computer, following this information:\nFind the number of permutations of [0, 1, 2, ..., (n - 1)] that represent a valid order in which the computers can be unlocked, starting from computer 0 as the only initially unlocked one.\nSince the answer may be large, return it modulo 109 + 7.\nNote that the password for the computer with label 0 is decrypted, and not the computer with the first position in the permutation.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Partitions With Max-Min Difference at Most K",
    "problem_id": "3835",
    "frontend_id": "3578",
    "difficulty": "Medium",
    "problem_slug": "count-partitions-with-max-min-difference-at-most-k",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Queue",
      "Sliding Window",
      "Prefix Sum",
      "Monotonic Queue"
    ],
    "description": "You are given an integer array nums and an integer k. Your task is to partition nums into one or more non-empty contiguous segments such that in each segment, the difference between its maximum and minimum elements is at most k.\nReturn the total number of ways to partition nums under this condition.\nSince the answer may be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Steps to Convert String with Operations",
    "problem_id": "3866",
    "frontend_id": "3579",
    "difficulty": "Hard",
    "problem_slug": "minimum-steps-to-convert-string-with-operations",
    "topics": [
      "String",
      "Dynamic Programming",
      "Greedy"
    ],
    "description": "You are given two strings, word1 and word2, of equal length. You need to transform word1 into word2.\nFor this, divide word1 into one or more contiguous substrings. For each substring substr you can perform the following operations:\nEach of these counts as one operation and each character of each substring can be used in each type of operation at most once (i.e. no single index may be involved in more than one replace, one swap, or one reverse).\nReturn the minimum number of operations required to transform word1 into word2.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Consistently Improving Employees",
    "problem_id": "3921",
    "frontend_id": "3580",
    "difficulty": "Medium",
    "problem_slug": "find-consistently-improving-employees",
    "topics": [
      "Database"
    ],
    "description": "Table: employees\nTable: performance_reviews\nWrite a solution to find employees who have consistently improved their performance over their last three reviews.\nReturn the result table ordered by improvement score in descending order, then by name in ascending order.\nThe result format is in the following example.\nExample:"
  },
  {
    "title": "Generate Tag for Video Caption",
    "problem_id": "3893",
    "frontend_id": "3582",
    "difficulty": "Easy",
    "problem_slug": "generate-tag-for-video-caption",
    "topics": [
      "String",
      "Simulation"
    ],
    "description": "You are given a string caption representing the caption for a video.\nThe following actions must be performed in order to generate a valid tag for the video:\nReturn the tag after performing the actions on caption.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Special Triplets",
    "problem_id": "3885",
    "frontend_id": "3583",
    "difficulty": "Medium",
    "problem_slug": "count-special-triplets",
    "topics": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "description": "You are given an integer array nums.\nA special triplet is defined as a triplet of indices (i, j, k) such that:\nReturn the total number of special triplets in the array.\nSince the answer may be large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximum Product of First and Last Elements of a Subsequence",
    "problem_id": "3755",
    "frontend_id": "3584",
    "difficulty": "Medium",
    "problem_slug": "maximum-product-of-first-and-last-elements-of-a-subsequence",
    "topics": [
      "Array",
      "Two Pointers"
    ],
    "description": "You are given an integer array nums and an integer m.\nReturn the maximum product of the first and last elements of any subsequence of nums of size m.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Weighted Median Node in Tree",
    "problem_id": "3900",
    "frontend_id": "3585",
    "difficulty": "Hard",
    "problem_slug": "find-weighted-median-node-in-tree",
    "topics": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Tree",
      "Depth-First Search"
    ],
    "description": "You are given an integer n and an undirected, weighted tree rooted at node 0 with n nodes numbered from 0 to n - 1. This is represented by a 2D array edges of length n - 1, where edges[i] = [ui, vi, wi] indicates an edge from node ui to vi with weight wi.\nThe weighted median node is defined as the first node x on the path from ui to vi such that the sum of edge weights from ui to x is greater than or equal to half of the total path weight.\nYou are given a 2D integer array queries. For each queries[j] = [uj, vj], determine the weighted median node along the path from uj to vj.\nReturn an array ans, where ans[j] is the node index of the weighted median for queries[j].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find COVID Recovery Patients",
    "problem_id": "3932",
    "frontend_id": "3586",
    "difficulty": "Medium",
    "problem_slug": "find-covid-recovery-patients",
    "topics": [
      "Database"
    ],
    "description": "Table: patients\nTable: covid_tests\nWrite a solution to find patients who have recovered from COVID - patients who tested positive but later tested negative.\nReturn the result table ordered by recovery_time in ascending order, then by patient_name in ascending order.\nThe result format is in the following example.\nExample:"
  },
  {
    "title": "Minimum Adjacent Swaps to Alternate Parity",
    "problem_id": "3904",
    "frontend_id": "3587",
    "difficulty": "Medium",
    "problem_slug": "minimum-adjacent-swaps-to-alternate-parity",
    "topics": [
      "Array",
      "Greedy"
    ],
    "description": "You are given an array nums of distinct integers.\nIn one operation, you can swap any two adjacent elements in the array.\nAn arrangement of the array is considered valid if the parity of adjacent elements alternates, meaning every pair of neighboring elements consists of one even and one odd number.\nReturn the minimum number of adjacent swaps required to transform nums into any valid arrangement.\nIf it is impossible to rearrange nums such that no two adjacent elements have the same parity, return -1.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:"
  },
  {
    "title": "Find Maximum Area of a Triangle",
    "problem_id": "3868",
    "frontend_id": "3588",
    "difficulty": "Medium",
    "problem_slug": "find-maximum-area-of-a-triangle",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Greedy",
      "Geometry",
      "Enumeration"
    ],
    "description": "You are given a 2D array coords of size n x 2, representing the coordinates of n points in an infinite Cartesian plane.\nFind twice the maximum area of a triangle with its corners at any three elements from coords, such that at least one side of this triangle is parallel to the x-axis or y-axis. Formally, if the maximum area of such a triangle is A, return 2 * A.\nIf no such triangle exists, return -1.\nNote that a triangle cannot have zero area.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Prime-Gap Balanced Subarrays",
    "problem_id": "3907",
    "frontend_id": "3589",
    "difficulty": "Medium",
    "problem_slug": "count-prime-gap-balanced-subarrays",
    "topics": [
      "Array",
      "Math",
      "Queue",
      "Sliding Window",
      "Number Theory",
      "Monotonic Queue"
    ],
    "description": "You are given an integer array nums and an integer k.\nA subarray is called prime-gap balanced if:\nReturn the count of prime-gap balanced subarrays in nums.\nNote:\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Kth Smallest Path XOR Sum",
    "problem_id": "3906",
    "frontend_id": "3590",
    "difficulty": "Hard",
    "problem_slug": "kth-smallest-path-xor-sum",
    "topics": [
      "Array",
      "Tree",
      "Depth-First Search",
      "Ordered Set"
    ],
    "description": "You are given an undirected tree rooted at node 0 with n nodes numbered from 0 to n - 1. Each node i has an integer value vals[i], and its parent is given by par[i].\nThe path XOR sum from the root to a node u is defined as the bitwise XOR of all vals[i] for nodes i on the path from the root node to node u, inclusive.\nYou are given a 2D integer array queries, where queries[j] = [uj, kj]. For each query, find the kjth smallest distinct path XOR sum among all nodes in the subtree rooted at uj. If there are fewer than kj distinct path XOR sums in that subtree, the answer is -1.\nReturn an integer array where the jth element is the answer to the jth query.\nIn a rooted tree, the subtree of a node v includes v and all nodes whose path to the root passes through v, that is, v and its descendants.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check if Any Element Has Prime Frequency",
    "problem_id": "3914",
    "frontend_id": "3591",
    "difficulty": "Easy",
    "problem_slug": "check-if-any-element-has-prime-frequency",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Counting",
      "Number Theory"
    ],
    "description": "You are given an integer array nums.\nReturn true if the frequency of any element of the array is prime, otherwise, return false.\nThe frequency of an element x is the number of times it occurs in the array.\nA prime number is a natural number greater than 1 with only two factors, 1 and itself.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Inverse Coin Change",
    "problem_id": "3903",
    "frontend_id": "3592",
    "difficulty": "Medium",
    "problem_slug": "inverse-coin-change",
    "topics": [
      "Array",
      "Dynamic Programming"
    ],
    "description": "You are given a 1-indexed integer array numWays, where numWays[i] represents the number of ways to select a total amount i using an infinite supply of some fixed coin denominations. Each denomination is a positive integer with value at most numWays.length.\nHowever, the exact coin denominations have been lost. Your task is to recover the set of denominations that could have resulted in the given numWays array.\nReturn a sorted array containing unique integers which represents this set of denominations.\nIf no such set exists, return an empty array.\nExample 1:\nConstraints:"
  },
  {
    "title": "Minimum Increments to Equalize Leaf Paths",
    "problem_id": "3909",
    "frontend_id": "3593",
    "difficulty": "Medium",
    "problem_slug": "minimum-increments-to-equalize-leaf-paths",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Tree",
      "Depth-First Search"
    ],
    "description": "You are given an integer n and an undirected tree rooted at node 0 with n nodes numbered from 0 to n - 1. This is represented by a 2D array edges of length n - 1, where edges[i] = [ui, vi] indicates an edge from node ui to vi .\nEach node i has an associated cost given by cost[i], representing the cost to traverse that node.\nThe score of a path is defined as the sum of the costs of all nodes along the path.\nYour goal is to make the scores of all root-to-leaf paths equal by increasing the cost of any number of nodes by any non-negative amount.\nReturn the minimum number of nodes whose cost must be increased to make all root-to-leaf path scores equal.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Time to Transport All Individuals",
    "problem_id": "3896",
    "frontend_id": "3594",
    "difficulty": "Hard",
    "problem_slug": "minimum-time-to-transport-all-individuals",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Graph",
      "Heap (Priority Queue)",
      "Shortest Path",
      "Bitmask"
    ],
    "description": "You are given n individuals at a base camp who need to cross a river to reach a destination using a single boat. The boat can carry at most k people at a time. The trip is affected by environmental conditions that vary cyclically over m stages.\nEach stage j has a speed multiplier mul[j]:\nEach individual i has a rowing strength represented by time[i], the time (in minutes) it takes them to cross alone in neutral conditions.\nRules:\nReturn the minimum total time required to transport all individuals. If it is not possible to transport all individuals to the destination, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Partition String ",
    "problem_id": "3905",
    "frontend_id": "3597",
    "difficulty": "Medium",
    "problem_slug": "partition-string",
    "topics": [
      "Hash Table",
      "String",
      "Trie",
      "Simulation"
    ],
    "description": "Given a string s, partition it into unique segments according to the following procedure:\nReturn an array of strings segments, where segments[i] is the ith segment created.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Longest Common Prefix Between Adjacent Strings After Removals",
    "problem_id": "3800",
    "frontend_id": "3598",
    "difficulty": "Medium",
    "problem_slug": "longest-common-prefix-between-adjacent-strings-after-removals",
    "topics": [
      "Array",
      "String"
    ],
    "description": "You are given an array of strings words. For each index i in the range [0, words.length - 1], perform the following steps:\nReturn an array answer, where answer[i] is the length of the longest common prefix between the adjacent pairs after removing the element at index i. If no adjacent pairs remain or if none share a common prefix, then answer[i] should be 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Partition Array to Minimize XOR",
    "problem_id": "3913",
    "frontend_id": "3599",
    "difficulty": "Medium",
    "problem_slug": "partition-array-to-minimize-xor",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Prefix Sum"
    ],
    "description": "You are given an integer array nums and an integer k.\nYour task is to partition nums into k non-empty subarrays. For each subarray, compute the bitwise XOR of all its elements.\nReturn the minimum possible value of the maximum XOR among these k subarrays.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Maximize Spanning Tree Stability with Upgrades",
    "problem_id": "3902",
    "frontend_id": "3600",
    "difficulty": "Hard",
    "problem_slug": "maximize-spanning-tree-stability-with-upgrades",
    "topics": [
      "Binary Search",
      "Greedy",
      "Union Find",
      "Graph",
      "Minimum Spanning Tree"
    ],
    "description": "You are given an integer n, representing n nodes numbered from 0 to n - 1 and a list of edges, where edges[i] = [ui, vi, si, musti]:\nYou are also given an integer k, the maximum number of upgrades you can perform. Each upgrade doubles the strength of an edge, and each eligible edge (with musti == 0) can be upgraded at most once.\nThe stability of a spanning tree is defined as the minimum strength score among all edges included in it.\nReturn the maximum possible stability of any valid spanning tree. If it is impossible to connect all nodes, return -1.\nNote: A spanning tree of a graph with n nodes is a subset of the edges that connects all nodes together (i.e. the graph is connected) without forming any cycles, and uses exactly n - 1 edges.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Drivers with Improved Fuel Efficiency",
    "problem_id": "3942",
    "frontend_id": "3601",
    "difficulty": "Medium",
    "problem_slug": "find-drivers-with-improved-fuel-efficiency",
    "topics": [
      "Database"
    ],
    "description": "Table: drivers\nTable: trips\nWrite a solution to find drivers whose fuel efficiency has improved by comparing their average fuel efficiency in the first half of the year with the second half of the year.\nReturn the result table ordered by efficiency improvement in descending order, then by driver name in ascending order.\nThe result format is in the following example.\nExample:"
  },
  {
    "title": "Hexadecimal and Hexatrigesimal Conversion",
    "problem_id": "3912",
    "frontend_id": "3602",
    "difficulty": "Easy",
    "problem_slug": "hexadecimal-and-hexatrigesimal-conversion",
    "topics": [
      "Math",
      "String"
    ],
    "description": "You are given an integer n.\nReturn the concatenation of the hexadecimal representation of n2 and the hexatrigesimal representation of n3.\nA hexadecimal number is defined as a base-16 numeral system that uses the digits 0 – 9 and the uppercase letters A - F to represent values from 0 to 15.\nA hexatrigesimal number is defined as a base-36 numeral system that uses the digits 0 – 9 and the uppercase letters A - Z to represent values from 0 to 35.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Cost Path with Alternating Directions II",
    "problem_id": "3927",
    "frontend_id": "3603",
    "difficulty": "Medium",
    "problem_slug": "minimum-cost-path-with-alternating-directions-ii",
    "topics": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "description": "You are given two integers m and n representing the number of rows and columns of a grid, respectively.\nThe cost to enter cell (i, j) is defined as (i + 1) * (j + 1).\nYou are also given a 2D integer array waitCost where waitCost[i][j] defines the cost to wait on that cell.\nThe path will always begin by entering cell (0, 0) on move 1 and paying the entrance cost.\nAt each step, you follow an alternating pattern:\nReturn the minimum total cost required to reach (m - 1, n - 1).\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Time to Reach Destination in Directed Graph",
    "problem_id": "3916",
    "frontend_id": "3604",
    "difficulty": "Medium",
    "problem_slug": "minimum-time-to-reach-destination-in-directed-graph",
    "topics": [
      "Graph",
      "Heap (Priority Queue)",
      "Shortest Path"
    ],
    "description": "You are given an integer n and a directed graph with n nodes labeled from 0 to n - 1. This is represented by a 2D array edges, where edges[i] = [ui, vi, starti, endi] indicates an edge from node ui to vi that can only be used at any integer time t such that starti <= t <= endi.\nYou start at node 0 at time 0.\nIn one unit of time, you can either:\nReturn the minimum time required to reach node n - 1. If it is impossible, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Stability Factor of Array",
    "problem_id": "3920",
    "frontend_id": "3605",
    "difficulty": "Hard",
    "problem_slug": "minimum-stability-factor-of-array",
    "topics": [
      "Array",
      "Math",
      "Binary Search",
      "Greedy",
      "Segment Tree",
      "Number Theory"
    ],
    "description": "You are given an integer array nums and an integer maxC.\nA subarray is called stable if the highest common factor (HCF) of all its elements is greater than or equal to 2.\nThe stability factor of an array is defined as the length of its longest stable subarray.\nYou may modify at most maxC elements of the array to any integer.\nReturn the minimum possible stability factor of the array after at most maxC modifications. If no stable subarray remains, return 0.\nNote:\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Coupon Code Validator",
    "problem_id": "3934",
    "frontend_id": "3606",
    "difficulty": "Easy",
    "problem_slug": "coupon-code-validator",
    "topics": [
      "Array",
      "Hash Table",
      "String",
      "Sorting"
    ],
    "description": "You are given three arrays of length n that describe the properties of n coupons: code, businessLine, and isActive. The ith coupon has:\nA coupon is considered valid if all of the following conditions hold:\nReturn an array of the codes of all valid coupons, sorted first by their businessLine in the order: \"electronics\", \"grocery\", \"pharmacy\", \"restaurant\", and then by code in lexicographical (ascending) order within each category.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Power Grid Maintenance",
    "problem_id": "3863",
    "frontend_id": "3607",
    "difficulty": "Medium",
    "problem_slug": "power-grid-maintenance",
    "topics": [
      "Array",
      "Hash Table",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph",
      "Heap (Priority Queue)",
      "Ordered Set"
    ],
    "description": "You are given an integer c representing c power stations, each with a unique identifier id from 1 to c (1‑based indexing).\nThese stations are interconnected via n bidirectional cables, represented by a 2D array connections, where each element connections[i] = [ui, vi] indicates a connection between station ui and station vi. Stations that are directly or indirectly connected form a power grid.\nInitially, all stations are online (operational).\nYou are also given a 2D array queries, where each query is one of the following two types:\nReturn an array of integers representing the results of each query of type [1, x] in the order they appear.\nNote: The power grid preserves its structure; an offline (non‑operational) node remains part of its grid and taking it offline does not alter connectivity.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Time for K Connected Components",
    "problem_id": "3908",
    "frontend_id": "3608",
    "difficulty": "Medium",
    "problem_slug": "minimum-time-for-k-connected-components",
    "topics": [
      "Binary Search",
      "Union Find",
      "Graph",
      "Sorting"
    ],
    "description": "You are given an integer n and an undirected graph with n nodes labeled from 0 to n - 1. This is represented by a 2D array edges, where edges[i] = [ui, vi, timei] indicates an undirected edge between nodes ui and vi that can be removed at timei.\nYou are also given an integer k.\nInitially, the graph may be connected or disconnected. Your task is to find the minimum time t such that after removing all edges with time <= t, the graph contains at least k connected components.\nReturn the minimum time t.\nA connected component is a subgraph of a graph in which there exists a path between any two vertices, and no vertex of the subgraph shares an edge with a vertex outside of the subgraph.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Moves to Reach Target in Grid",
    "problem_id": "3922",
    "frontend_id": "3609",
    "difficulty": "Hard",
    "problem_slug": "minimum-moves-to-reach-target-in-grid",
    "topics": [
      "Math"
    ],
    "description": "You are given four integers sx, sy, tx, and ty, representing two points (sx, sy) and (tx, ty) on an infinitely large 2D grid.\nYou start at (sx, sy).\nAt any point (x, y), define m = max(x, y). You can either:\nReturn the minimum number of moves required to reach (tx, ty). If it is impossible to reach the target, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Overbooked Employees",
    "problem_id": "3943",
    "frontend_id": "3611",
    "difficulty": "Medium",
    "problem_slug": "find-overbooked-employees",
    "topics": [
      "Database"
    ],
    "description": "Table: employees\nTable: meetings\nWrite a solution to find employees who are meeting-heavy - employees who spend more than 50% of their working time in meetings during any given week.\nReturn the result table ordered by the number of meeting-heavy weeks in descending order, then by employee name in ascending order.\nThe result format is in the following example.\nExample:"
  },
  {
    "title": "Process String with Special Operations I",
    "problem_id": "3931",
    "frontend_id": "3612",
    "difficulty": "Medium",
    "problem_slug": "process-string-with-special-operations-i",
    "topics": [
      "String",
      "Simulation"
    ],
    "description": "You are given a string s consisting of lowercase English letters and the special characters: *, #, and %.\nBuild a new string result by processing s according to the following rules from left to right:\nReturn the final string result after processing all characters in s.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimize Maximum Component Cost",
    "problem_id": "3881",
    "frontend_id": "3613",
    "difficulty": "Medium",
    "problem_slug": "minimize-maximum-component-cost",
    "topics": [
      "Binary Search",
      "Sort",
      "Union Find",
      "Graph"
    ],
    "description": "You are given an undirected connected graph with n nodes labeled from 0 to n - 1 and a 2D integer array edges where edges[i] = [ui, vi, wi] denotes an undirected edge between node ui and node vi with weight wi, and an integer k.\nYou are allowed to remove any number of edges from the graph such that the resulting graph has at most k connected components.\nThe cost of a component is defined as the maximum edge weight in that component. If a component has no edges, its cost is 0.\nReturn the minimum possible value of the maximum cost among all components after such removals.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Process String with Special Operations II",
    "problem_id": "3939",
    "frontend_id": "3614",
    "difficulty": "Hard",
    "problem_slug": "process-string-with-special-operations-ii",
    "topics": [
      "String",
      "Simulation"
    ],
    "description": "You are given a string s consisting of lowercase English letters and the special characters: '*', '#', and '%'.\nYou are also given an integer k.\nBuild a new string result by processing s according to the following rules from left to right:\nReturn the kth character of the final string result. If k is out of the bounds of result, return '.'.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Longest Palindromic Path in Graph",
    "problem_id": "3930",
    "frontend_id": "3615",
    "difficulty": "Hard",
    "problem_slug": "longest-palindromic-path-in-graph",
    "topics": [
      "String",
      "Dynamic Programming",
      "Bit Manipulation",
      "Graph",
      "Bitmask"
    ],
    "description": "You are given an integer n and an undirected graph with n nodes labeled from 0 to n - 1 and a 2D array edges, where edges[i] = [ui, vi] indicates an edge between nodes ui and vi.\nYou are also given a string label of length n, where label[i] is the character associated with node i.\nYou may start at any node and move to any adjacent node, visiting each node at most once.\nReturn the maximum possible length of a palindrome that can be formed by visiting a set of unique nodes along a valid path.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Find Students with Study Spiral Pattern",
    "problem_id": "3961",
    "frontend_id": "3617",
    "difficulty": "Hard",
    "problem_slug": "find-students-with-study-spiral-pattern",
    "topics": [],
    "description": "Table: students\nTable: study_sessions\nWrite a solution to find students who follow the Study Spiral Pattern - students who consistently study multiple subjects in a rotating cycle.\nReturn the result table ordered by cycle length in descending order, then by total study hours in descending order.\nThe result format is in the following example.\nExample:"
  },
  {
    "title": "Split Array by Prime Indices",
    "problem_id": "3936",
    "frontend_id": "3618",
    "difficulty": "Medium",
    "problem_slug": "split-array-by-prime-indices",
    "topics": [
      "Array",
      "Math",
      "Number Theory"
    ],
    "description": "You are given an integer array nums.\nSplit nums into two arrays A and B using the following rule:\nReturn the absolute difference between the sums of the two arrays: |sum(A) - sum(B)|.\nNote: An empty array has a sum of 0.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Islands With Total Value Divisible by K",
    "problem_id": "3823",
    "frontend_id": "3619",
    "difficulty": "Medium",
    "problem_slug": "count-islands-with-total-value-divisible-by-k",
    "topics": [
      "Array",
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Matrix"
    ],
    "description": "You are given an m x n matrix grid and a positive integer k. An island is a group of positive integers (representing land) that are 4-directionally connected (horizontally or vertically).\nThe total value of an island is the sum of the values of all cells in the island.\nReturn the number of islands with a total value divisible by k.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Network Recovery Pathways",
    "problem_id": "3919",
    "frontend_id": "3620",
    "difficulty": "Hard",
    "problem_slug": "network-recovery-pathways",
    "topics": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Graph",
      "Topological Sort",
      "Heap (Priority Queue)",
      "Shortest Path"
    ],
    "description": "You are given a directed acyclic graph of n nodes numbered from 0 to n − 1. This is represented by a 2D array edges of length m, where edges[i] = [ui, vi, costi] indicates a one‑way communication from node ui to node vi with a recovery cost of costi.\nSome nodes may be offline. You are given a boolean array online where online[i] = true means node i is online. Nodes 0 and n − 1 are always online.\nA path from 0 to n − 1 is valid if:\nFor each valid path, define its score as the minimum edge‑cost along that path.\nReturn the maximum path score (i.e., the largest minimum-edge cost) among all valid paths. If no valid path exists, return -1.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Integers With Popcount-Depth Equal to K I",
    "problem_id": "3937",
    "frontend_id": "3621",
    "difficulty": "Hard",
    "problem_slug": "number-of-integers-with-popcount-depth-equal-to-k-i",
    "topics": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "description": "You are given two integers n and k.\nFor any positive integer x, define the following sequence:\nThis sequence will eventually reach the value 1.\nThe popcount-depth of x is defined as the smallest integer d >= 0 such that pd = 1.\nFor example, if x = 7 (binary representation \"111\"). Then, the sequence is: 7 → 3 → 2 → 1, so the popcount-depth of 7 is 3.\nYour task is to determine the number of integers in the range [1, n] whose popcount-depth is exactly equal to k.\nReturn the number of such integers.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Check Divisibility by Digit Sum and Product",
    "problem_id": "3918",
    "frontend_id": "3622",
    "difficulty": "Easy",
    "problem_slug": "check-divisibility-by-digit-sum-and-product",
    "topics": [
      "Math"
    ],
    "description": "You are given a positive integer n. Determine whether n is divisible by the sum of the following two values:\nReturn true if n is divisible by this sum; otherwise, return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Count Number of Trapezoids I",
    "problem_id": "3886",
    "frontend_id": "3623",
    "difficulty": "Medium",
    "problem_slug": "count-number-of-trapezoids-i",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Geometry"
    ],
    "description": "You are given a 2D integer array points, where points[i] = [xi, yi] represents the coordinates of the ith point on the Cartesian plane.\nA horizontal trapezoid is a convex quadrilateral with at least one pair of horizontal sides (i.e. parallel to the x-axis). Two lines are parallel if and only if they have the same slope.\nReturn the  number of unique horizontal trapezoids that can be formed by choosing any four distinct points from points.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Number of Integers With Popcount-Depth Equal to K II",
    "problem_id": "3941",
    "frontend_id": "3624",
    "difficulty": "Hard",
    "problem_slug": "number-of-integers-with-popcount-depth-equal-to-k-ii",
    "topics": [
      "Array",
      "Segment Tree"
    ],
    "description": "You are given an integer array nums.\nFor any positive integer x, define the following sequence:\nThis sequence will eventually reach the value 1.\nThe popcount-depth of x is defined as the smallest integer d >= 0 such that pd = 1.\nFor example, if x = 7 (binary representation \"111\"). Then, the sequence is: 7 → 3 → 2 → 1, so the popcount-depth of 7 is 3.\nYou are also given a 2D integer array queries, where each queries[i] is either:\nReturn an integer array answer, where answer[i] is the number of indices for the ith query of type [1, l, r, k].\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Count Number of Trapezoids II",
    "problem_id": "3897",
    "frontend_id": "3625",
    "difficulty": "Hard",
    "problem_slug": "count-number-of-trapezoids-ii",
    "topics": [
      "Array",
      "Hash Table",
      "Math",
      "Geometry"
    ],
    "description": "You are given a 2D integer array points where points[i] = [xi, yi] represents the coordinates of the ith point on the Cartesian plane.\nReturn the number of unique trapezoids that can be formed by choosing any four distinct points from points.\nA trapezoid is a convex quadrilateral with at least one pair of parallel sides. Two lines are parallel if and only if they have the same slope.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Find Stores with Inventory Imbalance",
    "problem_id": "3971",
    "frontend_id": "3626",
    "difficulty": "Medium",
    "problem_slug": "find-stores-with-inventory-imbalance",
    "topics": [],
    "description": "Table: stores\nTable: inventory\nWrite a solution to find stores that have inventory imbalance - stores where the most expensive product has lower stock than the cheapest product.\nReturn the result table ordered by imbalance ratio in descending order, then by store name in ascending order.\nThe result format is in the following example.\nExample:"
  },
  {
    "title": "Maximum Median Sum of Subsequences of Size 3",
    "problem_id": "3766",
    "frontend_id": "3627",
    "difficulty": "Medium",
    "problem_slug": "maximum-median-sum-of-subsequences-of-size-3",
    "topics": [],
    "description": "You are given an integer array nums with a length divisible by 3.\nYou want to make the array empty in steps. In each step, you can select any three elements from the array, compute their median, and remove the selected elements from the array.\nThe median of an odd-length sequence is defined as the middle element of the sequence when it is sorted in non-decreasing order.\nReturn the maximum possible sum of the medians computed from the selected elements.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Number of Subsequences After One Inserting",
    "problem_id": "3948",
    "frontend_id": "3628",
    "difficulty": "Medium",
    "problem_slug": "maximum-number-of-subsequences-after-one-inserting",
    "topics": [],
    "description": "You are given a string s consisting of uppercase English letters.\nYou are allowed to insert at most one uppercase English letter at any position (including the beginning or end) of the string.\nReturn the maximum number of \"LCT\" subsequences that can be formed in the resulting string after at most one insertion.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Minimum Jumps to Reach End via Prime Teleportation",
    "problem_id": "3933",
    "frontend_id": "3629",
    "difficulty": "Medium",
    "problem_slug": "minimum-jumps-to-reach-end-via-prime-teleportation",
    "topics": [],
    "description": "You are given an integer array nums of length n.\nYou start at index 0, and your goal is to reach index n - 1.\nFrom any index i, you may perform one of the following operations:\nReturn the minimum number of jumps required to reach index n - 1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Partition Array for Maximum XOR and AND",
    "problem_id": "3882",
    "frontend_id": "3630",
    "difficulty": "Hard",
    "problem_slug": "partition-array-for-maximum-xor-and-and",
    "topics": [
      "Array",
      "Math",
      "Greedy",
      "Enumeration"
    ],
    "description": "You are given an integer array nums.\nPartition the array into three (possibly empty) subsequences A, B, and C such that every element of nums belongs to exactly one subsequence.\nYour goal is to maximize the value of: XOR(A) + AND(B) + XOR(C)\nwhere:\nReturn the maximum value achievable.\nNote: If multiple partitions result in the same maximum sum, you can consider any one of them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Earliest Finish Time for Land and Water Rides I",
    "problem_id": "3965",
    "frontend_id": "3633",
    "difficulty": "Easy",
    "problem_slug": "earliest-finish-time-for-land-and-water-rides-i",
    "topics": [],
    "description": "You are given two categories of theme park attractions: land rides and water rides.\nA tourist must experience exactly one ride from each category, in either order.\nReturn the earliest possible time at which the tourist can finish both rides.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Removals to Balance Array",
    "problem_id": "3958",
    "frontend_id": "3634",
    "difficulty": "Medium",
    "problem_slug": "minimum-removals-to-balance-array",
    "topics": [],
    "description": "You are given an integer array nums and an integer k.\nAn array is considered balanced if the value of its maximum element is at most k times the minimum element.\nYou may remove any number of elements from nums​​​​​​​ without making it empty.\nReturn the minimum number of elements to remove so that the remaining array is balanced.\nNote: An array of size 1 is considered balanced as its maximum and minimum are equal, and the condition always holds true.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Earliest Finish Time for Land and Water Rides II",
    "problem_id": "3967",
    "frontend_id": "3635",
    "difficulty": "Medium",
    "problem_slug": "earliest-finish-time-for-land-and-water-rides-ii",
    "topics": [],
    "description": "You are given two categories of theme park attractions: land rides and water rides.\nA tourist must experience exactly one ride from each category, in either order.\nReturn the earliest possible time at which the tourist can finish both rides.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Threshold Majority Queries",
    "problem_id": "3955",
    "frontend_id": "3636",
    "difficulty": "Hard",
    "problem_slug": "threshold-majority-queries",
    "topics": [],
    "description": "You are given an integer array nums of length n and an array queries, where queries[i] = [li, ri, thresholdi].\nReturn an array of integers ans where ans[i] is equal to the element in the subarray nums[li...ri] that appears at least thresholdi times, selecting the element with the highest frequency (choosing the smallest in case of a tie), or -1 if no such element exists.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Trionic Array I",
    "problem_id": "3952",
    "frontend_id": "3637",
    "difficulty": "Easy",
    "problem_slug": "trionic-array-i",
    "topics": [],
    "description": "You are given an integer array nums of length n.\nAn array is trionic if there exist indices 0 < p < q < n − 1 such that:\nReturn true if nums is trionic, otherwise return false.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Maximum Balanced Shipments",
    "problem_id": "3954",
    "frontend_id": "3638",
    "difficulty": "Medium",
    "problem_slug": "maximum-balanced-shipments",
    "topics": [],
    "description": "You are given an integer array weight of length n, representing the weights of n parcels arranged in a straight line. A shipment is defined as a contiguous subarray of parcels. A shipment is considered balanced if the weight of the last parcel is strictly less than the maximum weight among all parcels in that shipment.\nSelect a set of non-overlapping, contiguous, balanced shipments such that each parcel appears in at most one shipment (parcels may remain unshipped).\nReturn the maximum possible number of balanced shipments that can be formed.\nExample 1:\nExample 2:\nConstraints:"
  },
  {
    "title": "Minimum Time to Activate String",
    "problem_id": "3944",
    "frontend_id": "3639",
    "difficulty": "Medium",
    "problem_slug": "minimum-time-to-activate-string",
    "topics": [],
    "description": "You are given a string s of length n and an integer array order, where order is a permutation of the numbers in the range [0, n - 1].\nStarting from time t = 0, replace the character at index order[t] in s with '*' at each time step.\nA substring is valid if it contains at least one '*'.\nA string is active if the total number of valid substrings is greater than or equal to k.\nReturn the minimum time t at which the string s becomes active. If it is impossible, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:"
  },
  {
    "title": "Trionic Array II",
    "problem_id": "3956",
    "frontend_id": "3640",
    "difficulty": "Hard",
    "problem_slug": "trionic-array-ii",
    "topics": [],
    "description": "You are given an integer array nums of length n.\nA trionic subarray is a contiguous subarray nums[l...r] (with 0 <= l < r < n) for which there exist indices l < p < q < r such that:\nReturn the maximum sum of any trionic subarray in nums.\nExample 1:\nExample 2:\nConstraints:"
  }
]